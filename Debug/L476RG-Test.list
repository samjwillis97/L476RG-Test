
L476RG-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005894  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08005a24  08005a24  00015a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b24  08005b24  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005b24  08005b24  00015b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b2c  08005b2c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b2c  08005b2c  00015b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b30  08005b30  00015b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000070  08005ba4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08005ba4  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b35  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028fa  00000000  00000000  00036bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  000394d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001218  00000000  00000000  0003a7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002984f  00000000  00000000  0003b9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014300  00000000  00000000  00065247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107a4f  00000000  00000000  00079547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00180f96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055c0  00000000  00000000  00180fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a0c 	.word	0x08005a0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005a0c 	.word	0x08005a0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HomeMenu>:

/************************************** Menus **************************************/

// Type 0 Menus - Home

void HomeMenu() {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	// Every Menu Must Have
	reset_vars();
 800057c:	f000 f9ac 	bl	80008d8 <reset_vars>
	new_menu = true;
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <HomeMenu+0x2c>)
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]

	// Setting Current State
	menu_type = 0;
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <HomeMenu+0x30>)
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]
	strcpy(menu_name, "Home");
 800058c:	4b07      	ldr	r3, [pc, #28]	; (80005ac <HomeMenu+0x34>)
 800058e:	4a08      	ldr	r2, [pc, #32]	; (80005b0 <HomeMenu+0x38>)
 8000590:	6810      	ldr	r0, [r2, #0]
 8000592:	6018      	str	r0, [r3, #0]
 8000594:	7912      	ldrb	r2, [r2, #4]
 8000596:	711a      	strb	r2, [r3, #4]

	// Setting Required Pointers
	pu16_1 = &counter;
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <HomeMenu+0x3c>)
 800059a:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <HomeMenu+0x40>)
 800059c:	601a      	str	r2, [r3, #0]
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	2000008c 	.word	0x2000008c
 80005a8:	200000b1 	.word	0x200000b1
 80005ac:	200000e4 	.word	0x200000e4
 80005b0:	08005a24 	.word	0x08005a24
 80005b4:	200000a0 	.word	0x200000a0
 80005b8:	2000008e 	.word	0x2000008e

080005bc <CounterSettings>:

// Type 1 Menu	- Three Sub Menus

void CounterSettings() {
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	// Every Menu Must Have
	reset_vars();
 80005c0:	f000 f98a 	bl	80008d8 <reset_vars>
	new_menu = true;
 80005c4:	4b13      	ldr	r3, [pc, #76]	; (8000614 <CounterSettings+0x58>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	701a      	strb	r2, [r3, #0]

	// Setting Current State
	menu_type = 1;
 80005ca:	4b13      	ldr	r3, [pc, #76]	; (8000618 <CounterSettings+0x5c>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
	strcpy(menu_name, "CountSet");
 80005d0:	4a12      	ldr	r2, [pc, #72]	; (800061c <CounterSettings+0x60>)
 80005d2:	4b13      	ldr	r3, [pc, #76]	; (8000620 <CounterSettings+0x64>)
 80005d4:	cb03      	ldmia	r3!, {r0, r1}
 80005d6:	6010      	str	r0, [r2, #0]
 80005d8:	6051      	str	r1, [r2, #4]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	7213      	strb	r3, [r2, #8]

	// Setting Required Pointers

	// Setting Required Strings
	strcpy(str_1, "Counter");
 80005de:	4a11      	ldr	r2, [pc, #68]	; (8000624 <CounterSettings+0x68>)
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <CounterSettings+0x6c>)
 80005e2:	cb03      	ldmia	r3!, {r0, r1}
 80005e4:	6010      	str	r0, [r2, #0]
 80005e6:	6051      	str	r1, [r2, #4]
	strcpy(str_2, "Reset");
 80005e8:	4b10      	ldr	r3, [pc, #64]	; (800062c <CounterSettings+0x70>)
 80005ea:	4a11      	ldr	r2, [pc, #68]	; (8000630 <CounterSettings+0x74>)
 80005ec:	6810      	ldr	r0, [r2, #0]
 80005ee:	6018      	str	r0, [r3, #0]
 80005f0:	8892      	ldrh	r2, [r2, #4]
 80005f2:	809a      	strh	r2, [r3, #4]
	strcpy(str_3, "Next");
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <CounterSettings+0x78>)
 80005f6:	4a10      	ldr	r2, [pc, #64]	; (8000638 <CounterSettings+0x7c>)
 80005f8:	6810      	ldr	r0, [r2, #0]
 80005fa:	6018      	str	r0, [r3, #0]
 80005fc:	7912      	ldrb	r2, [r2, #4]
 80005fe:	711a      	strb	r2, [r3, #4]
	strcpy(str_4, "Modify");
 8000600:	4b0e      	ldr	r3, [pc, #56]	; (800063c <CounterSettings+0x80>)
 8000602:	4a0f      	ldr	r2, [pc, #60]	; (8000640 <CounterSettings+0x84>)
 8000604:	6810      	ldr	r0, [r2, #0]
 8000606:	6018      	str	r0, [r3, #0]
 8000608:	8891      	ldrh	r1, [r2, #4]
 800060a:	7992      	ldrb	r2, [r2, #6]
 800060c:	8099      	strh	r1, [r3, #4]
 800060e:	719a      	strb	r2, [r3, #6]
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	2000008c 	.word	0x2000008c
 8000618:	200000b1 	.word	0x200000b1
 800061c:	200000e4 	.word	0x200000e4
 8000620:	08005a2c 	.word	0x08005a2c
 8000624:	200000b4 	.word	0x200000b4
 8000628:	08005a38 	.word	0x08005a38
 800062c:	200000c0 	.word	0x200000c0
 8000630:	08005a40 	.word	0x08005a40
 8000634:	200000a8 	.word	0x200000a8
 8000638:	08005a48 	.word	0x08005a48
 800063c:	200000cc 	.word	0x200000cc
 8000640:	08005a50 	.word	0x08005a50

08000644 <ResetCounter>:

// Type 2 Menu - Are you Sure

void ResetCounter() {
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	// Every Menu Must Have
	reset_vars();
 8000648:	f000 f946 	bl	80008d8 <reset_vars>
	new_menu = true;
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <ResetCounter+0x2c>)
 800064e:	2201      	movs	r2, #1
 8000650:	701a      	strb	r2, [r3, #0]

	// Setting Current State
	menu_type = 2;
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <ResetCounter+0x30>)
 8000654:	2202      	movs	r2, #2
 8000656:	701a      	strb	r2, [r3, #0]
	strcpy(menu_name, "RstCount");
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <ResetCounter+0x34>)
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <ResetCounter+0x38>)
 800065c:	cb03      	ldmia	r3!, {r0, r1}
 800065e:	6010      	str	r0, [r2, #0]
 8000660:	6051      	str	r1, [r2, #4]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	7213      	strb	r3, [r2, #8]

	// Setting Required Pointers
	pu16_1 = &counter; // Temporary
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <ResetCounter+0x3c>)
 8000668:	4a06      	ldr	r2, [pc, #24]	; (8000684 <ResetCounter+0x40>)
 800066a:	601a      	str	r2, [r3, #0]

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000008c 	.word	0x2000008c
 8000674:	200000b1 	.word	0x200000b1
 8000678:	200000e4 	.word	0x200000e4
 800067c:	08005a58 	.word	0x08005a58
 8000680:	200000a0 	.word	0x200000a0
 8000684:	2000008e 	.word	0x2000008e

08000688 <Display_init>:

/************************************** Function definitions **************************************/
DisplayProcTypeDef Display_init(
		uint8_t *btn_flag,
		Lcd_HandleTypeDef *lcd)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
	DisplayProcTypeDef display;

	// Pointer to BTN Flag
	display.btn_flag = btn_flag;
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	613b      	str	r3, [r7, #16]

	// Pointer to LCD
	display.lcd = lcd;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	617b      	str	r3, [r7, #20]

	// Initialize as Home Screen
	HomeMenu();
 800069c:	f7ff ff6c 	bl	8000578 <HomeMenu>

	return display;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	461a      	mov	r2, r3
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006ac:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80006b0:	68f8      	ldr	r0, [r7, #12]
 80006b2:	3718      	adds	r7, #24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <Display_update>:

void Display_update(DisplayProcTypeDef *display) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]

	// Button Checker - Make Better, add timeout to return home
	if (*display->btn_flag != 0) {
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d03f      	beq.n	800074a <Display_update+0x92>
		switch (menu_type) {
 80006ca:	4b62      	ldr	r3, [pc, #392]	; (8000854 <Display_update+0x19c>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b02      	cmp	r3, #2
 80006d0:	d01d      	beq.n	800070e <Display_update+0x56>
 80006d2:	2b02      	cmp	r3, #2
 80006d4:	dc2e      	bgt.n	8000734 <Display_update+0x7c>
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d002      	beq.n	80006e0 <Display_update+0x28>
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d008      	beq.n	80006f0 <Display_update+0x38>
					CounterSettings(); // Change to Pointer (PREVIOUS MENU)
				}

				break;
			default:
				break;
 80006de:	e029      	b.n	8000734 <Display_update+0x7c>
				if (*display->btn_flag == 1) {
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d126      	bne.n	8000738 <Display_update+0x80>
					CounterSettings();		// Change to POINTER
 80006ea:	f7ff ff67 	bl	80005bc <CounterSettings>
				break;
 80006ee:	e023      	b.n	8000738 <Display_update+0x80>
				if (*display->btn_flag == 1) {
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d101      	bne.n	80006fe <Display_update+0x46>
					HomeMenu();		// Change to POINTER (PREVIOUS MENU)
 80006fa:	f7ff ff3d 	bl	8000578 <HomeMenu>
				if (*display->btn_flag == 2) {
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b02      	cmp	r3, #2
 8000706:	d119      	bne.n	800073c <Display_update+0x84>
					ResetCounter();	// Change to POINTER
 8000708:	f7ff ff9c 	bl	8000644 <ResetCounter>
				break;
 800070c:	e016      	b.n	800073c <Display_update+0x84>
				if (*display->btn_flag == 2) {
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b02      	cmp	r3, #2
 8000716:	d101      	bne.n	800071c <Display_update+0x64>
					CounterSettings(); // Change to Pointer (PREVIOUS MENU)
 8000718:	f7ff ff50 	bl	80005bc <CounterSettings>
				if (*display->btn_flag == 1) {
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d10c      	bne.n	8000740 <Display_update+0x88>
					*pu16_1 = 0;
 8000726:	4b4c      	ldr	r3, [pc, #304]	; (8000858 <Display_update+0x1a0>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2200      	movs	r2, #0
 800072c:	801a      	strh	r2, [r3, #0]
					CounterSettings(); // Change to Pointer (PREVIOUS MENU)
 800072e:	f7ff ff45 	bl	80005bc <CounterSettings>
				break;
 8000732:	e005      	b.n	8000740 <Display_update+0x88>
				break;
 8000734:	bf00      	nop
 8000736:	e004      	b.n	8000742 <Display_update+0x8a>
				break;
 8000738:	bf00      	nop
 800073a:	e002      	b.n	8000742 <Display_update+0x8a>
				break;
 800073c:	bf00      	nop
 800073e:	e000      	b.n	8000742 <Display_update+0x8a>
				break;
 8000740:	bf00      	nop
		}
		*display->btn_flag = 0;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
	}


	// Update Display (New Menu)
	if (new_menu == true){
 800074a:	4b44      	ldr	r3, [pc, #272]	; (800085c <Display_update+0x1a4>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d166      	bne.n	8000820 <Display_update+0x168>
		// Update Display
		Lcd_clear(display->lcd);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	4618      	mov	r0, r3
 8000758:	f000 fa46 	bl	8000be8 <Lcd_clear>
		switch (menu_type) {
 800075c:	4b3d      	ldr	r3, [pc, #244]	; (8000854 <Display_update+0x19c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b02      	cmp	r3, #2
 8000762:	d03d      	beq.n	80007e0 <Display_update+0x128>
 8000764:	2b02      	cmp	r3, #2
 8000766:	dc57      	bgt.n	8000818 <Display_update+0x160>
 8000768:	2b00      	cmp	r3, #0
 800076a:	d002      	beq.n	8000772 <Display_update+0xba>
 800076c:	2b01      	cmp	r3, #1
 800076e:	d00e      	beq.n	800078e <Display_update+0xd6>
				Lcd_string_right_aligned(display->lcd, "No", 1, 15);

				break;
			default:
				// do nothing
				break;
 8000770:	e052      	b.n	8000818 <Display_update+0x160>
				Lcd_cursor(display->lcd, 0, 0);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fa1a 	bl	8000bb4 <Lcd_cursor>
				Lcd_string(display->lcd, "U16 Counter");
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	4936      	ldr	r1, [pc, #216]	; (8000860 <Display_update+0x1a8>)
 8000786:	4618      	mov	r0, r3
 8000788:	f000 f9ae 	bl	8000ae8 <Lcd_string>
				break;
 800078c:	e045      	b.n	800081a <Display_update+0x162>
				Lcd_cursor(display->lcd, 0, 0);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	2200      	movs	r2, #0
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fa0c 	bl	8000bb4 <Lcd_cursor>
				Lcd_string(display->lcd, str_1);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	4930      	ldr	r1, [pc, #192]	; (8000864 <Display_update+0x1ac>)
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 f9a0 	bl	8000ae8 <Lcd_string>
				Lcd_cursor(display->lcd, 1, 0);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	2200      	movs	r2, #0
 80007ae:	2101      	movs	r1, #1
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 f9ff 	bl	8000bb4 <Lcd_cursor>
				Lcd_string(display->lcd, str_2);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	492b      	ldr	r1, [pc, #172]	; (8000868 <Display_update+0x1b0>)
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f993 	bl	8000ae8 <Lcd_string>
				Lcd_string_right_aligned(display->lcd, str_3, 0, 15);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6858      	ldr	r0, [r3, #4]
 80007c6:	230f      	movs	r3, #15
 80007c8:	2200      	movs	r2, #0
 80007ca:	4928      	ldr	r1, [pc, #160]	; (800086c <Display_update+0x1b4>)
 80007cc:	f000 f9ce 	bl	8000b6c <Lcd_string_right_aligned>
				Lcd_string_right_aligned(display->lcd, str_4, 1, 15);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6858      	ldr	r0, [r3, #4]
 80007d4:	230f      	movs	r3, #15
 80007d6:	2201      	movs	r2, #1
 80007d8:	4925      	ldr	r1, [pc, #148]	; (8000870 <Display_update+0x1b8>)
 80007da:	f000 f9c7 	bl	8000b6c <Lcd_string_right_aligned>
				break;
 80007de:	e01c      	b.n	800081a <Display_update+0x162>
				Lcd_string_centered(display->lcd, "Are You Sure?", 0);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	4923      	ldr	r1, [pc, #140]	; (8000874 <Display_update+0x1bc>)
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 f99c 	bl	8000b26 <Lcd_string_centered>
				Lcd_cursor(display->lcd, 1, 0);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	2200      	movs	r2, #0
 80007f4:	2101      	movs	r1, #1
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 f9dc 	bl	8000bb4 <Lcd_cursor>
				Lcd_string(display->lcd, "Yes");
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	491d      	ldr	r1, [pc, #116]	; (8000878 <Display_update+0x1c0>)
 8000802:	4618      	mov	r0, r3
 8000804:	f000 f970 	bl	8000ae8 <Lcd_string>
				Lcd_string_right_aligned(display->lcd, "No", 1, 15);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6858      	ldr	r0, [r3, #4]
 800080c:	230f      	movs	r3, #15
 800080e:	2201      	movs	r2, #1
 8000810:	491a      	ldr	r1, [pc, #104]	; (800087c <Display_update+0x1c4>)
 8000812:	f000 f9ab 	bl	8000b6c <Lcd_string_right_aligned>
				break;
 8000816:	e000      	b.n	800081a <Display_update+0x162>
				break;
 8000818:	bf00      	nop
		}
		// set new_menu false once handled
		new_menu = false;
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <Display_update+0x1a4>)
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
	}


	// Update Display (Continuous)
	if (has_var_changed() == true){
 8000820:	f000 f82e 	bl	8000880 <has_var_changed>
 8000824:	4603      	mov	r3, r0
 8000826:	2b01      	cmp	r3, #1
 8000828:	d10d      	bne.n	8000846 <Display_update+0x18e>
		// Update Display
		switch (menu_type) {
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <Display_update+0x19c>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d10b      	bne.n	800084a <Display_update+0x192>
			case 0:
				Lcd_u16_right_aligned(display->lcd, *pu16_1, 1, 15);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6858      	ldr	r0, [r3, #4]
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <Display_update+0x1a0>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	8819      	ldrh	r1, [r3, #0]
 800083c:	230f      	movs	r3, #15
 800083e:	2201      	movs	r2, #1
 8000840:	f000 f8f6 	bl	8000a30 <Lcd_u16_right_aligned>
				break;
 8000844:	e002      	b.n	800084c <Display_update+0x194>
			default:
				// do nothing
				break;
		}
	}
 8000846:	bf00      	nop
 8000848:	e000      	b.n	800084c <Display_update+0x194>
				break;
 800084a:	bf00      	nop

}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	200000b1 	.word	0x200000b1
 8000858:	200000a0 	.word	0x200000a0
 800085c:	2000008c 	.word	0x2000008c
 8000860:	08005a64 	.word	0x08005a64
 8000864:	200000b4 	.word	0x200000b4
 8000868:	200000c0 	.word	0x200000c0
 800086c:	200000a8 	.word	0x200000a8
 8000870:	200000cc 	.word	0x200000cc
 8000874:	08005a70 	.word	0x08005a70
 8000878:	08005a80 	.word	0x08005a80
 800087c:	08005a84 	.word	0x08005a84

08000880 <has_var_changed>:


/************************************** Static function definition **************************************/

bool has_var_changed() {
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
	if (*pu8_1 != u8_1_prev) {
 8000884:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <has_var_changed+0x48>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	781a      	ldrb	r2, [r3, #0]
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <has_var_changed+0x4c>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	429a      	cmp	r2, r3
 8000890:	d006      	beq.n	80008a0 <has_var_changed+0x20>
		u8_1_prev = *pu8_1;
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <has_var_changed+0x48>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	781a      	ldrb	r2, [r3, #0]
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <has_var_changed+0x4c>)
 800089a:	701a      	strb	r2, [r3, #0]
		return true;
 800089c:	2301      	movs	r3, #1
 800089e:	e00e      	b.n	80008be <has_var_changed+0x3e>
	}
	if (*pu16_1 != u16_1_prev) {
 80008a0:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <has_var_changed+0x50>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	881a      	ldrh	r2, [r3, #0]
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <has_var_changed+0x54>)
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d006      	beq.n	80008bc <has_var_changed+0x3c>
		u16_1_prev = *pu16_1;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <has_var_changed+0x50>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	881a      	ldrh	r2, [r3, #0]
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <has_var_changed+0x54>)
 80008b6:	801a      	strh	r2, [r3, #0]
		return true;
 80008b8:	2301      	movs	r3, #1
 80008ba:	e000      	b.n	80008be <has_var_changed+0x3e>
	}
	return false;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	2000009c 	.word	0x2000009c
 80008cc:	200000b2 	.word	0x200000b2
 80008d0:	200000a0 	.word	0x200000a0
 80008d4:	200000a4 	.word	0x200000a4

080008d8 <reset_vars>:

void reset_vars() {
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
	// U8 Pointers
	pu8_1 = NULL;
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <reset_vars+0x1c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]

	// U16 Pointers
	pu16_1 = NULL;
 80008e2:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <reset_vars+0x20>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]

}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	2000009c 	.word	0x2000009c
 80008f8:	200000a0 	.word	0x200000a0

080008fc <Lcd_create>:
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin,
		Lcd_ModeTypeDef mode,
		bool cursor,
		bool blink)
{
 80008fc:	b5b0      	push	{r4, r5, r7, lr}
 80008fe:	b08c      	sub	sp, #48	; 0x30
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
 8000908:	603b      	str	r3, [r7, #0]

	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800090a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800090e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	lcd.en_pin = en_pin;
 8000912:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000916:	853b      	strh	r3, [r7, #40]	; 0x28
	lcd.en_port = en_port;
 8000918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800091a:	627b      	str	r3, [r7, #36]	; 0x24

	lcd.rs_pin = rs_pin;
 800091c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000920:	843b      	strh	r3, [r7, #32]
	lcd.rs_port = rs_port;
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	61fb      	str	r3, [r7, #28]

	lcd.data_pin = pin;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	61bb      	str	r3, [r7, #24]
	lcd.data_port = port;
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	617b      	str	r3, [r7, #20]

	lcd.cursor = cursor;
 800092e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	lcd.blink = blink;
 8000936:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800093a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	Lcd_init(&lcd);		// Some sort of pointer to the lcd type def just init
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4618      	mov	r0, r3
 8000944:	f000 f80e 	bl	8000964 <Lcd_init>

	return lcd;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	461d      	mov	r5, r3
 800094c:	f107 0414 	add.w	r4, r7, #20
 8000950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000952:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000954:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000958:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800095c:	68f8      	ldr	r0, [r7, #12]
 800095e:	3730      	adds	r7, #48	; 0x30
 8000960:	46bd      	mov	sp, r7
 8000962:	bdb0      	pop	{r4, r5, r7, pc}

08000964 <Lcd_init>:

/**
 * Init 16 x 2 LCD without cursor
 */
void Lcd_init(Lcd_HandleTypeDef *lcd) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	if (lcd->mode == LCD_4_BIT_MODE)	// gets mode from the struct that lcd points to
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	7d9b      	ldrb	r3, [r3, #22]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d121      	bne.n	80009b8 <Lcd_init+0x54>
	{
		HAL_Delay(50);
 8000974:	2032      	movs	r0, #50	; 0x32
 8000976:	f000 fecf 	bl	8001718 <HAL_Delay>
		lcd_write_nib_command(lcd, 0x30);		// Func Set
 800097a:	2130      	movs	r1, #48	; 0x30
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f000 f9db 	bl	8000d38 <lcd_write_nib_command>
		HAL_Delay(5);
 8000982:	2005      	movs	r0, #5
 8000984:	f000 fec8 	bl	8001718 <HAL_Delay>
		lcd_write_nib_command(lcd, 0x30);		// Func Set
 8000988:	2130      	movs	r1, #48	; 0x30
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f000 f9d4 	bl	8000d38 <lcd_write_nib_command>
		HAL_Delay(1);
 8000990:	2001      	movs	r0, #1
 8000992:	f000 fec1 	bl	8001718 <HAL_Delay>
		lcd_write_nib_command(lcd, 0x30);		// Func Set
 8000996:	2130      	movs	r1, #48	; 0x30
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f000 f9cd 	bl	8000d38 <lcd_write_nib_command>

		lcd_write_nib_command(lcd, FUNCTION_SET);			// Func Set 4-Bit
 800099e:	2120      	movs	r1, #32
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f000 f9c9 	bl	8000d38 <lcd_write_nib_command>
		lcd_write_command(lcd, FUNCTION_SET | OPT_N);	// Func Set 4-Bit Mode, 2 Lines
 80009a6:	2128      	movs	r1, #40	; 0x28
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f000 f929 	bl	8000c00 <lcd_write_command>

		lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL);	// Display OFF
 80009ae:	2108      	movs	r1, #8
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f000 f925 	bl	8000c00 <lcd_write_command>
 80009b6:	e003      	b.n	80009c0 <Lcd_init+0x5c>
	}
	else {
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N); // ?
 80009b8:	2138      	movs	r1, #56	; 0x38
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f000 f920 	bl	8000c00 <lcd_write_command>
	}

	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear Display
 80009c0:	2101      	movs	r1, #1
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f000 f91c 	bl	8000c00 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment Cursor?
 80009c8:	2106      	movs	r1, #6
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f000 f918 	bl	8000c00 <lcd_write_command>

	// Checking for Cursor and Blink, could change and use a variable
	if ((lcd->blink == true) && (lcd->cursor == true)) {
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	7e1b      	ldrb	r3, [r3, #24]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d108      	bne.n	80009ea <Lcd_init+0x86>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	7ddb      	ldrb	r3, [r3, #23]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d104      	bne.n	80009ea <Lcd_init+0x86>
		lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_C | OPT_B);
 80009e0:	210f      	movs	r1, #15
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f000 f90c 	bl	8000c00 <lcd_write_command>
 80009e8:	e01e      	b.n	8000a28 <Lcd_init+0xc4>
	}
	else if ((lcd->blink == true) && (lcd->cursor == false)) {
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	7e1b      	ldrb	r3, [r3, #24]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d108      	bne.n	8000a04 <Lcd_init+0xa0>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	7ddb      	ldrb	r3, [r3, #23]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d104      	bne.n	8000a04 <Lcd_init+0xa0>
		lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_B);
 80009fa:	210d      	movs	r1, #13
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f000 f8ff 	bl	8000c00 <lcd_write_command>
 8000a02:	e011      	b.n	8000a28 <Lcd_init+0xc4>
	}
	else if ((lcd->blink == false) && (lcd->cursor == true)) {
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	7e1b      	ldrb	r3, [r3, #24]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d108      	bne.n	8000a1e <Lcd_init+0xba>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	7ddb      	ldrb	r3, [r3, #23]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d104      	bne.n	8000a1e <Lcd_init+0xba>
		lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_C);
 8000a14:	210e      	movs	r1, #14
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f000 f8f2 	bl	8000c00 <lcd_write_command>
 8000a1c:	e004      	b.n	8000a28 <Lcd_init+0xc4>
	}
	else {
		lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);
 8000a1e:	210c      	movs	r1, #12
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f000 f8ed 	bl	8000c00 <lcd_write_command>
	}
}
 8000a26:	bf00      	nop
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <Lcd_u16_right_aligned>:

	Lcd_cursor(lcd, row, (col - 2));
	Lcd_string(lcd, buffer);
}

void Lcd_u16_right_aligned(Lcd_HandleTypeDef *lcd, uint16_t number, uint8_t row, uint8_t col) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	4608      	mov	r0, r1
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4603      	mov	r3, r0
 8000a40:	807b      	strh	r3, [r7, #2]
 8000a42:	460b      	mov	r3, r1
 8000a44:	707b      	strb	r3, [r7, #1]
 8000a46:	4613      	mov	r3, r2
 8000a48:	703b      	strb	r3, [r7, #0]
	char buffer[6];
	char input[7];
	uint8_t i;

	uint8_t len = snprintf(NULL, 0, "%d", number);
 8000a4a:	887b      	ldrh	r3, [r7, #2]
 8000a4c:	4a25      	ldr	r2, [pc, #148]	; (8000ae4 <Lcd_u16_right_aligned+0xb4>)
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2000      	movs	r0, #0
 8000a52:	f004 fb79 	bl	8005148 <sniprintf>
 8000a56:	4603      	mov	r3, r0
 8000a58:	75bb      	strb	r3, [r7, #22]

	for (i = 0; i < (5 - len); i++) {
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	75fb      	strb	r3, [r7, #23]
 8000a5e:	e009      	b.n	8000a74 <Lcd_u16_right_aligned+0x44>
		input[i] = 32;	// space
 8000a60:	7dfb      	ldrb	r3, [r7, #23]
 8000a62:	f107 0218 	add.w	r2, r7, #24
 8000a66:	4413      	add	r3, r2
 8000a68:	2220      	movs	r2, #32
 8000a6a:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < (5 - len); i++) {
 8000a6e:	7dfb      	ldrb	r3, [r7, #23]
 8000a70:	3301      	adds	r3, #1
 8000a72:	75fb      	strb	r3, [r7, #23]
 8000a74:	7dfa      	ldrb	r2, [r7, #23]
 8000a76:	7dbb      	ldrb	r3, [r7, #22]
 8000a78:	f1c3 0305 	rsb	r3, r3, #5
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	dbef      	blt.n	8000a60 <Lcd_u16_right_aligned+0x30>
	}
	input[i] = 37;	// percentage
 8000a80:	7dfb      	ldrb	r3, [r7, #23]
 8000a82:	f107 0218 	add.w	r2, r7, #24
 8000a86:	4413      	add	r3, r2
 8000a88:	2225      	movs	r2, #37	; 0x25
 8000a8a:	f803 2c10 	strb.w	r2, [r3, #-16]
	input[i+1] = 100;	// d
 8000a8e:	7dfb      	ldrb	r3, [r7, #23]
 8000a90:	3301      	adds	r3, #1
 8000a92:	f107 0218 	add.w	r2, r7, #24
 8000a96:	4413      	add	r3, r2
 8000a98:	2264      	movs	r2, #100	; 0x64
 8000a9a:	f803 2c10 	strb.w	r2, [r3, #-16]
	input[i+2] = '\0';	// end of string
 8000a9e:	7dfb      	ldrb	r3, [r7, #23]
 8000aa0:	3302      	adds	r3, #2
 8000aa2:	f107 0218 	add.w	r2, r7, #24
 8000aa6:	4413      	add	r3, r2
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f803 2c10 	strb.w	r2, [r3, #-16]

	sprintf(buffer, input, number);
 8000aae:	887a      	ldrh	r2, [r7, #2]
 8000ab0:	f107 0108 	add.w	r1, r7, #8
 8000ab4:	f107 0310 	add.w	r3, r7, #16
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f004 fb79 	bl	80051b0 <siprintf>

	Lcd_cursor(lcd, row, (col - 4));
 8000abe:	783b      	ldrb	r3, [r7, #0]
 8000ac0:	3b04      	subs	r3, #4
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	787b      	ldrb	r3, [r7, #1]
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f000 f873 	bl	8000bb4 <Lcd_cursor>
	Lcd_string(lcd, buffer);
 8000ace:	f107 0310 	add.w	r3, r7, #16
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f000 f807 	bl	8000ae8 <Lcd_string>
}
 8000ada:	bf00      	nop
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	08005a88 	.word	0x08005a88

08000ae8 <Lcd_string>:

/**
 * Write String in current cursor position
 */
void Lcd_string(Lcd_HandleTypeDef *lcd, char *string) {
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++) {
 8000af2:	2300      	movs	r3, #0
 8000af4:	73fb      	strb	r3, [r7, #15]
 8000af6:	e00a      	b.n	8000b0e <Lcd_string+0x26>
		lcd_write_data(lcd, string[i]);
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
 8000afa:	683a      	ldr	r2, [r7, #0]
 8000afc:	4413      	add	r3, r2
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4619      	mov	r1, r3
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f000 f8aa 	bl	8000c5c <lcd_write_data>
	for (uint8_t i = 0; i < strlen(string); i++) {
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	73fb      	strb	r3, [r7, #15]
 8000b0e:	7bfc      	ldrb	r4, [r7, #15]
 8000b10:	6838      	ldr	r0, [r7, #0]
 8000b12:	f7ff fb5d 	bl	80001d0 <strlen>
 8000b16:	4603      	mov	r3, r0
 8000b18:	429c      	cmp	r4, r3
 8000b1a:	d3ed      	bcc.n	8000af8 <Lcd_string+0x10>
	}
}
 8000b1c:	bf00      	nop
 8000b1e:	bf00      	nop
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd90      	pop	{r4, r7, pc}

08000b26 <Lcd_string_centered>:

void Lcd_string_centered (Lcd_HandleTypeDef *lcd, char *string, uint8_t row) {
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b086      	sub	sp, #24
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	4613      	mov	r3, r2
 8000b32:	71fb      	strb	r3, [r7, #7]
	uint8_t len = strlen(string) - 1;
 8000b34:	68b8      	ldr	r0, [r7, #8]
 8000b36:	f7ff fb4b 	bl	80001d0 <strlen>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	75fb      	strb	r3, [r7, #23]
	uint8_t left_spacing = (15 - len) / 2;
 8000b42:	7dfb      	ldrb	r3, [r7, #23]
 8000b44:	f1c3 030f 	rsb	r3, r3, #15
 8000b48:	0fda      	lsrs	r2, r3, #31
 8000b4a:	4413      	add	r3, r2
 8000b4c:	105b      	asrs	r3, r3, #1
 8000b4e:	75bb      	strb	r3, [r7, #22]
	Lcd_cursor(lcd, row, left_spacing);
 8000b50:	7dba      	ldrb	r2, [r7, #22]
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	4619      	mov	r1, r3
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	f000 f82c 	bl	8000bb4 <Lcd_cursor>
	Lcd_string(lcd, string);
 8000b5c:	68b9      	ldr	r1, [r7, #8]
 8000b5e:	68f8      	ldr	r0, [r7, #12]
 8000b60:	f7ff ffc2 	bl	8000ae8 <Lcd_string>
}
 8000b64:	bf00      	nop
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <Lcd_string_right_aligned>:

void Lcd_string_right_aligned (Lcd_HandleTypeDef *lcd, char *string, uint8_t row, uint8_t col) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	4611      	mov	r1, r2
 8000b78:	461a      	mov	r2, r3
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	71fb      	strb	r3, [r7, #7]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	71bb      	strb	r3, [r7, #6]
	uint8_t len = strlen(string) - 1;
 8000b82:	68b8      	ldr	r0, [r7, #8]
 8000b84:	f7ff fb24 	bl	80001d0 <strlen>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	75fb      	strb	r3, [r7, #23]
	Lcd_cursor(lcd, row, (col - len));
 8000b90:	79ba      	ldrb	r2, [r7, #6]
 8000b92:	7dfb      	ldrb	r3, [r7, #23]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	68f8      	ldr	r0, [r7, #12]
 8000b9e:	f000 f809 	bl	8000bb4 <Lcd_cursor>
	Lcd_string(lcd, string);
 8000ba2:	68b9      	ldr	r1, [r7, #8]
 8000ba4:	68f8      	ldr	r0, [r7, #12]
 8000ba6:	f7ff ff9f 	bl	8000ae8 <Lcd_string>
}
 8000baa:	bf00      	nop
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <Lcd_cursor>:
/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef *lcd, uint8_t row, uint8_t col) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	70fb      	strb	r3, [r7, #3]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000bc4:	78fb      	ldrb	r3, [r7, #3]
 8000bc6:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <Lcd_cursor+0x30>)
 8000bc8:	5cd2      	ldrb	r2, [r2, r3]
 8000bca:	78bb      	ldrb	r3, [r7, #2]
 8000bcc:	4413      	add	r3, r2
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	3b80      	subs	r3, #128	; 0x80
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f000 f812 	bl	8000c00 <lcd_write_command>
	#endif
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	08005aa4 	.word	0x08005aa4

08000be8 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef *lcd) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f000 f804 	bl	8000c00 <lcd_write_command>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <lcd_write_command>:

/************************************** Static function definition **************************************/
/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef *lcd, uint8_t command) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);	// Write to Command Register
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6898      	ldr	r0, [r3, #8]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	899b      	ldrh	r3, [r3, #12]
 8000c14:	2200      	movs	r2, #0
 8000c16:	4619      	mov	r1, r3
 8000c18:	f002 f806 	bl	8002c28 <HAL_GPIO_WritePin>

	if (lcd->mode == LCD_4_BIT_MODE) {
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	7d9b      	ldrb	r3, [r3, #22]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d111      	bne.n	8000c48 <lcd_write_command+0x48>
		// Writing Command in two seperate nibs due to 4 Bit Mode
		lcd_write(lcd, (command >> 4), LCD_NIB);	// Send 4 MSB
 8000c24:	78fb      	ldrb	r3, [r7, #3]
 8000c26:	091b      	lsrs	r3, r3, #4
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f000 f842 	bl	8000cb8 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);	// Send 4 LSB
 8000c34:	78fb      	ldrb	r3, [r7, #3]
 8000c36:	f003 030f 	and.w	r3, r3, #15
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	2204      	movs	r2, #4
 8000c3e:	4619      	mov	r1, r3
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f000 f839 	bl	8000cb8 <lcd_write>
	}
	else {
		// Write Command in one go with 8 bit
		lcd_write(lcd, command, LCD_BYTE);
	}
}
 8000c46:	e005      	b.n	8000c54 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000c48:	78fb      	ldrb	r3, [r7, #3]
 8000c4a:	2208      	movs	r2, #8
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f000 f832 	bl	8000cb8 <lcd_write>
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef *lcd, uint8_t data) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6898      	ldr	r0, [r3, #8]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	899b      	ldrh	r3, [r3, #12]
 8000c70:	2201      	movs	r2, #1
 8000c72:	4619      	mov	r1, r3
 8000c74:	f001 ffd8 	bl	8002c28 <HAL_GPIO_WritePin>

	// Writing Command in two seperate nibs due to 4 Bit Mode
	if(lcd->mode == LCD_4_BIT_MODE) {
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	7d9b      	ldrb	r3, [r3, #22]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d111      	bne.n	8000ca4 <lcd_write_data+0x48>
		lcd_write(lcd, data >> 4, LCD_NIB);		// Send 4 MSB
 8000c80:	78fb      	ldrb	r3, [r7, #3]
 8000c82:	091b      	lsrs	r3, r3, #4
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2204      	movs	r2, #4
 8000c88:	4619      	mov	r1, r3
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f000 f814 	bl	8000cb8 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);	// Send 4 LSB
 8000c90:	78fb      	ldrb	r3, [r7, #3]
 8000c92:	f003 030f 	and.w	r3, r3, #15
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2204      	movs	r2, #4
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f000 f80b 	bl	8000cb8 <lcd_write>
	}
	else {
		// Write Command in one go with 8 bit
		lcd_write(lcd, data, LCD_BYTE);
	}
}
 8000ca2:	e005      	b.n	8000cb0 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	2208      	movs	r2, #8
 8000ca8:	4619      	mov	r1, r3
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f000 f804 	bl	8000cb8 <lcd_write>
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <lcd_write>:


/**
 * Set len bits on the bus toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef *lcd, uint8_t data, uint8_t len) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	70fb      	strb	r3, [r7, #3]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	70bb      	strb	r3, [r7, #2]
	for (uint8_t i = 0; i < len; i++) {
 8000cc8:	2300      	movs	r3, #0
 8000cca:	73fb      	strb	r3, [r7, #15]
 8000ccc:	e019      	b.n	8000d02 <lcd_write+0x4a>
		// Right shifts data, then gets the least significant bit to write
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	4413      	add	r3, r2
 8000cd8:	6818      	ldr	r0, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685a      	ldr	r2, [r3, #4]
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	4413      	add	r3, r2
 8000ce4:	8819      	ldrh	r1, [r3, #0]
 8000ce6:	78fa      	ldrb	r2, [r7, #3]
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	fa42 f303 	asr.w	r3, r2, r3
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	f001 ff96 	bl	8002c28 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < len; i++) {
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	73fb      	strb	r3, [r7, #15]
 8000d02:	7bfa      	ldrb	r2, [r7, #15]
 8000d04:	78bb      	ldrb	r3, [r7, #2]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d3e1      	bcc.n	8000cce <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6918      	ldr	r0, [r3, #16]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	8a9b      	ldrh	r3, [r3, #20]
 8000d12:	2201      	movs	r2, #1
 8000d14:	4619      	mov	r1, r3
 8000d16:	f001 ff87 	bl	8002c28 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f000 fcfc 	bl	8001718 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6918      	ldr	r0, [r3, #16]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	8a9b      	ldrh	r3, [r3, #20]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f001 ff7c 	bl	8002c28 <HAL_GPIO_WritePin>
}
 8000d30:	bf00      	nop
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <lcd_write_nib_command>:

/**
 * Writes a single 4-bit (NIB) command using the MSB of the uint
 */
void lcd_write_nib_command(Lcd_HandleTypeDef *lcd, uint8_t command) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);	// Write to Command Register
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6898      	ldr	r0, [r3, #8]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	899b      	ldrh	r3, [r3, #12]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f001 ff6a 	bl	8002c28 <HAL_GPIO_WritePin>

	if (lcd->mode == LCD_4_BIT_MODE) {
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	7d9b      	ldrb	r3, [r3, #22]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d107      	bne.n	8000d6c <lcd_write_nib_command+0x34>
		// Writing Command in two seperate nibs due to 4 Bit Mode
		lcd_write(lcd, (command >> 4), LCD_NIB);	// Send 4 MSB
 8000d5c:	78fb      	ldrb	r3, [r7, #3]
 8000d5e:	091b      	lsrs	r3, r3, #4
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2204      	movs	r2, #4
 8000d64:	4619      	mov	r1, r3
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ffa6 	bl	8000cb8 <lcd_write>
	}
	else {
		// Do Nothing
	}
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b097      	sub	sp, #92	; 0x5c
 8000d78:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7a:	f000 fc51 	bl	8001620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d7e:	f000 f84b 	bl	8000e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d82:	f000 f99f 	bl	80010c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d86:	f000 f96d 	bl	8001064 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d8a:	f000 f8cd 	bl	8000f28 <MX_ADC1_Init>
  MX_TIM17_Init();
 8000d8e:	f000 f941 	bl	8001014 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  // Start Timer
  HAL_TIM_Base_Start_IT(&htim17);
 8000d92:	481c      	ldr	r0, [pc, #112]	; (8000e04 <main+0x90>)
 8000d94:	f003 faf6 	bl	8004384 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2120      	movs	r1, #32
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da0:	f001 ff42 	bl	8002c28 <HAL_GPIO_WritePin>

  // Init LCD
  Lcd_PortType ports[] = {
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <main+0x94>)
 8000da6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000daa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  GPIOB, GPIOB, GPIOB, GPIOB
  };

  Lcd_PinType pins[] = {
 8000db0:	4a16      	ldr	r2, [pc, #88]	; (8000e0c <main+0x98>)
 8000db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000db6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dba:	e883 0003 	stmia.w	r3, {r0, r1}
		  D4_Pin, D5_Pin, D6_Pin, D7_Pin
  };

  Lcd_HandleTypeDef lcd = Lcd_create(
 8000dbe:	f107 000c 	add.w	r0, r7, #12
 8000dc2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000dc6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000dca:	2300      	movs	r3, #0
 8000dcc:	9305      	str	r3, [sp, #20]
 8000dce:	2300      	movs	r3, #0
 8000dd0:	9304      	str	r3, [sp, #16]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	9303      	str	r3, [sp, #12]
 8000dd6:	2380      	movs	r3, #128	; 0x80
 8000dd8:	9302      	str	r3, [sp, #8]
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <main+0x9c>)
 8000ddc:	9301      	str	r3, [sp, #4]
 8000dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000de8:	f7ff fd88 	bl	80008fc <Lcd_create>
		  false,
		  false
		  );

  // Init Display Module
  DisplayProcTypeDef display = Display_init(&btn_flag, &lcd);
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	f107 020c 	add.w	r2, r7, #12
 8000df2:	4908      	ldr	r1, [pc, #32]	; (8000e14 <main+0xa0>)
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fc47 	bl	8000688 <Display_init>
//		  }
//
//		  btn_flag = 0;
//	  }

	  Display_update(&display);
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fc5b 	bl	80006b8 <Display_update>
 8000e02:	e7fa      	b.n	8000dfa <main+0x86>
 8000e04:	200000f0 	.word	0x200000f0
 8000e08:	08005a8c 	.word	0x08005a8c
 8000e0c:	08005a9c 	.word	0x08005a9c
 8000e10:	48000800 	.word	0x48000800
 8000e14:	2000008d 	.word	0x2000008d

08000e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b0b8      	sub	sp, #224	; 0xe0
 8000e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e22:	2244      	movs	r2, #68	; 0x44
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f004 f986 	bl	8005138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e3c:	463b      	mov	r3, r7
 8000e3e:	2288      	movs	r2, #136	; 0x88
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f004 f978 	bl	8005138 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e56:	2310      	movs	r3, #16
 8000e58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e62:	2302      	movs	r3, #2
 8000e64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000e6e:	230a      	movs	r3, #10
 8000e70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e74:	2307      	movs	r3, #7
 8000e76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e80:	2302      	movs	r3, #2
 8000e82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e86:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f001 ff7a 	bl	8002d84 <HAL_RCC_OscConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e96:	f000 fa19 	bl	80012cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9a:	230f      	movs	r3, #15
 8000e9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000eb8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ebc:	2104      	movs	r1, #4
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f002 fb46 	bl	8003550 <HAL_RCC_ClockConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000eca:	f000 f9ff 	bl	80012cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000ece:	f244 0302 	movw	r3, #16386	; 0x4002
 8000ed2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ed8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000edc:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000ee6:	2308      	movs	r3, #8
 8000ee8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000eea:	2307      	movs	r3, #7
 8000eec:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000ef6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000efa:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000efc:	463b      	mov	r3, r7
 8000efe:	4618      	mov	r0, r3
 8000f00:	f002 fd2c 	bl	800395c <HAL_RCCEx_PeriphCLKConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000f0a:	f000 f9df 	bl	80012cc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f0e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f12:	f001 fee1 	bl	8002cd8 <HAL_PWREx_ControlVoltageScaling>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000f1c:	f000 f9d6 	bl	80012cc <Error_Handler>
  }
}
 8000f20:	bf00      	nop
 8000f22:	37e0      	adds	r7, #224	; 0xe0
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
 8000f48:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f4a:	4b2f      	ldr	r3, [pc, #188]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f4c:	4a2f      	ldr	r2, [pc, #188]	; (800100c <MX_ADC1_Init+0xe4>)
 8000f4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f50:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f56:	4b2c      	ldr	r3, [pc, #176]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f5c:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f62:	4b29      	ldr	r3, [pc, #164]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f68:	4b27      	ldr	r3, [pc, #156]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f6a:	2204      	movs	r2, #4
 8000f6c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f6e:	4b26      	ldr	r3, [pc, #152]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f74:	4b24      	ldr	r3, [pc, #144]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f7a:	4b23      	ldr	r3, [pc, #140]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f80:	4b21      	ldr	r3, [pc, #132]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f88:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f8e:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f94:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000faa:	4817      	ldr	r0, [pc, #92]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000fac:	f000 fd64 	bl	8001a78 <HAL_ADC_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000fb6:	f000 f989 	bl	80012cc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4810      	ldr	r0, [pc, #64]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000fc6:	f001 fac3 	bl	8002550 <HAL_ADCEx_MultiModeConfigChannel>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000fd0:	f000 f97c 	bl	80012cc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <MX_ADC1_Init+0xe8>)
 8000fd6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd8:	2306      	movs	r3, #6
 8000fda:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fe0:	237f      	movs	r3, #127	; 0x7f
 8000fe2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000ff2:	f000 fe97 	bl	8001d24 <HAL_ADC_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000ffc:	f000 f966 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	3728      	adds	r7, #40	; 0x28
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000013c 	.word	0x2000013c
 800100c:	50040000 	.word	0x50040000
 8001010:	14f00020 	.word	0x14f00020

08001014 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001018:	4b10      	ldr	r3, [pc, #64]	; (800105c <MX_TIM17_Init+0x48>)
 800101a:	4a11      	ldr	r2, [pc, #68]	; (8001060 <MX_TIM17_Init+0x4c>)
 800101c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8000;
 800101e:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_TIM17_Init+0x48>)
 8001020:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001024:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <MX_TIM17_Init+0x48>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 800102c:	4b0b      	ldr	r3, [pc, #44]	; (800105c <MX_TIM17_Init+0x48>)
 800102e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001032:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_TIM17_Init+0x48>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <MX_TIM17_Init+0x48>)
 800103c:	2200      	movs	r2, #0
 800103e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_TIM17_Init+0x48>)
 8001042:	2200      	movs	r2, #0
 8001044:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_TIM17_Init+0x48>)
 8001048:	f003 f944 	bl	80042d4 <HAL_TIM_Base_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8001052:	f000 f93b 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200000f0 	.word	0x200000f0
 8001060:	40014800 	.word	0x40014800

08001064 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <MX_USART2_UART_Init+0x58>)
 800106a:	4a15      	ldr	r2, [pc, #84]	; (80010c0 <MX_USART2_UART_Init+0x5c>)
 800106c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <MX_USART2_UART_Init+0x58>)
 8001070:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001074:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <MX_USART2_UART_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <MX_USART2_UART_Init+0x58>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <MX_USART2_UART_Init+0x58>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <MX_USART2_UART_Init+0x58>)
 800108a:	220c      	movs	r2, #12
 800108c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <MX_USART2_UART_Init+0x58>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001094:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MX_USART2_UART_Init+0x58>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <MX_USART2_UART_Init+0x58>)
 800109c:	2200      	movs	r2, #0
 800109e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <MX_USART2_UART_Init+0x58>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <MX_USART2_UART_Init+0x58>)
 80010a8:	f003 fbdc 	bl	8004864 <HAL_UART_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010b2:	f000 f90b 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200001a4 	.word	0x200001a4
 80010c0:	40004400 	.word	0x40004400

080010c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	4b55      	ldr	r3, [pc, #340]	; (8001230 <MX_GPIO_Init+0x16c>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	4a54      	ldr	r2, [pc, #336]	; (8001230 <MX_GPIO_Init+0x16c>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e6:	4b52      	ldr	r3, [pc, #328]	; (8001230 <MX_GPIO_Init+0x16c>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010f2:	4b4f      	ldr	r3, [pc, #316]	; (8001230 <MX_GPIO_Init+0x16c>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	4a4e      	ldr	r2, [pc, #312]	; (8001230 <MX_GPIO_Init+0x16c>)
 80010f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fe:	4b4c      	ldr	r3, [pc, #304]	; (8001230 <MX_GPIO_Init+0x16c>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	4b49      	ldr	r3, [pc, #292]	; (8001230 <MX_GPIO_Init+0x16c>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	4a48      	ldr	r2, [pc, #288]	; (8001230 <MX_GPIO_Init+0x16c>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001116:	4b46      	ldr	r3, [pc, #280]	; (8001230 <MX_GPIO_Init+0x16c>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	4b43      	ldr	r3, [pc, #268]	; (8001230 <MX_GPIO_Init+0x16c>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	4a42      	ldr	r2, [pc, #264]	; (8001230 <MX_GPIO_Init+0x16c>)
 8001128:	f043 0302 	orr.w	r3, r3, #2
 800112c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112e:	4b40      	ldr	r3, [pc, #256]	; (8001230 <MX_GPIO_Init+0x16c>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001144:	f001 fd70 	bl	8002c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f240 4132 	movw	r1, #1074	; 0x432
 800114e:	4839      	ldr	r0, [pc, #228]	; (8001234 <MX_GPIO_Init+0x170>)
 8001150:	f001 fd6a 	bl	8002c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_Enable_GPIO_Port, LCD_Enable_Pin, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	2180      	movs	r1, #128	; 0x80
 8001158:	4837      	ldr	r0, [pc, #220]	; (8001238 <MX_GPIO_Init+0x174>)
 800115a:	f001 fd65 	bl	8002c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800115e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001164:	4b35      	ldr	r3, [pc, #212]	; (800123c <MX_GPIO_Init+0x178>)
 8001166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4619      	mov	r1, r3
 8001172:	4831      	ldr	r0, [pc, #196]	; (8001238 <MX_GPIO_Init+0x174>)
 8001174:	f001 fbae 	bl	80028d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LCD_RS_Pin;
 8001178:	f44f 7308 	mov.w	r3, #544	; 0x220
 800117c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117e:	2301      	movs	r3, #1
 8001180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001194:	f001 fb9e 	bl	80028d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D5_Pin|D4_Pin;
 8001198:	f240 4332 	movw	r3, #1074	; 0x432
 800119c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	2301      	movs	r3, #1
 80011a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	4820      	ldr	r0, [pc, #128]	; (8001234 <MX_GPIO_Init+0x170>)
 80011b2:	f001 fb8f 	bl	80028d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_Enable_Pin */
  GPIO_InitStruct.Pin = LCD_Enable_Pin;
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_Enable_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	481a      	ldr	r0, [pc, #104]	; (8001238 <MX_GPIO_Init+0x174>)
 80011ce:	f001 fb81 	bl	80028d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 80011d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011d8:	4b19      	ldr	r3, [pc, #100]	; (8001240 <MX_GPIO_Init+0x17c>)
 80011da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ea:	f001 fb73 	bl	80028d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 80011ee:	2340      	movs	r3, #64	; 0x40
 80011f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011f2:	4b13      	ldr	r3, [pc, #76]	; (8001240 <MX_GPIO_Init+0x17c>)
 80011f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4619      	mov	r1, r3
 8001200:	480c      	ldr	r0, [pc, #48]	; (8001234 <MX_GPIO_Init+0x170>)
 8001202:	f001 fb67 	bl	80028d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	2017      	movs	r0, #23
 800120c:	f001 fb2b 	bl	8002866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001210:	2017      	movs	r0, #23
 8001212:	f001 fb44 	bl	800289e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	2028      	movs	r0, #40	; 0x28
 800121c:	f001 fb23 	bl	8002866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001220:	2028      	movs	r0, #40	; 0x28
 8001222:	f001 fb3c 	bl	800289e <HAL_NVIC_EnableIRQ>

}
 8001226:	bf00      	nop
 8001228:	3728      	adds	r7, #40	; 0x28
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000
 8001234:	48000400 	.word	0x48000400
 8001238:	48000800 	.word	0x48000800
 800123c:	10210000 	.word	0x10210000
 8001240:	10110000 	.word	0x10110000

08001244 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	80fb      	strh	r3, [r7, #6]
	if ((HAL_GetTick() - last_btn_press) > 100){
 800124e:	f000 fa57 	bl	8001700 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <HAL_GPIO_EXTI_Callback+0x50>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b64      	cmp	r3, #100	; 0x64
 800125c:	d916      	bls.n	800128c <HAL_GPIO_EXTI_Callback+0x48>
		if (GPIO_Pin == BTN1_Pin) {
 800125e:	88fb      	ldrh	r3, [r7, #6]
 8001260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001264:	d107      	bne.n	8001276 <HAL_GPIO_EXTI_Callback+0x32>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001266:	2120      	movs	r1, #32
 8001268:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126c:	f001 fcf4 	bl	8002c58 <HAL_GPIO_TogglePin>
			btn_flag = 1;
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <HAL_GPIO_EXTI_Callback+0x54>)
 8001272:	2201      	movs	r2, #1
 8001274:	701a      	strb	r2, [r3, #0]
		}
		if (GPIO_Pin == BTN2_Pin) {
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	2b40      	cmp	r3, #64	; 0x40
 800127a:	d102      	bne.n	8001282 <HAL_GPIO_EXTI_Callback+0x3e>
			btn_flag = 2;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_GPIO_EXTI_Callback+0x54>)
 800127e:	2202      	movs	r2, #2
 8001280:	701a      	strb	r2, [r3, #0]
		}
		last_btn_press = HAL_GetTick();
 8001282:	f000 fa3d 	bl	8001700 <HAL_GetTick>
 8001286:	4603      	mov	r3, r0
 8001288:	4a02      	ldr	r2, [pc, #8]	; (8001294 <HAL_GPIO_EXTI_Callback+0x50>)
 800128a:	6013      	str	r3, [r2, #0]
	}
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200001a0 	.word	0x200001a0
 8001298:	2000008d 	.word	0x2000008d

0800129c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	if (htim == &htim17) {
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a07      	ldr	r2, [pc, #28]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d105      	bne.n	80012b8 <HAL_TIM_PeriodElapsedCallback+0x1c>
//		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		counter += 1;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	3301      	adds	r3, #1
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80012b6:	801a      	strh	r2, [r3, #0]
	}
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	200000f0 	.word	0x200000f0
 80012c8:	2000008e 	.word	0x2000008e

080012cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d0:	b672      	cpsid	i
}
 80012d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <Error_Handler+0x8>
	...

080012d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	4b0f      	ldr	r3, [pc, #60]	; (800131c <HAL_MspInit+0x44>)
 80012e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e2:	4a0e      	ldr	r2, [pc, #56]	; (800131c <HAL_MspInit+0x44>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6613      	str	r3, [r2, #96]	; 0x60
 80012ea:	4b0c      	ldr	r3, [pc, #48]	; (800131c <HAL_MspInit+0x44>)
 80012ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <HAL_MspInit+0x44>)
 80012f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fa:	4a08      	ldr	r2, [pc, #32]	; (800131c <HAL_MspInit+0x44>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001300:	6593      	str	r3, [r2, #88]	; 0x58
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_MspInit+0x44>)
 8001304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000

08001320 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a15      	ldr	r2, [pc, #84]	; (8001394 <HAL_ADC_MspInit+0x74>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d124      	bne.n	800138c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_ADC_MspInit+0x78>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	4a14      	ldr	r2, [pc, #80]	; (8001398 <HAL_ADC_MspInit+0x78>)
 8001348:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800134c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_ADC_MspInit+0x78>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <HAL_ADC_MspInit+0x78>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <HAL_ADC_MspInit+0x78>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <HAL_ADC_MspInit+0x78>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001372:	2301      	movs	r3, #1
 8001374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001376:	230b      	movs	r3, #11
 8001378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001388:	f001 faa4 	bl	80028d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800138c:	bf00      	nop
 800138e:	3728      	adds	r7, #40	; 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	50040000 	.word	0x50040000
 8001398:	40021000 	.word	0x40021000

0800139c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <HAL_TIM_Base_MspInit+0x44>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d113      	bne.n	80013d6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <HAL_TIM_Base_MspInit+0x48>)
 80013b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b2:	4a0c      	ldr	r2, [pc, #48]	; (80013e4 <HAL_TIM_Base_MspInit+0x48>)
 80013b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b8:	6613      	str	r3, [r2, #96]	; 0x60
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_TIM_Base_MspInit+0x48>)
 80013bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	201a      	movs	r0, #26
 80013cc:	f001 fa4b 	bl	8002866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80013d0:	201a      	movs	r0, #26
 80013d2:	f001 fa64 	bl	800289e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40014800 	.word	0x40014800
 80013e4:	40021000 	.word	0x40021000

080013e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	; 0x28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a17      	ldr	r2, [pc, #92]	; (8001464 <HAL_UART_MspInit+0x7c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d128      	bne.n	800145c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <HAL_UART_MspInit+0x80>)
 800140c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140e:	4a16      	ldr	r2, [pc, #88]	; (8001468 <HAL_UART_MspInit+0x80>)
 8001410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001414:	6593      	str	r3, [r2, #88]	; 0x58
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <HAL_UART_MspInit+0x80>)
 8001418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_UART_MspInit+0x80>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	4a10      	ldr	r2, [pc, #64]	; (8001468 <HAL_UART_MspInit+0x80>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <HAL_UART_MspInit+0x80>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800143a:	230c      	movs	r3, #12
 800143c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800144a:	2307      	movs	r3, #7
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001458:	f001 fa3c 	bl	80028d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	; 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40004400 	.word	0x40004400
 8001468:	40021000 	.word	0x40021000

0800146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <NMI_Handler+0x4>

08001472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <HardFault_Handler+0x4>

08001478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <MemManage_Handler+0x4>

0800147e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <BusFault_Handler+0x4>

08001484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <UsageFault_Handler+0x4>

0800148a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b8:	f000 f90e 	bl	80016d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}

080014c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80014c4:	2040      	movs	r0, #64	; 0x40
 80014c6:	f001 fbe1 	bl	8002c8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80014d6:	f002 ffc5 	bl	8004464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200000f0 	.word	0x200000f0

080014e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80014e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80014ec:	f001 fbce 	bl	8002c8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80014f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014f4:	f001 fbca 	bl	8002c8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}

080014fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001504:	4a14      	ldr	r2, [pc, #80]	; (8001558 <_sbrk+0x5c>)
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <_sbrk+0x60>)
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <_sbrk+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <_sbrk+0x64>)
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <_sbrk+0x68>)
 800151c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <_sbrk+0x64>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	429a      	cmp	r2, r3
 800152a:	d207      	bcs.n	800153c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800152c:	f003 fdda 	bl	80050e4 <__errno>
 8001530:	4603      	mov	r3, r0
 8001532:	220c      	movs	r2, #12
 8001534:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800153a:	e009      	b.n	8001550 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <_sbrk+0x64>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <_sbrk+0x64>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	4a05      	ldr	r2, [pc, #20]	; (8001560 <_sbrk+0x64>)
 800154c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800154e:	68fb      	ldr	r3, [r7, #12]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20018000 	.word	0x20018000
 800155c:	00000400 	.word	0x00000400
 8001560:	20000090 	.word	0x20000090
 8001564:	20000240 	.word	0x20000240

08001568 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800156c:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <SystemInit+0x5c>)
 800156e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001572:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <SystemInit+0x5c>)
 8001574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <SystemInit+0x60>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a11      	ldr	r2, [pc, #68]	; (80015c8 <SystemInit+0x60>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <SystemInit+0x60>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <SystemInit+0x60>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a0d      	ldr	r2, [pc, #52]	; (80015c8 <SystemInit+0x60>)
 8001594:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001598:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800159c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <SystemInit+0x60>)
 80015a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015a4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <SystemInit+0x60>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a07      	ldr	r2, [pc, #28]	; (80015c8 <SystemInit+0x60>)
 80015ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80015b2:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <SystemInit+0x60>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000ed00 	.word	0xe000ed00
 80015c8:	40021000 	.word	0x40021000

080015cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001604 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015d0:	f7ff ffca 	bl	8001568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80015d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80015d6:	e003      	b.n	80015e0 <LoopCopyDataInit>

080015d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80015d8:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80015da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80015dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80015de:	3104      	adds	r1, #4

080015e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80015e0:	480a      	ldr	r0, [pc, #40]	; (800160c <LoopForever+0xa>)
	ldr	r3, =_edata
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <LoopForever+0xe>)
	adds	r2, r0, r1
 80015e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80015e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80015e8:	d3f6      	bcc.n	80015d8 <CopyDataInit>
	ldr	r2, =_sbss
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <LoopForever+0x12>)
	b	LoopFillZerobss
 80015ec:	e002      	b.n	80015f4 <LoopFillZerobss>

080015ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80015ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80015f0:	f842 3b04 	str.w	r3, [r2], #4

080015f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80015f4:	4b08      	ldr	r3, [pc, #32]	; (8001618 <LoopForever+0x16>)
	cmp	r2, r3
 80015f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80015f8:	d3f9      	bcc.n	80015ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015fa:	f003 fd79 	bl	80050f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015fe:	f7ff fbb9 	bl	8000d74 <main>

08001602 <LoopForever>:

LoopForever:
    b LoopForever
 8001602:	e7fe      	b.n	8001602 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001604:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001608:	08005b34 	.word	0x08005b34
	ldr	r0, =_sdata
 800160c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001610:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001614:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001618:	2000023c 	.word	0x2000023c

0800161c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800161c:	e7fe      	b.n	800161c <ADC1_2_IRQHandler>
	...

08001620 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <HAL_Init+0x3c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <HAL_Init+0x3c>)
 8001630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001634:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001636:	2003      	movs	r0, #3
 8001638:	f001 f90a 	bl	8002850 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800163c:	2000      	movs	r0, #0
 800163e:	f000 f80f 	bl	8001660 <HAL_InitTick>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	71fb      	strb	r3, [r7, #7]
 800164c:	e001      	b.n	8001652 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800164e:	f7ff fe43 	bl	80012d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001652:	79fb      	ldrb	r3, [r7, #7]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40022000 	.word	0x40022000

08001660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800166c:	4b17      	ldr	r3, [pc, #92]	; (80016cc <HAL_InitTick+0x6c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d023      	beq.n	80016bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001674:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <HAL_InitTick+0x70>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <HAL_InitTick+0x6c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	4619      	mov	r1, r3
 800167e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001682:	fbb3 f3f1 	udiv	r3, r3, r1
 8001686:	fbb2 f3f3 	udiv	r3, r2, r3
 800168a:	4618      	mov	r0, r3
 800168c:	f001 f915 	bl	80028ba <HAL_SYSTICK_Config>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10f      	bne.n	80016b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b0f      	cmp	r3, #15
 800169a:	d809      	bhi.n	80016b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800169c:	2200      	movs	r2, #0
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016a4:	f001 f8df 	bl	8002866 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016a8:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <HAL_InitTick+0x74>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	e007      	b.n	80016c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	73fb      	strb	r3, [r7, #15]
 80016b4:	e004      	b.n	80016c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	73fb      	strb	r3, [r7, #15]
 80016ba:	e001      	b.n	80016c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000008 	.word	0x20000008
 80016d0:	20000000 	.word	0x20000000
 80016d4:	20000004 	.word	0x20000004

080016d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_IncTick+0x20>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_IncTick+0x24>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	4a04      	ldr	r2, [pc, #16]	; (80016fc <HAL_IncTick+0x24>)
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000008 	.word	0x20000008
 80016fc:	20000228 	.word	0x20000228

08001700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return uwTick;
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <HAL_GetTick+0x14>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000228 	.word	0x20000228

08001718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff ffee 	bl	8001700 <HAL_GetTick>
 8001724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001730:	d005      	beq.n	800173e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_Delay+0x44>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800173e:	bf00      	nop
 8001740:	f7ff ffde 	bl	8001700 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	429a      	cmp	r2, r3
 800174e:	d8f7      	bhi.n	8001740 <HAL_Delay+0x28>
  {
  }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000008 	.word	0x20000008

08001760 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	431a      	orrs	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	609a      	str	r2, [r3, #8]
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	609a      	str	r2, [r3, #8]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b087      	sub	sp, #28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
 80017d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	3360      	adds	r3, #96	; 0x60
 80017da:	461a      	mov	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <LL_ADC_SetOffset+0x44>)
 80017ea:	4013      	ands	r3, r2
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	4313      	orrs	r3, r2
 80017f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001800:	bf00      	nop
 8001802:	371c      	adds	r7, #28
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	03fff000 	.word	0x03fff000

08001810 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3360      	adds	r3, #96	; 0x60
 800181e:	461a      	mov	r2, r3
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001830:	4618      	mov	r0, r3
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800183c:	b480      	push	{r7}
 800183e:	b087      	sub	sp, #28
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	3360      	adds	r3, #96	; 0x60
 800184c:	461a      	mov	r2, r3
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	431a      	orrs	r2, r3
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001866:	bf00      	nop
 8001868:	371c      	adds	r7, #28
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001872:	b480      	push	{r7}
 8001874:	b087      	sub	sp, #28
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	3330      	adds	r3, #48	; 0x30
 8001882:	461a      	mov	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	0a1b      	lsrs	r3, r3, #8
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	4413      	add	r3, r2
 8001890:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	f003 031f 	and.w	r3, r3, #31
 800189c:	211f      	movs	r1, #31
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	401a      	ands	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	0e9b      	lsrs	r3, r3, #26
 80018aa:	f003 011f 	and.w	r1, r3, #31
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	f003 031f 	and.w	r3, r3, #31
 80018b4:	fa01 f303 	lsl.w	r3, r1, r3
 80018b8:	431a      	orrs	r2, r3
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018be:	bf00      	nop
 80018c0:	371c      	adds	r7, #28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b087      	sub	sp, #28
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	3314      	adds	r3, #20
 80018da:	461a      	mov	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	0e5b      	lsrs	r3, r3, #25
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	4413      	add	r3, r2
 80018e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	0d1b      	lsrs	r3, r3, #20
 80018f2:	f003 031f 	and.w	r3, r3, #31
 80018f6:	2107      	movs	r1, #7
 80018f8:	fa01 f303 	lsl.w	r3, r1, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	401a      	ands	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	0d1b      	lsrs	r3, r3, #20
 8001904:	f003 031f 	and.w	r3, r3, #31
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	431a      	orrs	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001914:	bf00      	nop
 8001916:	371c      	adds	r7, #28
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001938:	43db      	mvns	r3, r3
 800193a:	401a      	ands	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f003 0318 	and.w	r3, r3, #24
 8001942:	4908      	ldr	r1, [pc, #32]	; (8001964 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001944:	40d9      	lsrs	r1, r3
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	400b      	ands	r3, r1
 800194a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800194e:	431a      	orrs	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	0007ffff 	.word	0x0007ffff

08001968 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001978:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6093      	str	r3, [r2, #8]
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800199c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019a0:	d101      	bne.n	80019a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80019c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019f0:	d101      	bne.n	80019f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d101      	bne.n	8001a1c <LL_ADC_IsEnabled+0x18>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <LL_ADC_IsEnabled+0x1a>
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d101      	bne.n	8001a42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d101      	bne.n	8001a68 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a64:	2301      	movs	r3, #1
 8001a66:	e000      	b.n	8001a6a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e136      	b.n	8001d00 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d109      	bne.n	8001ab4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff fc3d 	bl	8001320 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ff67 	bl	800198c <LL_ADC_IsDeepPowerDownEnabled>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d004      	beq.n	8001ace <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff4d 	bl	8001968 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff ff82 	bl	80019dc <LL_ADC_IsInternalRegulatorEnabled>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d115      	bne.n	8001b0a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff ff66 	bl	80019b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ae8:	4b87      	ldr	r3, [pc, #540]	; (8001d08 <HAL_ADC_Init+0x290>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	099b      	lsrs	r3, r3, #6
 8001aee:	4a87      	ldr	r2, [pc, #540]	; (8001d0c <HAL_ADC_Init+0x294>)
 8001af0:	fba2 2303 	umull	r2, r3, r2, r3
 8001af4:	099b      	lsrs	r3, r3, #6
 8001af6:	3301      	adds	r3, #1
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001afc:	e002      	b.n	8001b04 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	3b01      	subs	r3, #1
 8001b02:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f9      	bne.n	8001afe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff ff64 	bl	80019dc <LL_ADC_IsInternalRegulatorEnabled>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10d      	bne.n	8001b36 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1e:	f043 0210 	orr.w	r2, r3, #16
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2a:	f043 0201 	orr.w	r2, r3, #1
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff ff75 	bl	8001a2a <LL_ADC_REG_IsConversionOngoing>
 8001b40:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b46:	f003 0310 	and.w	r3, r3, #16
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f040 80cf 	bne.w	8001cee <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f040 80cb 	bne.w	8001cee <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b60:	f043 0202 	orr.w	r2, r3, #2
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff49 	bl	8001a04 <LL_ADC_IsEnabled>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d115      	bne.n	8001ba4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b78:	4865      	ldr	r0, [pc, #404]	; (8001d10 <HAL_ADC_Init+0x298>)
 8001b7a:	f7ff ff43 	bl	8001a04 <LL_ADC_IsEnabled>
 8001b7e:	4604      	mov	r4, r0
 8001b80:	4864      	ldr	r0, [pc, #400]	; (8001d14 <HAL_ADC_Init+0x29c>)
 8001b82:	f7ff ff3f 	bl	8001a04 <LL_ADC_IsEnabled>
 8001b86:	4603      	mov	r3, r0
 8001b88:	431c      	orrs	r4, r3
 8001b8a:	4863      	ldr	r0, [pc, #396]	; (8001d18 <HAL_ADC_Init+0x2a0>)
 8001b8c:	f7ff ff3a 	bl	8001a04 <LL_ADC_IsEnabled>
 8001b90:	4603      	mov	r3, r0
 8001b92:	4323      	orrs	r3, r4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d105      	bne.n	8001ba4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	485f      	ldr	r0, [pc, #380]	; (8001d1c <HAL_ADC_Init+0x2a4>)
 8001ba0:	f7ff fdde 	bl	8001760 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7e5b      	ldrb	r3, [r3, #25]
 8001ba8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001bb4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001bba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d106      	bne.n	8001be0 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	045b      	lsls	r3, r3, #17
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d009      	beq.n	8001bfc <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	4b47      	ldr	r3, [pc, #284]	; (8001d20 <HAL_ADC_Init+0x2a8>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	69b9      	ldr	r1, [r7, #24]
 8001c0c:	430b      	orrs	r3, r1
 8001c0e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff08 	bl	8001a2a <LL_ADC_REG_IsConversionOngoing>
 8001c1a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff15 	bl	8001a50 <LL_ADC_INJ_IsConversionOngoing>
 8001c26:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d13d      	bne.n	8001caa <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d13a      	bne.n	8001caa <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c38:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c40:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c50:	f023 0302 	bic.w	r3, r3, #2
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6812      	ldr	r2, [r2, #0]
 8001c58:	69b9      	ldr	r1, [r7, #24]
 8001c5a:	430b      	orrs	r3, r1
 8001c5c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d118      	bne.n	8001c9a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c72:	f023 0304 	bic.w	r3, r3, #4
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c7e:	4311      	orrs	r1, r2
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c84:	4311      	orrs	r1, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0201 	orr.w	r2, r2, #1
 8001c96:	611a      	str	r2, [r3, #16]
 8001c98:	e007      	b.n	8001caa <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0201 	bic.w	r2, r2, #1
 8001ca8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d10c      	bne.n	8001ccc <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb8:	f023 010f 	bic.w	r1, r3, #15
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	1e5a      	subs	r2, r3, #1
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	631a      	str	r2, [r3, #48]	; 0x30
 8001cca:	e007      	b.n	8001cdc <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 020f 	bic.w	r2, r2, #15
 8001cda:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce0:	f023 0303 	bic.w	r3, r3, #3
 8001ce4:	f043 0201 	orr.w	r2, r3, #1
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	655a      	str	r2, [r3, #84]	; 0x54
 8001cec:	e007      	b.n	8001cfe <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf2:	f043 0210 	orr.w	r2, r3, #16
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3724      	adds	r7, #36	; 0x24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd90      	pop	{r4, r7, pc}
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	053e2d63 	.word	0x053e2d63
 8001d10:	50040000 	.word	0x50040000
 8001d14:	50040100 	.word	0x50040100
 8001d18:	50040200 	.word	0x50040200
 8001d1c:	50040300 	.word	0x50040300
 8001d20:	fff0c007 	.word	0xfff0c007

08001d24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b0b6      	sub	sp, #216	; 0xd8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d101      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x22>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e3c7      	b.n	80024d6 <HAL_ADC_ConfigChannel+0x7b2>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fe69 	bl	8001a2a <LL_ADC_REG_IsConversionOngoing>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f040 83a8 	bne.w	80024b0 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b05      	cmp	r3, #5
 8001d66:	d824      	bhi.n	8001db2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	3b02      	subs	r3, #2
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d81b      	bhi.n	8001daa <HAL_ADC_ConfigChannel+0x86>
 8001d72:	a201      	add	r2, pc, #4	; (adr r2, 8001d78 <HAL_ADC_ConfigChannel+0x54>)
 8001d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d78:	08001d89 	.word	0x08001d89
 8001d7c:	08001d91 	.word	0x08001d91
 8001d80:	08001d99 	.word	0x08001d99
 8001d84:	08001da1 	.word	0x08001da1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	220c      	movs	r2, #12
 8001d8c:	605a      	str	r2, [r3, #4]
          break;
 8001d8e:	e011      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	2212      	movs	r2, #18
 8001d94:	605a      	str	r2, [r3, #4]
          break;
 8001d96:	e00d      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	2218      	movs	r2, #24
 8001d9c:	605a      	str	r2, [r3, #4]
          break;
 8001d9e:	e009      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001da6:	605a      	str	r2, [r3, #4]
          break;
 8001da8:	e004      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2206      	movs	r2, #6
 8001dae:	605a      	str	r2, [r3, #4]
          break;
 8001db0:	e000      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001db2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	6859      	ldr	r1, [r3, #4]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	f7ff fd56 	bl	8001872 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff fe2d 	bl	8001a2a <LL_ADC_REG_IsConversionOngoing>
 8001dd0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff fe39 	bl	8001a50 <LL_ADC_INJ_IsConversionOngoing>
 8001dde:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001de2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f040 81a6 	bne.w	8002138 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f040 81a1 	bne.w	8002138 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	6819      	ldr	r1, [r3, #0]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	461a      	mov	r2, r3
 8001e04:	f7ff fd61 	bl	80018ca <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	695a      	ldr	r2, [r3, #20]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	08db      	lsrs	r3, r3, #3
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d00a      	beq.n	8001e40 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6818      	ldr	r0, [r3, #0]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	6919      	ldr	r1, [r3, #16]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e3a:	f7ff fcc5 	bl	80017c8 <LL_ADC_SetOffset>
 8001e3e:	e17b      	b.n	8002138 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2100      	movs	r1, #0
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fce2 	bl	8001810 <LL_ADC_GetOffsetChannel>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10a      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x148>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fcd7 	bl	8001810 <LL_ADC_GetOffsetChannel>
 8001e62:	4603      	mov	r3, r0
 8001e64:	0e9b      	lsrs	r3, r3, #26
 8001e66:	f003 021f 	and.w	r2, r3, #31
 8001e6a:	e01e      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x186>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2100      	movs	r1, #0
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fccc 	bl	8001810 <LL_ADC_GetOffsetChannel>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001e9a:	2320      	movs	r3, #32
 8001e9c:	e004      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001e9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d105      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x19e>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	0e9b      	lsrs	r3, r3, #26
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	e018      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x1d0>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ece:	fa93 f3a3 	rbit	r3, r3
 8001ed2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001ed6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001eda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001ede:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001ee6:	2320      	movs	r3, #32
 8001ee8:	e004      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001eea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001eee:	fab3 f383 	clz	r3, r3
 8001ef2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d106      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2200      	movs	r2, #0
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fc9b 	bl	800183c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fc7f 	bl	8001810 <LL_ADC_GetOffsetChannel>
 8001f12:	4603      	mov	r3, r0
 8001f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10a      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x20e>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2101      	movs	r1, #1
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fc74 	bl	8001810 <LL_ADC_GetOffsetChannel>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	0e9b      	lsrs	r3, r3, #26
 8001f2c:	f003 021f 	and.w	r2, r3, #31
 8001f30:	e01e      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x24c>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2101      	movs	r1, #1
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fc69 	bl	8001810 <LL_ADC_GetOffsetChannel>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f48:	fa93 f3a3 	rbit	r3, r3
 8001f4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001f50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001f58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001f60:	2320      	movs	r3, #32
 8001f62:	e004      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001f64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f68:	fab3 f383 	clz	r3, r3
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d105      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x264>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	0e9b      	lsrs	r3, r3, #26
 8001f82:	f003 031f 	and.w	r3, r3, #31
 8001f86:	e018      	b.n	8001fba <HAL_ADC_ConfigChannel+0x296>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f94:	fa93 f3a3 	rbit	r3, r3
 8001f98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001f9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001fa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001fac:	2320      	movs	r3, #32
 8001fae:	e004      	b.n	8001fba <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001fb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fb4:	fab3 f383 	clz	r3, r3
 8001fb8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d106      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fc38 	bl	800183c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2102      	movs	r1, #2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff fc1c 	bl	8001810 <LL_ADC_GetOffsetChannel>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10a      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x2d4>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2102      	movs	r1, #2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fc11 	bl	8001810 <LL_ADC_GetOffsetChannel>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	0e9b      	lsrs	r3, r3, #26
 8001ff2:	f003 021f 	and.w	r2, r3, #31
 8001ff6:	e01e      	b.n	8002036 <HAL_ADC_ConfigChannel+0x312>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2102      	movs	r1, #2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fc06 	bl	8001810 <LL_ADC_GetOffsetChannel>
 8002004:	4603      	mov	r3, r0
 8002006:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002016:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800201a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800201e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002026:	2320      	movs	r3, #32
 8002028:	e004      	b.n	8002034 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800202a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800202e:	fab3 f383 	clz	r3, r3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800203e:	2b00      	cmp	r3, #0
 8002040:	d105      	bne.n	800204e <HAL_ADC_ConfigChannel+0x32a>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	0e9b      	lsrs	r3, r3, #26
 8002048:	f003 031f 	and.w	r3, r3, #31
 800204c:	e016      	b.n	800207c <HAL_ADC_ConfigChannel+0x358>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800205a:	fa93 f3a3 	rbit	r3, r3
 800205e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002060:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002062:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002066:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800206e:	2320      	movs	r3, #32
 8002070:	e004      	b.n	800207c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002072:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002076:	fab3 f383 	clz	r3, r3
 800207a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800207c:	429a      	cmp	r2, r3
 800207e:	d106      	bne.n	800208e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2200      	movs	r2, #0
 8002086:	2102      	movs	r1, #2
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fbd7 	bl	800183c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2103      	movs	r1, #3
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff fbbb 	bl	8001810 <LL_ADC_GetOffsetChannel>
 800209a:	4603      	mov	r3, r0
 800209c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10a      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x396>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2103      	movs	r1, #3
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fbb0 	bl	8001810 <LL_ADC_GetOffsetChannel>
 80020b0:	4603      	mov	r3, r0
 80020b2:	0e9b      	lsrs	r3, r3, #26
 80020b4:	f003 021f 	and.w	r2, r3, #31
 80020b8:	e017      	b.n	80020ea <HAL_ADC_ConfigChannel+0x3c6>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2103      	movs	r1, #3
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fba5 	bl	8001810 <LL_ADC_GetOffsetChannel>
 80020c6:	4603      	mov	r3, r0
 80020c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020cc:	fa93 f3a3 	rbit	r3, r3
 80020d0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80020d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020d4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80020d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80020dc:	2320      	movs	r3, #32
 80020de:	e003      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80020e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020e2:	fab3 f383 	clz	r3, r3
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d105      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x3de>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	0e9b      	lsrs	r3, r3, #26
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	e011      	b.n	8002126 <HAL_ADC_ConfigChannel+0x402>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002108:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800210a:	fa93 f3a3 	rbit	r3, r3
 800210e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002110:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002112:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800211a:	2320      	movs	r3, #32
 800211c:	e003      	b.n	8002126 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800211e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002120:	fab3 f383 	clz	r3, r3
 8002124:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002126:	429a      	cmp	r2, r3
 8002128:	d106      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2200      	movs	r2, #0
 8002130:	2103      	movs	r1, #3
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fb82 	bl	800183c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fc61 	bl	8001a04 <LL_ADC_IsEnabled>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	f040 813f 	bne.w	80023c8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6818      	ldr	r0, [r3, #0]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	6819      	ldr	r1, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	461a      	mov	r2, r3
 8002158:	f7ff fbe2 	bl	8001920 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a8e      	ldr	r2, [pc, #568]	; (800239c <HAL_ADC_ConfigChannel+0x678>)
 8002162:	4293      	cmp	r3, r2
 8002164:	f040 8130 	bne.w	80023c8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10b      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x46c>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	0e9b      	lsrs	r3, r3, #26
 800217e:	3301      	adds	r3, #1
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	2b09      	cmp	r3, #9
 8002186:	bf94      	ite	ls
 8002188:	2301      	movls	r3, #1
 800218a:	2300      	movhi	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	e019      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x4a0>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002198:	fa93 f3a3 	rbit	r3, r3
 800219c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800219e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021a0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80021a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80021a8:	2320      	movs	r3, #32
 80021aa:	e003      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80021ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	3301      	adds	r3, #1
 80021b6:	f003 031f 	and.w	r3, r3, #31
 80021ba:	2b09      	cmp	r3, #9
 80021bc:	bf94      	ite	ls
 80021be:	2301      	movls	r3, #1
 80021c0:	2300      	movhi	r3, #0
 80021c2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d079      	beq.n	80022bc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d107      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x4c0>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	0e9b      	lsrs	r3, r3, #26
 80021da:	3301      	adds	r3, #1
 80021dc:	069b      	lsls	r3, r3, #26
 80021de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021e2:	e015      	b.n	8002210 <HAL_ADC_ConfigChannel+0x4ec>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ec:	fa93 f3a3 	rbit	r3, r3
 80021f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80021f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80021fc:	2320      	movs	r3, #32
 80021fe:	e003      	b.n	8002208 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	3301      	adds	r3, #1
 800220a:	069b      	lsls	r3, r3, #26
 800220c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002218:	2b00      	cmp	r3, #0
 800221a:	d109      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x50c>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	0e9b      	lsrs	r3, r3, #26
 8002222:	3301      	adds	r3, #1
 8002224:	f003 031f 	and.w	r3, r3, #31
 8002228:	2101      	movs	r1, #1
 800222a:	fa01 f303 	lsl.w	r3, r1, r3
 800222e:	e017      	b.n	8002260 <HAL_ADC_ConfigChannel+0x53c>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002238:	fa93 f3a3 	rbit	r3, r3
 800223c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800223e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002240:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002248:	2320      	movs	r3, #32
 800224a:	e003      	b.n	8002254 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800224c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800224e:	fab3 f383 	clz	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	3301      	adds	r3, #1
 8002256:	f003 031f 	and.w	r3, r3, #31
 800225a:	2101      	movs	r1, #1
 800225c:	fa01 f303 	lsl.w	r3, r1, r3
 8002260:	ea42 0103 	orr.w	r1, r2, r3
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10a      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x562>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	0e9b      	lsrs	r3, r3, #26
 8002276:	3301      	adds	r3, #1
 8002278:	f003 021f 	and.w	r2, r3, #31
 800227c:	4613      	mov	r3, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4413      	add	r3, r2
 8002282:	051b      	lsls	r3, r3, #20
 8002284:	e018      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x594>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800228e:	fa93 f3a3 	rbit	r3, r3
 8002292:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002296:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800229e:	2320      	movs	r3, #32
 80022a0:	e003      	b.n	80022aa <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80022a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022a4:	fab3 f383 	clz	r3, r3
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	3301      	adds	r3, #1
 80022ac:	f003 021f 	and.w	r2, r3, #31
 80022b0:	4613      	mov	r3, r2
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	4413      	add	r3, r2
 80022b6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022b8:	430b      	orrs	r3, r1
 80022ba:	e080      	b.n	80023be <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d107      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x5b4>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	0e9b      	lsrs	r3, r3, #26
 80022ce:	3301      	adds	r3, #1
 80022d0:	069b      	lsls	r3, r3, #26
 80022d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022d6:	e015      	b.n	8002304 <HAL_ADC_ConfigChannel+0x5e0>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e0:	fa93 f3a3 	rbit	r3, r3
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80022e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80022ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80022f0:	2320      	movs	r3, #32
 80022f2:	e003      	b.n	80022fc <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80022f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	3301      	adds	r3, #1
 80022fe:	069b      	lsls	r3, r3, #26
 8002300:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230c:	2b00      	cmp	r3, #0
 800230e:	d109      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x600>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	0e9b      	lsrs	r3, r3, #26
 8002316:	3301      	adds	r3, #1
 8002318:	f003 031f 	and.w	r3, r3, #31
 800231c:	2101      	movs	r1, #1
 800231e:	fa01 f303 	lsl.w	r3, r1, r3
 8002322:	e017      	b.n	8002354 <HAL_ADC_ConfigChannel+0x630>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	61fb      	str	r3, [r7, #28]
  return result;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800233c:	2320      	movs	r3, #32
 800233e:	e003      	b.n	8002348 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	3301      	adds	r3, #1
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	2101      	movs	r1, #1
 8002350:	fa01 f303 	lsl.w	r3, r1, r3
 8002354:	ea42 0103 	orr.w	r1, r2, r3
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10d      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x65c>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	0e9b      	lsrs	r3, r3, #26
 800236a:	3301      	adds	r3, #1
 800236c:	f003 021f 	and.w	r2, r3, #31
 8002370:	4613      	mov	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	3b1e      	subs	r3, #30
 8002378:	051b      	lsls	r3, r3, #20
 800237a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800237e:	e01d      	b.n	80023bc <HAL_ADC_ConfigChannel+0x698>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	fa93 f3a3 	rbit	r3, r3
 800238c:	613b      	str	r3, [r7, #16]
  return result;
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d103      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002398:	2320      	movs	r3, #32
 800239a:	e005      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x684>
 800239c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	fab3 f383 	clz	r3, r3
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	3301      	adds	r3, #1
 80023aa:	f003 021f 	and.w	r2, r3, #31
 80023ae:	4613      	mov	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	4413      	add	r3, r2
 80023b4:	3b1e      	subs	r3, #30
 80023b6:	051b      	lsls	r3, r3, #20
 80023b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023bc:	430b      	orrs	r3, r1
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	6892      	ldr	r2, [r2, #8]
 80023c2:	4619      	mov	r1, r3
 80023c4:	f7ff fa81 	bl	80018ca <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4b44      	ldr	r3, [pc, #272]	; (80024e0 <HAL_ADC_ConfigChannel+0x7bc>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d07a      	beq.n	80024ca <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023d4:	4843      	ldr	r0, [pc, #268]	; (80024e4 <HAL_ADC_ConfigChannel+0x7c0>)
 80023d6:	f7ff f9e9 	bl	80017ac <LL_ADC_GetCommonPathInternalCh>
 80023da:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a41      	ldr	r2, [pc, #260]	; (80024e8 <HAL_ADC_ConfigChannel+0x7c4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d12c      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d126      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a3c      	ldr	r2, [pc, #240]	; (80024ec <HAL_ADC_ConfigChannel+0x7c8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d004      	beq.n	8002408 <HAL_ADC_ConfigChannel+0x6e4>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a3b      	ldr	r2, [pc, #236]	; (80024f0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d15d      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002408:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800240c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002410:	4619      	mov	r1, r3
 8002412:	4834      	ldr	r0, [pc, #208]	; (80024e4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002414:	f7ff f9b7 	bl	8001786 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002418:	4b36      	ldr	r3, [pc, #216]	; (80024f4 <HAL_ADC_ConfigChannel+0x7d0>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	099b      	lsrs	r3, r3, #6
 800241e:	4a36      	ldr	r2, [pc, #216]	; (80024f8 <HAL_ADC_ConfigChannel+0x7d4>)
 8002420:	fba2 2303 	umull	r2, r3, r2, r3
 8002424:	099b      	lsrs	r3, r3, #6
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	4613      	mov	r3, r2
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002432:	e002      	b.n	800243a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	3b01      	subs	r3, #1
 8002438:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f9      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002440:	e040      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a2d      	ldr	r2, [pc, #180]	; (80024fc <HAL_ADC_ConfigChannel+0x7d8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d118      	bne.n	800247e <HAL_ADC_ConfigChannel+0x75a>
 800244c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002450:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d112      	bne.n	800247e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a23      	ldr	r2, [pc, #140]	; (80024ec <HAL_ADC_ConfigChannel+0x7c8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d004      	beq.n	800246c <HAL_ADC_ConfigChannel+0x748>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a22      	ldr	r2, [pc, #136]	; (80024f0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d12d      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800246c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002470:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002474:	4619      	mov	r1, r3
 8002476:	481b      	ldr	r0, [pc, #108]	; (80024e4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002478:	f7ff f985 	bl	8001786 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800247c:	e024      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a1f      	ldr	r2, [pc, #124]	; (8002500 <HAL_ADC_ConfigChannel+0x7dc>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d120      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002488:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800248c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d11a      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a14      	ldr	r2, [pc, #80]	; (80024ec <HAL_ADC_ConfigChannel+0x7c8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d115      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800249e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024a6:	4619      	mov	r1, r3
 80024a8:	480e      	ldr	r0, [pc, #56]	; (80024e4 <HAL_ADC_ConfigChannel+0x7c0>)
 80024aa:	f7ff f96c 	bl	8001786 <LL_ADC_SetCommonPathInternalCh>
 80024ae:	e00c      	b.n	80024ca <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b4:	f043 0220 	orr.w	r2, r3, #32
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80024c2:	e002      	b.n	80024ca <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024c4:	bf00      	nop
 80024c6:	e000      	b.n	80024ca <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024d2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	37d8      	adds	r7, #216	; 0xd8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	80080000 	.word	0x80080000
 80024e4:	50040300 	.word	0x50040300
 80024e8:	c7520000 	.word	0xc7520000
 80024ec:	50040000 	.word	0x50040000
 80024f0:	50040200 	.word	0x50040200
 80024f4:	20000000 	.word	0x20000000
 80024f8:	053e2d63 	.word	0x053e2d63
 80024fc:	cb840000 	.word	0xcb840000
 8002500:	80000001 	.word	0x80000001

08002504 <LL_ADC_IsEnabled>:
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <LL_ADC_IsEnabled+0x18>
 8002518:	2301      	movs	r3, #1
 800251a:	e000      	b.n	800251e <LL_ADC_IsEnabled+0x1a>
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <LL_ADC_REG_IsConversionOngoing>:
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	2b04      	cmp	r3, #4
 800253c:	d101      	bne.n	8002542 <LL_ADC_REG_IsConversionOngoing+0x18>
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002550:	b590      	push	{r4, r7, lr}
 8002552:	b09f      	sub	sp, #124	; 0x7c
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002566:	2b01      	cmp	r3, #1
 8002568:	d101      	bne.n	800256e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800256a:	2302      	movs	r3, #2
 800256c:	e093      	b.n	8002696 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002576:	2300      	movs	r3, #0
 8002578:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800257a:	2300      	movs	r3, #0
 800257c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a47      	ldr	r2, [pc, #284]	; (80026a0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d102      	bne.n	800258e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002588:	4b46      	ldr	r3, [pc, #280]	; (80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	e001      	b.n	8002592 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800258e:	2300      	movs	r3, #0
 8002590:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10b      	bne.n	80025b0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259c:	f043 0220 	orr.w	r2, r3, #32
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e072      	b.n	8002696 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff ffb9 	bl	800252a <LL_ADC_REG_IsConversionOngoing>
 80025b8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff ffb3 	bl	800252a <LL_ADC_REG_IsConversionOngoing>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d154      	bne.n	8002674 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80025ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d151      	bne.n	8002674 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80025d0:	4b35      	ldr	r3, [pc, #212]	; (80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80025d2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d02c      	beq.n	8002636 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80025dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	6859      	ldr	r1, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025ee:	035b      	lsls	r3, r3, #13
 80025f0:	430b      	orrs	r3, r1
 80025f2:	431a      	orrs	r2, r3
 80025f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025f8:	4829      	ldr	r0, [pc, #164]	; (80026a0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80025fa:	f7ff ff83 	bl	8002504 <LL_ADC_IsEnabled>
 80025fe:	4604      	mov	r4, r0
 8002600:	4828      	ldr	r0, [pc, #160]	; (80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002602:	f7ff ff7f 	bl	8002504 <LL_ADC_IsEnabled>
 8002606:	4603      	mov	r3, r0
 8002608:	431c      	orrs	r4, r3
 800260a:	4828      	ldr	r0, [pc, #160]	; (80026ac <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800260c:	f7ff ff7a 	bl	8002504 <LL_ADC_IsEnabled>
 8002610:	4603      	mov	r3, r0
 8002612:	4323      	orrs	r3, r4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d137      	bne.n	8002688 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002620:	f023 030f 	bic.w	r3, r3, #15
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	6811      	ldr	r1, [r2, #0]
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	6892      	ldr	r2, [r2, #8]
 800262c:	430a      	orrs	r2, r1
 800262e:	431a      	orrs	r2, r3
 8002630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002632:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002634:	e028      	b.n	8002688 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800263e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002640:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002642:	4817      	ldr	r0, [pc, #92]	; (80026a0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002644:	f7ff ff5e 	bl	8002504 <LL_ADC_IsEnabled>
 8002648:	4604      	mov	r4, r0
 800264a:	4816      	ldr	r0, [pc, #88]	; (80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800264c:	f7ff ff5a 	bl	8002504 <LL_ADC_IsEnabled>
 8002650:	4603      	mov	r3, r0
 8002652:	431c      	orrs	r4, r3
 8002654:	4815      	ldr	r0, [pc, #84]	; (80026ac <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002656:	f7ff ff55 	bl	8002504 <LL_ADC_IsEnabled>
 800265a:	4603      	mov	r3, r0
 800265c:	4323      	orrs	r3, r4
 800265e:	2b00      	cmp	r3, #0
 8002660:	d112      	bne.n	8002688 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800266a:	f023 030f 	bic.w	r3, r3, #15
 800266e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002670:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002672:	e009      	b.n	8002688 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002678:	f043 0220 	orr.w	r2, r3, #32
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002686:	e000      	b.n	800268a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002688:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002692:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002696:	4618      	mov	r0, r3
 8002698:	377c      	adds	r7, #124	; 0x7c
 800269a:	46bd      	mov	sp, r7
 800269c:	bd90      	pop	{r4, r7, pc}
 800269e:	bf00      	nop
 80026a0:	50040000 	.word	0x50040000
 80026a4:	50040100 	.word	0x50040100
 80026a8:	50040300 	.word	0x50040300
 80026ac:	50040200 	.word	0x50040200

080026b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026c0:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <__NVIC_SetPriorityGrouping+0x44>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026cc:	4013      	ands	r3, r2
 80026ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026e2:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <__NVIC_SetPriorityGrouping+0x44>)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	60d3      	str	r3, [r2, #12]
}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026fc:	4b04      	ldr	r3, [pc, #16]	; (8002710 <__NVIC_GetPriorityGrouping+0x18>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	0a1b      	lsrs	r3, r3, #8
 8002702:	f003 0307 	and.w	r3, r3, #7
}
 8002706:	4618      	mov	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	2b00      	cmp	r3, #0
 8002724:	db0b      	blt.n	800273e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	f003 021f 	and.w	r2, r3, #31
 800272c:	4907      	ldr	r1, [pc, #28]	; (800274c <__NVIC_EnableIRQ+0x38>)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	2001      	movs	r0, #1
 8002736:	fa00 f202 	lsl.w	r2, r0, r2
 800273a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000e100 	.word	0xe000e100

08002750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	6039      	str	r1, [r7, #0]
 800275a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002760:	2b00      	cmp	r3, #0
 8002762:	db0a      	blt.n	800277a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	b2da      	uxtb	r2, r3
 8002768:	490c      	ldr	r1, [pc, #48]	; (800279c <__NVIC_SetPriority+0x4c>)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	0112      	lsls	r2, r2, #4
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	440b      	add	r3, r1
 8002774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002778:	e00a      	b.n	8002790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4908      	ldr	r1, [pc, #32]	; (80027a0 <__NVIC_SetPriority+0x50>)
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	3b04      	subs	r3, #4
 8002788:	0112      	lsls	r2, r2, #4
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	440b      	add	r3, r1
 800278e:	761a      	strb	r2, [r3, #24]
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000e100 	.word	0xe000e100
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b089      	sub	sp, #36	; 0x24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f1c3 0307 	rsb	r3, r3, #7
 80027be:	2b04      	cmp	r3, #4
 80027c0:	bf28      	it	cs
 80027c2:	2304      	movcs	r3, #4
 80027c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3304      	adds	r3, #4
 80027ca:	2b06      	cmp	r3, #6
 80027cc:	d902      	bls.n	80027d4 <NVIC_EncodePriority+0x30>
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3b03      	subs	r3, #3
 80027d2:	e000      	b.n	80027d6 <NVIC_EncodePriority+0x32>
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43da      	mvns	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	401a      	ands	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	fa01 f303 	lsl.w	r3, r1, r3
 80027f6:	43d9      	mvns	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027fc:	4313      	orrs	r3, r2
         );
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3724      	adds	r7, #36	; 0x24
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3b01      	subs	r3, #1
 8002818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800281c:	d301      	bcc.n	8002822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800281e:	2301      	movs	r3, #1
 8002820:	e00f      	b.n	8002842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002822:	4a0a      	ldr	r2, [pc, #40]	; (800284c <SysTick_Config+0x40>)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3b01      	subs	r3, #1
 8002828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800282a:	210f      	movs	r1, #15
 800282c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002830:	f7ff ff8e 	bl	8002750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002834:	4b05      	ldr	r3, [pc, #20]	; (800284c <SysTick_Config+0x40>)
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800283a:	4b04      	ldr	r3, [pc, #16]	; (800284c <SysTick_Config+0x40>)
 800283c:	2207      	movs	r2, #7
 800283e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	e000e010 	.word	0xe000e010

08002850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff ff29 	bl	80026b0 <__NVIC_SetPriorityGrouping>
}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b086      	sub	sp, #24
 800286a:	af00      	add	r7, sp, #0
 800286c:	4603      	mov	r3, r0
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
 8002872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002878:	f7ff ff3e 	bl	80026f8 <__NVIC_GetPriorityGrouping>
 800287c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	68b9      	ldr	r1, [r7, #8]
 8002882:	6978      	ldr	r0, [r7, #20]
 8002884:	f7ff ff8e 	bl	80027a4 <NVIC_EncodePriority>
 8002888:	4602      	mov	r2, r0
 800288a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800288e:	4611      	mov	r1, r2
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff ff5d 	bl	8002750 <__NVIC_SetPriority>
}
 8002896:	bf00      	nop
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	4603      	mov	r3, r0
 80028a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ff31 	bl	8002714 <__NVIC_EnableIRQ>
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b082      	sub	sp, #8
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7ff ffa2 	bl	800280c <SysTick_Config>
 80028c8:	4603      	mov	r3, r0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028e2:	e17f      	b.n	8002be4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	2101      	movs	r1, #1
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	fa01 f303 	lsl.w	r3, r1, r3
 80028f0:	4013      	ands	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 8171 	beq.w	8002bde <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d00b      	beq.n	800291c <HAL_GPIO_Init+0x48>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b02      	cmp	r3, #2
 800290a:	d007      	beq.n	800291c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002910:	2b11      	cmp	r3, #17
 8002912:	d003      	beq.n	800291c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b12      	cmp	r3, #18
 800291a:	d130      	bne.n	800297e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	2203      	movs	r2, #3
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	4013      	ands	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002952:	2201      	movs	r2, #1
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4013      	ands	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	091b      	lsrs	r3, r3, #4
 8002968:	f003 0201 	and.w	r2, r3, #1
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	2b03      	cmp	r3, #3
 8002988:	d118      	bne.n	80029bc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002990:	2201      	movs	r2, #1
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4013      	ands	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	08db      	lsrs	r3, r3, #3
 80029a6:	f003 0201 	and.w	r2, r3, #1
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	2203      	movs	r2, #3
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4013      	ands	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d003      	beq.n	80029fc <HAL_GPIO_Init+0x128>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b12      	cmp	r3, #18
 80029fa:	d123      	bne.n	8002a44 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	08da      	lsrs	r2, r3, #3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3208      	adds	r2, #8
 8002a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a08:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	220f      	movs	r2, #15
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	08da      	lsrs	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3208      	adds	r2, #8
 8002a3e:	6939      	ldr	r1, [r7, #16]
 8002a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	2203      	movs	r2, #3
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 0203 	and.w	r2, r3, #3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80ac 	beq.w	8002bde <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a86:	4b5f      	ldr	r3, [pc, #380]	; (8002c04 <HAL_GPIO_Init+0x330>)
 8002a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8a:	4a5e      	ldr	r2, [pc, #376]	; (8002c04 <HAL_GPIO_Init+0x330>)
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	6613      	str	r3, [r2, #96]	; 0x60
 8002a92:	4b5c      	ldr	r3, [pc, #368]	; (8002c04 <HAL_GPIO_Init+0x330>)
 8002a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a9e:	4a5a      	ldr	r2, [pc, #360]	; (8002c08 <HAL_GPIO_Init+0x334>)
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	089b      	lsrs	r3, r3, #2
 8002aa4:	3302      	adds	r3, #2
 8002aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	220f      	movs	r2, #15
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ac8:	d025      	beq.n	8002b16 <HAL_GPIO_Init+0x242>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a4f      	ldr	r2, [pc, #316]	; (8002c0c <HAL_GPIO_Init+0x338>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d01f      	beq.n	8002b12 <HAL_GPIO_Init+0x23e>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a4e      	ldr	r2, [pc, #312]	; (8002c10 <HAL_GPIO_Init+0x33c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d019      	beq.n	8002b0e <HAL_GPIO_Init+0x23a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a4d      	ldr	r2, [pc, #308]	; (8002c14 <HAL_GPIO_Init+0x340>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d013      	beq.n	8002b0a <HAL_GPIO_Init+0x236>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a4c      	ldr	r2, [pc, #304]	; (8002c18 <HAL_GPIO_Init+0x344>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d00d      	beq.n	8002b06 <HAL_GPIO_Init+0x232>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a4b      	ldr	r2, [pc, #300]	; (8002c1c <HAL_GPIO_Init+0x348>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d007      	beq.n	8002b02 <HAL_GPIO_Init+0x22e>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a4a      	ldr	r2, [pc, #296]	; (8002c20 <HAL_GPIO_Init+0x34c>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d101      	bne.n	8002afe <HAL_GPIO_Init+0x22a>
 8002afa:	2306      	movs	r3, #6
 8002afc:	e00c      	b.n	8002b18 <HAL_GPIO_Init+0x244>
 8002afe:	2307      	movs	r3, #7
 8002b00:	e00a      	b.n	8002b18 <HAL_GPIO_Init+0x244>
 8002b02:	2305      	movs	r3, #5
 8002b04:	e008      	b.n	8002b18 <HAL_GPIO_Init+0x244>
 8002b06:	2304      	movs	r3, #4
 8002b08:	e006      	b.n	8002b18 <HAL_GPIO_Init+0x244>
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e004      	b.n	8002b18 <HAL_GPIO_Init+0x244>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e002      	b.n	8002b18 <HAL_GPIO_Init+0x244>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <HAL_GPIO_Init+0x244>
 8002b16:	2300      	movs	r3, #0
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	f002 0203 	and.w	r2, r2, #3
 8002b1e:	0092      	lsls	r2, r2, #2
 8002b20:	4093      	lsls	r3, r2
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b28:	4937      	ldr	r1, [pc, #220]	; (8002c08 <HAL_GPIO_Init+0x334>)
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	089b      	lsrs	r3, r3, #2
 8002b2e:	3302      	adds	r3, #2
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b36:	4b3b      	ldr	r3, [pc, #236]	; (8002c24 <HAL_GPIO_Init+0x350>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4013      	ands	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b5a:	4a32      	ldr	r2, [pc, #200]	; (8002c24 <HAL_GPIO_Init+0x350>)
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002b60:	4b30      	ldr	r3, [pc, #192]	; (8002c24 <HAL_GPIO_Init+0x350>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b84:	4a27      	ldr	r2, [pc, #156]	; (8002c24 <HAL_GPIO_Init+0x350>)
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b8a:	4b26      	ldr	r3, [pc, #152]	; (8002c24 <HAL_GPIO_Init+0x350>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	43db      	mvns	r3, r3
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4013      	ands	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bae:	4a1d      	ldr	r2, [pc, #116]	; (8002c24 <HAL_GPIO_Init+0x350>)
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bb4:	4b1b      	ldr	r3, [pc, #108]	; (8002c24 <HAL_GPIO_Init+0x350>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bd8:	4a12      	ldr	r2, [pc, #72]	; (8002c24 <HAL_GPIO_Init+0x350>)
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	3301      	adds	r3, #1
 8002be2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	fa22 f303 	lsr.w	r3, r2, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f47f ae78 	bne.w	80028e4 <HAL_GPIO_Init+0x10>
  }
}
 8002bf4:	bf00      	nop
 8002bf6:	bf00      	nop
 8002bf8:	371c      	adds	r7, #28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40010000 	.word	0x40010000
 8002c0c:	48000400 	.word	0x48000400
 8002c10:	48000800 	.word	0x48000800
 8002c14:	48000c00 	.word	0x48000c00
 8002c18:	48001000 	.word	0x48001000
 8002c1c:	48001400 	.word	0x48001400
 8002c20:	48001800 	.word	0x48001800
 8002c24:	40010400 	.word	0x40010400

08002c28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	807b      	strh	r3, [r7, #2]
 8002c34:	4613      	mov	r3, r2
 8002c36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c38:	787b      	ldrb	r3, [r7, #1]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c3e:	887a      	ldrh	r2, [r7, #2]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c44:	e002      	b.n	8002c4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c46:	887a      	ldrh	r2, [r7, #2]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c6a:	887a      	ldrh	r2, [r7, #2]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	041a      	lsls	r2, r3, #16
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	43d9      	mvns	r1, r3
 8002c76:	887b      	ldrh	r3, [r7, #2]
 8002c78:	400b      	ands	r3, r1
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	619a      	str	r2, [r3, #24]
}
 8002c80:	bf00      	nop
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c96:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c98:	695a      	ldr	r2, [r3, #20]
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d006      	beq.n	8002cb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ca2:	4a05      	ldr	r2, [pc, #20]	; (8002cb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ca8:	88fb      	ldrh	r3, [r7, #6]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fe faca 	bl	8001244 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40010400 	.word	0x40010400

08002cbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002cc0:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40007000 	.word	0x40007000

08002cd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ce6:	d130      	bne.n	8002d4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ce8:	4b23      	ldr	r3, [pc, #140]	; (8002d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cf4:	d038      	beq.n	8002d68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cf6:	4b20      	ldr	r3, [pc, #128]	; (8002d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cfe:	4a1e      	ldr	r2, [pc, #120]	; (8002d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d06:	4b1d      	ldr	r3, [pc, #116]	; (8002d7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2232      	movs	r2, #50	; 0x32
 8002d0c:	fb02 f303 	mul.w	r3, r2, r3
 8002d10:	4a1b      	ldr	r2, [pc, #108]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d12:	fba2 2303 	umull	r2, r3, r2, r3
 8002d16:	0c9b      	lsrs	r3, r3, #18
 8002d18:	3301      	adds	r3, #1
 8002d1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d1c:	e002      	b.n	8002d24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	3b01      	subs	r3, #1
 8002d22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d24:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d30:	d102      	bne.n	8002d38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f2      	bne.n	8002d1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d38:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d44:	d110      	bne.n	8002d68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e00f      	b.n	8002d6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d56:	d007      	beq.n	8002d68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d58:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d60:	4a05      	ldr	r2, [pc, #20]	; (8002d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40007000 	.word	0x40007000
 8002d7c:	20000000 	.word	0x20000000
 8002d80:	431bde83 	.word	0x431bde83

08002d84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e3d4      	b.n	8003540 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d96:	4ba1      	ldr	r3, [pc, #644]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002da0:	4b9e      	ldr	r3, [pc, #632]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 80e4 	beq.w	8002f80 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d007      	beq.n	8002dce <HAL_RCC_OscConfig+0x4a>
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	2b0c      	cmp	r3, #12
 8002dc2:	f040 808b 	bne.w	8002edc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	f040 8087 	bne.w	8002edc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dce:	4b93      	ldr	r3, [pc, #588]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d005      	beq.n	8002de6 <HAL_RCC_OscConfig+0x62>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e3ac      	b.n	8003540 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1a      	ldr	r2, [r3, #32]
 8002dea:	4b8c      	ldr	r3, [pc, #560]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d004      	beq.n	8002e00 <HAL_RCC_OscConfig+0x7c>
 8002df6:	4b89      	ldr	r3, [pc, #548]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dfe:	e005      	b.n	8002e0c <HAL_RCC_OscConfig+0x88>
 8002e00:	4b86      	ldr	r3, [pc, #536]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e06:	091b      	lsrs	r3, r3, #4
 8002e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d223      	bcs.n	8002e58 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 fd41 	bl	800389c <RCC_SetFlashLatencyFromMSIRange>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e38d      	b.n	8003540 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e24:	4b7d      	ldr	r3, [pc, #500]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a7c      	ldr	r2, [pc, #496]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002e2a:	f043 0308 	orr.w	r3, r3, #8
 8002e2e:	6013      	str	r3, [r2, #0]
 8002e30:	4b7a      	ldr	r3, [pc, #488]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	4977      	ldr	r1, [pc, #476]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e42:	4b76      	ldr	r3, [pc, #472]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	021b      	lsls	r3, r3, #8
 8002e50:	4972      	ldr	r1, [pc, #456]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	604b      	str	r3, [r1, #4]
 8002e56:	e025      	b.n	8002ea4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e58:	4b70      	ldr	r3, [pc, #448]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a6f      	ldr	r2, [pc, #444]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002e5e:	f043 0308 	orr.w	r3, r3, #8
 8002e62:	6013      	str	r3, [r2, #0]
 8002e64:	4b6d      	ldr	r3, [pc, #436]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	496a      	ldr	r1, [pc, #424]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e76:	4b69      	ldr	r3, [pc, #420]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	4965      	ldr	r1, [pc, #404]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d109      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 fd01 	bl	800389c <RCC_SetFlashLatencyFromMSIRange>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e34d      	b.n	8003540 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ea4:	f000 fc36 	bl	8003714 <HAL_RCC_GetSysClockFreq>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	4b5c      	ldr	r3, [pc, #368]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	091b      	lsrs	r3, r3, #4
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	495a      	ldr	r1, [pc, #360]	; (8003020 <HAL_RCC_OscConfig+0x29c>)
 8002eb6:	5ccb      	ldrb	r3, [r1, r3]
 8002eb8:	f003 031f 	and.w	r3, r3, #31
 8002ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec0:	4a58      	ldr	r2, [pc, #352]	; (8003024 <HAL_RCC_OscConfig+0x2a0>)
 8002ec2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ec4:	4b58      	ldr	r3, [pc, #352]	; (8003028 <HAL_RCC_OscConfig+0x2a4>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fe fbc9 	bl	8001660 <HAL_InitTick>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d052      	beq.n	8002f7e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
 8002eda:	e331      	b.n	8003540 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d032      	beq.n	8002f4a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ee4:	4b4d      	ldr	r3, [pc, #308]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a4c      	ldr	r2, [pc, #304]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ef0:	f7fe fc06 	bl	8001700 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ef8:	f7fe fc02 	bl	8001700 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e31a      	b.n	8003540 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f0a:	4b44      	ldr	r3, [pc, #272]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f0      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f16:	4b41      	ldr	r3, [pc, #260]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a40      	ldr	r2, [pc, #256]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002f1c:	f043 0308 	orr.w	r3, r3, #8
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	4b3e      	ldr	r3, [pc, #248]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	493b      	ldr	r1, [pc, #236]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f34:	4b39      	ldr	r3, [pc, #228]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	021b      	lsls	r3, r3, #8
 8002f42:	4936      	ldr	r1, [pc, #216]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	604b      	str	r3, [r1, #4]
 8002f48:	e01a      	b.n	8002f80 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f4a:	4b34      	ldr	r3, [pc, #208]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a33      	ldr	r2, [pc, #204]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002f50:	f023 0301 	bic.w	r3, r3, #1
 8002f54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f56:	f7fe fbd3 	bl	8001700 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f5e:	f7fe fbcf 	bl	8001700 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e2e7      	b.n	8003540 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f70:	4b2a      	ldr	r3, [pc, #168]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f0      	bne.n	8002f5e <HAL_RCC_OscConfig+0x1da>
 8002f7c:	e000      	b.n	8002f80 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f7e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d074      	beq.n	8003076 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d005      	beq.n	8002f9e <HAL_RCC_OscConfig+0x21a>
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	2b0c      	cmp	r3, #12
 8002f96:	d10e      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d10b      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9e:	4b1f      	ldr	r3, [pc, #124]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d064      	beq.n	8003074 <HAL_RCC_OscConfig+0x2f0>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d160      	bne.n	8003074 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e2c4      	b.n	8003540 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fbe:	d106      	bne.n	8002fce <HAL_RCC_OscConfig+0x24a>
 8002fc0:	4b16      	ldr	r3, [pc, #88]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a15      	ldr	r2, [pc, #84]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	e01d      	b.n	800300a <HAL_RCC_OscConfig+0x286>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fd6:	d10c      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x26e>
 8002fd8:	4b10      	ldr	r3, [pc, #64]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a0f      	ldr	r2, [pc, #60]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002fde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fe2:	6013      	str	r3, [r2, #0]
 8002fe4:	4b0d      	ldr	r3, [pc, #52]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a0c      	ldr	r2, [pc, #48]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	e00b      	b.n	800300a <HAL_RCC_OscConfig+0x286>
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a09      	ldr	r2, [pc, #36]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8002ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	4b07      	ldr	r3, [pc, #28]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a06      	ldr	r2, [pc, #24]	; (800301c <HAL_RCC_OscConfig+0x298>)
 8003004:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003008:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d01c      	beq.n	800304c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003012:	f7fe fb75 	bl	8001700 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003018:	e011      	b.n	800303e <HAL_RCC_OscConfig+0x2ba>
 800301a:	bf00      	nop
 800301c:	40021000 	.word	0x40021000
 8003020:	08005aa8 	.word	0x08005aa8
 8003024:	20000000 	.word	0x20000000
 8003028:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800302c:	f7fe fb68 	bl	8001700 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b64      	cmp	r3, #100	; 0x64
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e280      	b.n	8003540 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800303e:	4baf      	ldr	r3, [pc, #700]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0f0      	beq.n	800302c <HAL_RCC_OscConfig+0x2a8>
 800304a:	e014      	b.n	8003076 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304c:	f7fe fb58 	bl	8001700 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003054:	f7fe fb54 	bl	8001700 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b64      	cmp	r3, #100	; 0x64
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e26c      	b.n	8003540 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003066:	4ba5      	ldr	r3, [pc, #660]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f0      	bne.n	8003054 <HAL_RCC_OscConfig+0x2d0>
 8003072:	e000      	b.n	8003076 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d060      	beq.n	8003144 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	2b04      	cmp	r3, #4
 8003086:	d005      	beq.n	8003094 <HAL_RCC_OscConfig+0x310>
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	2b0c      	cmp	r3, #12
 800308c:	d119      	bne.n	80030c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2b02      	cmp	r3, #2
 8003092:	d116      	bne.n	80030c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003094:	4b99      	ldr	r3, [pc, #612]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_RCC_OscConfig+0x328>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e249      	b.n	8003540 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ac:	4b93      	ldr	r3, [pc, #588]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	061b      	lsls	r3, r3, #24
 80030ba:	4990      	ldr	r1, [pc, #576]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030c0:	e040      	b.n	8003144 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d023      	beq.n	8003112 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ca:	4b8c      	ldr	r3, [pc, #560]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a8b      	ldr	r2, [pc, #556]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 80030d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d6:	f7fe fb13 	bl	8001700 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030de:	f7fe fb0f 	bl	8001700 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e227      	b.n	8003540 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030f0:	4b82      	ldr	r3, [pc, #520]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0f0      	beq.n	80030de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fc:	4b7f      	ldr	r3, [pc, #508]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	061b      	lsls	r3, r3, #24
 800310a:	497c      	ldr	r1, [pc, #496]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 800310c:	4313      	orrs	r3, r2
 800310e:	604b      	str	r3, [r1, #4]
 8003110:	e018      	b.n	8003144 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003112:	4b7a      	ldr	r3, [pc, #488]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a79      	ldr	r2, [pc, #484]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 8003118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800311c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311e:	f7fe faef 	bl	8001700 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003126:	f7fe faeb 	bl	8001700 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e203      	b.n	8003540 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003138:	4b70      	ldr	r3, [pc, #448]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1f0      	bne.n	8003126 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0308 	and.w	r3, r3, #8
 800314c:	2b00      	cmp	r3, #0
 800314e:	d03c      	beq.n	80031ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d01c      	beq.n	8003192 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003158:	4b68      	ldr	r3, [pc, #416]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 800315a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800315e:	4a67      	ldr	r2, [pc, #412]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003168:	f7fe faca 	bl	8001700 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003170:	f7fe fac6 	bl	8001700 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e1de      	b.n	8003540 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003182:	4b5e      	ldr	r3, [pc, #376]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 8003184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0ef      	beq.n	8003170 <HAL_RCC_OscConfig+0x3ec>
 8003190:	e01b      	b.n	80031ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003192:	4b5a      	ldr	r3, [pc, #360]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 8003194:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003198:	4a58      	ldr	r2, [pc, #352]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 800319a:	f023 0301 	bic.w	r3, r3, #1
 800319e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a2:	f7fe faad 	bl	8001700 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031aa:	f7fe faa9 	bl	8001700 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e1c1      	b.n	8003540 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031bc:	4b4f      	ldr	r3, [pc, #316]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 80031be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1ef      	bne.n	80031aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0304 	and.w	r3, r3, #4
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 80a6 	beq.w	8003324 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031d8:	2300      	movs	r3, #0
 80031da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031dc:	4b47      	ldr	r3, [pc, #284]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 80031de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10d      	bne.n	8003204 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e8:	4b44      	ldr	r3, [pc, #272]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 80031ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ec:	4a43      	ldr	r2, [pc, #268]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 80031ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f2:	6593      	str	r3, [r2, #88]	; 0x58
 80031f4:	4b41      	ldr	r3, [pc, #260]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003200:	2301      	movs	r3, #1
 8003202:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003204:	4b3e      	ldr	r3, [pc, #248]	; (8003300 <HAL_RCC_OscConfig+0x57c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d118      	bne.n	8003242 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003210:	4b3b      	ldr	r3, [pc, #236]	; (8003300 <HAL_RCC_OscConfig+0x57c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a3a      	ldr	r2, [pc, #232]	; (8003300 <HAL_RCC_OscConfig+0x57c>)
 8003216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800321c:	f7fe fa70 	bl	8001700 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003224:	f7fe fa6c 	bl	8001700 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e184      	b.n	8003540 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003236:	4b32      	ldr	r3, [pc, #200]	; (8003300 <HAL_RCC_OscConfig+0x57c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d108      	bne.n	800325c <HAL_RCC_OscConfig+0x4d8>
 800324a:	4b2c      	ldr	r3, [pc, #176]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003250:	4a2a      	ldr	r2, [pc, #168]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800325a:	e024      	b.n	80032a6 <HAL_RCC_OscConfig+0x522>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2b05      	cmp	r3, #5
 8003262:	d110      	bne.n	8003286 <HAL_RCC_OscConfig+0x502>
 8003264:	4b25      	ldr	r3, [pc, #148]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	4a24      	ldr	r2, [pc, #144]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 800326c:	f043 0304 	orr.w	r3, r3, #4
 8003270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003274:	4b21      	ldr	r3, [pc, #132]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327a:	4a20      	ldr	r2, [pc, #128]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003284:	e00f      	b.n	80032a6 <HAL_RCC_OscConfig+0x522>
 8003286:	4b1d      	ldr	r3, [pc, #116]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 8003288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328c:	4a1b      	ldr	r2, [pc, #108]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 800328e:	f023 0301 	bic.w	r3, r3, #1
 8003292:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003296:	4b19      	ldr	r3, [pc, #100]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 8003298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329c:	4a17      	ldr	r2, [pc, #92]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 800329e:	f023 0304 	bic.w	r3, r3, #4
 80032a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d016      	beq.n	80032dc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ae:	f7fe fa27 	bl	8001700 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032b4:	e00a      	b.n	80032cc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b6:	f7fe fa23 	bl	8001700 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e139      	b.n	8003540 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <HAL_RCC_OscConfig+0x578>)
 80032ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0ed      	beq.n	80032b6 <HAL_RCC_OscConfig+0x532>
 80032da:	e01a      	b.n	8003312 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032dc:	f7fe fa10 	bl	8001700 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032e2:	e00f      	b.n	8003304 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e4:	f7fe fa0c 	bl	8001700 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d906      	bls.n	8003304 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e122      	b.n	8003540 <HAL_RCC_OscConfig+0x7bc>
 80032fa:	bf00      	nop
 80032fc:	40021000 	.word	0x40021000
 8003300:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003304:	4b90      	ldr	r3, [pc, #576]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 8003306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1e8      	bne.n	80032e4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003312:	7ffb      	ldrb	r3, [r7, #31]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d105      	bne.n	8003324 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003318:	4b8b      	ldr	r3, [pc, #556]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 800331a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331c:	4a8a      	ldr	r2, [pc, #552]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 800331e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003322:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 8108 	beq.w	800353e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	2b02      	cmp	r3, #2
 8003334:	f040 80d0 	bne.w	80034d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003338:	4b83      	ldr	r3, [pc, #524]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f003 0203 	and.w	r2, r3, #3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003348:	429a      	cmp	r2, r3
 800334a:	d130      	bne.n	80033ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	3b01      	subs	r3, #1
 8003358:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	429a      	cmp	r2, r3
 800335c:	d127      	bne.n	80033ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003368:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800336a:	429a      	cmp	r2, r3
 800336c:	d11f      	bne.n	80033ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003378:	2a07      	cmp	r2, #7
 800337a:	bf14      	ite	ne
 800337c:	2201      	movne	r2, #1
 800337e:	2200      	moveq	r2, #0
 8003380:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003382:	4293      	cmp	r3, r2
 8003384:	d113      	bne.n	80033ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003390:	085b      	lsrs	r3, r3, #1
 8003392:	3b01      	subs	r3, #1
 8003394:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003396:	429a      	cmp	r2, r3
 8003398:	d109      	bne.n	80033ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	085b      	lsrs	r3, r3, #1
 80033a6:	3b01      	subs	r3, #1
 80033a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d06e      	beq.n	800348c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	2b0c      	cmp	r3, #12
 80033b2:	d069      	beq.n	8003488 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033b4:	4b64      	ldr	r3, [pc, #400]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d105      	bne.n	80033cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033c0:	4b61      	ldr	r3, [pc, #388]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0b7      	b.n	8003540 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033d0:	4b5d      	ldr	r3, [pc, #372]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a5c      	ldr	r2, [pc, #368]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 80033d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033dc:	f7fe f990 	bl	8001700 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e4:	f7fe f98c 	bl	8001700 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e0a4      	b.n	8003540 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033f6:	4b54      	ldr	r3, [pc, #336]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003402:	4b51      	ldr	r3, [pc, #324]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	4b51      	ldr	r3, [pc, #324]	; (800354c <HAL_RCC_OscConfig+0x7c8>)
 8003408:	4013      	ands	r3, r2
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003412:	3a01      	subs	r2, #1
 8003414:	0112      	lsls	r2, r2, #4
 8003416:	4311      	orrs	r1, r2
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800341c:	0212      	lsls	r2, r2, #8
 800341e:	4311      	orrs	r1, r2
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003424:	0852      	lsrs	r2, r2, #1
 8003426:	3a01      	subs	r2, #1
 8003428:	0552      	lsls	r2, r2, #21
 800342a:	4311      	orrs	r1, r2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003430:	0852      	lsrs	r2, r2, #1
 8003432:	3a01      	subs	r2, #1
 8003434:	0652      	lsls	r2, r2, #25
 8003436:	4311      	orrs	r1, r2
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800343c:	0912      	lsrs	r2, r2, #4
 800343e:	0452      	lsls	r2, r2, #17
 8003440:	430a      	orrs	r2, r1
 8003442:	4941      	ldr	r1, [pc, #260]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 8003444:	4313      	orrs	r3, r2
 8003446:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003448:	4b3f      	ldr	r3, [pc, #252]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a3e      	ldr	r2, [pc, #248]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 800344e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003452:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003454:	4b3c      	ldr	r3, [pc, #240]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	4a3b      	ldr	r2, [pc, #236]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 800345a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800345e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003460:	f7fe f94e 	bl	8001700 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003468:	f7fe f94a 	bl	8001700 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e062      	b.n	8003540 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800347a:	4b33      	ldr	r3, [pc, #204]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003486:	e05a      	b.n	800353e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e059      	b.n	8003540 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348c:	4b2e      	ldr	r3, [pc, #184]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d152      	bne.n	800353e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003498:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a2a      	ldr	r2, [pc, #168]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 800349e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034a4:	4b28      	ldr	r3, [pc, #160]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	4a27      	ldr	r2, [pc, #156]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 80034aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034b0:	f7fe f926 	bl	8001700 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b8:	f7fe f922 	bl	8001700 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e03a      	b.n	8003540 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ca:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0x734>
 80034d6:	e032      	b.n	800353e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	2b0c      	cmp	r3, #12
 80034dc:	d02d      	beq.n	800353a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034de:	4b1a      	ldr	r3, [pc, #104]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a19      	ldr	r2, [pc, #100]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 80034e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034e8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80034ea:	4b17      	ldr	r3, [pc, #92]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d105      	bne.n	8003502 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80034f6:	4b14      	ldr	r3, [pc, #80]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	4a13      	ldr	r2, [pc, #76]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 80034fc:	f023 0303 	bic.w	r3, r3, #3
 8003500:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003502:	4b11      	ldr	r3, [pc, #68]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	4a10      	ldr	r2, [pc, #64]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 8003508:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800350c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003510:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003512:	f7fe f8f5 	bl	8001700 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351a:	f7fe f8f1 	bl	8001700 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e009      	b.n	8003540 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800352c:	4b06      	ldr	r3, [pc, #24]	; (8003548 <HAL_RCC_OscConfig+0x7c4>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f0      	bne.n	800351a <HAL_RCC_OscConfig+0x796>
 8003538:	e001      	b.n	800353e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3720      	adds	r7, #32
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40021000 	.word	0x40021000
 800354c:	f99d808c 	.word	0xf99d808c

08003550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0c8      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003564:	4b66      	ldr	r3, [pc, #408]	; (8003700 <HAL_RCC_ClockConfig+0x1b0>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d910      	bls.n	8003594 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003572:	4b63      	ldr	r3, [pc, #396]	; (8003700 <HAL_RCC_ClockConfig+0x1b0>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f023 0207 	bic.w	r2, r3, #7
 800357a:	4961      	ldr	r1, [pc, #388]	; (8003700 <HAL_RCC_ClockConfig+0x1b0>)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	4313      	orrs	r3, r2
 8003580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003582:	4b5f      	ldr	r3, [pc, #380]	; (8003700 <HAL_RCC_ClockConfig+0x1b0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d001      	beq.n	8003594 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0b0      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d04c      	beq.n	800363a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	d107      	bne.n	80035b8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035a8:	4b56      	ldr	r3, [pc, #344]	; (8003704 <HAL_RCC_ClockConfig+0x1b4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d121      	bne.n	80035f8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e09e      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d107      	bne.n	80035d0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035c0:	4b50      	ldr	r3, [pc, #320]	; (8003704 <HAL_RCC_ClockConfig+0x1b4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d115      	bne.n	80035f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e092      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d107      	bne.n	80035e8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035d8:	4b4a      	ldr	r3, [pc, #296]	; (8003704 <HAL_RCC_ClockConfig+0x1b4>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d109      	bne.n	80035f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e086      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035e8:	4b46      	ldr	r3, [pc, #280]	; (8003704 <HAL_RCC_ClockConfig+0x1b4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e07e      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035f8:	4b42      	ldr	r3, [pc, #264]	; (8003704 <HAL_RCC_ClockConfig+0x1b4>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f023 0203 	bic.w	r2, r3, #3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	493f      	ldr	r1, [pc, #252]	; (8003704 <HAL_RCC_ClockConfig+0x1b4>)
 8003606:	4313      	orrs	r3, r2
 8003608:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800360a:	f7fe f879 	bl	8001700 <HAL_GetTick>
 800360e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003610:	e00a      	b.n	8003628 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003612:	f7fe f875 	bl	8001700 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003620:	4293      	cmp	r3, r2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e066      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003628:	4b36      	ldr	r3, [pc, #216]	; (8003704 <HAL_RCC_ClockConfig+0x1b4>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 020c 	and.w	r2, r3, #12
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	429a      	cmp	r2, r3
 8003638:	d1eb      	bne.n	8003612 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d008      	beq.n	8003658 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003646:	4b2f      	ldr	r3, [pc, #188]	; (8003704 <HAL_RCC_ClockConfig+0x1b4>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	492c      	ldr	r1, [pc, #176]	; (8003704 <HAL_RCC_ClockConfig+0x1b4>)
 8003654:	4313      	orrs	r3, r2
 8003656:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003658:	4b29      	ldr	r3, [pc, #164]	; (8003700 <HAL_RCC_ClockConfig+0x1b0>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d210      	bcs.n	8003688 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003666:	4b26      	ldr	r3, [pc, #152]	; (8003700 <HAL_RCC_ClockConfig+0x1b0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f023 0207 	bic.w	r2, r3, #7
 800366e:	4924      	ldr	r1, [pc, #144]	; (8003700 <HAL_RCC_ClockConfig+0x1b0>)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b22      	ldr	r3, [pc, #136]	; (8003700 <HAL_RCC_ClockConfig+0x1b0>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e036      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003694:	4b1b      	ldr	r3, [pc, #108]	; (8003704 <HAL_RCC_ClockConfig+0x1b4>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	4918      	ldr	r1, [pc, #96]	; (8003704 <HAL_RCC_ClockConfig+0x1b4>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036b2:	4b14      	ldr	r3, [pc, #80]	; (8003704 <HAL_RCC_ClockConfig+0x1b4>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4910      	ldr	r1, [pc, #64]	; (8003704 <HAL_RCC_ClockConfig+0x1b4>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036c6:	f000 f825 	bl	8003714 <HAL_RCC_GetSysClockFreq>
 80036ca:	4602      	mov	r2, r0
 80036cc:	4b0d      	ldr	r3, [pc, #52]	; (8003704 <HAL_RCC_ClockConfig+0x1b4>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	490c      	ldr	r1, [pc, #48]	; (8003708 <HAL_RCC_ClockConfig+0x1b8>)
 80036d8:	5ccb      	ldrb	r3, [r1, r3]
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	fa22 f303 	lsr.w	r3, r2, r3
 80036e2:	4a0a      	ldr	r2, [pc, #40]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80036e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036e6:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <HAL_RCC_ClockConfig+0x1c0>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fd ffb8 	bl	8001660 <HAL_InitTick>
 80036f0:	4603      	mov	r3, r0
 80036f2:	72fb      	strb	r3, [r7, #11]

  return status;
 80036f4:	7afb      	ldrb	r3, [r7, #11]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40022000 	.word	0x40022000
 8003704:	40021000 	.word	0x40021000
 8003708:	08005aa8 	.word	0x08005aa8
 800370c:	20000000 	.word	0x20000000
 8003710:	20000004 	.word	0x20000004

08003714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003714:	b480      	push	{r7}
 8003716:	b089      	sub	sp, #36	; 0x24
 8003718:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	61fb      	str	r3, [r7, #28]
 800371e:	2300      	movs	r3, #0
 8003720:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003722:	4b3e      	ldr	r3, [pc, #248]	; (800381c <HAL_RCC_GetSysClockFreq+0x108>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 030c 	and.w	r3, r3, #12
 800372a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800372c:	4b3b      	ldr	r3, [pc, #236]	; (800381c <HAL_RCC_GetSysClockFreq+0x108>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f003 0303 	and.w	r3, r3, #3
 8003734:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_RCC_GetSysClockFreq+0x34>
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	2b0c      	cmp	r3, #12
 8003740:	d121      	bne.n	8003786 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d11e      	bne.n	8003786 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003748:	4b34      	ldr	r3, [pc, #208]	; (800381c <HAL_RCC_GetSysClockFreq+0x108>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b00      	cmp	r3, #0
 8003752:	d107      	bne.n	8003764 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003754:	4b31      	ldr	r3, [pc, #196]	; (800381c <HAL_RCC_GetSysClockFreq+0x108>)
 8003756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800375a:	0a1b      	lsrs	r3, r3, #8
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	61fb      	str	r3, [r7, #28]
 8003762:	e005      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003764:	4b2d      	ldr	r3, [pc, #180]	; (800381c <HAL_RCC_GetSysClockFreq+0x108>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	091b      	lsrs	r3, r3, #4
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003770:	4a2b      	ldr	r2, [pc, #172]	; (8003820 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003778:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10d      	bne.n	800379c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003784:	e00a      	b.n	800379c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	2b04      	cmp	r3, #4
 800378a:	d102      	bne.n	8003792 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800378c:	4b25      	ldr	r3, [pc, #148]	; (8003824 <HAL_RCC_GetSysClockFreq+0x110>)
 800378e:	61bb      	str	r3, [r7, #24]
 8003790:	e004      	b.n	800379c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	2b08      	cmp	r3, #8
 8003796:	d101      	bne.n	800379c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003798:	4b23      	ldr	r3, [pc, #140]	; (8003828 <HAL_RCC_GetSysClockFreq+0x114>)
 800379a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	2b0c      	cmp	r3, #12
 80037a0:	d134      	bne.n	800380c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037a2:	4b1e      	ldr	r3, [pc, #120]	; (800381c <HAL_RCC_GetSysClockFreq+0x108>)
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d003      	beq.n	80037ba <HAL_RCC_GetSysClockFreq+0xa6>
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2b03      	cmp	r3, #3
 80037b6:	d003      	beq.n	80037c0 <HAL_RCC_GetSysClockFreq+0xac>
 80037b8:	e005      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037ba:	4b1a      	ldr	r3, [pc, #104]	; (8003824 <HAL_RCC_GetSysClockFreq+0x110>)
 80037bc:	617b      	str	r3, [r7, #20]
      break;
 80037be:	e005      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037c0:	4b19      	ldr	r3, [pc, #100]	; (8003828 <HAL_RCC_GetSysClockFreq+0x114>)
 80037c2:	617b      	str	r3, [r7, #20]
      break;
 80037c4:	e002      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	617b      	str	r3, [r7, #20]
      break;
 80037ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037cc:	4b13      	ldr	r3, [pc, #76]	; (800381c <HAL_RCC_GetSysClockFreq+0x108>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	3301      	adds	r3, #1
 80037d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037da:	4b10      	ldr	r3, [pc, #64]	; (800381c <HAL_RCC_GetSysClockFreq+0x108>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	0a1b      	lsrs	r3, r3, #8
 80037e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	fb02 f203 	mul.w	r2, r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037f2:	4b0a      	ldr	r3, [pc, #40]	; (800381c <HAL_RCC_GetSysClockFreq+0x108>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	0e5b      	lsrs	r3, r3, #25
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	3301      	adds	r3, #1
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	fbb2 f3f3 	udiv	r3, r2, r3
 800380a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800380c:	69bb      	ldr	r3, [r7, #24]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3724      	adds	r7, #36	; 0x24
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40021000 	.word	0x40021000
 8003820:	08005ac0 	.word	0x08005ac0
 8003824:	00f42400 	.word	0x00f42400
 8003828:	007a1200 	.word	0x007a1200

0800382c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003830:	4b03      	ldr	r3, [pc, #12]	; (8003840 <HAL_RCC_GetHCLKFreq+0x14>)
 8003832:	681b      	ldr	r3, [r3, #0]
}
 8003834:	4618      	mov	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	20000000 	.word	0x20000000

08003844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003848:	f7ff fff0 	bl	800382c <HAL_RCC_GetHCLKFreq>
 800384c:	4602      	mov	r2, r0
 800384e:	4b06      	ldr	r3, [pc, #24]	; (8003868 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	0a1b      	lsrs	r3, r3, #8
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	4904      	ldr	r1, [pc, #16]	; (800386c <HAL_RCC_GetPCLK1Freq+0x28>)
 800385a:	5ccb      	ldrb	r3, [r1, r3]
 800385c:	f003 031f 	and.w	r3, r3, #31
 8003860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003864:	4618      	mov	r0, r3
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40021000 	.word	0x40021000
 800386c:	08005ab8 	.word	0x08005ab8

08003870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003874:	f7ff ffda 	bl	800382c <HAL_RCC_GetHCLKFreq>
 8003878:	4602      	mov	r2, r0
 800387a:	4b06      	ldr	r3, [pc, #24]	; (8003894 <HAL_RCC_GetPCLK2Freq+0x24>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	0adb      	lsrs	r3, r3, #11
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	4904      	ldr	r1, [pc, #16]	; (8003898 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003886:	5ccb      	ldrb	r3, [r1, r3]
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003890:	4618      	mov	r0, r3
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40021000 	.word	0x40021000
 8003898:	08005ab8 	.word	0x08005ab8

0800389c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038a4:	2300      	movs	r3, #0
 80038a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038a8:	4b2a      	ldr	r3, [pc, #168]	; (8003954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038b4:	f7ff fa02 	bl	8002cbc <HAL_PWREx_GetVoltageRange>
 80038b8:	6178      	str	r0, [r7, #20]
 80038ba:	e014      	b.n	80038e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038bc:	4b25      	ldr	r3, [pc, #148]	; (8003954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c0:	4a24      	ldr	r2, [pc, #144]	; (8003954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c6:	6593      	str	r3, [r2, #88]	; 0x58
 80038c8:	4b22      	ldr	r3, [pc, #136]	; (8003954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038d4:	f7ff f9f2 	bl	8002cbc <HAL_PWREx_GetVoltageRange>
 80038d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038da:	4b1e      	ldr	r3, [pc, #120]	; (8003954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038de:	4a1d      	ldr	r2, [pc, #116]	; (8003954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ec:	d10b      	bne.n	8003906 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b80      	cmp	r3, #128	; 0x80
 80038f2:	d919      	bls.n	8003928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2ba0      	cmp	r3, #160	; 0xa0
 80038f8:	d902      	bls.n	8003900 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038fa:	2302      	movs	r3, #2
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	e013      	b.n	8003928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003900:	2301      	movs	r3, #1
 8003902:	613b      	str	r3, [r7, #16]
 8003904:	e010      	b.n	8003928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b80      	cmp	r3, #128	; 0x80
 800390a:	d902      	bls.n	8003912 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800390c:	2303      	movs	r3, #3
 800390e:	613b      	str	r3, [r7, #16]
 8003910:	e00a      	b.n	8003928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b80      	cmp	r3, #128	; 0x80
 8003916:	d102      	bne.n	800391e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003918:	2302      	movs	r3, #2
 800391a:	613b      	str	r3, [r7, #16]
 800391c:	e004      	b.n	8003928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b70      	cmp	r3, #112	; 0x70
 8003922:	d101      	bne.n	8003928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003924:	2301      	movs	r3, #1
 8003926:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003928:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f023 0207 	bic.w	r2, r3, #7
 8003930:	4909      	ldr	r1, [pc, #36]	; (8003958 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003938:	4b07      	ldr	r3, [pc, #28]	; (8003958 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	429a      	cmp	r2, r3
 8003944:	d001      	beq.n	800394a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40021000 	.word	0x40021000
 8003958:	40022000 	.word	0x40022000

0800395c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003964:	2300      	movs	r3, #0
 8003966:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003968:	2300      	movs	r3, #0
 800396a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003974:	2b00      	cmp	r3, #0
 8003976:	d041      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800397c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003980:	d02a      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003982:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003986:	d824      	bhi.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003988:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800398c:	d008      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800398e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003992:	d81e      	bhi.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003998:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800399c:	d010      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800399e:	e018      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039a0:	4b86      	ldr	r3, [pc, #536]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	4a85      	ldr	r2, [pc, #532]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039ac:	e015      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3304      	adds	r3, #4
 80039b2:	2100      	movs	r1, #0
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 fabb 	bl	8003f30 <RCCEx_PLLSAI1_Config>
 80039ba:	4603      	mov	r3, r0
 80039bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039be:	e00c      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3320      	adds	r3, #32
 80039c4:	2100      	movs	r1, #0
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fba6 	bl	8004118 <RCCEx_PLLSAI2_Config>
 80039cc:	4603      	mov	r3, r0
 80039ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039d0:	e003      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	74fb      	strb	r3, [r7, #19]
      break;
 80039d6:	e000      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80039d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039da:	7cfb      	ldrb	r3, [r7, #19]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10b      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039e0:	4b76      	ldr	r3, [pc, #472]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039ee:	4973      	ldr	r1, [pc, #460]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039f6:	e001      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f8:	7cfb      	ldrb	r3, [r7, #19]
 80039fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d041      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a10:	d02a      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a16:	d824      	bhi.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a1c:	d008      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a22:	d81e      	bhi.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00a      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a2c:	d010      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a2e:	e018      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a30:	4b62      	ldr	r3, [pc, #392]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	4a61      	ldr	r2, [pc, #388]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a3c:	e015      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	3304      	adds	r3, #4
 8003a42:	2100      	movs	r1, #0
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fa73 	bl	8003f30 <RCCEx_PLLSAI1_Config>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a4e:	e00c      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3320      	adds	r3, #32
 8003a54:	2100      	movs	r1, #0
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 fb5e 	bl	8004118 <RCCEx_PLLSAI2_Config>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a60:	e003      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	74fb      	strb	r3, [r7, #19]
      break;
 8003a66:	e000      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003a68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a6a:	7cfb      	ldrb	r3, [r7, #19]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10b      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a70:	4b52      	ldr	r3, [pc, #328]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a76:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a7e:	494f      	ldr	r1, [pc, #316]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a86:	e001      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a88:	7cfb      	ldrb	r3, [r7, #19]
 8003a8a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 80a0 	beq.w	8003bda <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a9e:	4b47      	ldr	r3, [pc, #284]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00d      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab4:	4b41      	ldr	r3, [pc, #260]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab8:	4a40      	ldr	r2, [pc, #256]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003abe:	6593      	str	r3, [r2, #88]	; 0x58
 8003ac0:	4b3e      	ldr	r3, [pc, #248]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	60bb      	str	r3, [r7, #8]
 8003aca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003acc:	2301      	movs	r3, #1
 8003ace:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ad0:	4b3b      	ldr	r3, [pc, #236]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a3a      	ldr	r2, [pc, #232]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ada:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003adc:	f7fd fe10 	bl	8001700 <HAL_GetTick>
 8003ae0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ae2:	e009      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae4:	f7fd fe0c 	bl	8001700 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d902      	bls.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	74fb      	strb	r3, [r7, #19]
        break;
 8003af6:	e005      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003af8:	4b31      	ldr	r3, [pc, #196]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0ef      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b04:	7cfb      	ldrb	r3, [r7, #19]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d15c      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b0a:	4b2c      	ldr	r3, [pc, #176]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b14:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01f      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d019      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b28:	4b24      	ldr	r3, [pc, #144]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b34:	4b21      	ldr	r3, [pc, #132]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3a:	4a20      	ldr	r2, [pc, #128]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b44:	4b1d      	ldr	r3, [pc, #116]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4a:	4a1c      	ldr	r2, [pc, #112]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b54:	4a19      	ldr	r2, [pc, #100]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d016      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b66:	f7fd fdcb 	bl	8001700 <HAL_GetTick>
 8003b6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b6c:	e00b      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6e:	f7fd fdc7 	bl	8001700 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d902      	bls.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	74fb      	strb	r3, [r7, #19]
            break;
 8003b84:	e006      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b86:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0ec      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b94:	7cfb      	ldrb	r3, [r7, #19]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10c      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b9a:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003baa:	4904      	ldr	r1, [pc, #16]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bb2:	e009      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bb4:	7cfb      	ldrb	r3, [r7, #19]
 8003bb6:	74bb      	strb	r3, [r7, #18]
 8003bb8:	e006      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003bba:	bf00      	nop
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc4:	7cfb      	ldrb	r3, [r7, #19]
 8003bc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bc8:	7c7b      	ldrb	r3, [r7, #17]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d105      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bce:	4b9e      	ldr	r3, [pc, #632]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd2:	4a9d      	ldr	r2, [pc, #628]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00a      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003be6:	4b98      	ldr	r3, [pc, #608]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bec:	f023 0203 	bic.w	r2, r3, #3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf4:	4994      	ldr	r1, [pc, #592]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00a      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c08:	4b8f      	ldr	r3, [pc, #572]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0e:	f023 020c 	bic.w	r2, r3, #12
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c16:	498c      	ldr	r1, [pc, #560]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c2a:	4b87      	ldr	r3, [pc, #540]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	4983      	ldr	r1, [pc, #524]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0308 	and.w	r3, r3, #8
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00a      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c4c:	4b7e      	ldr	r3, [pc, #504]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5a:	497b      	ldr	r1, [pc, #492]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0310 	and.w	r3, r3, #16
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c6e:	4b76      	ldr	r3, [pc, #472]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7c:	4972      	ldr	r1, [pc, #456]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00a      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c90:	4b6d      	ldr	r3, [pc, #436]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9e:	496a      	ldr	r1, [pc, #424]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cb2:	4b65      	ldr	r3, [pc, #404]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc0:	4961      	ldr	r1, [pc, #388]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cd4:	4b5c      	ldr	r3, [pc, #368]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce2:	4959      	ldr	r1, [pc, #356]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cf6:	4b54      	ldr	r3, [pc, #336]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d04:	4950      	ldr	r1, [pc, #320]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d18:	4b4b      	ldr	r3, [pc, #300]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d26:	4948      	ldr	r1, [pc, #288]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d3a:	4b43      	ldr	r3, [pc, #268]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d48:	493f      	ldr	r1, [pc, #252]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d028      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d5c:	4b3a      	ldr	r3, [pc, #232]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d6a:	4937      	ldr	r1, [pc, #220]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d7a:	d106      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d7c:	4b32      	ldr	r3, [pc, #200]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	4a31      	ldr	r2, [pc, #196]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d86:	60d3      	str	r3, [r2, #12]
 8003d88:	e011      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d92:	d10c      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3304      	adds	r3, #4
 8003d98:	2101      	movs	r1, #1
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 f8c8 	bl	8003f30 <RCCEx_PLLSAI1_Config>
 8003da0:	4603      	mov	r3, r0
 8003da2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003da4:	7cfb      	ldrb	r3, [r7, #19]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003daa:	7cfb      	ldrb	r3, [r7, #19]
 8003dac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d028      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dba:	4b23      	ldr	r3, [pc, #140]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc8:	491f      	ldr	r1, [pc, #124]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dd8:	d106      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dda:	4b1b      	ldr	r3, [pc, #108]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	4a1a      	ldr	r2, [pc, #104]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003de4:	60d3      	str	r3, [r2, #12]
 8003de6:	e011      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003df0:	d10c      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3304      	adds	r3, #4
 8003df6:	2101      	movs	r1, #1
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 f899 	bl	8003f30 <RCCEx_PLLSAI1_Config>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e02:	7cfb      	ldrb	r3, [r7, #19]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e08:	7cfb      	ldrb	r3, [r7, #19]
 8003e0a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d02b      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e18:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e26:	4908      	ldr	r1, [pc, #32]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e36:	d109      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e38:	4b03      	ldr	r3, [pc, #12]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	4a02      	ldr	r2, [pc, #8]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e42:	60d3      	str	r3, [r2, #12]
 8003e44:	e014      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e46:	bf00      	nop
 8003e48:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e54:	d10c      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3304      	adds	r3, #4
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 f867 	bl	8003f30 <RCCEx_PLLSAI1_Config>
 8003e62:	4603      	mov	r3, r0
 8003e64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e66:	7cfb      	ldrb	r3, [r7, #19]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003e6c:	7cfb      	ldrb	r3, [r7, #19]
 8003e6e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d02f      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e7c:	4b2b      	ldr	r3, [pc, #172]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e8a:	4928      	ldr	r1, [pc, #160]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e9a:	d10d      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	2102      	movs	r1, #2
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 f844 	bl	8003f30 <RCCEx_PLLSAI1_Config>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003eac:	7cfb      	ldrb	r3, [r7, #19]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d014      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003eb2:	7cfb      	ldrb	r3, [r7, #19]
 8003eb4:	74bb      	strb	r3, [r7, #18]
 8003eb6:	e011      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ec0:	d10c      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3320      	adds	r3, #32
 8003ec6:	2102      	movs	r1, #2
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 f925 	bl	8004118 <RCCEx_PLLSAI2_Config>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ed2:	7cfb      	ldrb	r3, [r7, #19]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ed8:	7cfb      	ldrb	r3, [r7, #19]
 8003eda:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00a      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ee8:	4b10      	ldr	r3, [pc, #64]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ef6:	490d      	ldr	r1, [pc, #52]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00b      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f0a:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f1a:	4904      	ldr	r1, [pc, #16]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f22:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40021000 	.word	0x40021000

08003f30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f3e:	4b75      	ldr	r3, [pc, #468]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d018      	beq.n	8003f7c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f4a:	4b72      	ldr	r3, [pc, #456]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f003 0203 	and.w	r2, r3, #3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d10d      	bne.n	8003f76 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
       ||
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d009      	beq.n	8003f76 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f62:	4b6c      	ldr	r3, [pc, #432]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	091b      	lsrs	r3, r3, #4
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
       ||
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d047      	beq.n	8004006 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	73fb      	strb	r3, [r7, #15]
 8003f7a:	e044      	b.n	8004006 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d018      	beq.n	8003fb6 <RCCEx_PLLSAI1_Config+0x86>
 8003f84:	2b03      	cmp	r3, #3
 8003f86:	d825      	bhi.n	8003fd4 <RCCEx_PLLSAI1_Config+0xa4>
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d002      	beq.n	8003f92 <RCCEx_PLLSAI1_Config+0x62>
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d009      	beq.n	8003fa4 <RCCEx_PLLSAI1_Config+0x74>
 8003f90:	e020      	b.n	8003fd4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f92:	4b60      	ldr	r3, [pc, #384]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d11d      	bne.n	8003fda <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fa2:	e01a      	b.n	8003fda <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fa4:	4b5b      	ldr	r3, [pc, #364]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d116      	bne.n	8003fde <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fb4:	e013      	b.n	8003fde <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fb6:	4b57      	ldr	r3, [pc, #348]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10f      	bne.n	8003fe2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fc2:	4b54      	ldr	r3, [pc, #336]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d109      	bne.n	8003fe2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fd2:	e006      	b.n	8003fe2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003fd8:	e004      	b.n	8003fe4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fda:	bf00      	nop
 8003fdc:	e002      	b.n	8003fe4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fde:	bf00      	nop
 8003fe0:	e000      	b.n	8003fe4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fe2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10d      	bne.n	8004006 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003fea:	4b4a      	ldr	r3, [pc, #296]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6819      	ldr	r1, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	430b      	orrs	r3, r1
 8004000:	4944      	ldr	r1, [pc, #272]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004002:	4313      	orrs	r3, r2
 8004004:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004006:	7bfb      	ldrb	r3, [r7, #15]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d17d      	bne.n	8004108 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800400c:	4b41      	ldr	r3, [pc, #260]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e4>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a40      	ldr	r2, [pc, #256]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004012:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004016:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004018:	f7fd fb72 	bl	8001700 <HAL_GetTick>
 800401c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800401e:	e009      	b.n	8004034 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004020:	f7fd fb6e 	bl	8001700 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d902      	bls.n	8004034 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	73fb      	strb	r3, [r7, #15]
        break;
 8004032:	e005      	b.n	8004040 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004034:	4b37      	ldr	r3, [pc, #220]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1ef      	bne.n	8004020 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004040:	7bfb      	ldrb	r3, [r7, #15]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d160      	bne.n	8004108 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d111      	bne.n	8004070 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800404c:	4b31      	ldr	r3, [pc, #196]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e4>)
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6892      	ldr	r2, [r2, #8]
 800405c:	0211      	lsls	r1, r2, #8
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	68d2      	ldr	r2, [r2, #12]
 8004062:	0912      	lsrs	r2, r2, #4
 8004064:	0452      	lsls	r2, r2, #17
 8004066:	430a      	orrs	r2, r1
 8004068:	492a      	ldr	r1, [pc, #168]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e4>)
 800406a:	4313      	orrs	r3, r2
 800406c:	610b      	str	r3, [r1, #16]
 800406e:	e027      	b.n	80040c0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d112      	bne.n	800409c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004076:	4b27      	ldr	r3, [pc, #156]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800407e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6892      	ldr	r2, [r2, #8]
 8004086:	0211      	lsls	r1, r2, #8
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6912      	ldr	r2, [r2, #16]
 800408c:	0852      	lsrs	r2, r2, #1
 800408e:	3a01      	subs	r2, #1
 8004090:	0552      	lsls	r2, r2, #21
 8004092:	430a      	orrs	r2, r1
 8004094:	491f      	ldr	r1, [pc, #124]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004096:	4313      	orrs	r3, r2
 8004098:	610b      	str	r3, [r1, #16]
 800409a:	e011      	b.n	80040c0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800409c:	4b1d      	ldr	r3, [pc, #116]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e4>)
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6892      	ldr	r2, [r2, #8]
 80040ac:	0211      	lsls	r1, r2, #8
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6952      	ldr	r2, [r2, #20]
 80040b2:	0852      	lsrs	r2, r2, #1
 80040b4:	3a01      	subs	r2, #1
 80040b6:	0652      	lsls	r2, r2, #25
 80040b8:	430a      	orrs	r2, r1
 80040ba:	4916      	ldr	r1, [pc, #88]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040c0:	4b14      	ldr	r3, [pc, #80]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a13      	ldr	r2, [pc, #76]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040cc:	f7fd fb18 	bl	8001700 <HAL_GetTick>
 80040d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040d2:	e009      	b.n	80040e8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040d4:	f7fd fb14 	bl	8001700 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d902      	bls.n	80040e8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	73fb      	strb	r3, [r7, #15]
          break;
 80040e6:	e005      	b.n	80040f4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040e8:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0ef      	beq.n	80040d4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d106      	bne.n	8004108 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80040fa:	4b06      	ldr	r3, [pc, #24]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	4904      	ldr	r1, [pc, #16]	; (8004114 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004104:	4313      	orrs	r3, r2
 8004106:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004108:	7bfb      	ldrb	r3, [r7, #15]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40021000 	.word	0x40021000

08004118 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004126:	4b6a      	ldr	r3, [pc, #424]	; (80042d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d018      	beq.n	8004164 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004132:	4b67      	ldr	r3, [pc, #412]	; (80042d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f003 0203 	and.w	r2, r3, #3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d10d      	bne.n	800415e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
       ||
 8004146:	2b00      	cmp	r3, #0
 8004148:	d009      	beq.n	800415e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800414a:	4b61      	ldr	r3, [pc, #388]	; (80042d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	091b      	lsrs	r3, r3, #4
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	1c5a      	adds	r2, r3, #1
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
       ||
 800415a:	429a      	cmp	r2, r3
 800415c:	d047      	beq.n	80041ee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	73fb      	strb	r3, [r7, #15]
 8004162:	e044      	b.n	80041ee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b03      	cmp	r3, #3
 800416a:	d018      	beq.n	800419e <RCCEx_PLLSAI2_Config+0x86>
 800416c:	2b03      	cmp	r3, #3
 800416e:	d825      	bhi.n	80041bc <RCCEx_PLLSAI2_Config+0xa4>
 8004170:	2b01      	cmp	r3, #1
 8004172:	d002      	beq.n	800417a <RCCEx_PLLSAI2_Config+0x62>
 8004174:	2b02      	cmp	r3, #2
 8004176:	d009      	beq.n	800418c <RCCEx_PLLSAI2_Config+0x74>
 8004178:	e020      	b.n	80041bc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800417a:	4b55      	ldr	r3, [pc, #340]	; (80042d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d11d      	bne.n	80041c2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800418a:	e01a      	b.n	80041c2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800418c:	4b50      	ldr	r3, [pc, #320]	; (80042d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004194:	2b00      	cmp	r3, #0
 8004196:	d116      	bne.n	80041c6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800419c:	e013      	b.n	80041c6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800419e:	4b4c      	ldr	r3, [pc, #304]	; (80042d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10f      	bne.n	80041ca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041aa:	4b49      	ldr	r3, [pc, #292]	; (80042d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d109      	bne.n	80041ca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041ba:	e006      	b.n	80041ca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	73fb      	strb	r3, [r7, #15]
      break;
 80041c0:	e004      	b.n	80041cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041c2:	bf00      	nop
 80041c4:	e002      	b.n	80041cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041c6:	bf00      	nop
 80041c8:	e000      	b.n	80041cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10d      	bne.n	80041ee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041d2:	4b3f      	ldr	r3, [pc, #252]	; (80042d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6819      	ldr	r1, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	3b01      	subs	r3, #1
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	430b      	orrs	r3, r1
 80041e8:	4939      	ldr	r1, [pc, #228]	; (80042d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d167      	bne.n	80042c4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80041f4:	4b36      	ldr	r3, [pc, #216]	; (80042d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a35      	ldr	r2, [pc, #212]	; (80042d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004200:	f7fd fa7e 	bl	8001700 <HAL_GetTick>
 8004204:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004206:	e009      	b.n	800421c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004208:	f7fd fa7a 	bl	8001700 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d902      	bls.n	800421c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	73fb      	strb	r3, [r7, #15]
        break;
 800421a:	e005      	b.n	8004228 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800421c:	4b2c      	ldr	r3, [pc, #176]	; (80042d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1ef      	bne.n	8004208 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004228:	7bfb      	ldrb	r3, [r7, #15]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d14a      	bne.n	80042c4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d111      	bne.n	8004258 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004234:	4b26      	ldr	r3, [pc, #152]	; (80042d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800423c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6892      	ldr	r2, [r2, #8]
 8004244:	0211      	lsls	r1, r2, #8
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	68d2      	ldr	r2, [r2, #12]
 800424a:	0912      	lsrs	r2, r2, #4
 800424c:	0452      	lsls	r2, r2, #17
 800424e:	430a      	orrs	r2, r1
 8004250:	491f      	ldr	r1, [pc, #124]	; (80042d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004252:	4313      	orrs	r3, r2
 8004254:	614b      	str	r3, [r1, #20]
 8004256:	e011      	b.n	800427c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004258:	4b1d      	ldr	r3, [pc, #116]	; (80042d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004260:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6892      	ldr	r2, [r2, #8]
 8004268:	0211      	lsls	r1, r2, #8
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6912      	ldr	r2, [r2, #16]
 800426e:	0852      	lsrs	r2, r2, #1
 8004270:	3a01      	subs	r2, #1
 8004272:	0652      	lsls	r2, r2, #25
 8004274:	430a      	orrs	r2, r1
 8004276:	4916      	ldr	r1, [pc, #88]	; (80042d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004278:	4313      	orrs	r3, r2
 800427a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800427c:	4b14      	ldr	r3, [pc, #80]	; (80042d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a13      	ldr	r2, [pc, #76]	; (80042d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004286:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004288:	f7fd fa3a 	bl	8001700 <HAL_GetTick>
 800428c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800428e:	e009      	b.n	80042a4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004290:	f7fd fa36 	bl	8001700 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d902      	bls.n	80042a4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	73fb      	strb	r3, [r7, #15]
          break;
 80042a2:	e005      	b.n	80042b0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042a4:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0ef      	beq.n	8004290 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d106      	bne.n	80042c4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042b6:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b8:	695a      	ldr	r2, [r3, #20]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	4904      	ldr	r1, [pc, #16]	; (80042d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40021000 	.word	0x40021000

080042d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e049      	b.n	800437a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d106      	bne.n	8004300 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7fd f84e 	bl	800139c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3304      	adds	r3, #4
 8004310:	4619      	mov	r1, r3
 8004312:	4610      	mov	r0, r2
 8004314:	f000 f9ee 	bl	80046f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b01      	cmp	r3, #1
 8004396:	d001      	beq.n	800439c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e04f      	b.n	800443c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a23      	ldr	r2, [pc, #140]	; (8004448 <HAL_TIM_Base_Start_IT+0xc4>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d01d      	beq.n	80043fa <HAL_TIM_Base_Start_IT+0x76>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c6:	d018      	beq.n	80043fa <HAL_TIM_Base_Start_IT+0x76>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a1f      	ldr	r2, [pc, #124]	; (800444c <HAL_TIM_Base_Start_IT+0xc8>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d013      	beq.n	80043fa <HAL_TIM_Base_Start_IT+0x76>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a1e      	ldr	r2, [pc, #120]	; (8004450 <HAL_TIM_Base_Start_IT+0xcc>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d00e      	beq.n	80043fa <HAL_TIM_Base_Start_IT+0x76>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a1c      	ldr	r2, [pc, #112]	; (8004454 <HAL_TIM_Base_Start_IT+0xd0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d009      	beq.n	80043fa <HAL_TIM_Base_Start_IT+0x76>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a1b      	ldr	r2, [pc, #108]	; (8004458 <HAL_TIM_Base_Start_IT+0xd4>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d004      	beq.n	80043fa <HAL_TIM_Base_Start_IT+0x76>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a19      	ldr	r2, [pc, #100]	; (800445c <HAL_TIM_Base_Start_IT+0xd8>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d115      	bne.n	8004426 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	4b17      	ldr	r3, [pc, #92]	; (8004460 <HAL_TIM_Base_Start_IT+0xdc>)
 8004402:	4013      	ands	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2b06      	cmp	r3, #6
 800440a:	d015      	beq.n	8004438 <HAL_TIM_Base_Start_IT+0xb4>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004412:	d011      	beq.n	8004438 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0201 	orr.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004424:	e008      	b.n	8004438 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f042 0201 	orr.w	r2, r2, #1
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	e000      	b.n	800443a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004438:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	40012c00 	.word	0x40012c00
 800444c:	40000400 	.word	0x40000400
 8004450:	40000800 	.word	0x40000800
 8004454:	40000c00 	.word	0x40000c00
 8004458:	40013400 	.word	0x40013400
 800445c:	40014000 	.word	0x40014000
 8004460:	00010007 	.word	0x00010007

08004464 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b02      	cmp	r3, #2
 8004478:	d122      	bne.n	80044c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b02      	cmp	r3, #2
 8004486:	d11b      	bne.n	80044c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f06f 0202 	mvn.w	r2, #2
 8004490:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f905 	bl	80046b6 <HAL_TIM_IC_CaptureCallback>
 80044ac:	e005      	b.n	80044ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f8f7 	bl	80046a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f908 	bl	80046ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d122      	bne.n	8004514 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d11b      	bne.n	8004514 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f06f 0204 	mvn.w	r2, #4
 80044e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2202      	movs	r2, #2
 80044ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f8db 	bl	80046b6 <HAL_TIM_IC_CaptureCallback>
 8004500:	e005      	b.n	800450e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f8cd 	bl	80046a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f8de 	bl	80046ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b08      	cmp	r3, #8
 8004520:	d122      	bne.n	8004568 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	2b08      	cmp	r3, #8
 800452e:	d11b      	bne.n	8004568 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f06f 0208 	mvn.w	r2, #8
 8004538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2204      	movs	r2, #4
 800453e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f8b1 	bl	80046b6 <HAL_TIM_IC_CaptureCallback>
 8004554:	e005      	b.n	8004562 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f8a3 	bl	80046a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f8b4 	bl	80046ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f003 0310 	and.w	r3, r3, #16
 8004572:	2b10      	cmp	r3, #16
 8004574:	d122      	bne.n	80045bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b10      	cmp	r3, #16
 8004582:	d11b      	bne.n	80045bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0210 	mvn.w	r2, #16
 800458c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2208      	movs	r2, #8
 8004592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f887 	bl	80046b6 <HAL_TIM_IC_CaptureCallback>
 80045a8:	e005      	b.n	80045b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f879 	bl	80046a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f88a 	bl	80046ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d10e      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d107      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f06f 0201 	mvn.w	r2, #1
 80045e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7fc fe5a 	bl	800129c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f2:	2b80      	cmp	r3, #128	; 0x80
 80045f4:	d10e      	bne.n	8004614 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004600:	2b80      	cmp	r3, #128	; 0x80
 8004602:	d107      	bne.n	8004614 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800460c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f914 	bl	800483c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004622:	d10e      	bne.n	8004642 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462e:	2b80      	cmp	r3, #128	; 0x80
 8004630:	d107      	bne.n	8004642 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800463a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f907 	bl	8004850 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464c:	2b40      	cmp	r3, #64	; 0x40
 800464e:	d10e      	bne.n	800466e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465a:	2b40      	cmp	r3, #64	; 0x40
 800465c:	d107      	bne.n	800466e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f838 	bl	80046de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	f003 0320 	and.w	r3, r3, #32
 8004678:	2b20      	cmp	r3, #32
 800467a:	d10e      	bne.n	800469a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f003 0320 	and.w	r3, r3, #32
 8004686:	2b20      	cmp	r3, #32
 8004688:	d107      	bne.n	800469a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f06f 0220 	mvn.w	r2, #32
 8004692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f8c7 	bl	8004828 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800469a:	bf00      	nop
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
	...

080046f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a40      	ldr	r2, [pc, #256]	; (8004808 <TIM_Base_SetConfig+0x114>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d013      	beq.n	8004734 <TIM_Base_SetConfig+0x40>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004712:	d00f      	beq.n	8004734 <TIM_Base_SetConfig+0x40>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a3d      	ldr	r2, [pc, #244]	; (800480c <TIM_Base_SetConfig+0x118>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00b      	beq.n	8004734 <TIM_Base_SetConfig+0x40>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a3c      	ldr	r2, [pc, #240]	; (8004810 <TIM_Base_SetConfig+0x11c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d007      	beq.n	8004734 <TIM_Base_SetConfig+0x40>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a3b      	ldr	r2, [pc, #236]	; (8004814 <TIM_Base_SetConfig+0x120>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d003      	beq.n	8004734 <TIM_Base_SetConfig+0x40>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a3a      	ldr	r2, [pc, #232]	; (8004818 <TIM_Base_SetConfig+0x124>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d108      	bne.n	8004746 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a2f      	ldr	r2, [pc, #188]	; (8004808 <TIM_Base_SetConfig+0x114>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d01f      	beq.n	800478e <TIM_Base_SetConfig+0x9a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004754:	d01b      	beq.n	800478e <TIM_Base_SetConfig+0x9a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a2c      	ldr	r2, [pc, #176]	; (800480c <TIM_Base_SetConfig+0x118>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d017      	beq.n	800478e <TIM_Base_SetConfig+0x9a>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a2b      	ldr	r2, [pc, #172]	; (8004810 <TIM_Base_SetConfig+0x11c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d013      	beq.n	800478e <TIM_Base_SetConfig+0x9a>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a2a      	ldr	r2, [pc, #168]	; (8004814 <TIM_Base_SetConfig+0x120>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00f      	beq.n	800478e <TIM_Base_SetConfig+0x9a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a29      	ldr	r2, [pc, #164]	; (8004818 <TIM_Base_SetConfig+0x124>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00b      	beq.n	800478e <TIM_Base_SetConfig+0x9a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a28      	ldr	r2, [pc, #160]	; (800481c <TIM_Base_SetConfig+0x128>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d007      	beq.n	800478e <TIM_Base_SetConfig+0x9a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a27      	ldr	r2, [pc, #156]	; (8004820 <TIM_Base_SetConfig+0x12c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d003      	beq.n	800478e <TIM_Base_SetConfig+0x9a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a26      	ldr	r2, [pc, #152]	; (8004824 <TIM_Base_SetConfig+0x130>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d108      	bne.n	80047a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	4313      	orrs	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a10      	ldr	r2, [pc, #64]	; (8004808 <TIM_Base_SetConfig+0x114>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d00f      	beq.n	80047ec <TIM_Base_SetConfig+0xf8>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a12      	ldr	r2, [pc, #72]	; (8004818 <TIM_Base_SetConfig+0x124>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d00b      	beq.n	80047ec <TIM_Base_SetConfig+0xf8>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a11      	ldr	r2, [pc, #68]	; (800481c <TIM_Base_SetConfig+0x128>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d007      	beq.n	80047ec <TIM_Base_SetConfig+0xf8>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a10      	ldr	r2, [pc, #64]	; (8004820 <TIM_Base_SetConfig+0x12c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d003      	beq.n	80047ec <TIM_Base_SetConfig+0xf8>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a0f      	ldr	r2, [pc, #60]	; (8004824 <TIM_Base_SetConfig+0x130>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d103      	bne.n	80047f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	615a      	str	r2, [r3, #20]
}
 80047fa:	bf00      	nop
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	40012c00 	.word	0x40012c00
 800480c:	40000400 	.word	0x40000400
 8004810:	40000800 	.word	0x40000800
 8004814:	40000c00 	.word	0x40000c00
 8004818:	40013400 	.word	0x40013400
 800481c:	40014000 	.word	0x40014000
 8004820:	40014400 	.word	0x40014400
 8004824:	40014800 	.word	0x40014800

08004828 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e040      	b.n	80048f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800487a:	2b00      	cmp	r3, #0
 800487c:	d106      	bne.n	800488c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7fc fdae 	bl	80013e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2224      	movs	r2, #36	; 0x24
 8004890:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0201 	bic.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f82c 	bl	8004900 <UART_SetConfig>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e022      	b.n	80048f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 faaa 	bl	8004e14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 fb31 	bl	8004f58 <UART_CheckIdleState>
 80048f6:	4603      	mov	r3, r0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004900:	b5b0      	push	{r4, r5, r7, lr}
 8004902:	b088      	sub	sp, #32
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	4313      	orrs	r3, r2
 8004922:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	4bad      	ldr	r3, [pc, #692]	; (8004be0 <UART_SetConfig+0x2e0>)
 800492c:	4013      	ands	r3, r2
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6812      	ldr	r2, [r2, #0]
 8004932:	69f9      	ldr	r1, [r7, #28]
 8004934:	430b      	orrs	r3, r1
 8004936:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4aa2      	ldr	r2, [pc, #648]	; (8004be4 <UART_SetConfig+0x2e4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d004      	beq.n	8004968 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	69fa      	ldr	r2, [r7, #28]
 8004964:	4313      	orrs	r3, r2
 8004966:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	430a      	orrs	r2, r1
 800497a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a99      	ldr	r2, [pc, #612]	; (8004be8 <UART_SetConfig+0x2e8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d121      	bne.n	80049ca <UART_SetConfig+0xca>
 8004986:	4b99      	ldr	r3, [pc, #612]	; (8004bec <UART_SetConfig+0x2ec>)
 8004988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498c:	f003 0303 	and.w	r3, r3, #3
 8004990:	2b03      	cmp	r3, #3
 8004992:	d817      	bhi.n	80049c4 <UART_SetConfig+0xc4>
 8004994:	a201      	add	r2, pc, #4	; (adr r2, 800499c <UART_SetConfig+0x9c>)
 8004996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499a:	bf00      	nop
 800499c:	080049ad 	.word	0x080049ad
 80049a0:	080049b9 	.word	0x080049b9
 80049a4:	080049b3 	.word	0x080049b3
 80049a8:	080049bf 	.word	0x080049bf
 80049ac:	2301      	movs	r3, #1
 80049ae:	76fb      	strb	r3, [r7, #27]
 80049b0:	e0e7      	b.n	8004b82 <UART_SetConfig+0x282>
 80049b2:	2302      	movs	r3, #2
 80049b4:	76fb      	strb	r3, [r7, #27]
 80049b6:	e0e4      	b.n	8004b82 <UART_SetConfig+0x282>
 80049b8:	2304      	movs	r3, #4
 80049ba:	76fb      	strb	r3, [r7, #27]
 80049bc:	e0e1      	b.n	8004b82 <UART_SetConfig+0x282>
 80049be:	2308      	movs	r3, #8
 80049c0:	76fb      	strb	r3, [r7, #27]
 80049c2:	e0de      	b.n	8004b82 <UART_SetConfig+0x282>
 80049c4:	2310      	movs	r3, #16
 80049c6:	76fb      	strb	r3, [r7, #27]
 80049c8:	e0db      	b.n	8004b82 <UART_SetConfig+0x282>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a88      	ldr	r2, [pc, #544]	; (8004bf0 <UART_SetConfig+0x2f0>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d132      	bne.n	8004a3a <UART_SetConfig+0x13a>
 80049d4:	4b85      	ldr	r3, [pc, #532]	; (8004bec <UART_SetConfig+0x2ec>)
 80049d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049da:	f003 030c 	and.w	r3, r3, #12
 80049de:	2b0c      	cmp	r3, #12
 80049e0:	d828      	bhi.n	8004a34 <UART_SetConfig+0x134>
 80049e2:	a201      	add	r2, pc, #4	; (adr r2, 80049e8 <UART_SetConfig+0xe8>)
 80049e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e8:	08004a1d 	.word	0x08004a1d
 80049ec:	08004a35 	.word	0x08004a35
 80049f0:	08004a35 	.word	0x08004a35
 80049f4:	08004a35 	.word	0x08004a35
 80049f8:	08004a29 	.word	0x08004a29
 80049fc:	08004a35 	.word	0x08004a35
 8004a00:	08004a35 	.word	0x08004a35
 8004a04:	08004a35 	.word	0x08004a35
 8004a08:	08004a23 	.word	0x08004a23
 8004a0c:	08004a35 	.word	0x08004a35
 8004a10:	08004a35 	.word	0x08004a35
 8004a14:	08004a35 	.word	0x08004a35
 8004a18:	08004a2f 	.word	0x08004a2f
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	76fb      	strb	r3, [r7, #27]
 8004a20:	e0af      	b.n	8004b82 <UART_SetConfig+0x282>
 8004a22:	2302      	movs	r3, #2
 8004a24:	76fb      	strb	r3, [r7, #27]
 8004a26:	e0ac      	b.n	8004b82 <UART_SetConfig+0x282>
 8004a28:	2304      	movs	r3, #4
 8004a2a:	76fb      	strb	r3, [r7, #27]
 8004a2c:	e0a9      	b.n	8004b82 <UART_SetConfig+0x282>
 8004a2e:	2308      	movs	r3, #8
 8004a30:	76fb      	strb	r3, [r7, #27]
 8004a32:	e0a6      	b.n	8004b82 <UART_SetConfig+0x282>
 8004a34:	2310      	movs	r3, #16
 8004a36:	76fb      	strb	r3, [r7, #27]
 8004a38:	e0a3      	b.n	8004b82 <UART_SetConfig+0x282>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a6d      	ldr	r2, [pc, #436]	; (8004bf4 <UART_SetConfig+0x2f4>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d120      	bne.n	8004a86 <UART_SetConfig+0x186>
 8004a44:	4b69      	ldr	r3, [pc, #420]	; (8004bec <UART_SetConfig+0x2ec>)
 8004a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a4e:	2b30      	cmp	r3, #48	; 0x30
 8004a50:	d013      	beq.n	8004a7a <UART_SetConfig+0x17a>
 8004a52:	2b30      	cmp	r3, #48	; 0x30
 8004a54:	d814      	bhi.n	8004a80 <UART_SetConfig+0x180>
 8004a56:	2b20      	cmp	r3, #32
 8004a58:	d009      	beq.n	8004a6e <UART_SetConfig+0x16e>
 8004a5a:	2b20      	cmp	r3, #32
 8004a5c:	d810      	bhi.n	8004a80 <UART_SetConfig+0x180>
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d002      	beq.n	8004a68 <UART_SetConfig+0x168>
 8004a62:	2b10      	cmp	r3, #16
 8004a64:	d006      	beq.n	8004a74 <UART_SetConfig+0x174>
 8004a66:	e00b      	b.n	8004a80 <UART_SetConfig+0x180>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	76fb      	strb	r3, [r7, #27]
 8004a6c:	e089      	b.n	8004b82 <UART_SetConfig+0x282>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	76fb      	strb	r3, [r7, #27]
 8004a72:	e086      	b.n	8004b82 <UART_SetConfig+0x282>
 8004a74:	2304      	movs	r3, #4
 8004a76:	76fb      	strb	r3, [r7, #27]
 8004a78:	e083      	b.n	8004b82 <UART_SetConfig+0x282>
 8004a7a:	2308      	movs	r3, #8
 8004a7c:	76fb      	strb	r3, [r7, #27]
 8004a7e:	e080      	b.n	8004b82 <UART_SetConfig+0x282>
 8004a80:	2310      	movs	r3, #16
 8004a82:	76fb      	strb	r3, [r7, #27]
 8004a84:	e07d      	b.n	8004b82 <UART_SetConfig+0x282>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a5b      	ldr	r2, [pc, #364]	; (8004bf8 <UART_SetConfig+0x2f8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d120      	bne.n	8004ad2 <UART_SetConfig+0x1d2>
 8004a90:	4b56      	ldr	r3, [pc, #344]	; (8004bec <UART_SetConfig+0x2ec>)
 8004a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a9a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a9c:	d013      	beq.n	8004ac6 <UART_SetConfig+0x1c6>
 8004a9e:	2bc0      	cmp	r3, #192	; 0xc0
 8004aa0:	d814      	bhi.n	8004acc <UART_SetConfig+0x1cc>
 8004aa2:	2b80      	cmp	r3, #128	; 0x80
 8004aa4:	d009      	beq.n	8004aba <UART_SetConfig+0x1ba>
 8004aa6:	2b80      	cmp	r3, #128	; 0x80
 8004aa8:	d810      	bhi.n	8004acc <UART_SetConfig+0x1cc>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <UART_SetConfig+0x1b4>
 8004aae:	2b40      	cmp	r3, #64	; 0x40
 8004ab0:	d006      	beq.n	8004ac0 <UART_SetConfig+0x1c0>
 8004ab2:	e00b      	b.n	8004acc <UART_SetConfig+0x1cc>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	76fb      	strb	r3, [r7, #27]
 8004ab8:	e063      	b.n	8004b82 <UART_SetConfig+0x282>
 8004aba:	2302      	movs	r3, #2
 8004abc:	76fb      	strb	r3, [r7, #27]
 8004abe:	e060      	b.n	8004b82 <UART_SetConfig+0x282>
 8004ac0:	2304      	movs	r3, #4
 8004ac2:	76fb      	strb	r3, [r7, #27]
 8004ac4:	e05d      	b.n	8004b82 <UART_SetConfig+0x282>
 8004ac6:	2308      	movs	r3, #8
 8004ac8:	76fb      	strb	r3, [r7, #27]
 8004aca:	e05a      	b.n	8004b82 <UART_SetConfig+0x282>
 8004acc:	2310      	movs	r3, #16
 8004ace:	76fb      	strb	r3, [r7, #27]
 8004ad0:	e057      	b.n	8004b82 <UART_SetConfig+0x282>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a49      	ldr	r2, [pc, #292]	; (8004bfc <UART_SetConfig+0x2fc>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d125      	bne.n	8004b28 <UART_SetConfig+0x228>
 8004adc:	4b43      	ldr	r3, [pc, #268]	; (8004bec <UART_SetConfig+0x2ec>)
 8004ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aea:	d017      	beq.n	8004b1c <UART_SetConfig+0x21c>
 8004aec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004af0:	d817      	bhi.n	8004b22 <UART_SetConfig+0x222>
 8004af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004af6:	d00b      	beq.n	8004b10 <UART_SetConfig+0x210>
 8004af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004afc:	d811      	bhi.n	8004b22 <UART_SetConfig+0x222>
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <UART_SetConfig+0x20a>
 8004b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b06:	d006      	beq.n	8004b16 <UART_SetConfig+0x216>
 8004b08:	e00b      	b.n	8004b22 <UART_SetConfig+0x222>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	76fb      	strb	r3, [r7, #27]
 8004b0e:	e038      	b.n	8004b82 <UART_SetConfig+0x282>
 8004b10:	2302      	movs	r3, #2
 8004b12:	76fb      	strb	r3, [r7, #27]
 8004b14:	e035      	b.n	8004b82 <UART_SetConfig+0x282>
 8004b16:	2304      	movs	r3, #4
 8004b18:	76fb      	strb	r3, [r7, #27]
 8004b1a:	e032      	b.n	8004b82 <UART_SetConfig+0x282>
 8004b1c:	2308      	movs	r3, #8
 8004b1e:	76fb      	strb	r3, [r7, #27]
 8004b20:	e02f      	b.n	8004b82 <UART_SetConfig+0x282>
 8004b22:	2310      	movs	r3, #16
 8004b24:	76fb      	strb	r3, [r7, #27]
 8004b26:	e02c      	b.n	8004b82 <UART_SetConfig+0x282>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a2d      	ldr	r2, [pc, #180]	; (8004be4 <UART_SetConfig+0x2e4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d125      	bne.n	8004b7e <UART_SetConfig+0x27e>
 8004b32:	4b2e      	ldr	r3, [pc, #184]	; (8004bec <UART_SetConfig+0x2ec>)
 8004b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b40:	d017      	beq.n	8004b72 <UART_SetConfig+0x272>
 8004b42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b46:	d817      	bhi.n	8004b78 <UART_SetConfig+0x278>
 8004b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b4c:	d00b      	beq.n	8004b66 <UART_SetConfig+0x266>
 8004b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b52:	d811      	bhi.n	8004b78 <UART_SetConfig+0x278>
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <UART_SetConfig+0x260>
 8004b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b5c:	d006      	beq.n	8004b6c <UART_SetConfig+0x26c>
 8004b5e:	e00b      	b.n	8004b78 <UART_SetConfig+0x278>
 8004b60:	2300      	movs	r3, #0
 8004b62:	76fb      	strb	r3, [r7, #27]
 8004b64:	e00d      	b.n	8004b82 <UART_SetConfig+0x282>
 8004b66:	2302      	movs	r3, #2
 8004b68:	76fb      	strb	r3, [r7, #27]
 8004b6a:	e00a      	b.n	8004b82 <UART_SetConfig+0x282>
 8004b6c:	2304      	movs	r3, #4
 8004b6e:	76fb      	strb	r3, [r7, #27]
 8004b70:	e007      	b.n	8004b82 <UART_SetConfig+0x282>
 8004b72:	2308      	movs	r3, #8
 8004b74:	76fb      	strb	r3, [r7, #27]
 8004b76:	e004      	b.n	8004b82 <UART_SetConfig+0x282>
 8004b78:	2310      	movs	r3, #16
 8004b7a:	76fb      	strb	r3, [r7, #27]
 8004b7c:	e001      	b.n	8004b82 <UART_SetConfig+0x282>
 8004b7e:	2310      	movs	r3, #16
 8004b80:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a17      	ldr	r2, [pc, #92]	; (8004be4 <UART_SetConfig+0x2e4>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	f040 8087 	bne.w	8004c9c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b8e:	7efb      	ldrb	r3, [r7, #27]
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d837      	bhi.n	8004c04 <UART_SetConfig+0x304>
 8004b94:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <UART_SetConfig+0x29c>)
 8004b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9a:	bf00      	nop
 8004b9c:	08004bc1 	.word	0x08004bc1
 8004ba0:	08004c05 	.word	0x08004c05
 8004ba4:	08004bc9 	.word	0x08004bc9
 8004ba8:	08004c05 	.word	0x08004c05
 8004bac:	08004bcf 	.word	0x08004bcf
 8004bb0:	08004c05 	.word	0x08004c05
 8004bb4:	08004c05 	.word	0x08004c05
 8004bb8:	08004c05 	.word	0x08004c05
 8004bbc:	08004bd7 	.word	0x08004bd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bc0:	f7fe fe40 	bl	8003844 <HAL_RCC_GetPCLK1Freq>
 8004bc4:	6178      	str	r0, [r7, #20]
        break;
 8004bc6:	e022      	b.n	8004c0e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bc8:	4b0d      	ldr	r3, [pc, #52]	; (8004c00 <UART_SetConfig+0x300>)
 8004bca:	617b      	str	r3, [r7, #20]
        break;
 8004bcc:	e01f      	b.n	8004c0e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bce:	f7fe fda1 	bl	8003714 <HAL_RCC_GetSysClockFreq>
 8004bd2:	6178      	str	r0, [r7, #20]
        break;
 8004bd4:	e01b      	b.n	8004c0e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bda:	617b      	str	r3, [r7, #20]
        break;
 8004bdc:	e017      	b.n	8004c0e <UART_SetConfig+0x30e>
 8004bde:	bf00      	nop
 8004be0:	efff69f3 	.word	0xefff69f3
 8004be4:	40008000 	.word	0x40008000
 8004be8:	40013800 	.word	0x40013800
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	40004400 	.word	0x40004400
 8004bf4:	40004800 	.word	0x40004800
 8004bf8:	40004c00 	.word	0x40004c00
 8004bfc:	40005000 	.word	0x40005000
 8004c00:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	76bb      	strb	r3, [r7, #26]
        break;
 8004c0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 80f1 	beq.w	8004df8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	4413      	add	r3, r2
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d305      	bcc.n	8004c32 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d902      	bls.n	8004c38 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	76bb      	strb	r3, [r7, #26]
 8004c36:	e0df      	b.n	8004df8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f04f 0100 	mov.w	r1, #0
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	f04f 0300 	mov.w	r3, #0
 8004c48:	020b      	lsls	r3, r1, #8
 8004c4a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c4e:	0202      	lsls	r2, r0, #8
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	6849      	ldr	r1, [r1, #4]
 8004c54:	0849      	lsrs	r1, r1, #1
 8004c56:	4608      	mov	r0, r1
 8004c58:	f04f 0100 	mov.w	r1, #0
 8004c5c:	1814      	adds	r4, r2, r0
 8004c5e:	eb43 0501 	adc.w	r5, r3, r1
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	461a      	mov	r2, r3
 8004c68:	f04f 0300 	mov.w	r3, #0
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	4629      	mov	r1, r5
 8004c70:	f7fb fb06 	bl	8000280 <__aeabi_uldivmod>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4613      	mov	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c82:	d308      	bcc.n	8004c96 <UART_SetConfig+0x396>
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c8a:	d204      	bcs.n	8004c96 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	60da      	str	r2, [r3, #12]
 8004c94:	e0b0      	b.n	8004df8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	76bb      	strb	r3, [r7, #26]
 8004c9a:	e0ad      	b.n	8004df8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca4:	d15c      	bne.n	8004d60 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004ca6:	7efb      	ldrb	r3, [r7, #27]
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d828      	bhi.n	8004cfe <UART_SetConfig+0x3fe>
 8004cac:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <UART_SetConfig+0x3b4>)
 8004cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb2:	bf00      	nop
 8004cb4:	08004cd9 	.word	0x08004cd9
 8004cb8:	08004ce1 	.word	0x08004ce1
 8004cbc:	08004ce9 	.word	0x08004ce9
 8004cc0:	08004cff 	.word	0x08004cff
 8004cc4:	08004cef 	.word	0x08004cef
 8004cc8:	08004cff 	.word	0x08004cff
 8004ccc:	08004cff 	.word	0x08004cff
 8004cd0:	08004cff 	.word	0x08004cff
 8004cd4:	08004cf7 	.word	0x08004cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd8:	f7fe fdb4 	bl	8003844 <HAL_RCC_GetPCLK1Freq>
 8004cdc:	6178      	str	r0, [r7, #20]
        break;
 8004cde:	e013      	b.n	8004d08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ce0:	f7fe fdc6 	bl	8003870 <HAL_RCC_GetPCLK2Freq>
 8004ce4:	6178      	str	r0, [r7, #20]
        break;
 8004ce6:	e00f      	b.n	8004d08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ce8:	4b49      	ldr	r3, [pc, #292]	; (8004e10 <UART_SetConfig+0x510>)
 8004cea:	617b      	str	r3, [r7, #20]
        break;
 8004cec:	e00c      	b.n	8004d08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cee:	f7fe fd11 	bl	8003714 <HAL_RCC_GetSysClockFreq>
 8004cf2:	6178      	str	r0, [r7, #20]
        break;
 8004cf4:	e008      	b.n	8004d08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cfa:	617b      	str	r3, [r7, #20]
        break;
 8004cfc:	e004      	b.n	8004d08 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	76bb      	strb	r3, [r7, #26]
        break;
 8004d06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d074      	beq.n	8004df8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	005a      	lsls	r2, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	085b      	lsrs	r3, r3, #1
 8004d18:	441a      	add	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	2b0f      	cmp	r3, #15
 8004d2a:	d916      	bls.n	8004d5a <UART_SetConfig+0x45a>
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d32:	d212      	bcs.n	8004d5a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	f023 030f 	bic.w	r3, r3, #15
 8004d3c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	085b      	lsrs	r3, r3, #1
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	89fb      	ldrh	r3, [r7, #14]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	89fa      	ldrh	r2, [r7, #14]
 8004d56:	60da      	str	r2, [r3, #12]
 8004d58:	e04e      	b.n	8004df8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	76bb      	strb	r3, [r7, #26]
 8004d5e:	e04b      	b.n	8004df8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d60:	7efb      	ldrb	r3, [r7, #27]
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	d827      	bhi.n	8004db6 <UART_SetConfig+0x4b6>
 8004d66:	a201      	add	r2, pc, #4	; (adr r2, 8004d6c <UART_SetConfig+0x46c>)
 8004d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6c:	08004d91 	.word	0x08004d91
 8004d70:	08004d99 	.word	0x08004d99
 8004d74:	08004da1 	.word	0x08004da1
 8004d78:	08004db7 	.word	0x08004db7
 8004d7c:	08004da7 	.word	0x08004da7
 8004d80:	08004db7 	.word	0x08004db7
 8004d84:	08004db7 	.word	0x08004db7
 8004d88:	08004db7 	.word	0x08004db7
 8004d8c:	08004daf 	.word	0x08004daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d90:	f7fe fd58 	bl	8003844 <HAL_RCC_GetPCLK1Freq>
 8004d94:	6178      	str	r0, [r7, #20]
        break;
 8004d96:	e013      	b.n	8004dc0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d98:	f7fe fd6a 	bl	8003870 <HAL_RCC_GetPCLK2Freq>
 8004d9c:	6178      	str	r0, [r7, #20]
        break;
 8004d9e:	e00f      	b.n	8004dc0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004da0:	4b1b      	ldr	r3, [pc, #108]	; (8004e10 <UART_SetConfig+0x510>)
 8004da2:	617b      	str	r3, [r7, #20]
        break;
 8004da4:	e00c      	b.n	8004dc0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004da6:	f7fe fcb5 	bl	8003714 <HAL_RCC_GetSysClockFreq>
 8004daa:	6178      	str	r0, [r7, #20]
        break;
 8004dac:	e008      	b.n	8004dc0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004db2:	617b      	str	r3, [r7, #20]
        break;
 8004db4:	e004      	b.n	8004dc0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	76bb      	strb	r3, [r7, #26]
        break;
 8004dbe:	bf00      	nop
    }

    if (pclk != 0U)
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d018      	beq.n	8004df8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	085a      	lsrs	r2, r3, #1
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	441a      	add	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	2b0f      	cmp	r3, #15
 8004de0:	d908      	bls.n	8004df4 <UART_SetConfig+0x4f4>
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de8:	d204      	bcs.n	8004df4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	60da      	str	r2, [r3, #12]
 8004df2:	e001      	b.n	8004df8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004e04:	7ebb      	ldrb	r3, [r7, #26]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3720      	adds	r7, #32
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	00f42400 	.word	0x00f42400

08004e14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	f003 0310 	and.w	r3, r3, #16
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	f003 0320 	and.w	r3, r3, #32
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d01a      	beq.n	8004f2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f12:	d10a      	bne.n	8004f2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	605a      	str	r2, [r3, #4]
  }
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af02      	add	r7, sp, #8
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f68:	f7fc fbca 	bl	8001700 <HAL_GetTick>
 8004f6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d10e      	bne.n	8004f9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f82d 	bl	8004fea <UART_WaitOnFlagUntilTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e023      	b.n	8004fe2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d10e      	bne.n	8004fc6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f817 	bl	8004fea <UART_WaitOnFlagUntilTimeout>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e00d      	b.n	8004fe2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	60f8      	str	r0, [r7, #12]
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	603b      	str	r3, [r7, #0]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ffa:	e05e      	b.n	80050ba <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005002:	d05a      	beq.n	80050ba <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005004:	f7fc fb7c 	bl	8001700 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	429a      	cmp	r2, r3
 8005012:	d302      	bcc.n	800501a <UART_WaitOnFlagUntilTimeout+0x30>
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d11b      	bne.n	8005052 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005028:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0201 	bic.w	r2, r2, #1
 8005038:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2220      	movs	r2, #32
 800503e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2220      	movs	r2, #32
 8005044:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e043      	b.n	80050da <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d02c      	beq.n	80050ba <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800506a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800506e:	d124      	bne.n	80050ba <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005078:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005088:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 0201 	bic.w	r2, r2, #1
 8005098:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2220      	movs	r2, #32
 800509e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2220      	movs	r2, #32
 80050a4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e00f      	b.n	80050da <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	69da      	ldr	r2, [r3, #28]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	4013      	ands	r3, r2
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	bf0c      	ite	eq
 80050ca:	2301      	moveq	r3, #1
 80050cc:	2300      	movne	r3, #0
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	461a      	mov	r2, r3
 80050d2:	79fb      	ldrb	r3, [r7, #7]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d091      	beq.n	8004ffc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
	...

080050e4 <__errno>:
 80050e4:	4b01      	ldr	r3, [pc, #4]	; (80050ec <__errno+0x8>)
 80050e6:	6818      	ldr	r0, [r3, #0]
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	2000000c 	.word	0x2000000c

080050f0 <__libc_init_array>:
 80050f0:	b570      	push	{r4, r5, r6, lr}
 80050f2:	4d0d      	ldr	r5, [pc, #52]	; (8005128 <__libc_init_array+0x38>)
 80050f4:	4c0d      	ldr	r4, [pc, #52]	; (800512c <__libc_init_array+0x3c>)
 80050f6:	1b64      	subs	r4, r4, r5
 80050f8:	10a4      	asrs	r4, r4, #2
 80050fa:	2600      	movs	r6, #0
 80050fc:	42a6      	cmp	r6, r4
 80050fe:	d109      	bne.n	8005114 <__libc_init_array+0x24>
 8005100:	4d0b      	ldr	r5, [pc, #44]	; (8005130 <__libc_init_array+0x40>)
 8005102:	4c0c      	ldr	r4, [pc, #48]	; (8005134 <__libc_init_array+0x44>)
 8005104:	f000 fc82 	bl	8005a0c <_init>
 8005108:	1b64      	subs	r4, r4, r5
 800510a:	10a4      	asrs	r4, r4, #2
 800510c:	2600      	movs	r6, #0
 800510e:	42a6      	cmp	r6, r4
 8005110:	d105      	bne.n	800511e <__libc_init_array+0x2e>
 8005112:	bd70      	pop	{r4, r5, r6, pc}
 8005114:	f855 3b04 	ldr.w	r3, [r5], #4
 8005118:	4798      	blx	r3
 800511a:	3601      	adds	r6, #1
 800511c:	e7ee      	b.n	80050fc <__libc_init_array+0xc>
 800511e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005122:	4798      	blx	r3
 8005124:	3601      	adds	r6, #1
 8005126:	e7f2      	b.n	800510e <__libc_init_array+0x1e>
 8005128:	08005b2c 	.word	0x08005b2c
 800512c:	08005b2c 	.word	0x08005b2c
 8005130:	08005b2c 	.word	0x08005b2c
 8005134:	08005b30 	.word	0x08005b30

08005138 <memset>:
 8005138:	4402      	add	r2, r0
 800513a:	4603      	mov	r3, r0
 800513c:	4293      	cmp	r3, r2
 800513e:	d100      	bne.n	8005142 <memset+0xa>
 8005140:	4770      	bx	lr
 8005142:	f803 1b01 	strb.w	r1, [r3], #1
 8005146:	e7f9      	b.n	800513c <memset+0x4>

08005148 <sniprintf>:
 8005148:	b40c      	push	{r2, r3}
 800514a:	b530      	push	{r4, r5, lr}
 800514c:	4b17      	ldr	r3, [pc, #92]	; (80051ac <sniprintf+0x64>)
 800514e:	1e0c      	subs	r4, r1, #0
 8005150:	681d      	ldr	r5, [r3, #0]
 8005152:	b09d      	sub	sp, #116	; 0x74
 8005154:	da08      	bge.n	8005168 <sniprintf+0x20>
 8005156:	238b      	movs	r3, #139	; 0x8b
 8005158:	602b      	str	r3, [r5, #0]
 800515a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800515e:	b01d      	add	sp, #116	; 0x74
 8005160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005164:	b002      	add	sp, #8
 8005166:	4770      	bx	lr
 8005168:	f44f 7302 	mov.w	r3, #520	; 0x208
 800516c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005170:	bf14      	ite	ne
 8005172:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005176:	4623      	moveq	r3, r4
 8005178:	9304      	str	r3, [sp, #16]
 800517a:	9307      	str	r3, [sp, #28]
 800517c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005180:	9002      	str	r0, [sp, #8]
 8005182:	9006      	str	r0, [sp, #24]
 8005184:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005188:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800518a:	ab21      	add	r3, sp, #132	; 0x84
 800518c:	a902      	add	r1, sp, #8
 800518e:	4628      	mov	r0, r5
 8005190:	9301      	str	r3, [sp, #4]
 8005192:	f000 f889 	bl	80052a8 <_svfiprintf_r>
 8005196:	1c43      	adds	r3, r0, #1
 8005198:	bfbc      	itt	lt
 800519a:	238b      	movlt	r3, #139	; 0x8b
 800519c:	602b      	strlt	r3, [r5, #0]
 800519e:	2c00      	cmp	r4, #0
 80051a0:	d0dd      	beq.n	800515e <sniprintf+0x16>
 80051a2:	9b02      	ldr	r3, [sp, #8]
 80051a4:	2200      	movs	r2, #0
 80051a6:	701a      	strb	r2, [r3, #0]
 80051a8:	e7d9      	b.n	800515e <sniprintf+0x16>
 80051aa:	bf00      	nop
 80051ac:	2000000c 	.word	0x2000000c

080051b0 <siprintf>:
 80051b0:	b40e      	push	{r1, r2, r3}
 80051b2:	b500      	push	{lr}
 80051b4:	b09c      	sub	sp, #112	; 0x70
 80051b6:	ab1d      	add	r3, sp, #116	; 0x74
 80051b8:	9002      	str	r0, [sp, #8]
 80051ba:	9006      	str	r0, [sp, #24]
 80051bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051c0:	4809      	ldr	r0, [pc, #36]	; (80051e8 <siprintf+0x38>)
 80051c2:	9107      	str	r1, [sp, #28]
 80051c4:	9104      	str	r1, [sp, #16]
 80051c6:	4909      	ldr	r1, [pc, #36]	; (80051ec <siprintf+0x3c>)
 80051c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80051cc:	9105      	str	r1, [sp, #20]
 80051ce:	6800      	ldr	r0, [r0, #0]
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	a902      	add	r1, sp, #8
 80051d4:	f000 f868 	bl	80052a8 <_svfiprintf_r>
 80051d8:	9b02      	ldr	r3, [sp, #8]
 80051da:	2200      	movs	r2, #0
 80051dc:	701a      	strb	r2, [r3, #0]
 80051de:	b01c      	add	sp, #112	; 0x70
 80051e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80051e4:	b003      	add	sp, #12
 80051e6:	4770      	bx	lr
 80051e8:	2000000c 	.word	0x2000000c
 80051ec:	ffff0208 	.word	0xffff0208

080051f0 <__ssputs_r>:
 80051f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051f4:	688e      	ldr	r6, [r1, #8]
 80051f6:	429e      	cmp	r6, r3
 80051f8:	4682      	mov	sl, r0
 80051fa:	460c      	mov	r4, r1
 80051fc:	4690      	mov	r8, r2
 80051fe:	461f      	mov	r7, r3
 8005200:	d838      	bhi.n	8005274 <__ssputs_r+0x84>
 8005202:	898a      	ldrh	r2, [r1, #12]
 8005204:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005208:	d032      	beq.n	8005270 <__ssputs_r+0x80>
 800520a:	6825      	ldr	r5, [r4, #0]
 800520c:	6909      	ldr	r1, [r1, #16]
 800520e:	eba5 0901 	sub.w	r9, r5, r1
 8005212:	6965      	ldr	r5, [r4, #20]
 8005214:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005218:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800521c:	3301      	adds	r3, #1
 800521e:	444b      	add	r3, r9
 8005220:	106d      	asrs	r5, r5, #1
 8005222:	429d      	cmp	r5, r3
 8005224:	bf38      	it	cc
 8005226:	461d      	movcc	r5, r3
 8005228:	0553      	lsls	r3, r2, #21
 800522a:	d531      	bpl.n	8005290 <__ssputs_r+0xa0>
 800522c:	4629      	mov	r1, r5
 800522e:	f000 fb47 	bl	80058c0 <_malloc_r>
 8005232:	4606      	mov	r6, r0
 8005234:	b950      	cbnz	r0, 800524c <__ssputs_r+0x5c>
 8005236:	230c      	movs	r3, #12
 8005238:	f8ca 3000 	str.w	r3, [sl]
 800523c:	89a3      	ldrh	r3, [r4, #12]
 800523e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005242:	81a3      	strh	r3, [r4, #12]
 8005244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800524c:	6921      	ldr	r1, [r4, #16]
 800524e:	464a      	mov	r2, r9
 8005250:	f000 fabe 	bl	80057d0 <memcpy>
 8005254:	89a3      	ldrh	r3, [r4, #12]
 8005256:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800525a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800525e:	81a3      	strh	r3, [r4, #12]
 8005260:	6126      	str	r6, [r4, #16]
 8005262:	6165      	str	r5, [r4, #20]
 8005264:	444e      	add	r6, r9
 8005266:	eba5 0509 	sub.w	r5, r5, r9
 800526a:	6026      	str	r6, [r4, #0]
 800526c:	60a5      	str	r5, [r4, #8]
 800526e:	463e      	mov	r6, r7
 8005270:	42be      	cmp	r6, r7
 8005272:	d900      	bls.n	8005276 <__ssputs_r+0x86>
 8005274:	463e      	mov	r6, r7
 8005276:	4632      	mov	r2, r6
 8005278:	6820      	ldr	r0, [r4, #0]
 800527a:	4641      	mov	r1, r8
 800527c:	f000 fab6 	bl	80057ec <memmove>
 8005280:	68a3      	ldr	r3, [r4, #8]
 8005282:	6822      	ldr	r2, [r4, #0]
 8005284:	1b9b      	subs	r3, r3, r6
 8005286:	4432      	add	r2, r6
 8005288:	60a3      	str	r3, [r4, #8]
 800528a:	6022      	str	r2, [r4, #0]
 800528c:	2000      	movs	r0, #0
 800528e:	e7db      	b.n	8005248 <__ssputs_r+0x58>
 8005290:	462a      	mov	r2, r5
 8005292:	f000 fb6f 	bl	8005974 <_realloc_r>
 8005296:	4606      	mov	r6, r0
 8005298:	2800      	cmp	r0, #0
 800529a:	d1e1      	bne.n	8005260 <__ssputs_r+0x70>
 800529c:	6921      	ldr	r1, [r4, #16]
 800529e:	4650      	mov	r0, sl
 80052a0:	f000 fabe 	bl	8005820 <_free_r>
 80052a4:	e7c7      	b.n	8005236 <__ssputs_r+0x46>
	...

080052a8 <_svfiprintf_r>:
 80052a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ac:	4698      	mov	r8, r3
 80052ae:	898b      	ldrh	r3, [r1, #12]
 80052b0:	061b      	lsls	r3, r3, #24
 80052b2:	b09d      	sub	sp, #116	; 0x74
 80052b4:	4607      	mov	r7, r0
 80052b6:	460d      	mov	r5, r1
 80052b8:	4614      	mov	r4, r2
 80052ba:	d50e      	bpl.n	80052da <_svfiprintf_r+0x32>
 80052bc:	690b      	ldr	r3, [r1, #16]
 80052be:	b963      	cbnz	r3, 80052da <_svfiprintf_r+0x32>
 80052c0:	2140      	movs	r1, #64	; 0x40
 80052c2:	f000 fafd 	bl	80058c0 <_malloc_r>
 80052c6:	6028      	str	r0, [r5, #0]
 80052c8:	6128      	str	r0, [r5, #16]
 80052ca:	b920      	cbnz	r0, 80052d6 <_svfiprintf_r+0x2e>
 80052cc:	230c      	movs	r3, #12
 80052ce:	603b      	str	r3, [r7, #0]
 80052d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052d4:	e0d1      	b.n	800547a <_svfiprintf_r+0x1d2>
 80052d6:	2340      	movs	r3, #64	; 0x40
 80052d8:	616b      	str	r3, [r5, #20]
 80052da:	2300      	movs	r3, #0
 80052dc:	9309      	str	r3, [sp, #36]	; 0x24
 80052de:	2320      	movs	r3, #32
 80052e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80052e8:	2330      	movs	r3, #48	; 0x30
 80052ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005494 <_svfiprintf_r+0x1ec>
 80052ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052f2:	f04f 0901 	mov.w	r9, #1
 80052f6:	4623      	mov	r3, r4
 80052f8:	469a      	mov	sl, r3
 80052fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052fe:	b10a      	cbz	r2, 8005304 <_svfiprintf_r+0x5c>
 8005300:	2a25      	cmp	r2, #37	; 0x25
 8005302:	d1f9      	bne.n	80052f8 <_svfiprintf_r+0x50>
 8005304:	ebba 0b04 	subs.w	fp, sl, r4
 8005308:	d00b      	beq.n	8005322 <_svfiprintf_r+0x7a>
 800530a:	465b      	mov	r3, fp
 800530c:	4622      	mov	r2, r4
 800530e:	4629      	mov	r1, r5
 8005310:	4638      	mov	r0, r7
 8005312:	f7ff ff6d 	bl	80051f0 <__ssputs_r>
 8005316:	3001      	adds	r0, #1
 8005318:	f000 80aa 	beq.w	8005470 <_svfiprintf_r+0x1c8>
 800531c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800531e:	445a      	add	r2, fp
 8005320:	9209      	str	r2, [sp, #36]	; 0x24
 8005322:	f89a 3000 	ldrb.w	r3, [sl]
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 80a2 	beq.w	8005470 <_svfiprintf_r+0x1c8>
 800532c:	2300      	movs	r3, #0
 800532e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005332:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005336:	f10a 0a01 	add.w	sl, sl, #1
 800533a:	9304      	str	r3, [sp, #16]
 800533c:	9307      	str	r3, [sp, #28]
 800533e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005342:	931a      	str	r3, [sp, #104]	; 0x68
 8005344:	4654      	mov	r4, sl
 8005346:	2205      	movs	r2, #5
 8005348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800534c:	4851      	ldr	r0, [pc, #324]	; (8005494 <_svfiprintf_r+0x1ec>)
 800534e:	f7fa ff47 	bl	80001e0 <memchr>
 8005352:	9a04      	ldr	r2, [sp, #16]
 8005354:	b9d8      	cbnz	r0, 800538e <_svfiprintf_r+0xe6>
 8005356:	06d0      	lsls	r0, r2, #27
 8005358:	bf44      	itt	mi
 800535a:	2320      	movmi	r3, #32
 800535c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005360:	0711      	lsls	r1, r2, #28
 8005362:	bf44      	itt	mi
 8005364:	232b      	movmi	r3, #43	; 0x2b
 8005366:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800536a:	f89a 3000 	ldrb.w	r3, [sl]
 800536e:	2b2a      	cmp	r3, #42	; 0x2a
 8005370:	d015      	beq.n	800539e <_svfiprintf_r+0xf6>
 8005372:	9a07      	ldr	r2, [sp, #28]
 8005374:	4654      	mov	r4, sl
 8005376:	2000      	movs	r0, #0
 8005378:	f04f 0c0a 	mov.w	ip, #10
 800537c:	4621      	mov	r1, r4
 800537e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005382:	3b30      	subs	r3, #48	; 0x30
 8005384:	2b09      	cmp	r3, #9
 8005386:	d94e      	bls.n	8005426 <_svfiprintf_r+0x17e>
 8005388:	b1b0      	cbz	r0, 80053b8 <_svfiprintf_r+0x110>
 800538a:	9207      	str	r2, [sp, #28]
 800538c:	e014      	b.n	80053b8 <_svfiprintf_r+0x110>
 800538e:	eba0 0308 	sub.w	r3, r0, r8
 8005392:	fa09 f303 	lsl.w	r3, r9, r3
 8005396:	4313      	orrs	r3, r2
 8005398:	9304      	str	r3, [sp, #16]
 800539a:	46a2      	mov	sl, r4
 800539c:	e7d2      	b.n	8005344 <_svfiprintf_r+0x9c>
 800539e:	9b03      	ldr	r3, [sp, #12]
 80053a0:	1d19      	adds	r1, r3, #4
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	9103      	str	r1, [sp, #12]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	bfbb      	ittet	lt
 80053aa:	425b      	neglt	r3, r3
 80053ac:	f042 0202 	orrlt.w	r2, r2, #2
 80053b0:	9307      	strge	r3, [sp, #28]
 80053b2:	9307      	strlt	r3, [sp, #28]
 80053b4:	bfb8      	it	lt
 80053b6:	9204      	strlt	r2, [sp, #16]
 80053b8:	7823      	ldrb	r3, [r4, #0]
 80053ba:	2b2e      	cmp	r3, #46	; 0x2e
 80053bc:	d10c      	bne.n	80053d8 <_svfiprintf_r+0x130>
 80053be:	7863      	ldrb	r3, [r4, #1]
 80053c0:	2b2a      	cmp	r3, #42	; 0x2a
 80053c2:	d135      	bne.n	8005430 <_svfiprintf_r+0x188>
 80053c4:	9b03      	ldr	r3, [sp, #12]
 80053c6:	1d1a      	adds	r2, r3, #4
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	9203      	str	r2, [sp, #12]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	bfb8      	it	lt
 80053d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80053d4:	3402      	adds	r4, #2
 80053d6:	9305      	str	r3, [sp, #20]
 80053d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80054a4 <_svfiprintf_r+0x1fc>
 80053dc:	7821      	ldrb	r1, [r4, #0]
 80053de:	2203      	movs	r2, #3
 80053e0:	4650      	mov	r0, sl
 80053e2:	f7fa fefd 	bl	80001e0 <memchr>
 80053e6:	b140      	cbz	r0, 80053fa <_svfiprintf_r+0x152>
 80053e8:	2340      	movs	r3, #64	; 0x40
 80053ea:	eba0 000a 	sub.w	r0, r0, sl
 80053ee:	fa03 f000 	lsl.w	r0, r3, r0
 80053f2:	9b04      	ldr	r3, [sp, #16]
 80053f4:	4303      	orrs	r3, r0
 80053f6:	3401      	adds	r4, #1
 80053f8:	9304      	str	r3, [sp, #16]
 80053fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053fe:	4826      	ldr	r0, [pc, #152]	; (8005498 <_svfiprintf_r+0x1f0>)
 8005400:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005404:	2206      	movs	r2, #6
 8005406:	f7fa feeb 	bl	80001e0 <memchr>
 800540a:	2800      	cmp	r0, #0
 800540c:	d038      	beq.n	8005480 <_svfiprintf_r+0x1d8>
 800540e:	4b23      	ldr	r3, [pc, #140]	; (800549c <_svfiprintf_r+0x1f4>)
 8005410:	bb1b      	cbnz	r3, 800545a <_svfiprintf_r+0x1b2>
 8005412:	9b03      	ldr	r3, [sp, #12]
 8005414:	3307      	adds	r3, #7
 8005416:	f023 0307 	bic.w	r3, r3, #7
 800541a:	3308      	adds	r3, #8
 800541c:	9303      	str	r3, [sp, #12]
 800541e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005420:	4433      	add	r3, r6
 8005422:	9309      	str	r3, [sp, #36]	; 0x24
 8005424:	e767      	b.n	80052f6 <_svfiprintf_r+0x4e>
 8005426:	fb0c 3202 	mla	r2, ip, r2, r3
 800542a:	460c      	mov	r4, r1
 800542c:	2001      	movs	r0, #1
 800542e:	e7a5      	b.n	800537c <_svfiprintf_r+0xd4>
 8005430:	2300      	movs	r3, #0
 8005432:	3401      	adds	r4, #1
 8005434:	9305      	str	r3, [sp, #20]
 8005436:	4619      	mov	r1, r3
 8005438:	f04f 0c0a 	mov.w	ip, #10
 800543c:	4620      	mov	r0, r4
 800543e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005442:	3a30      	subs	r2, #48	; 0x30
 8005444:	2a09      	cmp	r2, #9
 8005446:	d903      	bls.n	8005450 <_svfiprintf_r+0x1a8>
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0c5      	beq.n	80053d8 <_svfiprintf_r+0x130>
 800544c:	9105      	str	r1, [sp, #20]
 800544e:	e7c3      	b.n	80053d8 <_svfiprintf_r+0x130>
 8005450:	fb0c 2101 	mla	r1, ip, r1, r2
 8005454:	4604      	mov	r4, r0
 8005456:	2301      	movs	r3, #1
 8005458:	e7f0      	b.n	800543c <_svfiprintf_r+0x194>
 800545a:	ab03      	add	r3, sp, #12
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	462a      	mov	r2, r5
 8005460:	4b0f      	ldr	r3, [pc, #60]	; (80054a0 <_svfiprintf_r+0x1f8>)
 8005462:	a904      	add	r1, sp, #16
 8005464:	4638      	mov	r0, r7
 8005466:	f3af 8000 	nop.w
 800546a:	1c42      	adds	r2, r0, #1
 800546c:	4606      	mov	r6, r0
 800546e:	d1d6      	bne.n	800541e <_svfiprintf_r+0x176>
 8005470:	89ab      	ldrh	r3, [r5, #12]
 8005472:	065b      	lsls	r3, r3, #25
 8005474:	f53f af2c 	bmi.w	80052d0 <_svfiprintf_r+0x28>
 8005478:	9809      	ldr	r0, [sp, #36]	; 0x24
 800547a:	b01d      	add	sp, #116	; 0x74
 800547c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005480:	ab03      	add	r3, sp, #12
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	462a      	mov	r2, r5
 8005486:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <_svfiprintf_r+0x1f8>)
 8005488:	a904      	add	r1, sp, #16
 800548a:	4638      	mov	r0, r7
 800548c:	f000 f87a 	bl	8005584 <_printf_i>
 8005490:	e7eb      	b.n	800546a <_svfiprintf_r+0x1c2>
 8005492:	bf00      	nop
 8005494:	08005af0 	.word	0x08005af0
 8005498:	08005afa 	.word	0x08005afa
 800549c:	00000000 	.word	0x00000000
 80054a0:	080051f1 	.word	0x080051f1
 80054a4:	08005af6 	.word	0x08005af6

080054a8 <_printf_common>:
 80054a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054ac:	4616      	mov	r6, r2
 80054ae:	4699      	mov	r9, r3
 80054b0:	688a      	ldr	r2, [r1, #8]
 80054b2:	690b      	ldr	r3, [r1, #16]
 80054b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054b8:	4293      	cmp	r3, r2
 80054ba:	bfb8      	it	lt
 80054bc:	4613      	movlt	r3, r2
 80054be:	6033      	str	r3, [r6, #0]
 80054c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054c4:	4607      	mov	r7, r0
 80054c6:	460c      	mov	r4, r1
 80054c8:	b10a      	cbz	r2, 80054ce <_printf_common+0x26>
 80054ca:	3301      	adds	r3, #1
 80054cc:	6033      	str	r3, [r6, #0]
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	0699      	lsls	r1, r3, #26
 80054d2:	bf42      	ittt	mi
 80054d4:	6833      	ldrmi	r3, [r6, #0]
 80054d6:	3302      	addmi	r3, #2
 80054d8:	6033      	strmi	r3, [r6, #0]
 80054da:	6825      	ldr	r5, [r4, #0]
 80054dc:	f015 0506 	ands.w	r5, r5, #6
 80054e0:	d106      	bne.n	80054f0 <_printf_common+0x48>
 80054e2:	f104 0a19 	add.w	sl, r4, #25
 80054e6:	68e3      	ldr	r3, [r4, #12]
 80054e8:	6832      	ldr	r2, [r6, #0]
 80054ea:	1a9b      	subs	r3, r3, r2
 80054ec:	42ab      	cmp	r3, r5
 80054ee:	dc26      	bgt.n	800553e <_printf_common+0x96>
 80054f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054f4:	1e13      	subs	r3, r2, #0
 80054f6:	6822      	ldr	r2, [r4, #0]
 80054f8:	bf18      	it	ne
 80054fa:	2301      	movne	r3, #1
 80054fc:	0692      	lsls	r2, r2, #26
 80054fe:	d42b      	bmi.n	8005558 <_printf_common+0xb0>
 8005500:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005504:	4649      	mov	r1, r9
 8005506:	4638      	mov	r0, r7
 8005508:	47c0      	blx	r8
 800550a:	3001      	adds	r0, #1
 800550c:	d01e      	beq.n	800554c <_printf_common+0xa4>
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	68e5      	ldr	r5, [r4, #12]
 8005512:	6832      	ldr	r2, [r6, #0]
 8005514:	f003 0306 	and.w	r3, r3, #6
 8005518:	2b04      	cmp	r3, #4
 800551a:	bf08      	it	eq
 800551c:	1aad      	subeq	r5, r5, r2
 800551e:	68a3      	ldr	r3, [r4, #8]
 8005520:	6922      	ldr	r2, [r4, #16]
 8005522:	bf0c      	ite	eq
 8005524:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005528:	2500      	movne	r5, #0
 800552a:	4293      	cmp	r3, r2
 800552c:	bfc4      	itt	gt
 800552e:	1a9b      	subgt	r3, r3, r2
 8005530:	18ed      	addgt	r5, r5, r3
 8005532:	2600      	movs	r6, #0
 8005534:	341a      	adds	r4, #26
 8005536:	42b5      	cmp	r5, r6
 8005538:	d11a      	bne.n	8005570 <_printf_common+0xc8>
 800553a:	2000      	movs	r0, #0
 800553c:	e008      	b.n	8005550 <_printf_common+0xa8>
 800553e:	2301      	movs	r3, #1
 8005540:	4652      	mov	r2, sl
 8005542:	4649      	mov	r1, r9
 8005544:	4638      	mov	r0, r7
 8005546:	47c0      	blx	r8
 8005548:	3001      	adds	r0, #1
 800554a:	d103      	bne.n	8005554 <_printf_common+0xac>
 800554c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005554:	3501      	adds	r5, #1
 8005556:	e7c6      	b.n	80054e6 <_printf_common+0x3e>
 8005558:	18e1      	adds	r1, r4, r3
 800555a:	1c5a      	adds	r2, r3, #1
 800555c:	2030      	movs	r0, #48	; 0x30
 800555e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005562:	4422      	add	r2, r4
 8005564:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005568:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800556c:	3302      	adds	r3, #2
 800556e:	e7c7      	b.n	8005500 <_printf_common+0x58>
 8005570:	2301      	movs	r3, #1
 8005572:	4622      	mov	r2, r4
 8005574:	4649      	mov	r1, r9
 8005576:	4638      	mov	r0, r7
 8005578:	47c0      	blx	r8
 800557a:	3001      	adds	r0, #1
 800557c:	d0e6      	beq.n	800554c <_printf_common+0xa4>
 800557e:	3601      	adds	r6, #1
 8005580:	e7d9      	b.n	8005536 <_printf_common+0x8e>
	...

08005584 <_printf_i>:
 8005584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005588:	460c      	mov	r4, r1
 800558a:	4691      	mov	r9, r2
 800558c:	7e27      	ldrb	r7, [r4, #24]
 800558e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005590:	2f78      	cmp	r7, #120	; 0x78
 8005592:	4680      	mov	r8, r0
 8005594:	469a      	mov	sl, r3
 8005596:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800559a:	d807      	bhi.n	80055ac <_printf_i+0x28>
 800559c:	2f62      	cmp	r7, #98	; 0x62
 800559e:	d80a      	bhi.n	80055b6 <_printf_i+0x32>
 80055a0:	2f00      	cmp	r7, #0
 80055a2:	f000 80d8 	beq.w	8005756 <_printf_i+0x1d2>
 80055a6:	2f58      	cmp	r7, #88	; 0x58
 80055a8:	f000 80a3 	beq.w	80056f2 <_printf_i+0x16e>
 80055ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80055b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055b4:	e03a      	b.n	800562c <_printf_i+0xa8>
 80055b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055ba:	2b15      	cmp	r3, #21
 80055bc:	d8f6      	bhi.n	80055ac <_printf_i+0x28>
 80055be:	a001      	add	r0, pc, #4	; (adr r0, 80055c4 <_printf_i+0x40>)
 80055c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80055c4:	0800561d 	.word	0x0800561d
 80055c8:	08005631 	.word	0x08005631
 80055cc:	080055ad 	.word	0x080055ad
 80055d0:	080055ad 	.word	0x080055ad
 80055d4:	080055ad 	.word	0x080055ad
 80055d8:	080055ad 	.word	0x080055ad
 80055dc:	08005631 	.word	0x08005631
 80055e0:	080055ad 	.word	0x080055ad
 80055e4:	080055ad 	.word	0x080055ad
 80055e8:	080055ad 	.word	0x080055ad
 80055ec:	080055ad 	.word	0x080055ad
 80055f0:	0800573d 	.word	0x0800573d
 80055f4:	08005661 	.word	0x08005661
 80055f8:	0800571f 	.word	0x0800571f
 80055fc:	080055ad 	.word	0x080055ad
 8005600:	080055ad 	.word	0x080055ad
 8005604:	0800575f 	.word	0x0800575f
 8005608:	080055ad 	.word	0x080055ad
 800560c:	08005661 	.word	0x08005661
 8005610:	080055ad 	.word	0x080055ad
 8005614:	080055ad 	.word	0x080055ad
 8005618:	08005727 	.word	0x08005727
 800561c:	680b      	ldr	r3, [r1, #0]
 800561e:	1d1a      	adds	r2, r3, #4
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	600a      	str	r2, [r1, #0]
 8005624:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005628:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800562c:	2301      	movs	r3, #1
 800562e:	e0a3      	b.n	8005778 <_printf_i+0x1f4>
 8005630:	6825      	ldr	r5, [r4, #0]
 8005632:	6808      	ldr	r0, [r1, #0]
 8005634:	062e      	lsls	r6, r5, #24
 8005636:	f100 0304 	add.w	r3, r0, #4
 800563a:	d50a      	bpl.n	8005652 <_printf_i+0xce>
 800563c:	6805      	ldr	r5, [r0, #0]
 800563e:	600b      	str	r3, [r1, #0]
 8005640:	2d00      	cmp	r5, #0
 8005642:	da03      	bge.n	800564c <_printf_i+0xc8>
 8005644:	232d      	movs	r3, #45	; 0x2d
 8005646:	426d      	negs	r5, r5
 8005648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800564c:	485e      	ldr	r0, [pc, #376]	; (80057c8 <_printf_i+0x244>)
 800564e:	230a      	movs	r3, #10
 8005650:	e019      	b.n	8005686 <_printf_i+0x102>
 8005652:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005656:	6805      	ldr	r5, [r0, #0]
 8005658:	600b      	str	r3, [r1, #0]
 800565a:	bf18      	it	ne
 800565c:	b22d      	sxthne	r5, r5
 800565e:	e7ef      	b.n	8005640 <_printf_i+0xbc>
 8005660:	680b      	ldr	r3, [r1, #0]
 8005662:	6825      	ldr	r5, [r4, #0]
 8005664:	1d18      	adds	r0, r3, #4
 8005666:	6008      	str	r0, [r1, #0]
 8005668:	0628      	lsls	r0, r5, #24
 800566a:	d501      	bpl.n	8005670 <_printf_i+0xec>
 800566c:	681d      	ldr	r5, [r3, #0]
 800566e:	e002      	b.n	8005676 <_printf_i+0xf2>
 8005670:	0669      	lsls	r1, r5, #25
 8005672:	d5fb      	bpl.n	800566c <_printf_i+0xe8>
 8005674:	881d      	ldrh	r5, [r3, #0]
 8005676:	4854      	ldr	r0, [pc, #336]	; (80057c8 <_printf_i+0x244>)
 8005678:	2f6f      	cmp	r7, #111	; 0x6f
 800567a:	bf0c      	ite	eq
 800567c:	2308      	moveq	r3, #8
 800567e:	230a      	movne	r3, #10
 8005680:	2100      	movs	r1, #0
 8005682:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005686:	6866      	ldr	r6, [r4, #4]
 8005688:	60a6      	str	r6, [r4, #8]
 800568a:	2e00      	cmp	r6, #0
 800568c:	bfa2      	ittt	ge
 800568e:	6821      	ldrge	r1, [r4, #0]
 8005690:	f021 0104 	bicge.w	r1, r1, #4
 8005694:	6021      	strge	r1, [r4, #0]
 8005696:	b90d      	cbnz	r5, 800569c <_printf_i+0x118>
 8005698:	2e00      	cmp	r6, #0
 800569a:	d04d      	beq.n	8005738 <_printf_i+0x1b4>
 800569c:	4616      	mov	r6, r2
 800569e:	fbb5 f1f3 	udiv	r1, r5, r3
 80056a2:	fb03 5711 	mls	r7, r3, r1, r5
 80056a6:	5dc7      	ldrb	r7, [r0, r7]
 80056a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056ac:	462f      	mov	r7, r5
 80056ae:	42bb      	cmp	r3, r7
 80056b0:	460d      	mov	r5, r1
 80056b2:	d9f4      	bls.n	800569e <_printf_i+0x11a>
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d10b      	bne.n	80056d0 <_printf_i+0x14c>
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	07df      	lsls	r7, r3, #31
 80056bc:	d508      	bpl.n	80056d0 <_printf_i+0x14c>
 80056be:	6923      	ldr	r3, [r4, #16]
 80056c0:	6861      	ldr	r1, [r4, #4]
 80056c2:	4299      	cmp	r1, r3
 80056c4:	bfde      	ittt	le
 80056c6:	2330      	movle	r3, #48	; 0x30
 80056c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056cc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80056d0:	1b92      	subs	r2, r2, r6
 80056d2:	6122      	str	r2, [r4, #16]
 80056d4:	f8cd a000 	str.w	sl, [sp]
 80056d8:	464b      	mov	r3, r9
 80056da:	aa03      	add	r2, sp, #12
 80056dc:	4621      	mov	r1, r4
 80056de:	4640      	mov	r0, r8
 80056e0:	f7ff fee2 	bl	80054a8 <_printf_common>
 80056e4:	3001      	adds	r0, #1
 80056e6:	d14c      	bne.n	8005782 <_printf_i+0x1fe>
 80056e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056ec:	b004      	add	sp, #16
 80056ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f2:	4835      	ldr	r0, [pc, #212]	; (80057c8 <_printf_i+0x244>)
 80056f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	680e      	ldr	r6, [r1, #0]
 80056fc:	061f      	lsls	r7, r3, #24
 80056fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8005702:	600e      	str	r6, [r1, #0]
 8005704:	d514      	bpl.n	8005730 <_printf_i+0x1ac>
 8005706:	07d9      	lsls	r1, r3, #31
 8005708:	bf44      	itt	mi
 800570a:	f043 0320 	orrmi.w	r3, r3, #32
 800570e:	6023      	strmi	r3, [r4, #0]
 8005710:	b91d      	cbnz	r5, 800571a <_printf_i+0x196>
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	f023 0320 	bic.w	r3, r3, #32
 8005718:	6023      	str	r3, [r4, #0]
 800571a:	2310      	movs	r3, #16
 800571c:	e7b0      	b.n	8005680 <_printf_i+0xfc>
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	f043 0320 	orr.w	r3, r3, #32
 8005724:	6023      	str	r3, [r4, #0]
 8005726:	2378      	movs	r3, #120	; 0x78
 8005728:	4828      	ldr	r0, [pc, #160]	; (80057cc <_printf_i+0x248>)
 800572a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800572e:	e7e3      	b.n	80056f8 <_printf_i+0x174>
 8005730:	065e      	lsls	r6, r3, #25
 8005732:	bf48      	it	mi
 8005734:	b2ad      	uxthmi	r5, r5
 8005736:	e7e6      	b.n	8005706 <_printf_i+0x182>
 8005738:	4616      	mov	r6, r2
 800573a:	e7bb      	b.n	80056b4 <_printf_i+0x130>
 800573c:	680b      	ldr	r3, [r1, #0]
 800573e:	6826      	ldr	r6, [r4, #0]
 8005740:	6960      	ldr	r0, [r4, #20]
 8005742:	1d1d      	adds	r5, r3, #4
 8005744:	600d      	str	r5, [r1, #0]
 8005746:	0635      	lsls	r5, r6, #24
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	d501      	bpl.n	8005750 <_printf_i+0x1cc>
 800574c:	6018      	str	r0, [r3, #0]
 800574e:	e002      	b.n	8005756 <_printf_i+0x1d2>
 8005750:	0671      	lsls	r1, r6, #25
 8005752:	d5fb      	bpl.n	800574c <_printf_i+0x1c8>
 8005754:	8018      	strh	r0, [r3, #0]
 8005756:	2300      	movs	r3, #0
 8005758:	6123      	str	r3, [r4, #16]
 800575a:	4616      	mov	r6, r2
 800575c:	e7ba      	b.n	80056d4 <_printf_i+0x150>
 800575e:	680b      	ldr	r3, [r1, #0]
 8005760:	1d1a      	adds	r2, r3, #4
 8005762:	600a      	str	r2, [r1, #0]
 8005764:	681e      	ldr	r6, [r3, #0]
 8005766:	6862      	ldr	r2, [r4, #4]
 8005768:	2100      	movs	r1, #0
 800576a:	4630      	mov	r0, r6
 800576c:	f7fa fd38 	bl	80001e0 <memchr>
 8005770:	b108      	cbz	r0, 8005776 <_printf_i+0x1f2>
 8005772:	1b80      	subs	r0, r0, r6
 8005774:	6060      	str	r0, [r4, #4]
 8005776:	6863      	ldr	r3, [r4, #4]
 8005778:	6123      	str	r3, [r4, #16]
 800577a:	2300      	movs	r3, #0
 800577c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005780:	e7a8      	b.n	80056d4 <_printf_i+0x150>
 8005782:	6923      	ldr	r3, [r4, #16]
 8005784:	4632      	mov	r2, r6
 8005786:	4649      	mov	r1, r9
 8005788:	4640      	mov	r0, r8
 800578a:	47d0      	blx	sl
 800578c:	3001      	adds	r0, #1
 800578e:	d0ab      	beq.n	80056e8 <_printf_i+0x164>
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	079b      	lsls	r3, r3, #30
 8005794:	d413      	bmi.n	80057be <_printf_i+0x23a>
 8005796:	68e0      	ldr	r0, [r4, #12]
 8005798:	9b03      	ldr	r3, [sp, #12]
 800579a:	4298      	cmp	r0, r3
 800579c:	bfb8      	it	lt
 800579e:	4618      	movlt	r0, r3
 80057a0:	e7a4      	b.n	80056ec <_printf_i+0x168>
 80057a2:	2301      	movs	r3, #1
 80057a4:	4632      	mov	r2, r6
 80057a6:	4649      	mov	r1, r9
 80057a8:	4640      	mov	r0, r8
 80057aa:	47d0      	blx	sl
 80057ac:	3001      	adds	r0, #1
 80057ae:	d09b      	beq.n	80056e8 <_printf_i+0x164>
 80057b0:	3501      	adds	r5, #1
 80057b2:	68e3      	ldr	r3, [r4, #12]
 80057b4:	9903      	ldr	r1, [sp, #12]
 80057b6:	1a5b      	subs	r3, r3, r1
 80057b8:	42ab      	cmp	r3, r5
 80057ba:	dcf2      	bgt.n	80057a2 <_printf_i+0x21e>
 80057bc:	e7eb      	b.n	8005796 <_printf_i+0x212>
 80057be:	2500      	movs	r5, #0
 80057c0:	f104 0619 	add.w	r6, r4, #25
 80057c4:	e7f5      	b.n	80057b2 <_printf_i+0x22e>
 80057c6:	bf00      	nop
 80057c8:	08005b01 	.word	0x08005b01
 80057cc:	08005b12 	.word	0x08005b12

080057d0 <memcpy>:
 80057d0:	440a      	add	r2, r1
 80057d2:	4291      	cmp	r1, r2
 80057d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80057d8:	d100      	bne.n	80057dc <memcpy+0xc>
 80057da:	4770      	bx	lr
 80057dc:	b510      	push	{r4, lr}
 80057de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057e6:	4291      	cmp	r1, r2
 80057e8:	d1f9      	bne.n	80057de <memcpy+0xe>
 80057ea:	bd10      	pop	{r4, pc}

080057ec <memmove>:
 80057ec:	4288      	cmp	r0, r1
 80057ee:	b510      	push	{r4, lr}
 80057f0:	eb01 0402 	add.w	r4, r1, r2
 80057f4:	d902      	bls.n	80057fc <memmove+0x10>
 80057f6:	4284      	cmp	r4, r0
 80057f8:	4623      	mov	r3, r4
 80057fa:	d807      	bhi.n	800580c <memmove+0x20>
 80057fc:	1e43      	subs	r3, r0, #1
 80057fe:	42a1      	cmp	r1, r4
 8005800:	d008      	beq.n	8005814 <memmove+0x28>
 8005802:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005806:	f803 2f01 	strb.w	r2, [r3, #1]!
 800580a:	e7f8      	b.n	80057fe <memmove+0x12>
 800580c:	4402      	add	r2, r0
 800580e:	4601      	mov	r1, r0
 8005810:	428a      	cmp	r2, r1
 8005812:	d100      	bne.n	8005816 <memmove+0x2a>
 8005814:	bd10      	pop	{r4, pc}
 8005816:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800581a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800581e:	e7f7      	b.n	8005810 <memmove+0x24>

08005820 <_free_r>:
 8005820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005822:	2900      	cmp	r1, #0
 8005824:	d048      	beq.n	80058b8 <_free_r+0x98>
 8005826:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800582a:	9001      	str	r0, [sp, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	f1a1 0404 	sub.w	r4, r1, #4
 8005832:	bfb8      	it	lt
 8005834:	18e4      	addlt	r4, r4, r3
 8005836:	f000 f8d3 	bl	80059e0 <__malloc_lock>
 800583a:	4a20      	ldr	r2, [pc, #128]	; (80058bc <_free_r+0x9c>)
 800583c:	9801      	ldr	r0, [sp, #4]
 800583e:	6813      	ldr	r3, [r2, #0]
 8005840:	4615      	mov	r5, r2
 8005842:	b933      	cbnz	r3, 8005852 <_free_r+0x32>
 8005844:	6063      	str	r3, [r4, #4]
 8005846:	6014      	str	r4, [r2, #0]
 8005848:	b003      	add	sp, #12
 800584a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800584e:	f000 b8cd 	b.w	80059ec <__malloc_unlock>
 8005852:	42a3      	cmp	r3, r4
 8005854:	d90b      	bls.n	800586e <_free_r+0x4e>
 8005856:	6821      	ldr	r1, [r4, #0]
 8005858:	1862      	adds	r2, r4, r1
 800585a:	4293      	cmp	r3, r2
 800585c:	bf04      	itt	eq
 800585e:	681a      	ldreq	r2, [r3, #0]
 8005860:	685b      	ldreq	r3, [r3, #4]
 8005862:	6063      	str	r3, [r4, #4]
 8005864:	bf04      	itt	eq
 8005866:	1852      	addeq	r2, r2, r1
 8005868:	6022      	streq	r2, [r4, #0]
 800586a:	602c      	str	r4, [r5, #0]
 800586c:	e7ec      	b.n	8005848 <_free_r+0x28>
 800586e:	461a      	mov	r2, r3
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	b10b      	cbz	r3, 8005878 <_free_r+0x58>
 8005874:	42a3      	cmp	r3, r4
 8005876:	d9fa      	bls.n	800586e <_free_r+0x4e>
 8005878:	6811      	ldr	r1, [r2, #0]
 800587a:	1855      	adds	r5, r2, r1
 800587c:	42a5      	cmp	r5, r4
 800587e:	d10b      	bne.n	8005898 <_free_r+0x78>
 8005880:	6824      	ldr	r4, [r4, #0]
 8005882:	4421      	add	r1, r4
 8005884:	1854      	adds	r4, r2, r1
 8005886:	42a3      	cmp	r3, r4
 8005888:	6011      	str	r1, [r2, #0]
 800588a:	d1dd      	bne.n	8005848 <_free_r+0x28>
 800588c:	681c      	ldr	r4, [r3, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	6053      	str	r3, [r2, #4]
 8005892:	4421      	add	r1, r4
 8005894:	6011      	str	r1, [r2, #0]
 8005896:	e7d7      	b.n	8005848 <_free_r+0x28>
 8005898:	d902      	bls.n	80058a0 <_free_r+0x80>
 800589a:	230c      	movs	r3, #12
 800589c:	6003      	str	r3, [r0, #0]
 800589e:	e7d3      	b.n	8005848 <_free_r+0x28>
 80058a0:	6825      	ldr	r5, [r4, #0]
 80058a2:	1961      	adds	r1, r4, r5
 80058a4:	428b      	cmp	r3, r1
 80058a6:	bf04      	itt	eq
 80058a8:	6819      	ldreq	r1, [r3, #0]
 80058aa:	685b      	ldreq	r3, [r3, #4]
 80058ac:	6063      	str	r3, [r4, #4]
 80058ae:	bf04      	itt	eq
 80058b0:	1949      	addeq	r1, r1, r5
 80058b2:	6021      	streq	r1, [r4, #0]
 80058b4:	6054      	str	r4, [r2, #4]
 80058b6:	e7c7      	b.n	8005848 <_free_r+0x28>
 80058b8:	b003      	add	sp, #12
 80058ba:	bd30      	pop	{r4, r5, pc}
 80058bc:	20000094 	.word	0x20000094

080058c0 <_malloc_r>:
 80058c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c2:	1ccd      	adds	r5, r1, #3
 80058c4:	f025 0503 	bic.w	r5, r5, #3
 80058c8:	3508      	adds	r5, #8
 80058ca:	2d0c      	cmp	r5, #12
 80058cc:	bf38      	it	cc
 80058ce:	250c      	movcc	r5, #12
 80058d0:	2d00      	cmp	r5, #0
 80058d2:	4606      	mov	r6, r0
 80058d4:	db01      	blt.n	80058da <_malloc_r+0x1a>
 80058d6:	42a9      	cmp	r1, r5
 80058d8:	d903      	bls.n	80058e2 <_malloc_r+0x22>
 80058da:	230c      	movs	r3, #12
 80058dc:	6033      	str	r3, [r6, #0]
 80058de:	2000      	movs	r0, #0
 80058e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058e2:	f000 f87d 	bl	80059e0 <__malloc_lock>
 80058e6:	4921      	ldr	r1, [pc, #132]	; (800596c <_malloc_r+0xac>)
 80058e8:	680a      	ldr	r2, [r1, #0]
 80058ea:	4614      	mov	r4, r2
 80058ec:	b99c      	cbnz	r4, 8005916 <_malloc_r+0x56>
 80058ee:	4f20      	ldr	r7, [pc, #128]	; (8005970 <_malloc_r+0xb0>)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	b923      	cbnz	r3, 80058fe <_malloc_r+0x3e>
 80058f4:	4621      	mov	r1, r4
 80058f6:	4630      	mov	r0, r6
 80058f8:	f000 f862 	bl	80059c0 <_sbrk_r>
 80058fc:	6038      	str	r0, [r7, #0]
 80058fe:	4629      	mov	r1, r5
 8005900:	4630      	mov	r0, r6
 8005902:	f000 f85d 	bl	80059c0 <_sbrk_r>
 8005906:	1c43      	adds	r3, r0, #1
 8005908:	d123      	bne.n	8005952 <_malloc_r+0x92>
 800590a:	230c      	movs	r3, #12
 800590c:	6033      	str	r3, [r6, #0]
 800590e:	4630      	mov	r0, r6
 8005910:	f000 f86c 	bl	80059ec <__malloc_unlock>
 8005914:	e7e3      	b.n	80058de <_malloc_r+0x1e>
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	1b5b      	subs	r3, r3, r5
 800591a:	d417      	bmi.n	800594c <_malloc_r+0x8c>
 800591c:	2b0b      	cmp	r3, #11
 800591e:	d903      	bls.n	8005928 <_malloc_r+0x68>
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	441c      	add	r4, r3
 8005924:	6025      	str	r5, [r4, #0]
 8005926:	e004      	b.n	8005932 <_malloc_r+0x72>
 8005928:	6863      	ldr	r3, [r4, #4]
 800592a:	42a2      	cmp	r2, r4
 800592c:	bf0c      	ite	eq
 800592e:	600b      	streq	r3, [r1, #0]
 8005930:	6053      	strne	r3, [r2, #4]
 8005932:	4630      	mov	r0, r6
 8005934:	f000 f85a 	bl	80059ec <__malloc_unlock>
 8005938:	f104 000b 	add.w	r0, r4, #11
 800593c:	1d23      	adds	r3, r4, #4
 800593e:	f020 0007 	bic.w	r0, r0, #7
 8005942:	1ac2      	subs	r2, r0, r3
 8005944:	d0cc      	beq.n	80058e0 <_malloc_r+0x20>
 8005946:	1a1b      	subs	r3, r3, r0
 8005948:	50a3      	str	r3, [r4, r2]
 800594a:	e7c9      	b.n	80058e0 <_malloc_r+0x20>
 800594c:	4622      	mov	r2, r4
 800594e:	6864      	ldr	r4, [r4, #4]
 8005950:	e7cc      	b.n	80058ec <_malloc_r+0x2c>
 8005952:	1cc4      	adds	r4, r0, #3
 8005954:	f024 0403 	bic.w	r4, r4, #3
 8005958:	42a0      	cmp	r0, r4
 800595a:	d0e3      	beq.n	8005924 <_malloc_r+0x64>
 800595c:	1a21      	subs	r1, r4, r0
 800595e:	4630      	mov	r0, r6
 8005960:	f000 f82e 	bl	80059c0 <_sbrk_r>
 8005964:	3001      	adds	r0, #1
 8005966:	d1dd      	bne.n	8005924 <_malloc_r+0x64>
 8005968:	e7cf      	b.n	800590a <_malloc_r+0x4a>
 800596a:	bf00      	nop
 800596c:	20000094 	.word	0x20000094
 8005970:	20000098 	.word	0x20000098

08005974 <_realloc_r>:
 8005974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005976:	4607      	mov	r7, r0
 8005978:	4614      	mov	r4, r2
 800597a:	460e      	mov	r6, r1
 800597c:	b921      	cbnz	r1, 8005988 <_realloc_r+0x14>
 800597e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005982:	4611      	mov	r1, r2
 8005984:	f7ff bf9c 	b.w	80058c0 <_malloc_r>
 8005988:	b922      	cbnz	r2, 8005994 <_realloc_r+0x20>
 800598a:	f7ff ff49 	bl	8005820 <_free_r>
 800598e:	4625      	mov	r5, r4
 8005990:	4628      	mov	r0, r5
 8005992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005994:	f000 f830 	bl	80059f8 <_malloc_usable_size_r>
 8005998:	42a0      	cmp	r0, r4
 800599a:	d20f      	bcs.n	80059bc <_realloc_r+0x48>
 800599c:	4621      	mov	r1, r4
 800599e:	4638      	mov	r0, r7
 80059a0:	f7ff ff8e 	bl	80058c0 <_malloc_r>
 80059a4:	4605      	mov	r5, r0
 80059a6:	2800      	cmp	r0, #0
 80059a8:	d0f2      	beq.n	8005990 <_realloc_r+0x1c>
 80059aa:	4631      	mov	r1, r6
 80059ac:	4622      	mov	r2, r4
 80059ae:	f7ff ff0f 	bl	80057d0 <memcpy>
 80059b2:	4631      	mov	r1, r6
 80059b4:	4638      	mov	r0, r7
 80059b6:	f7ff ff33 	bl	8005820 <_free_r>
 80059ba:	e7e9      	b.n	8005990 <_realloc_r+0x1c>
 80059bc:	4635      	mov	r5, r6
 80059be:	e7e7      	b.n	8005990 <_realloc_r+0x1c>

080059c0 <_sbrk_r>:
 80059c0:	b538      	push	{r3, r4, r5, lr}
 80059c2:	4d06      	ldr	r5, [pc, #24]	; (80059dc <_sbrk_r+0x1c>)
 80059c4:	2300      	movs	r3, #0
 80059c6:	4604      	mov	r4, r0
 80059c8:	4608      	mov	r0, r1
 80059ca:	602b      	str	r3, [r5, #0]
 80059cc:	f7fb fd96 	bl	80014fc <_sbrk>
 80059d0:	1c43      	adds	r3, r0, #1
 80059d2:	d102      	bne.n	80059da <_sbrk_r+0x1a>
 80059d4:	682b      	ldr	r3, [r5, #0]
 80059d6:	b103      	cbz	r3, 80059da <_sbrk_r+0x1a>
 80059d8:	6023      	str	r3, [r4, #0]
 80059da:	bd38      	pop	{r3, r4, r5, pc}
 80059dc:	2000022c 	.word	0x2000022c

080059e0 <__malloc_lock>:
 80059e0:	4801      	ldr	r0, [pc, #4]	; (80059e8 <__malloc_lock+0x8>)
 80059e2:	f000 b811 	b.w	8005a08 <__retarget_lock_acquire_recursive>
 80059e6:	bf00      	nop
 80059e8:	20000234 	.word	0x20000234

080059ec <__malloc_unlock>:
 80059ec:	4801      	ldr	r0, [pc, #4]	; (80059f4 <__malloc_unlock+0x8>)
 80059ee:	f000 b80c 	b.w	8005a0a <__retarget_lock_release_recursive>
 80059f2:	bf00      	nop
 80059f4:	20000234 	.word	0x20000234

080059f8 <_malloc_usable_size_r>:
 80059f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059fc:	1f18      	subs	r0, r3, #4
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	bfbc      	itt	lt
 8005a02:	580b      	ldrlt	r3, [r1, r0]
 8005a04:	18c0      	addlt	r0, r0, r3
 8005a06:	4770      	bx	lr

08005a08 <__retarget_lock_acquire_recursive>:
 8005a08:	4770      	bx	lr

08005a0a <__retarget_lock_release_recursive>:
 8005a0a:	4770      	bx	lr

08005a0c <_init>:
 8005a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0e:	bf00      	nop
 8005a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a12:	bc08      	pop	{r3}
 8005a14:	469e      	mov	lr, r3
 8005a16:	4770      	bx	lr

08005a18 <_fini>:
 8005a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1a:	bf00      	nop
 8005a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a1e:	bc08      	pop	{r3}
 8005a20:	469e      	mov	lr, r3
 8005a22:	4770      	bx	lr
