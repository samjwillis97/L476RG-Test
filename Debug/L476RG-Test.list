
L476RG-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004de4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004f74  08004f74  00014f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800502c  0800502c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800502c  0800502c  0001502c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005034  08005034  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005034  08005034  00015034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005038  08005038  00015038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800503c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000070  080050ac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  080050ac  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103f1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f9  00000000  00000000  00030491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00032590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  000332a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002831b  00000000  00000000  00033ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db39  00000000  00000000  0005c213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fce87  00000000  00000000  00069d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00166bd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a58  00000000  00000000  00166c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f5c 	.word	0x08004f5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004f5c 	.word	0x08004f5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <Lcd_create>:
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin,
		Lcd_ModeTypeDef mode,
		bool cursor,
		bool blink)
{
 8000578:	b5b0      	push	{r4, r5, r7, lr}
 800057a:	b08c      	sub	sp, #48	; 0x30
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
 8000584:	603b      	str	r3, [r7, #0]

	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000586:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800058a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	lcd.en_pin = en_pin;
 800058e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000592:	853b      	strh	r3, [r7, #40]	; 0x28
	lcd.en_port = en_port;
 8000594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000596:	627b      	str	r3, [r7, #36]	; 0x24

	lcd.rs_pin = rs_pin;
 8000598:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800059c:	843b      	strh	r3, [r7, #32]
	lcd.rs_port = rs_port;
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	61fb      	str	r3, [r7, #28]

	lcd.data_pin = pin;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	61bb      	str	r3, [r7, #24]
	lcd.data_port = port;
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	617b      	str	r3, [r7, #20]

	lcd.cursor = cursor;
 80005aa:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80005ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	lcd.blink = blink;
 80005b2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80005b6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	Lcd_init(&lcd);		// Some sort of pointer to the lcd type def just init
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 f80e 	bl	80005e0 <Lcd_init>

	return lcd;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	461d      	mov	r5, r3
 80005c8:	f107 0414 	add.w	r4, r7, #20
 80005cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005d0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80005d4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80005d8:	68f8      	ldr	r0, [r7, #12]
 80005da:	3730      	adds	r7, #48	; 0x30
 80005dc:	46bd      	mov	sp, r7
 80005de:	bdb0      	pop	{r4, r5, r7, pc}

080005e0 <Lcd_init>:

/**
 * Init 16 x 2 LCD without cursor
 */
void Lcd_init(Lcd_HandleTypeDef *lcd) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	if (lcd->mode == LCD_4_BIT_MODE)	// gets mode from the struct that lcd points to
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7d9b      	ldrb	r3, [r3, #22]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d121      	bne.n	8000634 <Lcd_init+0x54>
	{
//		lcd_write_command(lcd, 0x33);		// 0011 0011 ??
//		lcd_write_command(lcd, 0x32);		// 0011 0010 ??
//		lcd_write_command(lcd, FUNCTION_SET | OPT_N);	// Func Set 4-Bit Mode, 2 Lines

		HAL_Delay(50);
 80005f0:	2032      	movs	r0, #50	; 0x32
 80005f2:	f000 fe35 	bl	8001260 <HAL_Delay>
		lcd_write_nib_command(lcd, 0x30);		// Func Set
 80005f6:	2130      	movs	r1, #48	; 0x30
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f000 f98f 	bl	800091c <lcd_write_nib_command>
		HAL_Delay(5);
 80005fe:	2005      	movs	r0, #5
 8000600:	f000 fe2e 	bl	8001260 <HAL_Delay>
		lcd_write_nib_command(lcd, 0x30);		// Func Set
 8000604:	2130      	movs	r1, #48	; 0x30
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f000 f988 	bl	800091c <lcd_write_nib_command>
		HAL_Delay(1);
 800060c:	2001      	movs	r0, #1
 800060e:	f000 fe27 	bl	8001260 <HAL_Delay>
		lcd_write_nib_command(lcd, 0x30);		// Func Set
 8000612:	2130      	movs	r1, #48	; 0x30
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f000 f981 	bl	800091c <lcd_write_nib_command>

		lcd_write_nib_command(lcd, FUNCTION_SET);			// Func Set 4-Bit
 800061a:	2120      	movs	r1, #32
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 f97d 	bl	800091c <lcd_write_nib_command>
		lcd_write_command(lcd, FUNCTION_SET | OPT_N);	// Func Set 4-Bit Mode, 2 Lines
 8000622:	2128      	movs	r1, #40	; 0x28
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f000 f8dd 	bl	80007e4 <lcd_write_command>

		lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL);	// Display OFF
 800062a:	2108      	movs	r1, #8
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f000 f8d9 	bl	80007e4 <lcd_write_command>
 8000632:	e003      	b.n	800063c <Lcd_init+0x5c>
	}
	else {
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N); // ?
 8000634:	2138      	movs	r1, #56	; 0x38
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f000 f8d4 	bl	80007e4 <lcd_write_command>
	}

	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear Display
 800063c:	2101      	movs	r1, #1
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f000 f8d0 	bl	80007e4 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment Cursor?
 8000644:	2106      	movs	r1, #6
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f000 f8cc 	bl	80007e4 <lcd_write_command>

	// Checking for Cursor and Blink, could change and use a variable
	if ((lcd->blink == true) && (lcd->cursor == true)) {
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	7e1b      	ldrb	r3, [r3, #24]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d108      	bne.n	8000666 <Lcd_init+0x86>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	7ddb      	ldrb	r3, [r3, #23]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d104      	bne.n	8000666 <Lcd_init+0x86>
		lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_C | OPT_B);
 800065c:	210f      	movs	r1, #15
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f000 f8c0 	bl	80007e4 <lcd_write_command>
 8000664:	e01e      	b.n	80006a4 <Lcd_init+0xc4>
	}
	else if ((lcd->blink == true) && (lcd->cursor == false)) {
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	7e1b      	ldrb	r3, [r3, #24]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d108      	bne.n	8000680 <Lcd_init+0xa0>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	7ddb      	ldrb	r3, [r3, #23]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d104      	bne.n	8000680 <Lcd_init+0xa0>
		lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_B);
 8000676:	210d      	movs	r1, #13
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f000 f8b3 	bl	80007e4 <lcd_write_command>
 800067e:	e011      	b.n	80006a4 <Lcd_init+0xc4>
	}
	else if ((lcd->blink == false) && (lcd->cursor == true)) {
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	7e1b      	ldrb	r3, [r3, #24]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d108      	bne.n	800069a <Lcd_init+0xba>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	7ddb      	ldrb	r3, [r3, #23]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d104      	bne.n	800069a <Lcd_init+0xba>
		lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_C);
 8000690:	210e      	movs	r1, #14
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f000 f8a6 	bl	80007e4 <lcd_write_command>
 8000698:	e004      	b.n	80006a4 <Lcd_init+0xc4>
	}
	else {
		lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);
 800069a:	210c      	movs	r1, #12
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f000 f8a1 	bl	80007e4 <lcd_write_command>
	}
}
 80006a2:	bf00      	nop
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <Lcd_string>:


/**
 * Write String in current cursor position
 */
void Lcd_string(Lcd_HandleTypeDef *lcd, char *string) {
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++) {
 80006b6:	2300      	movs	r3, #0
 80006b8:	73fb      	strb	r3, [r7, #15]
 80006ba:	e00a      	b.n	80006d2 <Lcd_string+0x26>
		lcd_write_data(lcd, string[i]);
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	683a      	ldr	r2, [r7, #0]
 80006c0:	4413      	add	r3, r2
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4619      	mov	r1, r3
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f000 f8ba 	bl	8000840 <lcd_write_data>
	for (uint8_t i = 0; i < strlen(string); i++) {
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	3301      	adds	r3, #1
 80006d0:	73fb      	strb	r3, [r7, #15]
 80006d2:	7bfc      	ldrb	r4, [r7, #15]
 80006d4:	6838      	ldr	r0, [r7, #0]
 80006d6:	f7ff fd7b 	bl	80001d0 <strlen>
 80006da:	4603      	mov	r3, r0
 80006dc:	429c      	cmp	r4, r3
 80006de:	d3ed      	bcc.n	80006bc <Lcd_string+0x10>
	}
}
 80006e0:	bf00      	nop
 80006e2:	bf00      	nop
 80006e4:	3714      	adds	r7, #20
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd90      	pop	{r4, r7, pc}
	...

080006ec <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef *lcd, uint8_t row, uint8_t col) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	70fb      	strb	r3, [r7, #3]
 80006f8:	4613      	mov	r3, r2
 80006fa:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80006fc:	78fb      	ldrb	r3, [r7, #3]
 80006fe:	4a07      	ldr	r2, [pc, #28]	; (800071c <Lcd_cursor+0x30>)
 8000700:	5cd2      	ldrb	r2, [r2, r3]
 8000702:	78bb      	ldrb	r3, [r7, #2]
 8000704:	4413      	add	r3, r2
 8000706:	b2db      	uxtb	r3, r3
 8000708:	3b80      	subs	r3, #128	; 0x80
 800070a:	b2db      	uxtb	r3, r3
 800070c:	4619      	mov	r1, r3
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f000 f868 	bl	80007e4 <lcd_write_command>
	#endif
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	08004fac 	.word	0x08004fac

08000720 <Lcd_toggle_cursor>:
}

/**
 * Toggle the Cursor
 */
void Lcd_toggle_cursor(Lcd_HandleTypeDef *lcd) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	if (lcd->cursor == true) {
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	7ddb      	ldrb	r3, [r3, #23]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d110      	bne.n	8000752 <Lcd_toggle_cursor+0x32>
		if (lcd->blink == true) {
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	7e1b      	ldrb	r3, [r3, #24]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d104      	bne.n	8000742 <Lcd_toggle_cursor+0x22>
			// Turn off cursor, keeping blink on
			lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_B);
 8000738:	210d      	movs	r1, #13
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f000 f852 	bl	80007e4 <lcd_write_command>
 8000740:	e003      	b.n	800074a <Lcd_toggle_cursor+0x2a>
		}
		else {
			// Turn off cursor, keeping blink off
			lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D );
 8000742:	210c      	movs	r1, #12
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f000 f84d 	bl	80007e4 <lcd_write_command>
		}
		lcd->cursor = false;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2200      	movs	r2, #0
 800074e:	75da      	strb	r2, [r3, #23]
			// Turn on cursor, keeping blink off
			lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_C);
		}
		lcd->cursor = true;
	}
}
 8000750:	e013      	b.n	800077a <Lcd_toggle_cursor+0x5a>
	else if (lcd->cursor == false) {
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	7ddb      	ldrb	r3, [r3, #23]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d10f      	bne.n	800077a <Lcd_toggle_cursor+0x5a>
		if (lcd->blink == true) {
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	7e1b      	ldrb	r3, [r3, #24]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d104      	bne.n	800076c <Lcd_toggle_cursor+0x4c>
			lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_B | OPT_C);
 8000762:	210f      	movs	r1, #15
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f000 f83d 	bl	80007e4 <lcd_write_command>
 800076a:	e003      	b.n	8000774 <Lcd_toggle_cursor+0x54>
			lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_C);
 800076c:	210e      	movs	r1, #14
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f000 f838 	bl	80007e4 <lcd_write_command>
		lcd->cursor = true;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2201      	movs	r2, #1
 8000778:	75da      	strb	r2, [r3, #23]
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <Lcd_toggle_blink>:

/**
 * Toggle Blinking
 */
void Lcd_toggle_blink(Lcd_HandleTypeDef *lcd) {
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
	if (lcd->blink == true) {
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	7e1b      	ldrb	r3, [r3, #24]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d110      	bne.n	80007b4 <Lcd_toggle_blink+0x32>
		if (lcd->cursor == true) {
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	7ddb      	ldrb	r3, [r3, #23]
 8000796:	2b01      	cmp	r3, #1
 8000798:	d104      	bne.n	80007a4 <Lcd_toggle_blink+0x22>
			// Turn off blink, keeping cursor on
			lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_C);
 800079a:	210e      	movs	r1, #14
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f000 f821 	bl	80007e4 <lcd_write_command>
 80007a2:	e003      	b.n	80007ac <Lcd_toggle_blink+0x2a>
		}
		else {
			// Turn off blink, keeping cursor off
			lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);
 80007a4:	210c      	movs	r1, #12
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f000 f81c 	bl	80007e4 <lcd_write_command>
		}
		lcd->blink = false;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2200      	movs	r2, #0
 80007b0:	761a      	strb	r2, [r3, #24]
			// Turn on blink, keeping cursor off
			lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_B);
		}
		lcd->blink = true;
	}
}
 80007b2:	e013      	b.n	80007dc <Lcd_toggle_blink+0x5a>
	else if (lcd->blink == false) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	7e1b      	ldrb	r3, [r3, #24]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d10f      	bne.n	80007dc <Lcd_toggle_blink+0x5a>
		if (lcd->cursor == true) {
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	7ddb      	ldrb	r3, [r3, #23]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d104      	bne.n	80007ce <Lcd_toggle_blink+0x4c>
			lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_C | OPT_B);
 80007c4:	210f      	movs	r1, #15
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f000 f80c 	bl	80007e4 <lcd_write_command>
 80007cc:	e003      	b.n	80007d6 <Lcd_toggle_blink+0x54>
			lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_B);
 80007ce:	210d      	movs	r1, #13
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f000 f807 	bl	80007e4 <lcd_write_command>
		lcd->blink = true;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2201      	movs	r2, #1
 80007da:	761a      	strb	r2, [r3, #24]
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <lcd_write_command>:

/************************************** Static function definition **************************************/
/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef *lcd, uint8_t command) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	460b      	mov	r3, r1
 80007ee:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);	// Write to Command Register
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	6898      	ldr	r0, [r3, #8]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	899b      	ldrh	r3, [r3, #12]
 80007f8:	2200      	movs	r2, #0
 80007fa:	4619      	mov	r1, r3
 80007fc:	f001 ffb8 	bl	8002770 <HAL_GPIO_WritePin>

	if (lcd->mode == LCD_4_BIT_MODE) {
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	7d9b      	ldrb	r3, [r3, #22]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d111      	bne.n	800082c <lcd_write_command+0x48>
		// Writing Command in two seperate nibs due to 4 Bit Mode
		lcd_write(lcd, (command >> 4), LCD_NIB);	// Send 4 MSB
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	091b      	lsrs	r3, r3, #4
 800080c:	b2db      	uxtb	r3, r3
 800080e:	2204      	movs	r2, #4
 8000810:	4619      	mov	r1, r3
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f000 f842 	bl	800089c <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);	// Send 4 LSB
 8000818:	78fb      	ldrb	r3, [r7, #3]
 800081a:	f003 030f 	and.w	r3, r3, #15
 800081e:	b2db      	uxtb	r3, r3
 8000820:	2204      	movs	r2, #4
 8000822:	4619      	mov	r1, r3
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f000 f839 	bl	800089c <lcd_write>
	}
	else {
		// Write Command in one go with 8 bit
		lcd_write(lcd, command, LCD_BYTE);
	}
}
 800082a:	e005      	b.n	8000838 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 800082c:	78fb      	ldrb	r3, [r7, #3]
 800082e:	2208      	movs	r2, #8
 8000830:	4619      	mov	r1, r3
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f000 f832 	bl	800089c <lcd_write>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef *lcd, uint8_t data) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	460b      	mov	r3, r1
 800084a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6898      	ldr	r0, [r3, #8]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	899b      	ldrh	r3, [r3, #12]
 8000854:	2201      	movs	r2, #1
 8000856:	4619      	mov	r1, r3
 8000858:	f001 ff8a 	bl	8002770 <HAL_GPIO_WritePin>

	// Writing Command in two seperate nibs due to 4 Bit Mode
	if(lcd->mode == LCD_4_BIT_MODE) {
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	7d9b      	ldrb	r3, [r3, #22]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d111      	bne.n	8000888 <lcd_write_data+0x48>
		lcd_write(lcd, data >> 4, LCD_NIB);		// Send 4 MSB
 8000864:	78fb      	ldrb	r3, [r7, #3]
 8000866:	091b      	lsrs	r3, r3, #4
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2204      	movs	r2, #4
 800086c:	4619      	mov	r1, r3
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f000 f814 	bl	800089c <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);	// Send 4 LSB
 8000874:	78fb      	ldrb	r3, [r7, #3]
 8000876:	f003 030f 	and.w	r3, r3, #15
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2204      	movs	r2, #4
 800087e:	4619      	mov	r1, r3
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f000 f80b 	bl	800089c <lcd_write>
	}
	else {
		// Write Command in one go with 8 bit
		lcd_write(lcd, data, LCD_BYTE);
	}
}
 8000886:	e005      	b.n	8000894 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000888:	78fb      	ldrb	r3, [r7, #3]
 800088a:	2208      	movs	r2, #8
 800088c:	4619      	mov	r1, r3
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f000 f804 	bl	800089c <lcd_write>
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <lcd_write>:


/**
 * Set len bits on the bus toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef *lcd, uint8_t data, uint8_t len) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	70fb      	strb	r3, [r7, #3]
 80008a8:	4613      	mov	r3, r2
 80008aa:	70bb      	strb	r3, [r7, #2]
	for (uint8_t i = 0; i < len; i++) {
 80008ac:	2300      	movs	r3, #0
 80008ae:	73fb      	strb	r3, [r7, #15]
 80008b0:	e019      	b.n	80008e6 <lcd_write+0x4a>
		// Right shifts data, then gets the least significant bit to write
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	4413      	add	r3, r2
 80008bc:	6818      	ldr	r0, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	685a      	ldr	r2, [r3, #4]
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	4413      	add	r3, r2
 80008c8:	8819      	ldrh	r1, [r3, #0]
 80008ca:	78fa      	ldrb	r2, [r7, #3]
 80008cc:	7bfb      	ldrb	r3, [r7, #15]
 80008ce:	fa42 f303 	asr.w	r3, r2, r3
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	461a      	mov	r2, r3
 80008dc:	f001 ff48 	bl	8002770 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < len; i++) {
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	3301      	adds	r3, #1
 80008e4:	73fb      	strb	r3, [r7, #15]
 80008e6:	7bfa      	ldrb	r2, [r7, #15]
 80008e8:	78bb      	ldrb	r3, [r7, #2]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d3e1      	bcc.n	80008b2 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6918      	ldr	r0, [r3, #16]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	8a9b      	ldrh	r3, [r3, #20]
 80008f6:	2201      	movs	r2, #1
 80008f8:	4619      	mov	r1, r3
 80008fa:	f001 ff39 	bl	8002770 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80008fe:	2001      	movs	r0, #1
 8000900:	f000 fcae 	bl	8001260 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6918      	ldr	r0, [r3, #16]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	8a9b      	ldrh	r3, [r3, #20]
 800090c:	2200      	movs	r2, #0
 800090e:	4619      	mov	r1, r3
 8000910:	f001 ff2e 	bl	8002770 <HAL_GPIO_WritePin>
}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <lcd_write_nib_command>:

/**
 * Writes a single 4-bit (NIB) command using the MSB
 */
void lcd_write_nib_command(Lcd_HandleTypeDef *lcd, uint8_t command) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	460b      	mov	r3, r1
 8000926:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);	// Write to Command Register
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6898      	ldr	r0, [r3, #8]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	899b      	ldrh	r3, [r3, #12]
 8000930:	2200      	movs	r2, #0
 8000932:	4619      	mov	r1, r3
 8000934:	f001 ff1c 	bl	8002770 <HAL_GPIO_WritePin>

	if (lcd->mode == LCD_4_BIT_MODE) {
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7d9b      	ldrb	r3, [r3, #22]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d107      	bne.n	8000950 <lcd_write_nib_command+0x34>
		// Writing Command in two seperate nibs due to 4 Bit Mode
		lcd_write(lcd, (command >> 4), LCD_NIB);	// Send 4 MSB
 8000940:	78fb      	ldrb	r3, [r7, #3]
 8000942:	091b      	lsrs	r3, r3, #4
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2204      	movs	r2, #4
 8000948:	4619      	mov	r1, r3
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff ffa6 	bl	800089c <lcd_write>
	}
	else {
		// Do Nothing
	}
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b097      	sub	sp, #92	; 0x5c
 800095c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095e:	f000 fc03 	bl	8001168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000962:	f000 f87f 	bl	8000a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000966:	f000 f9ab 	bl	8000cc0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800096a:	f000 f979 	bl	8000c60 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800096e:	f000 f901 	bl	8000b74 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2120      	movs	r1, #32
 8000976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097a:	f001 fef9 	bl	8002770 <HAL_GPIO_WritePin>

  Lcd_PortType ports[] = {
 800097e:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <main+0xf4>)
 8000980:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000984:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000986:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  GPIOB, GPIOB, GPIOB, GPIOB
  };

  Lcd_PinType pins[] = {
 800098a:	4a31      	ldr	r2, [pc, #196]	; (8000a50 <main+0xf8>)
 800098c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000990:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000994:	e883 0003 	stmia.w	r3, {r0, r1}
		  D4_Pin, D5_Pin, D6_Pin, D7_Pin
  };

  Lcd_HandleTypeDef lcd = Lcd_create(
 8000998:	f107 000c 	add.w	r0, r7, #12
 800099c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80009a0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80009a4:	2301      	movs	r3, #1
 80009a6:	9305      	str	r3, [sp, #20]
 80009a8:	2301      	movs	r3, #1
 80009aa:	9304      	str	r3, [sp, #16]
 80009ac:	2300      	movs	r3, #0
 80009ae:	9303      	str	r3, [sp, #12]
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	9302      	str	r3, [sp, #8]
 80009b4:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <main+0xfc>)
 80009b6:	9301      	str	r3, [sp, #4]
 80009b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009c2:	f7ff fdd9 	bl	8000578 <Lcd_create>
		  LCD_4_BIT_MODE,
		  true,
		  true
		  );

  Lcd_string(&lcd, "Sam's Test LCD >");
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	4923      	ldr	r1, [pc, #140]	; (8000a58 <main+0x100>)
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fe6d 	bl	80006ac <Lcd_string>
  Lcd_cursor(&lcd, 1, 0);
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	2200      	movs	r2, #0
 80009d8:	2101      	movs	r1, #1
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fe86 	bl	80006ec <Lcd_cursor>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (btn != 0) {
 80009e0:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <main+0x104>)
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d0fb      	beq.n	80009e0 <main+0x88>
		  Lcd_cursor(&lcd, 1, 0);
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	2200      	movs	r2, #0
 80009ee:	2101      	movs	r1, #1
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fe7b 	bl	80006ec <Lcd_cursor>
		  sprintf(msg,"Button %u",btn);
 80009f6:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <main+0x104>)
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	461a      	mov	r2, r3
 80009fc:	463b      	mov	r3, r7
 80009fe:	4918      	ldr	r1, [pc, #96]	; (8000a60 <main+0x108>)
 8000a00:	4618      	mov	r0, r3
 8000a02:	f003 fe7d 	bl	8004700 <siprintf>
		  Lcd_string(&lcd, msg);
 8000a06:	463a      	mov	r2, r7
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fe4c 	bl	80006ac <Lcd_string>

		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a14:	2120      	movs	r1, #32
 8000a16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1a:	f001 fec1 	bl	80027a0 <HAL_GPIO_TogglePin>

		  if (btn == 1) {
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <main+0x104>)
 8000a20:	881b      	ldrh	r3, [r3, #0]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d105      	bne.n	8000a32 <main+0xda>
			  Lcd_toggle_blink(&lcd);
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fea9 	bl	8000782 <Lcd_toggle_blink>
 8000a30:	e008      	b.n	8000a44 <main+0xec>
		  }
		  else if (btn == 2) {
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <main+0x104>)
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d104      	bne.n	8000a44 <main+0xec>
			  Lcd_toggle_cursor(&lcd);
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fe6e 	bl	8000720 <Lcd_toggle_cursor>
		  }

		  btn = 0;
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <main+0x104>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	801a      	strh	r2, [r3, #0]
	  if (btn != 0) {
 8000a4a:	e7c9      	b.n	80009e0 <main+0x88>
 8000a4c:	08004f94 	.word	0x08004f94
 8000a50:	08004fa4 	.word	0x08004fa4
 8000a54:	48000800 	.word	0x48000800
 8000a58:	08004f74 	.word	0x08004f74
 8000a5c:	2000008c 	.word	0x2000008c
 8000a60:	08004f88 	.word	0x08004f88

08000a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b0b8      	sub	sp, #224	; 0xe0
 8000a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a6e:	2244      	movs	r2, #68	; 0x44
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f003 fe3c 	bl	80046f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a78:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a88:	463b      	mov	r3, r7
 8000a8a:	2288      	movs	r2, #136	; 0x88
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f003 fe2e 	bl	80046f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a94:	2302      	movs	r3, #2
 8000a96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa2:	2310      	movs	r3, #16
 8000aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000aba:	230a      	movs	r3, #10
 8000abc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ac0:	2307      	movs	r3, #7
 8000ac2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fef8 	bl	80028cc <HAL_RCC_OscConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ae2:	f000 f9c7 	bl	8000e74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae6:	230f      	movs	r3, #15
 8000ae8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aec:	2303      	movs	r3, #3
 8000aee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b04:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b08:	2104      	movs	r1, #4
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f002 fac4 	bl	8003098 <HAL_RCC_ClockConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000b16:	f000 f9ad 	bl	8000e74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000b1a:	f244 0302 	movw	r3, #16386	; 0x4002
 8000b1e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b28:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000b32:	2308      	movs	r3, #8
 8000b34:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b36:	2307      	movs	r3, #7
 8000b38:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000b42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b46:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b48:	463b      	mov	r3, r7
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f002 fcaa 	bl	80034a4 <HAL_RCCEx_PeriphCLKConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000b56:	f000 f98d 	bl	8000e74 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b5a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b5e:	f001 fe5f 	bl	8002820 <HAL_PWREx_ControlVoltageScaling>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000b68:	f000 f984 	bl	8000e74 <Error_Handler>
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	37e0      	adds	r7, #224	; 0xe0
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
 8000b94:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b96:	4b2f      	ldr	r3, [pc, #188]	; (8000c54 <MX_ADC1_Init+0xe0>)
 8000b98:	4a2f      	ldr	r2, [pc, #188]	; (8000c58 <MX_ADC1_Init+0xe4>)
 8000b9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b9c:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <MX_ADC1_Init+0xe0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ba2:	4b2c      	ldr	r3, [pc, #176]	; (8000c54 <MX_ADC1_Init+0xe0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ba8:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <MX_ADC1_Init+0xe0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bae:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <MX_ADC1_Init+0xe0>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bb4:	4b27      	ldr	r3, [pc, #156]	; (8000c54 <MX_ADC1_Init+0xe0>)
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bba:	4b26      	ldr	r3, [pc, #152]	; (8000c54 <MX_ADC1_Init+0xe0>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bc0:	4b24      	ldr	r3, [pc, #144]	; (8000c54 <MX_ADC1_Init+0xe0>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000bc6:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <MX_ADC1_Init+0xe0>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bcc:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <MX_ADC1_Init+0xe0>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bd4:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <MX_ADC1_Init+0xe0>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bda:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <MX_ADC1_Init+0xe0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000be0:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <MX_ADC1_Init+0xe0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <MX_ADC1_Init+0xe0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000bee:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <MX_ADC1_Init+0xe0>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bf6:	4817      	ldr	r0, [pc, #92]	; (8000c54 <MX_ADC1_Init+0xe0>)
 8000bf8:	f000 fce2 	bl	80015c0 <HAL_ADC_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000c02:	f000 f937 	bl	8000e74 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4810      	ldr	r0, [pc, #64]	; (8000c54 <MX_ADC1_Init+0xe0>)
 8000c12:	f001 fa41 	bl	8002098 <HAL_ADCEx_MultiModeConfigChannel>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000c1c:	f000 f92a 	bl	8000e74 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c20:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_ADC1_Init+0xe8>)
 8000c22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c24:	2306      	movs	r3, #6
 8000c26:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c2c:	237f      	movs	r3, #127	; 0x7f
 8000c2e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c30:	2304      	movs	r3, #4
 8000c32:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_ADC1_Init+0xe0>)
 8000c3e:	f000 fe15 	bl	800186c <HAL_ADC_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000c48:	f000 f914 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	; 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	2000009c 	.word	0x2000009c
 8000c58:	50040000 	.word	0x50040000
 8000c5c:	14f00020 	.word	0x14f00020

08000c60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c64:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <MX_USART2_UART_Init+0x58>)
 8000c66:	4a15      	ldr	r2, [pc, #84]	; (8000cbc <MX_USART2_UART_Init+0x5c>)
 8000c68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c6a:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <MX_USART2_UART_Init+0x58>)
 8000c6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_USART2_UART_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <MX_USART2_UART_Init+0x58>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_USART2_UART_Init+0x58>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_USART2_UART_Init+0x58>)
 8000c86:	220c      	movs	r2, #12
 8000c88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <MX_USART2_UART_Init+0x58>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_USART2_UART_Init+0x58>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <MX_USART2_UART_Init+0x58>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_USART2_UART_Init+0x58>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_USART2_UART_Init+0x58>)
 8000ca4:	f003 f8ba 	bl	8003e1c <HAL_UART_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cae:	f000 f8e1 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000100 	.word	0x20000100
 8000cbc:	40004400 	.word	0x40004400

08000cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	4b55      	ldr	r3, [pc, #340]	; (8000e2c <MX_GPIO_Init+0x16c>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	4a54      	ldr	r2, [pc, #336]	; (8000e2c <MX_GPIO_Init+0x16c>)
 8000cdc:	f043 0304 	orr.w	r3, r3, #4
 8000ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce2:	4b52      	ldr	r3, [pc, #328]	; (8000e2c <MX_GPIO_Init+0x16c>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	f003 0304 	and.w	r3, r3, #4
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cee:	4b4f      	ldr	r3, [pc, #316]	; (8000e2c <MX_GPIO_Init+0x16c>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	4a4e      	ldr	r2, [pc, #312]	; (8000e2c <MX_GPIO_Init+0x16c>)
 8000cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfa:	4b4c      	ldr	r3, [pc, #304]	; (8000e2c <MX_GPIO_Init+0x16c>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	4b49      	ldr	r3, [pc, #292]	; (8000e2c <MX_GPIO_Init+0x16c>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	4a48      	ldr	r2, [pc, #288]	; (8000e2c <MX_GPIO_Init+0x16c>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d12:	4b46      	ldr	r3, [pc, #280]	; (8000e2c <MX_GPIO_Init+0x16c>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	4b43      	ldr	r3, [pc, #268]	; (8000e2c <MX_GPIO_Init+0x16c>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	4a42      	ldr	r2, [pc, #264]	; (8000e2c <MX_GPIO_Init+0x16c>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2a:	4b40      	ldr	r3, [pc, #256]	; (8000e2c <MX_GPIO_Init+0x16c>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d40:	f001 fd16 	bl	8002770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	f240 4132 	movw	r1, #1074	; 0x432
 8000d4a:	4839      	ldr	r0, [pc, #228]	; (8000e30 <MX_GPIO_Init+0x170>)
 8000d4c:	f001 fd10 	bl	8002770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_Enable_GPIO_Port, LCD_Enable_Pin, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2180      	movs	r1, #128	; 0x80
 8000d54:	4837      	ldr	r0, [pc, #220]	; (8000e34 <MX_GPIO_Init+0x174>)
 8000d56:	f001 fd0b 	bl	8002770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d60:	4b35      	ldr	r3, [pc, #212]	; (8000e38 <MX_GPIO_Init+0x178>)
 8000d62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4831      	ldr	r0, [pc, #196]	; (8000e34 <MX_GPIO_Init+0x174>)
 8000d70:	f001 fb54 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LCD_RS_Pin;
 8000d74:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d90:	f001 fb44 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D5_Pin|D4_Pin;
 8000d94:	f240 4332 	movw	r3, #1074	; 0x432
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	4820      	ldr	r0, [pc, #128]	; (8000e30 <MX_GPIO_Init+0x170>)
 8000dae:	f001 fb35 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_Enable_Pin */
  GPIO_InitStruct.Pin = LCD_Enable_Pin;
 8000db2:	2380      	movs	r3, #128	; 0x80
 8000db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_Enable_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	481a      	ldr	r0, [pc, #104]	; (8000e34 <MX_GPIO_Init+0x174>)
 8000dca:	f001 fb27 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8000dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <MX_GPIO_Init+0x17c>)
 8000dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de6:	f001 fb19 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 8000dea:	2340      	movs	r3, #64	; 0x40
 8000dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <MX_GPIO_Init+0x17c>)
 8000df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <MX_GPIO_Init+0x170>)
 8000dfe:	f001 fb0d 	bl	800241c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	2017      	movs	r0, #23
 8000e08:	f001 fad1 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e0c:	2017      	movs	r0, #23
 8000e0e:	f001 faea 	bl	80023e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	2028      	movs	r0, #40	; 0x28
 8000e18:	f001 fac9 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e1c:	2028      	movs	r0, #40	; 0x28
 8000e1e:	f001 fae2 	bl	80023e6 <HAL_NVIC_EnableIRQ>

}
 8000e22:	bf00      	nop
 8000e24:	3728      	adds	r7, #40	; 0x28
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	48000400 	.word	0x48000400
 8000e34:	48000800 	.word	0x48000800
 8000e38:	10210000 	.word	0x10210000
 8000e3c:	10110000 	.word	0x10110000

08000e40 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == BTN1_Pin) {
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e50:	d102      	bne.n	8000e58 <HAL_GPIO_EXTI_Callback+0x18>
		btn = 1;
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <HAL_GPIO_EXTI_Callback+0x30>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	801a      	strh	r2, [r3, #0]
	}
	if (GPIO_Pin == BTN2_Pin) {
 8000e58:	88fb      	ldrh	r3, [r7, #6]
 8000e5a:	2b40      	cmp	r3, #64	; 0x40
 8000e5c:	d102      	bne.n	8000e64 <HAL_GPIO_EXTI_Callback+0x24>
		btn = 2;
 8000e5e:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <HAL_GPIO_EXTI_Callback+0x30>)
 8000e60:	2202      	movs	r2, #2
 8000e62:	801a      	strh	r2, [r3, #0]
	}
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	2000008c 	.word	0x2000008c

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <Error_Handler+0x8>
	...

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <HAL_MspInit+0x44>)
 8000e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <HAL_MspInit+0x44>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6613      	str	r3, [r2, #96]	; 0x60
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <HAL_MspInit+0x44>)
 8000e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <HAL_MspInit+0x44>)
 8000ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea2:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <HAL_MspInit+0x44>)
 8000ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_MspInit+0x44>)
 8000eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a15      	ldr	r2, [pc, #84]	; (8000f3c <HAL_ADC_MspInit+0x74>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d124      	bne.n	8000f34 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <HAL_ADC_MspInit+0x78>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	4a14      	ldr	r2, [pc, #80]	; (8000f40 <HAL_ADC_MspInit+0x78>)
 8000ef0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_ADC_MspInit+0x78>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <HAL_ADC_MspInit+0x78>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <HAL_ADC_MspInit+0x78>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <HAL_ADC_MspInit+0x78>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f1e:	230b      	movs	r3, #11
 8000f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f30:	f001 fa74 	bl	800241c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f34:	bf00      	nop
 8000f36:	3728      	adds	r7, #40	; 0x28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	50040000 	.word	0x50040000
 8000f40:	40021000 	.word	0x40021000

08000f44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <HAL_UART_MspInit+0x7c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d128      	bne.n	8000fb8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <HAL_UART_MspInit+0x80>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6a:	4a16      	ldr	r2, [pc, #88]	; (8000fc4 <HAL_UART_MspInit+0x80>)
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f70:	6593      	str	r3, [r2, #88]	; 0x58
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <HAL_UART_MspInit+0x80>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_UART_MspInit+0x80>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <HAL_UART_MspInit+0x80>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <HAL_UART_MspInit+0x80>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f96:	230c      	movs	r3, #12
 8000f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb4:	f001 fa32 	bl	800241c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fb8:	bf00      	nop
 8000fba:	3728      	adds	r7, #40	; 0x28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40004400 	.word	0x40004400
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <NMI_Handler+0x4>

08000fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <HardFault_Handler+0x4>

08000fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <MemManage_Handler+0x4>

08000fda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <BusFault_Handler+0x4>

08000fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <UsageFault_Handler+0x4>

08000fe6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001014:	f000 f904 	bl	8001220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001020:	2040      	movs	r0, #64	; 0x40
 8001022:	f001 fbd7 	bl	80027d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}

0800102a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800102e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001032:	f001 fbcf 	bl	80027d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001036:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800103a:	f001 fbcb 	bl	80027d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800104c:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <_sbrk+0x5c>)
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <_sbrk+0x60>)
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <_sbrk+0x64>)
 8001062:	4a12      	ldr	r2, [pc, #72]	; (80010ac <_sbrk+0x68>)
 8001064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <_sbrk+0x64>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	429a      	cmp	r2, r3
 8001072:	d207      	bcs.n	8001084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001074:	f003 fb12 	bl	800469c <__errno>
 8001078:	4603      	mov	r3, r0
 800107a:	220c      	movs	r2, #12
 800107c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001082:	e009      	b.n	8001098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <_sbrk+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <_sbrk+0x64>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	4a05      	ldr	r2, [pc, #20]	; (80010a8 <_sbrk+0x64>)
 8001094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001096:	68fb      	ldr	r3, [r7, #12]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20018000 	.word	0x20018000
 80010a4:	00000400 	.word	0x00000400
 80010a8:	20000090 	.word	0x20000090
 80010ac:	20000198 	.word	0x20000198

080010b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <SystemInit+0x5c>)
 80010b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ba:	4a14      	ldr	r2, [pc, #80]	; (800110c <SystemInit+0x5c>)
 80010bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <SystemInit+0x60>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a11      	ldr	r2, [pc, #68]	; (8001110 <SystemInit+0x60>)
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <SystemInit+0x60>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <SystemInit+0x60>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <SystemInit+0x60>)
 80010dc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80010e0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80010e4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <SystemInit+0x60>)
 80010e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010ec:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <SystemInit+0x60>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a07      	ldr	r2, [pc, #28]	; (8001110 <SystemInit+0x60>)
 80010f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <SystemInit+0x60>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00
 8001110:	40021000 	.word	0x40021000

08001114 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800114c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001118:	f7ff ffca 	bl	80010b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800111c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800111e:	e003      	b.n	8001128 <LoopCopyDataInit>

08001120 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001122:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001124:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001126:	3104      	adds	r1, #4

08001128 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001128:	480a      	ldr	r0, [pc, #40]	; (8001154 <LoopForever+0xa>)
	ldr	r3, =_edata
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <LoopForever+0xe>)
	adds	r2, r0, r1
 800112c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800112e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001130:	d3f6      	bcc.n	8001120 <CopyDataInit>
	ldr	r2, =_sbss
 8001132:	4a0a      	ldr	r2, [pc, #40]	; (800115c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001134:	e002      	b.n	800113c <LoopFillZerobss>

08001136 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001136:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001138:	f842 3b04 	str.w	r3, [r2], #4

0800113c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <LoopForever+0x16>)
	cmp	r2, r3
 800113e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001140:	d3f9      	bcc.n	8001136 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001142:	f003 fab1 	bl	80046a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001146:	f7ff fc07 	bl	8000958 <main>

0800114a <LoopForever>:

LoopForever:
    b LoopForever
 800114a:	e7fe      	b.n	800114a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800114c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001150:	0800503c 	.word	0x0800503c
	ldr	r0, =_sdata
 8001154:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001158:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 800115c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001160:	20000198 	.word	0x20000198

08001164 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001164:	e7fe      	b.n	8001164 <ADC1_2_IRQHandler>
	...

08001168 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <HAL_Init+0x3c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <HAL_Init+0x3c>)
 8001178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117e:	2003      	movs	r0, #3
 8001180:	f001 f90a 	bl	8002398 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001184:	2000      	movs	r0, #0
 8001186:	f000 f80f 	bl	80011a8 <HAL_InitTick>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d002      	beq.n	8001196 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	71fb      	strb	r3, [r7, #7]
 8001194:	e001      	b.n	800119a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001196:	f7ff fe73 	bl	8000e80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800119a:	79fb      	ldrb	r3, [r7, #7]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40022000 	.word	0x40022000

080011a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <HAL_InitTick+0x6c>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d023      	beq.n	8001204 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011bc:	4b16      	ldr	r3, [pc, #88]	; (8001218 <HAL_InitTick+0x70>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <HAL_InitTick+0x6c>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4619      	mov	r1, r3
 80011c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f001 f915 	bl	8002402 <HAL_SYSTICK_Config>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d10f      	bne.n	80011fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b0f      	cmp	r3, #15
 80011e2:	d809      	bhi.n	80011f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e4:	2200      	movs	r2, #0
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011ec:	f001 f8df 	bl	80023ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011f0:	4a0a      	ldr	r2, [pc, #40]	; (800121c <HAL_InitTick+0x74>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	e007      	b.n	8001208 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	73fb      	strb	r3, [r7, #15]
 80011fc:	e004      	b.n	8001208 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	73fb      	strb	r3, [r7, #15]
 8001202:	e001      	b.n	8001208 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001208:	7bfb      	ldrb	r3, [r7, #15]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000008 	.word	0x20000008
 8001218:	20000000 	.word	0x20000000
 800121c:	20000004 	.word	0x20000004

08001220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_IncTick+0x20>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_IncTick+0x24>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4413      	add	r3, r2
 8001230:	4a04      	ldr	r2, [pc, #16]	; (8001244 <HAL_IncTick+0x24>)
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000008 	.word	0x20000008
 8001244:	20000184 	.word	0x20000184

08001248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return uwTick;
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <HAL_GetTick+0x14>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000184 	.word	0x20000184

08001260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001268:	f7ff ffee 	bl	8001248 <HAL_GetTick>
 800126c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001278:	d005      	beq.n	8001286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_Delay+0x44>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001286:	bf00      	nop
 8001288:	f7ff ffde 	bl	8001248 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	429a      	cmp	r2, r3
 8001296:	d8f7      	bhi.n	8001288 <HAL_Delay+0x28>
  {
  }
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000008 	.word	0x20000008

080012a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	609a      	str	r2, [r3, #8]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	431a      	orrs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	609a      	str	r2, [r3, #8]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001310:	b480      	push	{r7}
 8001312:	b087      	sub	sp, #28
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	3360      	adds	r3, #96	; 0x60
 8001322:	461a      	mov	r2, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <LL_ADC_SetOffset+0x44>)
 8001332:	4013      	ands	r3, r2
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	430a      	orrs	r2, r1
 800133e:	4313      	orrs	r3, r2
 8001340:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001348:	bf00      	nop
 800134a:	371c      	adds	r7, #28
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	03fff000 	.word	0x03fff000

08001358 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3360      	adds	r3, #96	; 0x60
 8001366:	461a      	mov	r2, r3
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001378:	4618      	mov	r0, r3
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001384:	b480      	push	{r7}
 8001386:	b087      	sub	sp, #28
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	3360      	adds	r3, #96	; 0x60
 8001394:	461a      	mov	r2, r3
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	431a      	orrs	r2, r3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80013ae:	bf00      	nop
 80013b0:	371c      	adds	r7, #28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b087      	sub	sp, #28
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	3330      	adds	r3, #48	; 0x30
 80013ca:	461a      	mov	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	0a1b      	lsrs	r3, r3, #8
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	4413      	add	r3, r2
 80013d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	f003 031f 	and.w	r3, r3, #31
 80013e4:	211f      	movs	r1, #31
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	401a      	ands	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	0e9b      	lsrs	r3, r3, #26
 80013f2:	f003 011f 	and.w	r1, r3, #31
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	f003 031f 	and.w	r3, r3, #31
 80013fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001400:	431a      	orrs	r2, r3
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001406:	bf00      	nop
 8001408:	371c      	adds	r7, #28
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001412:	b480      	push	{r7}
 8001414:	b087      	sub	sp, #28
 8001416:	af00      	add	r7, sp, #0
 8001418:	60f8      	str	r0, [r7, #12]
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	3314      	adds	r3, #20
 8001422:	461a      	mov	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	0e5b      	lsrs	r3, r3, #25
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	4413      	add	r3, r2
 8001430:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	0d1b      	lsrs	r3, r3, #20
 800143a:	f003 031f 	and.w	r3, r3, #31
 800143e:	2107      	movs	r1, #7
 8001440:	fa01 f303 	lsl.w	r3, r1, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	401a      	ands	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	0d1b      	lsrs	r3, r3, #20
 800144c:	f003 031f 	and.w	r3, r3, #31
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	fa01 f303 	lsl.w	r3, r1, r3
 8001456:	431a      	orrs	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800145c:	bf00      	nop
 800145e:	371c      	adds	r7, #28
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001480:	43db      	mvns	r3, r3
 8001482:	401a      	ands	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f003 0318 	and.w	r3, r3, #24
 800148a:	4908      	ldr	r1, [pc, #32]	; (80014ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800148c:	40d9      	lsrs	r1, r3
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	400b      	ands	r3, r1
 8001492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001496:	431a      	orrs	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	0007ffff 	.word	0x0007ffff

080014b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80014c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6093      	str	r3, [r2, #8]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014e8:	d101      	bne.n	80014ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800150c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001510:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001534:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001538:	d101      	bne.n	800153e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b01      	cmp	r3, #1
 800155e:	d101      	bne.n	8001564 <LL_ADC_IsEnabled+0x18>
 8001560:	2301      	movs	r3, #1
 8001562:	e000      	b.n	8001566 <LL_ADC_IsEnabled+0x1a>
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	2b04      	cmp	r3, #4
 8001584:	d101      	bne.n	800158a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f003 0308 	and.w	r3, r3, #8
 80015a8:	2b08      	cmp	r3, #8
 80015aa:	d101      	bne.n	80015b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015ac:	2301      	movs	r3, #1
 80015ae:	e000      	b.n	80015b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e136      	b.n	8001848 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d109      	bne.n	80015fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff fc6d 	bl	8000ec8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff67 	bl	80014d4 <LL_ADC_IsDeepPowerDownEnabled>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d004      	beq.n	8001616 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff4d 	bl	80014b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ff82 	bl	8001524 <LL_ADC_IsInternalRegulatorEnabled>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d115      	bne.n	8001652 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff ff66 	bl	80014fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001630:	4b87      	ldr	r3, [pc, #540]	; (8001850 <HAL_ADC_Init+0x290>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	099b      	lsrs	r3, r3, #6
 8001636:	4a87      	ldr	r2, [pc, #540]	; (8001854 <HAL_ADC_Init+0x294>)
 8001638:	fba2 2303 	umull	r2, r3, r2, r3
 800163c:	099b      	lsrs	r3, r3, #6
 800163e:	3301      	adds	r3, #1
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001644:	e002      	b.n	800164c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	3b01      	subs	r3, #1
 800164a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f9      	bne.n	8001646 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff ff64 	bl	8001524 <LL_ADC_IsInternalRegulatorEnabled>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10d      	bne.n	800167e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001666:	f043 0210 	orr.w	r2, r3, #16
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001672:	f043 0201 	orr.w	r2, r3, #1
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ff75 	bl	8001572 <LL_ADC_REG_IsConversionOngoing>
 8001688:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168e:	f003 0310 	and.w	r3, r3, #16
 8001692:	2b00      	cmp	r3, #0
 8001694:	f040 80cf 	bne.w	8001836 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	2b00      	cmp	r3, #0
 800169c:	f040 80cb 	bne.w	8001836 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016a8:	f043 0202 	orr.w	r2, r3, #2
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff49 	bl	800154c <LL_ADC_IsEnabled>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d115      	bne.n	80016ec <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016c0:	4865      	ldr	r0, [pc, #404]	; (8001858 <HAL_ADC_Init+0x298>)
 80016c2:	f7ff ff43 	bl	800154c <LL_ADC_IsEnabled>
 80016c6:	4604      	mov	r4, r0
 80016c8:	4864      	ldr	r0, [pc, #400]	; (800185c <HAL_ADC_Init+0x29c>)
 80016ca:	f7ff ff3f 	bl	800154c <LL_ADC_IsEnabled>
 80016ce:	4603      	mov	r3, r0
 80016d0:	431c      	orrs	r4, r3
 80016d2:	4863      	ldr	r0, [pc, #396]	; (8001860 <HAL_ADC_Init+0x2a0>)
 80016d4:	f7ff ff3a 	bl	800154c <LL_ADC_IsEnabled>
 80016d8:	4603      	mov	r3, r0
 80016da:	4323      	orrs	r3, r4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d105      	bne.n	80016ec <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	4619      	mov	r1, r3
 80016e6:	485f      	ldr	r0, [pc, #380]	; (8001864 <HAL_ADC_Init+0x2a4>)
 80016e8:	f7ff fdde 	bl	80012a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	7e5b      	ldrb	r3, [r3, #25]
 80016f0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016f6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80016fc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001702:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 3020 	ldrb.w	r3, [r3, #32]
 800170a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d106      	bne.n	8001728 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171e:	3b01      	subs	r3, #1
 8001720:	045b      	lsls	r3, r3, #17
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172c:	2b00      	cmp	r3, #0
 800172e:	d009      	beq.n	8001744 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68da      	ldr	r2, [r3, #12]
 800174a:	4b47      	ldr	r3, [pc, #284]	; (8001868 <HAL_ADC_Init+0x2a8>)
 800174c:	4013      	ands	r3, r2
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	69b9      	ldr	r1, [r7, #24]
 8001754:	430b      	orrs	r3, r1
 8001756:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff08 	bl	8001572 <LL_ADC_REG_IsConversionOngoing>
 8001762:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff15 	bl	8001598 <LL_ADC_INJ_IsConversionOngoing>
 800176e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d13d      	bne.n	80017f2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d13a      	bne.n	80017f2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001780:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001788:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001798:	f023 0302 	bic.w	r3, r3, #2
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	69b9      	ldr	r1, [r7, #24]
 80017a2:	430b      	orrs	r3, r1
 80017a4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d118      	bne.n	80017e2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80017ba:	f023 0304 	bic.w	r3, r3, #4
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017c6:	4311      	orrs	r1, r2
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017cc:	4311      	orrs	r1, r2
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017d2:	430a      	orrs	r2, r1
 80017d4:	431a      	orrs	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0201 	orr.w	r2, r2, #1
 80017de:	611a      	str	r2, [r3, #16]
 80017e0:	e007      	b.n	80017f2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	691a      	ldr	r2, [r3, #16]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0201 	bic.w	r2, r2, #1
 80017f0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d10c      	bne.n	8001814 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001800:	f023 010f 	bic.w	r1, r3, #15
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	1e5a      	subs	r2, r3, #1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	631a      	str	r2, [r3, #48]	; 0x30
 8001812:	e007      	b.n	8001824 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 020f 	bic.w	r2, r2, #15
 8001822:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001828:	f023 0303 	bic.w	r3, r3, #3
 800182c:	f043 0201 	orr.w	r2, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	655a      	str	r2, [r3, #84]	; 0x54
 8001834:	e007      	b.n	8001846 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183a:	f043 0210 	orr.w	r2, r3, #16
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001846:	7ffb      	ldrb	r3, [r7, #31]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3724      	adds	r7, #36	; 0x24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd90      	pop	{r4, r7, pc}
 8001850:	20000000 	.word	0x20000000
 8001854:	053e2d63 	.word	0x053e2d63
 8001858:	50040000 	.word	0x50040000
 800185c:	50040100 	.word	0x50040100
 8001860:	50040200 	.word	0x50040200
 8001864:	50040300 	.word	0x50040300
 8001868:	fff0c007 	.word	0xfff0c007

0800186c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b0b6      	sub	sp, #216	; 0xd8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_ADC_ConfigChannel+0x22>
 800188a:	2302      	movs	r3, #2
 800188c:	e3c7      	b.n	800201e <HAL_ADC_ConfigChannel+0x7b2>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fe69 	bl	8001572 <LL_ADC_REG_IsConversionOngoing>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f040 83a8 	bne.w	8001ff8 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b05      	cmp	r3, #5
 80018ae:	d824      	bhi.n	80018fa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	3b02      	subs	r3, #2
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d81b      	bhi.n	80018f2 <HAL_ADC_ConfigChannel+0x86>
 80018ba:	a201      	add	r2, pc, #4	; (adr r2, 80018c0 <HAL_ADC_ConfigChannel+0x54>)
 80018bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c0:	080018d1 	.word	0x080018d1
 80018c4:	080018d9 	.word	0x080018d9
 80018c8:	080018e1 	.word	0x080018e1
 80018cc:	080018e9 	.word	0x080018e9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	220c      	movs	r2, #12
 80018d4:	605a      	str	r2, [r3, #4]
          break;
 80018d6:	e011      	b.n	80018fc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	2212      	movs	r2, #18
 80018dc:	605a      	str	r2, [r3, #4]
          break;
 80018de:	e00d      	b.n	80018fc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	2218      	movs	r2, #24
 80018e4:	605a      	str	r2, [r3, #4]
          break;
 80018e6:	e009      	b.n	80018fc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ee:	605a      	str	r2, [r3, #4]
          break;
 80018f0:	e004      	b.n	80018fc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	2206      	movs	r2, #6
 80018f6:	605a      	str	r2, [r3, #4]
          break;
 80018f8:	e000      	b.n	80018fc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80018fa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	6859      	ldr	r1, [r3, #4]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	f7ff fd56 	bl	80013ba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fe2d 	bl	8001572 <LL_ADC_REG_IsConversionOngoing>
 8001918:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fe39 	bl	8001598 <LL_ADC_INJ_IsConversionOngoing>
 8001926:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800192a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800192e:	2b00      	cmp	r3, #0
 8001930:	f040 81a6 	bne.w	8001c80 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001934:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001938:	2b00      	cmp	r3, #0
 800193a:	f040 81a1 	bne.w	8001c80 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6818      	ldr	r0, [r3, #0]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	6819      	ldr	r1, [r3, #0]
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	461a      	mov	r2, r3
 800194c:	f7ff fd61 	bl	8001412 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	695a      	ldr	r2, [r3, #20]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	08db      	lsrs	r3, r3, #3
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	2b04      	cmp	r3, #4
 8001970:	d00a      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6818      	ldr	r0, [r3, #0]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	6919      	ldr	r1, [r3, #16]
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001982:	f7ff fcc5 	bl	8001310 <LL_ADC_SetOffset>
 8001986:	e17b      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fce2 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001994:	4603      	mov	r3, r0
 8001996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10a      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x148>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2100      	movs	r1, #0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fcd7 	bl	8001358 <LL_ADC_GetOffsetChannel>
 80019aa:	4603      	mov	r3, r0
 80019ac:	0e9b      	lsrs	r3, r3, #26
 80019ae:	f003 021f 	and.w	r2, r3, #31
 80019b2:	e01e      	b.n	80019f2 <HAL_ADC_ConfigChannel+0x186>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fccc 	bl	8001358 <LL_ADC_GetOffsetChannel>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80019ca:	fa93 f3a3 	rbit	r3, r3
 80019ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80019e2:	2320      	movs	r3, #32
 80019e4:	e004      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80019e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019ea:	fab3 f383 	clz	r3, r3
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d105      	bne.n	8001a0a <HAL_ADC_ConfigChannel+0x19e>
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	0e9b      	lsrs	r3, r3, #26
 8001a04:	f003 031f 	and.w	r3, r3, #31
 8001a08:	e018      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x1d0>
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a16:	fa93 f3a3 	rbit	r3, r3
 8001a1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001a1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001a26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001a2e:	2320      	movs	r3, #32
 8001a30:	e004      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001a32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a36:	fab3 f383 	clz	r3, r3
 8001a3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d106      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2200      	movs	r2, #0
 8001a46:	2100      	movs	r1, #0
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fc9b 	bl	8001384 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2101      	movs	r1, #1
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fc7f 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10a      	bne.n	8001a7a <HAL_ADC_ConfigChannel+0x20e>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2101      	movs	r1, #1
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fc74 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001a70:	4603      	mov	r3, r0
 8001a72:	0e9b      	lsrs	r3, r3, #26
 8001a74:	f003 021f 	and.w	r2, r3, #31
 8001a78:	e01e      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x24c>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2101      	movs	r1, #1
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fc69 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a90:	fa93 f3a3 	rbit	r3, r3
 8001a94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001a98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001aa0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001aa8:	2320      	movs	r3, #32
 8001aaa:	e004      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001aac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ab0:	fab3 f383 	clz	r3, r3
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d105      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x264>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	0e9b      	lsrs	r3, r3, #26
 8001aca:	f003 031f 	and.w	r3, r3, #31
 8001ace:	e018      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x296>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001adc:	fa93 f3a3 	rbit	r3, r3
 8001ae0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001ae4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ae8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001aec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001af4:	2320      	movs	r3, #32
 8001af6:	e004      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001afc:	fab3 f383 	clz	r3, r3
 8001b00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d106      	bne.n	8001b14 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fc38 	bl	8001384 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2102      	movs	r1, #2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fc1c 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10a      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x2d4>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2102      	movs	r1, #2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fc11 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001b36:	4603      	mov	r3, r0
 8001b38:	0e9b      	lsrs	r3, r3, #26
 8001b3a:	f003 021f 	and.w	r2, r3, #31
 8001b3e:	e01e      	b.n	8001b7e <HAL_ADC_ConfigChannel+0x312>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2102      	movs	r1, #2
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fc06 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b56:	fa93 f3a3 	rbit	r3, r3
 8001b5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001b5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001b66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001b6e:	2320      	movs	r3, #32
 8001b70:	e004      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001b72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b76:	fab3 f383 	clz	r3, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d105      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x32a>
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	0e9b      	lsrs	r3, r3, #26
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	e016      	b.n	8001bc4 <HAL_ADC_ConfigChannel+0x358>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ba2:	fa93 f3a3 	rbit	r3, r3
 8001ba6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001ba8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001baa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001bae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001bb6:	2320      	movs	r3, #32
 8001bb8:	e004      	b.n	8001bc4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001bba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bbe:	fab3 f383 	clz	r3, r3
 8001bc2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d106      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2102      	movs	r1, #2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fbd7 	bl	8001384 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2103      	movs	r1, #3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fbbb 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001be2:	4603      	mov	r3, r0
 8001be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10a      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x396>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2103      	movs	r1, #3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fbb0 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	0e9b      	lsrs	r3, r3, #26
 8001bfc:	f003 021f 	and.w	r2, r3, #31
 8001c00:	e017      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x3c6>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2103      	movs	r1, #3
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fba5 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c14:	fa93 f3a3 	rbit	r3, r3
 8001c18:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001c1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c1c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001c1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001c24:	2320      	movs	r3, #32
 8001c26:	e003      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001c28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c2a:	fab3 f383 	clz	r3, r3
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d105      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x3de>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	0e9b      	lsrs	r3, r3, #26
 8001c44:	f003 031f 	and.w	r3, r3, #31
 8001c48:	e011      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x402>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c52:	fa93 f3a3 	rbit	r3, r3
 8001c56:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001c58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001c62:	2320      	movs	r3, #32
 8001c64:	e003      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c68:	fab3 f383 	clz	r3, r3
 8001c6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d106      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2200      	movs	r2, #0
 8001c78:	2103      	movs	r1, #3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fb82 	bl	8001384 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fc61 	bl	800154c <LL_ADC_IsEnabled>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f040 813f 	bne.w	8001f10 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	6819      	ldr	r1, [r3, #0]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	f7ff fbe2 	bl	8001468 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	4a8e      	ldr	r2, [pc, #568]	; (8001ee4 <HAL_ADC_ConfigChannel+0x678>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	f040 8130 	bne.w	8001f10 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10b      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x46c>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	0e9b      	lsrs	r3, r3, #26
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	f003 031f 	and.w	r3, r3, #31
 8001ccc:	2b09      	cmp	r3, #9
 8001cce:	bf94      	ite	ls
 8001cd0:	2301      	movls	r3, #1
 8001cd2:	2300      	movhi	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	e019      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x4a0>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ce0:	fa93 f3a3 	rbit	r3, r3
 8001ce4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001ce6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ce8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001cf0:	2320      	movs	r3, #32
 8001cf2:	e003      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001cf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	f003 031f 	and.w	r3, r3, #31
 8001d02:	2b09      	cmp	r3, #9
 8001d04:	bf94      	ite	ls
 8001d06:	2301      	movls	r3, #1
 8001d08:	2300      	movhi	r3, #0
 8001d0a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d079      	beq.n	8001e04 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d107      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x4c0>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	0e9b      	lsrs	r3, r3, #26
 8001d22:	3301      	adds	r3, #1
 8001d24:	069b      	lsls	r3, r3, #26
 8001d26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d2a:	e015      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x4ec>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d34:	fa93 f3a3 	rbit	r3, r3
 8001d38:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d3c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001d44:	2320      	movs	r3, #32
 8001d46:	e003      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d4a:	fab3 f383 	clz	r3, r3
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	3301      	adds	r3, #1
 8001d52:	069b      	lsls	r3, r3, #26
 8001d54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d109      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x50c>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	0e9b      	lsrs	r3, r3, #26
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	f003 031f 	and.w	r3, r3, #31
 8001d70:	2101      	movs	r1, #1
 8001d72:	fa01 f303 	lsl.w	r3, r1, r3
 8001d76:	e017      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x53c>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d80:	fa93 f3a3 	rbit	r3, r3
 8001d84:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d88:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001d90:	2320      	movs	r3, #32
 8001d92:	e003      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d96:	fab3 f383 	clz	r3, r3
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	f003 031f 	and.w	r3, r3, #31
 8001da2:	2101      	movs	r1, #1
 8001da4:	fa01 f303 	lsl.w	r3, r1, r3
 8001da8:	ea42 0103 	orr.w	r1, r2, r3
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10a      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x562>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	0e9b      	lsrs	r3, r3, #26
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	f003 021f 	and.w	r2, r3, #31
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4413      	add	r3, r2
 8001dca:	051b      	lsls	r3, r3, #20
 8001dcc:	e018      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x594>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dd6:	fa93 f3a3 	rbit	r3, r3
 8001dda:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001de6:	2320      	movs	r3, #32
 8001de8:	e003      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dec:	fab3 f383 	clz	r3, r3
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	3301      	adds	r3, #1
 8001df4:	f003 021f 	and.w	r2, r3, #31
 8001df8:	4613      	mov	r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e00:	430b      	orrs	r3, r1
 8001e02:	e080      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d107      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x5b4>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	0e9b      	lsrs	r3, r3, #26
 8001e16:	3301      	adds	r3, #1
 8001e18:	069b      	lsls	r3, r3, #26
 8001e1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e1e:	e015      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x5e0>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e28:	fa93 f3a3 	rbit	r3, r3
 8001e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e30:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001e38:	2320      	movs	r3, #32
 8001e3a:	e003      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	3301      	adds	r3, #1
 8001e46:	069b      	lsls	r3, r3, #26
 8001e48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d109      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x600>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	0e9b      	lsrs	r3, r3, #26
 8001e5e:	3301      	adds	r3, #1
 8001e60:	f003 031f 	and.w	r3, r3, #31
 8001e64:	2101      	movs	r1, #1
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	e017      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x630>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	fa93 f3a3 	rbit	r3, r3
 8001e78:	61fb      	str	r3, [r7, #28]
  return result;
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001e84:	2320      	movs	r3, #32
 8001e86:	e003      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	3301      	adds	r3, #1
 8001e92:	f003 031f 	and.w	r3, r3, #31
 8001e96:	2101      	movs	r1, #1
 8001e98:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9c:	ea42 0103 	orr.w	r1, r2, r3
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10d      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x65c>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	0e9b      	lsrs	r3, r3, #26
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	f003 021f 	and.w	r2, r3, #31
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3b1e      	subs	r3, #30
 8001ec0:	051b      	lsls	r3, r3, #20
 8001ec2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ec6:	e01d      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x698>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	fa93 f3a3 	rbit	r3, r3
 8001ed4:	613b      	str	r3, [r7, #16]
  return result;
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d103      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001ee0:	2320      	movs	r3, #32
 8001ee2:	e005      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x684>
 8001ee4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	fab3 f383 	clz	r3, r3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	f003 021f 	and.w	r2, r3, #31
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	3b1e      	subs	r3, #30
 8001efe:	051b      	lsls	r3, r3, #20
 8001f00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f04:	430b      	orrs	r3, r1
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	6892      	ldr	r2, [r2, #8]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f7ff fa81 	bl	8001412 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b44      	ldr	r3, [pc, #272]	; (8002028 <HAL_ADC_ConfigChannel+0x7bc>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d07a      	beq.n	8002012 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f1c:	4843      	ldr	r0, [pc, #268]	; (800202c <HAL_ADC_ConfigChannel+0x7c0>)
 8001f1e:	f7ff f9e9 	bl	80012f4 <LL_ADC_GetCommonPathInternalCh>
 8001f22:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a41      	ldr	r2, [pc, #260]	; (8002030 <HAL_ADC_ConfigChannel+0x7c4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d12c      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d126      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a3c      	ldr	r2, [pc, #240]	; (8002034 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d004      	beq.n	8001f50 <HAL_ADC_ConfigChannel+0x6e4>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a3b      	ldr	r2, [pc, #236]	; (8002038 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d15d      	bne.n	800200c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4834      	ldr	r0, [pc, #208]	; (800202c <HAL_ADC_ConfigChannel+0x7c0>)
 8001f5c:	f7ff f9b7 	bl	80012ce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f60:	4b36      	ldr	r3, [pc, #216]	; (800203c <HAL_ADC_ConfigChannel+0x7d0>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	099b      	lsrs	r3, r3, #6
 8001f66:	4a36      	ldr	r2, [pc, #216]	; (8002040 <HAL_ADC_ConfigChannel+0x7d4>)
 8001f68:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6c:	099b      	lsrs	r3, r3, #6
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	4613      	mov	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f7a:	e002      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f9      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f88:	e040      	b.n	800200c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a2d      	ldr	r2, [pc, #180]	; (8002044 <HAL_ADC_ConfigChannel+0x7d8>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d118      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x75a>
 8001f94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d112      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a23      	ldr	r2, [pc, #140]	; (8002034 <HAL_ADC_ConfigChannel+0x7c8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d004      	beq.n	8001fb4 <HAL_ADC_ConfigChannel+0x748>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a22      	ldr	r2, [pc, #136]	; (8002038 <HAL_ADC_ConfigChannel+0x7cc>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d12d      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	481b      	ldr	r0, [pc, #108]	; (800202c <HAL_ADC_ConfigChannel+0x7c0>)
 8001fc0:	f7ff f985 	bl	80012ce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fc4:	e024      	b.n	8002010 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a1f      	ldr	r2, [pc, #124]	; (8002048 <HAL_ADC_ConfigChannel+0x7dc>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d120      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d11a      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a14      	ldr	r2, [pc, #80]	; (8002034 <HAL_ADC_ConfigChannel+0x7c8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d115      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fe6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fee:	4619      	mov	r1, r3
 8001ff0:	480e      	ldr	r0, [pc, #56]	; (800202c <HAL_ADC_ConfigChannel+0x7c0>)
 8001ff2:	f7ff f96c 	bl	80012ce <LL_ADC_SetCommonPathInternalCh>
 8001ff6:	e00c      	b.n	8002012 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffc:	f043 0220 	orr.w	r2, r3, #32
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800200a:	e002      	b.n	8002012 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800200c:	bf00      	nop
 800200e:	e000      	b.n	8002012 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002010:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800201a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800201e:	4618      	mov	r0, r3
 8002020:	37d8      	adds	r7, #216	; 0xd8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	80080000 	.word	0x80080000
 800202c:	50040300 	.word	0x50040300
 8002030:	c7520000 	.word	0xc7520000
 8002034:	50040000 	.word	0x50040000
 8002038:	50040200 	.word	0x50040200
 800203c:	20000000 	.word	0x20000000
 8002040:	053e2d63 	.word	0x053e2d63
 8002044:	cb840000 	.word	0xcb840000
 8002048:	80000001 	.word	0x80000001

0800204c <LL_ADC_IsEnabled>:
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <LL_ADC_IsEnabled+0x18>
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <LL_ADC_IsEnabled+0x1a>
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <LL_ADC_REG_IsConversionOngoing>:
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	2b04      	cmp	r3, #4
 8002084:	d101      	bne.n	800208a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002098:	b590      	push	{r4, r7, lr}
 800209a:	b09f      	sub	sp, #124	; 0x7c
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e093      	b.n	80021de <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80020be:	2300      	movs	r3, #0
 80020c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80020c2:	2300      	movs	r3, #0
 80020c4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a47      	ldr	r2, [pc, #284]	; (80021e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d102      	bne.n	80020d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80020d0:	4b46      	ldr	r3, [pc, #280]	; (80021ec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	e001      	b.n	80020da <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10b      	bne.n	80020f8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e4:	f043 0220 	orr.w	r2, r3, #32
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e072      	b.n	80021de <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff ffb9 	bl	8002072 <LL_ADC_REG_IsConversionOngoing>
 8002100:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ffb3 	bl	8002072 <LL_ADC_REG_IsConversionOngoing>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d154      	bne.n	80021bc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002112:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002114:	2b00      	cmp	r3, #0
 8002116:	d151      	bne.n	80021bc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002118:	4b35      	ldr	r3, [pc, #212]	; (80021f0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800211a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d02c      	beq.n	800217e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	6859      	ldr	r1, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002136:	035b      	lsls	r3, r3, #13
 8002138:	430b      	orrs	r3, r1
 800213a:	431a      	orrs	r2, r3
 800213c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800213e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002140:	4829      	ldr	r0, [pc, #164]	; (80021e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002142:	f7ff ff83 	bl	800204c <LL_ADC_IsEnabled>
 8002146:	4604      	mov	r4, r0
 8002148:	4828      	ldr	r0, [pc, #160]	; (80021ec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800214a:	f7ff ff7f 	bl	800204c <LL_ADC_IsEnabled>
 800214e:	4603      	mov	r3, r0
 8002150:	431c      	orrs	r4, r3
 8002152:	4828      	ldr	r0, [pc, #160]	; (80021f4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002154:	f7ff ff7a 	bl	800204c <LL_ADC_IsEnabled>
 8002158:	4603      	mov	r3, r0
 800215a:	4323      	orrs	r3, r4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d137      	bne.n	80021d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002168:	f023 030f 	bic.w	r3, r3, #15
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	6811      	ldr	r1, [r2, #0]
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	6892      	ldr	r2, [r2, #8]
 8002174:	430a      	orrs	r2, r1
 8002176:	431a      	orrs	r2, r3
 8002178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800217a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800217c:	e028      	b.n	80021d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800217e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002188:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800218a:	4817      	ldr	r0, [pc, #92]	; (80021e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800218c:	f7ff ff5e 	bl	800204c <LL_ADC_IsEnabled>
 8002190:	4604      	mov	r4, r0
 8002192:	4816      	ldr	r0, [pc, #88]	; (80021ec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002194:	f7ff ff5a 	bl	800204c <LL_ADC_IsEnabled>
 8002198:	4603      	mov	r3, r0
 800219a:	431c      	orrs	r4, r3
 800219c:	4815      	ldr	r0, [pc, #84]	; (80021f4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800219e:	f7ff ff55 	bl	800204c <LL_ADC_IsEnabled>
 80021a2:	4603      	mov	r3, r0
 80021a4:	4323      	orrs	r3, r4
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d112      	bne.n	80021d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80021aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80021b2:	f023 030f 	bic.w	r3, r3, #15
 80021b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80021b8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021ba:	e009      	b.n	80021d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c0:	f043 0220 	orr.w	r2, r3, #32
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80021ce:	e000      	b.n	80021d2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80021da:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80021de:	4618      	mov	r0, r3
 80021e0:	377c      	adds	r7, #124	; 0x7c
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd90      	pop	{r4, r7, pc}
 80021e6:	bf00      	nop
 80021e8:	50040000 	.word	0x50040000
 80021ec:	50040100 	.word	0x50040100
 80021f0:	50040300 	.word	0x50040300
 80021f4:	50040200 	.word	0x50040200

080021f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002214:	4013      	ands	r3, r2
 8002216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800222a:	4a04      	ldr	r2, [pc, #16]	; (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	60d3      	str	r3, [r2, #12]
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002244:	4b04      	ldr	r3, [pc, #16]	; (8002258 <__NVIC_GetPriorityGrouping+0x18>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	0a1b      	lsrs	r3, r3, #8
 800224a:	f003 0307 	and.w	r3, r3, #7
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	2b00      	cmp	r3, #0
 800226c:	db0b      	blt.n	8002286 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	f003 021f 	and.w	r2, r3, #31
 8002274:	4907      	ldr	r1, [pc, #28]	; (8002294 <__NVIC_EnableIRQ+0x38>)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	2001      	movs	r0, #1
 800227e:	fa00 f202 	lsl.w	r2, r0, r2
 8002282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000e100 	.word	0xe000e100

08002298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	6039      	str	r1, [r7, #0]
 80022a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	db0a      	blt.n	80022c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	490c      	ldr	r1, [pc, #48]	; (80022e4 <__NVIC_SetPriority+0x4c>)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	0112      	lsls	r2, r2, #4
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	440b      	add	r3, r1
 80022bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c0:	e00a      	b.n	80022d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4908      	ldr	r1, [pc, #32]	; (80022e8 <__NVIC_SetPriority+0x50>)
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	3b04      	subs	r3, #4
 80022d0:	0112      	lsls	r2, r2, #4
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	440b      	add	r3, r1
 80022d6:	761a      	strb	r2, [r3, #24]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000e100 	.word	0xe000e100
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	; 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f1c3 0307 	rsb	r3, r3, #7
 8002306:	2b04      	cmp	r3, #4
 8002308:	bf28      	it	cs
 800230a:	2304      	movcs	r3, #4
 800230c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3304      	adds	r3, #4
 8002312:	2b06      	cmp	r3, #6
 8002314:	d902      	bls.n	800231c <NVIC_EncodePriority+0x30>
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3b03      	subs	r3, #3
 800231a:	e000      	b.n	800231e <NVIC_EncodePriority+0x32>
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43da      	mvns	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	401a      	ands	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002334:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	43d9      	mvns	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	4313      	orrs	r3, r2
         );
}
 8002346:	4618      	mov	r0, r3
 8002348:	3724      	adds	r7, #36	; 0x24
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002364:	d301      	bcc.n	800236a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002366:	2301      	movs	r3, #1
 8002368:	e00f      	b.n	800238a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236a:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <SysTick_Config+0x40>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002372:	210f      	movs	r1, #15
 8002374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002378:	f7ff ff8e 	bl	8002298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <SysTick_Config+0x40>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <SysTick_Config+0x40>)
 8002384:	2207      	movs	r2, #7
 8002386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	e000e010 	.word	0xe000e010

08002398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ff29 	bl	80021f8 <__NVIC_SetPriorityGrouping>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023c0:	f7ff ff3e 	bl	8002240 <__NVIC_GetPriorityGrouping>
 80023c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	6978      	ldr	r0, [r7, #20]
 80023cc:	f7ff ff8e 	bl	80022ec <NVIC_EncodePriority>
 80023d0:	4602      	mov	r2, r0
 80023d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff5d 	bl	8002298 <__NVIC_SetPriority>
}
 80023de:	bf00      	nop
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff31 	bl	800225c <__NVIC_EnableIRQ>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ffa2 	bl	8002354 <SysTick_Config>
 8002410:	4603      	mov	r3, r0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800242a:	e17f      	b.n	800272c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	2101      	movs	r1, #1
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	fa01 f303 	lsl.w	r3, r1, r3
 8002438:	4013      	ands	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 8171 	beq.w	8002726 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d00b      	beq.n	8002464 <HAL_GPIO_Init+0x48>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b02      	cmp	r3, #2
 8002452:	d007      	beq.n	8002464 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002458:	2b11      	cmp	r3, #17
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b12      	cmp	r3, #18
 8002462:	d130      	bne.n	80024c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	2203      	movs	r2, #3
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800249a:	2201      	movs	r2, #1
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4013      	ands	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	091b      	lsrs	r3, r3, #4
 80024b0:	f003 0201 	and.w	r2, r3, #1
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d118      	bne.n	8002504 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80024d8:	2201      	movs	r2, #1
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	08db      	lsrs	r3, r3, #3
 80024ee:	f003 0201 	and.w	r2, r3, #1
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	2203      	movs	r2, #3
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x128>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b12      	cmp	r3, #18
 8002542:	d123      	bne.n	800258c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	08da      	lsrs	r2, r3, #3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3208      	adds	r2, #8
 800254c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002550:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	220f      	movs	r2, #15
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	08da      	lsrs	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3208      	adds	r2, #8
 8002586:	6939      	ldr	r1, [r7, #16]
 8002588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	2203      	movs	r2, #3
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0203 	and.w	r2, r3, #3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80ac 	beq.w	8002726 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ce:	4b5f      	ldr	r3, [pc, #380]	; (800274c <HAL_GPIO_Init+0x330>)
 80025d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d2:	4a5e      	ldr	r2, [pc, #376]	; (800274c <HAL_GPIO_Init+0x330>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6613      	str	r3, [r2, #96]	; 0x60
 80025da:	4b5c      	ldr	r3, [pc, #368]	; (800274c <HAL_GPIO_Init+0x330>)
 80025dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025e6:	4a5a      	ldr	r2, [pc, #360]	; (8002750 <HAL_GPIO_Init+0x334>)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	089b      	lsrs	r3, r3, #2
 80025ec:	3302      	adds	r3, #2
 80025ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	220f      	movs	r2, #15
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002610:	d025      	beq.n	800265e <HAL_GPIO_Init+0x242>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4f      	ldr	r2, [pc, #316]	; (8002754 <HAL_GPIO_Init+0x338>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d01f      	beq.n	800265a <HAL_GPIO_Init+0x23e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a4e      	ldr	r2, [pc, #312]	; (8002758 <HAL_GPIO_Init+0x33c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d019      	beq.n	8002656 <HAL_GPIO_Init+0x23a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a4d      	ldr	r2, [pc, #308]	; (800275c <HAL_GPIO_Init+0x340>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d013      	beq.n	8002652 <HAL_GPIO_Init+0x236>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4c      	ldr	r2, [pc, #304]	; (8002760 <HAL_GPIO_Init+0x344>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d00d      	beq.n	800264e <HAL_GPIO_Init+0x232>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a4b      	ldr	r2, [pc, #300]	; (8002764 <HAL_GPIO_Init+0x348>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d007      	beq.n	800264a <HAL_GPIO_Init+0x22e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a4a      	ldr	r2, [pc, #296]	; (8002768 <HAL_GPIO_Init+0x34c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d101      	bne.n	8002646 <HAL_GPIO_Init+0x22a>
 8002642:	2306      	movs	r3, #6
 8002644:	e00c      	b.n	8002660 <HAL_GPIO_Init+0x244>
 8002646:	2307      	movs	r3, #7
 8002648:	e00a      	b.n	8002660 <HAL_GPIO_Init+0x244>
 800264a:	2305      	movs	r3, #5
 800264c:	e008      	b.n	8002660 <HAL_GPIO_Init+0x244>
 800264e:	2304      	movs	r3, #4
 8002650:	e006      	b.n	8002660 <HAL_GPIO_Init+0x244>
 8002652:	2303      	movs	r3, #3
 8002654:	e004      	b.n	8002660 <HAL_GPIO_Init+0x244>
 8002656:	2302      	movs	r3, #2
 8002658:	e002      	b.n	8002660 <HAL_GPIO_Init+0x244>
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <HAL_GPIO_Init+0x244>
 800265e:	2300      	movs	r3, #0
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	f002 0203 	and.w	r2, r2, #3
 8002666:	0092      	lsls	r2, r2, #2
 8002668:	4093      	lsls	r3, r2
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002670:	4937      	ldr	r1, [pc, #220]	; (8002750 <HAL_GPIO_Init+0x334>)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	089b      	lsrs	r3, r3, #2
 8002676:	3302      	adds	r3, #2
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800267e:	4b3b      	ldr	r3, [pc, #236]	; (800276c <HAL_GPIO_Init+0x350>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	43db      	mvns	r3, r3
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4013      	ands	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4313      	orrs	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026a2:	4a32      	ldr	r2, [pc, #200]	; (800276c <HAL_GPIO_Init+0x350>)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80026a8:	4b30      	ldr	r3, [pc, #192]	; (800276c <HAL_GPIO_Init+0x350>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026cc:	4a27      	ldr	r2, [pc, #156]	; (800276c <HAL_GPIO_Init+0x350>)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026d2:	4b26      	ldr	r3, [pc, #152]	; (800276c <HAL_GPIO_Init+0x350>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	43db      	mvns	r3, r3
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	4013      	ands	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026f6:	4a1d      	ldr	r2, [pc, #116]	; (800276c <HAL_GPIO_Init+0x350>)
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026fc:	4b1b      	ldr	r3, [pc, #108]	; (800276c <HAL_GPIO_Init+0x350>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	43db      	mvns	r3, r3
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	4013      	ands	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002720:	4a12      	ldr	r2, [pc, #72]	; (800276c <HAL_GPIO_Init+0x350>)
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	3301      	adds	r3, #1
 800272a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	fa22 f303 	lsr.w	r3, r2, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	f47f ae78 	bne.w	800242c <HAL_GPIO_Init+0x10>
  }
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	371c      	adds	r7, #28
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000
 8002750:	40010000 	.word	0x40010000
 8002754:	48000400 	.word	0x48000400
 8002758:	48000800 	.word	0x48000800
 800275c:	48000c00 	.word	0x48000c00
 8002760:	48001000 	.word	0x48001000
 8002764:	48001400 	.word	0x48001400
 8002768:	48001800 	.word	0x48001800
 800276c:	40010400 	.word	0x40010400

08002770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	807b      	strh	r3, [r7, #2]
 800277c:	4613      	mov	r3, r2
 800277e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002780:	787b      	ldrb	r3, [r7, #1]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002786:	887a      	ldrh	r2, [r7, #2]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800278c:	e002      	b.n	8002794 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800278e:	887a      	ldrh	r2, [r7, #2]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027b2:	887a      	ldrh	r2, [r7, #2]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4013      	ands	r3, r2
 80027b8:	041a      	lsls	r2, r3, #16
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	43d9      	mvns	r1, r3
 80027be:	887b      	ldrh	r3, [r7, #2]
 80027c0:	400b      	ands	r3, r1
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	619a      	str	r2, [r3, #24]
}
 80027c8:	bf00      	nop
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027de:	4b08      	ldr	r3, [pc, #32]	; (8002800 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027e0:	695a      	ldr	r2, [r3, #20]
 80027e2:	88fb      	ldrh	r3, [r7, #6]
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d006      	beq.n	80027f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027ea:	4a05      	ldr	r2, [pc, #20]	; (8002800 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027ec:	88fb      	ldrh	r3, [r7, #6]
 80027ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027f0:	88fb      	ldrh	r3, [r7, #6]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe fb24 	bl	8000e40 <HAL_GPIO_EXTI_Callback>
  }
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40010400 	.word	0x40010400

08002804 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002808:	4b04      	ldr	r3, [pc, #16]	; (800281c <HAL_PWREx_GetVoltageRange+0x18>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002810:	4618      	mov	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40007000 	.word	0x40007000

08002820 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800282e:	d130      	bne.n	8002892 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002830:	4b23      	ldr	r3, [pc, #140]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800283c:	d038      	beq.n	80028b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800283e:	4b20      	ldr	r3, [pc, #128]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002846:	4a1e      	ldr	r2, [pc, #120]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002848:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800284c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800284e:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2232      	movs	r2, #50	; 0x32
 8002854:	fb02 f303 	mul.w	r3, r2, r3
 8002858:	4a1b      	ldr	r2, [pc, #108]	; (80028c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800285a:	fba2 2303 	umull	r2, r3, r2, r3
 800285e:	0c9b      	lsrs	r3, r3, #18
 8002860:	3301      	adds	r3, #1
 8002862:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002864:	e002      	b.n	800286c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	3b01      	subs	r3, #1
 800286a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800286c:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002878:	d102      	bne.n	8002880 <HAL_PWREx_ControlVoltageScaling+0x60>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1f2      	bne.n	8002866 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002880:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800288c:	d110      	bne.n	80028b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e00f      	b.n	80028b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002892:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800289a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800289e:	d007      	beq.n	80028b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028a0:	4b07      	ldr	r3, [pc, #28]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028a8:	4a05      	ldr	r2, [pc, #20]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40007000 	.word	0x40007000
 80028c4:	20000000 	.word	0x20000000
 80028c8:	431bde83 	.word	0x431bde83

080028cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e3d4      	b.n	8003088 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028de:	4ba1      	ldr	r3, [pc, #644]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028e8:	4b9e      	ldr	r3, [pc, #632]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 80e4 	beq.w	8002ac8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <HAL_RCC_OscConfig+0x4a>
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	2b0c      	cmp	r3, #12
 800290a:	f040 808b 	bne.w	8002a24 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2b01      	cmp	r3, #1
 8002912:	f040 8087 	bne.w	8002a24 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002916:	4b93      	ldr	r3, [pc, #588]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <HAL_RCC_OscConfig+0x62>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e3ac      	b.n	8003088 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1a      	ldr	r2, [r3, #32]
 8002932:	4b8c      	ldr	r3, [pc, #560]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b00      	cmp	r3, #0
 800293c:	d004      	beq.n	8002948 <HAL_RCC_OscConfig+0x7c>
 800293e:	4b89      	ldr	r3, [pc, #548]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002946:	e005      	b.n	8002954 <HAL_RCC_OscConfig+0x88>
 8002948:	4b86      	ldr	r3, [pc, #536]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 800294a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800294e:	091b      	lsrs	r3, r3, #4
 8002950:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002954:	4293      	cmp	r3, r2
 8002956:	d223      	bcs.n	80029a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	4618      	mov	r0, r3
 800295e:	f000 fd41 	bl	80033e4 <RCC_SetFlashLatencyFromMSIRange>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e38d      	b.n	8003088 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800296c:	4b7d      	ldr	r3, [pc, #500]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a7c      	ldr	r2, [pc, #496]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002972:	f043 0308 	orr.w	r3, r3, #8
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	4b7a      	ldr	r3, [pc, #488]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4977      	ldr	r1, [pc, #476]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800298a:	4b76      	ldr	r3, [pc, #472]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	4972      	ldr	r1, [pc, #456]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 800299a:	4313      	orrs	r3, r2
 800299c:	604b      	str	r3, [r1, #4]
 800299e:	e025      	b.n	80029ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029a0:	4b70      	ldr	r3, [pc, #448]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a6f      	ldr	r2, [pc, #444]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 80029a6:	f043 0308 	orr.w	r3, r3, #8
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b6d      	ldr	r3, [pc, #436]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	496a      	ldr	r1, [pc, #424]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029be:	4b69      	ldr	r3, [pc, #420]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	021b      	lsls	r3, r3, #8
 80029cc:	4965      	ldr	r1, [pc, #404]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d109      	bne.n	80029ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fd01 	bl	80033e4 <RCC_SetFlashLatencyFromMSIRange>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e34d      	b.n	8003088 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029ec:	f000 fc36 	bl	800325c <HAL_RCC_GetSysClockFreq>
 80029f0:	4602      	mov	r2, r0
 80029f2:	4b5c      	ldr	r3, [pc, #368]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	495a      	ldr	r1, [pc, #360]	; (8002b68 <HAL_RCC_OscConfig+0x29c>)
 80029fe:	5ccb      	ldrb	r3, [r1, r3]
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	fa22 f303 	lsr.w	r3, r2, r3
 8002a08:	4a58      	ldr	r2, [pc, #352]	; (8002b6c <HAL_RCC_OscConfig+0x2a0>)
 8002a0a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a0c:	4b58      	ldr	r3, [pc, #352]	; (8002b70 <HAL_RCC_OscConfig+0x2a4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe fbc9 	bl	80011a8 <HAL_InitTick>
 8002a16:	4603      	mov	r3, r0
 8002a18:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d052      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	e331      	b.n	8003088 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d032      	beq.n	8002a92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a2c:	4b4d      	ldr	r3, [pc, #308]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a4c      	ldr	r2, [pc, #304]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a38:	f7fe fc06 	bl	8001248 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a40:	f7fe fc02 	bl	8001248 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e31a      	b.n	8003088 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a52:	4b44      	ldr	r3, [pc, #272]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a5e:	4b41      	ldr	r3, [pc, #260]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a40      	ldr	r2, [pc, #256]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002a64:	f043 0308 	orr.w	r3, r3, #8
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	4b3e      	ldr	r3, [pc, #248]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	493b      	ldr	r1, [pc, #236]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a7c:	4b39      	ldr	r3, [pc, #228]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	021b      	lsls	r3, r3, #8
 8002a8a:	4936      	ldr	r1, [pc, #216]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]
 8002a90:	e01a      	b.n	8002ac8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a92:	4b34      	ldr	r3, [pc, #208]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a33      	ldr	r2, [pc, #204]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002a98:	f023 0301 	bic.w	r3, r3, #1
 8002a9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a9e:	f7fe fbd3 	bl	8001248 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002aa6:	f7fe fbcf 	bl	8001248 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e2e7      	b.n	8003088 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ab8:	4b2a      	ldr	r3, [pc, #168]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1f0      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x1da>
 8002ac4:	e000      	b.n	8002ac8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ac6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d074      	beq.n	8002bbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d005      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x21a>
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	2b0c      	cmp	r3, #12
 8002ade:	d10e      	bne.n	8002afe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d10b      	bne.n	8002afe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae6:	4b1f      	ldr	r3, [pc, #124]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d064      	beq.n	8002bbc <HAL_RCC_OscConfig+0x2f0>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d160      	bne.n	8002bbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e2c4      	b.n	8003088 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b06:	d106      	bne.n	8002b16 <HAL_RCC_OscConfig+0x24a>
 8002b08:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a15      	ldr	r2, [pc, #84]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b12:	6013      	str	r3, [r2, #0]
 8002b14:	e01d      	b.n	8002b52 <HAL_RCC_OscConfig+0x286>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b1e:	d10c      	bne.n	8002b3a <HAL_RCC_OscConfig+0x26e>
 8002b20:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a0f      	ldr	r2, [pc, #60]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002b26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0c      	ldr	r2, [pc, #48]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	e00b      	b.n	8002b52 <HAL_RCC_OscConfig+0x286>
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a09      	ldr	r2, [pc, #36]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a06      	ldr	r2, [pc, #24]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002b4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b50:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d01c      	beq.n	8002b94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5a:	f7fe fb75 	bl	8001248 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b60:	e011      	b.n	8002b86 <HAL_RCC_OscConfig+0x2ba>
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000
 8002b68:	08004fb0 	.word	0x08004fb0
 8002b6c:	20000000 	.word	0x20000000
 8002b70:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b74:	f7fe fb68 	bl	8001248 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b64      	cmp	r3, #100	; 0x64
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e280      	b.n	8003088 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b86:	4baf      	ldr	r3, [pc, #700]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x2a8>
 8002b92:	e014      	b.n	8002bbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b94:	f7fe fb58 	bl	8001248 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b9c:	f7fe fb54 	bl	8001248 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b64      	cmp	r3, #100	; 0x64
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e26c      	b.n	8003088 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bae:	4ba5      	ldr	r3, [pc, #660]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0x2d0>
 8002bba:	e000      	b.n	8002bbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d060      	beq.n	8002c8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_OscConfig+0x310>
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	2b0c      	cmp	r3, #12
 8002bd4:	d119      	bne.n	8002c0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d116      	bne.n	8002c0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bdc:	4b99      	ldr	r3, [pc, #612]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x328>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e249      	b.n	8003088 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf4:	4b93      	ldr	r3, [pc, #588]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	061b      	lsls	r3, r3, #24
 8002c02:	4990      	ldr	r1, [pc, #576]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c08:	e040      	b.n	8002c8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d023      	beq.n	8002c5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c12:	4b8c      	ldr	r3, [pc, #560]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a8b      	ldr	r2, [pc, #556]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1e:	f7fe fb13 	bl	8001248 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c26:	f7fe fb0f 	bl	8001248 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e227      	b.n	8003088 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c38:	4b82      	ldr	r3, [pc, #520]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c44:	4b7f      	ldr	r3, [pc, #508]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	061b      	lsls	r3, r3, #24
 8002c52:	497c      	ldr	r1, [pc, #496]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	604b      	str	r3, [r1, #4]
 8002c58:	e018      	b.n	8002c8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c5a:	4b7a      	ldr	r3, [pc, #488]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a79      	ldr	r2, [pc, #484]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c66:	f7fe faef 	bl	8001248 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c6e:	f7fe faeb 	bl	8001248 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e203      	b.n	8003088 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c80:	4b70      	ldr	r3, [pc, #448]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f0      	bne.n	8002c6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d03c      	beq.n	8002d12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d01c      	beq.n	8002cda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca0:	4b68      	ldr	r3, [pc, #416]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca6:	4a67      	ldr	r2, [pc, #412]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb0:	f7fe faca 	bl	8001248 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb8:	f7fe fac6 	bl	8001248 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e1de      	b.n	8003088 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cca:	4b5e      	ldr	r3, [pc, #376]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0ef      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x3ec>
 8002cd8:	e01b      	b.n	8002d12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cda:	4b5a      	ldr	r3, [pc, #360]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce0:	4a58      	ldr	r2, [pc, #352]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002ce2:	f023 0301 	bic.w	r3, r3, #1
 8002ce6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cea:	f7fe faad 	bl	8001248 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf2:	f7fe faa9 	bl	8001248 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e1c1      	b.n	8003088 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d04:	4b4f      	ldr	r3, [pc, #316]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1ef      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 80a6 	beq.w	8002e6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d20:	2300      	movs	r3, #0
 8002d22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d24:	4b47      	ldr	r3, [pc, #284]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10d      	bne.n	8002d4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d30:	4b44      	ldr	r3, [pc, #272]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	4a43      	ldr	r2, [pc, #268]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d3c:	4b41      	ldr	r3, [pc, #260]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d4c:	4b3e      	ldr	r3, [pc, #248]	; (8002e48 <HAL_RCC_OscConfig+0x57c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d118      	bne.n	8002d8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d58:	4b3b      	ldr	r3, [pc, #236]	; (8002e48 <HAL_RCC_OscConfig+0x57c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a3a      	ldr	r2, [pc, #232]	; (8002e48 <HAL_RCC_OscConfig+0x57c>)
 8002d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d64:	f7fe fa70 	bl	8001248 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6c:	f7fe fa6c 	bl	8001248 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e184      	b.n	8003088 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d7e:	4b32      	ldr	r3, [pc, #200]	; (8002e48 <HAL_RCC_OscConfig+0x57c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d108      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4d8>
 8002d92:	4b2c      	ldr	r3, [pc, #176]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d98:	4a2a      	ldr	r2, [pc, #168]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002d9a:	f043 0301 	orr.w	r3, r3, #1
 8002d9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002da2:	e024      	b.n	8002dee <HAL_RCC_OscConfig+0x522>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2b05      	cmp	r3, #5
 8002daa:	d110      	bne.n	8002dce <HAL_RCC_OscConfig+0x502>
 8002dac:	4b25      	ldr	r3, [pc, #148]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db2:	4a24      	ldr	r2, [pc, #144]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002db4:	f043 0304 	orr.w	r3, r3, #4
 8002db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dbc:	4b21      	ldr	r3, [pc, #132]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc2:	4a20      	ldr	r2, [pc, #128]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dcc:	e00f      	b.n	8002dee <HAL_RCC_OscConfig+0x522>
 8002dce:	4b1d      	ldr	r3, [pc, #116]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd4:	4a1b      	ldr	r2, [pc, #108]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002dd6:	f023 0301 	bic.w	r3, r3, #1
 8002dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dde:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de4:	4a17      	ldr	r2, [pc, #92]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002de6:	f023 0304 	bic.w	r3, r3, #4
 8002dea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d016      	beq.n	8002e24 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df6:	f7fe fa27 	bl	8001248 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dfc:	e00a      	b.n	8002e14 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfe:	f7fe fa23 	bl	8001248 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e139      	b.n	8003088 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0ed      	beq.n	8002dfe <HAL_RCC_OscConfig+0x532>
 8002e22:	e01a      	b.n	8002e5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e24:	f7fe fa10 	bl	8001248 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e2a:	e00f      	b.n	8002e4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2c:	f7fe fa0c 	bl	8001248 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d906      	bls.n	8002e4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e122      	b.n	8003088 <HAL_RCC_OscConfig+0x7bc>
 8002e42:	bf00      	nop
 8002e44:	40021000 	.word	0x40021000
 8002e48:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e4c:	4b90      	ldr	r3, [pc, #576]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8002e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1e8      	bne.n	8002e2c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e5a:	7ffb      	ldrb	r3, [r7, #31]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d105      	bne.n	8002e6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e60:	4b8b      	ldr	r3, [pc, #556]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8002e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e64:	4a8a      	ldr	r2, [pc, #552]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8002e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 8108 	beq.w	8003086 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	f040 80d0 	bne.w	8003020 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e80:	4b83      	ldr	r3, [pc, #524]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f003 0203 	and.w	r2, r3, #3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d130      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d127      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d11f      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ec0:	2a07      	cmp	r2, #7
 8002ec2:	bf14      	ite	ne
 8002ec4:	2201      	movne	r2, #1
 8002ec6:	2200      	moveq	r2, #0
 8002ec8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d113      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed8:	085b      	lsrs	r3, r3, #1
 8002eda:	3b01      	subs	r3, #1
 8002edc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d109      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	085b      	lsrs	r3, r3, #1
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d06e      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	2b0c      	cmp	r3, #12
 8002efa:	d069      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002efc:	4b64      	ldr	r3, [pc, #400]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d105      	bne.n	8002f14 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f08:	4b61      	ldr	r3, [pc, #388]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0b7      	b.n	8003088 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f18:	4b5d      	ldr	r3, [pc, #372]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a5c      	ldr	r2, [pc, #368]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8002f1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f22:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f24:	f7fe f990 	bl	8001248 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2c:	f7fe f98c 	bl	8001248 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e0a4      	b.n	8003088 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f3e:	4b54      	ldr	r3, [pc, #336]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f4a:	4b51      	ldr	r3, [pc, #324]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	4b51      	ldr	r3, [pc, #324]	; (8003094 <HAL_RCC_OscConfig+0x7c8>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f5a:	3a01      	subs	r2, #1
 8002f5c:	0112      	lsls	r2, r2, #4
 8002f5e:	4311      	orrs	r1, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f64:	0212      	lsls	r2, r2, #8
 8002f66:	4311      	orrs	r1, r2
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f6c:	0852      	lsrs	r2, r2, #1
 8002f6e:	3a01      	subs	r2, #1
 8002f70:	0552      	lsls	r2, r2, #21
 8002f72:	4311      	orrs	r1, r2
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f78:	0852      	lsrs	r2, r2, #1
 8002f7a:	3a01      	subs	r2, #1
 8002f7c:	0652      	lsls	r2, r2, #25
 8002f7e:	4311      	orrs	r1, r2
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f84:	0912      	lsrs	r2, r2, #4
 8002f86:	0452      	lsls	r2, r2, #17
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	4941      	ldr	r1, [pc, #260]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f90:	4b3f      	ldr	r3, [pc, #252]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a3e      	ldr	r2, [pc, #248]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8002f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f9c:	4b3c      	ldr	r3, [pc, #240]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	4a3b      	ldr	r2, [pc, #236]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8002fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fa6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fa8:	f7fe f94e 	bl	8001248 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb0:	f7fe f94a 	bl	8001248 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e062      	b.n	8003088 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc2:	4b33      	ldr	r3, [pc, #204]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fce:	e05a      	b.n	8003086 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e059      	b.n	8003088 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fd4:	4b2e      	ldr	r3, [pc, #184]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d152      	bne.n	8003086 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fe0:	4b2b      	ldr	r3, [pc, #172]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a2a      	ldr	r2, [pc, #168]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8002fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fec:	4b28      	ldr	r3, [pc, #160]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	4a27      	ldr	r2, [pc, #156]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8002ff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ff6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ff8:	f7fe f926 	bl	8001248 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003000:	f7fe f922 	bl	8001248 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e03a      	b.n	8003088 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003012:	4b1f      	ldr	r3, [pc, #124]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0f0      	beq.n	8003000 <HAL_RCC_OscConfig+0x734>
 800301e:	e032      	b.n	8003086 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	2b0c      	cmp	r3, #12
 8003024:	d02d      	beq.n	8003082 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003026:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a19      	ldr	r2, [pc, #100]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 800302c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003030:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003032:	4b17      	ldr	r3, [pc, #92]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d105      	bne.n	800304a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800303e:	4b14      	ldr	r3, [pc, #80]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	4a13      	ldr	r2, [pc, #76]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8003044:	f023 0303 	bic.w	r3, r3, #3
 8003048:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800304a:	4b11      	ldr	r3, [pc, #68]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	4a10      	ldr	r2, [pc, #64]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8003050:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003058:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305a:	f7fe f8f5 	bl	8001248 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003062:	f7fe f8f1 	bl	8001248 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e009      	b.n	8003088 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003074:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_RCC_OscConfig+0x7c4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1f0      	bne.n	8003062 <HAL_RCC_OscConfig+0x796>
 8003080:	e001      	b.n	8003086 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e000      	b.n	8003088 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3720      	adds	r7, #32
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40021000 	.word	0x40021000
 8003094:	f99d808c 	.word	0xf99d808c

08003098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0c8      	b.n	800323e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030ac:	4b66      	ldr	r3, [pc, #408]	; (8003248 <HAL_RCC_ClockConfig+0x1b0>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d910      	bls.n	80030dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ba:	4b63      	ldr	r3, [pc, #396]	; (8003248 <HAL_RCC_ClockConfig+0x1b0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f023 0207 	bic.w	r2, r3, #7
 80030c2:	4961      	ldr	r1, [pc, #388]	; (8003248 <HAL_RCC_ClockConfig+0x1b0>)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ca:	4b5f      	ldr	r3, [pc, #380]	; (8003248 <HAL_RCC_ClockConfig+0x1b0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0b0      	b.n	800323e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d04c      	beq.n	8003182 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d107      	bne.n	8003100 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f0:	4b56      	ldr	r3, [pc, #344]	; (800324c <HAL_RCC_ClockConfig+0x1b4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d121      	bne.n	8003140 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e09e      	b.n	800323e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b02      	cmp	r3, #2
 8003106:	d107      	bne.n	8003118 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003108:	4b50      	ldr	r3, [pc, #320]	; (800324c <HAL_RCC_ClockConfig+0x1b4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d115      	bne.n	8003140 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e092      	b.n	800323e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d107      	bne.n	8003130 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003120:	4b4a      	ldr	r3, [pc, #296]	; (800324c <HAL_RCC_ClockConfig+0x1b4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d109      	bne.n	8003140 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e086      	b.n	800323e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003130:	4b46      	ldr	r3, [pc, #280]	; (800324c <HAL_RCC_ClockConfig+0x1b4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e07e      	b.n	800323e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003140:	4b42      	ldr	r3, [pc, #264]	; (800324c <HAL_RCC_ClockConfig+0x1b4>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f023 0203 	bic.w	r2, r3, #3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	493f      	ldr	r1, [pc, #252]	; (800324c <HAL_RCC_ClockConfig+0x1b4>)
 800314e:	4313      	orrs	r3, r2
 8003150:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003152:	f7fe f879 	bl	8001248 <HAL_GetTick>
 8003156:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003158:	e00a      	b.n	8003170 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800315a:	f7fe f875 	bl	8001248 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	f241 3288 	movw	r2, #5000	; 0x1388
 8003168:	4293      	cmp	r3, r2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e066      	b.n	800323e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003170:	4b36      	ldr	r3, [pc, #216]	; (800324c <HAL_RCC_ClockConfig+0x1b4>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 020c 	and.w	r2, r3, #12
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	429a      	cmp	r2, r3
 8003180:	d1eb      	bne.n	800315a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d008      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800318e:	4b2f      	ldr	r3, [pc, #188]	; (800324c <HAL_RCC_ClockConfig+0x1b4>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	492c      	ldr	r1, [pc, #176]	; (800324c <HAL_RCC_ClockConfig+0x1b4>)
 800319c:	4313      	orrs	r3, r2
 800319e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031a0:	4b29      	ldr	r3, [pc, #164]	; (8003248 <HAL_RCC_ClockConfig+0x1b0>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d210      	bcs.n	80031d0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ae:	4b26      	ldr	r3, [pc, #152]	; (8003248 <HAL_RCC_ClockConfig+0x1b0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 0207 	bic.w	r2, r3, #7
 80031b6:	4924      	ldr	r1, [pc, #144]	; (8003248 <HAL_RCC_ClockConfig+0x1b0>)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031be:	4b22      	ldr	r3, [pc, #136]	; (8003248 <HAL_RCC_ClockConfig+0x1b0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e036      	b.n	800323e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031dc:	4b1b      	ldr	r3, [pc, #108]	; (800324c <HAL_RCC_ClockConfig+0x1b4>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4918      	ldr	r1, [pc, #96]	; (800324c <HAL_RCC_ClockConfig+0x1b4>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d009      	beq.n	800320e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031fa:	4b14      	ldr	r3, [pc, #80]	; (800324c <HAL_RCC_ClockConfig+0x1b4>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4910      	ldr	r1, [pc, #64]	; (800324c <HAL_RCC_ClockConfig+0x1b4>)
 800320a:	4313      	orrs	r3, r2
 800320c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800320e:	f000 f825 	bl	800325c <HAL_RCC_GetSysClockFreq>
 8003212:	4602      	mov	r2, r0
 8003214:	4b0d      	ldr	r3, [pc, #52]	; (800324c <HAL_RCC_ClockConfig+0x1b4>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	490c      	ldr	r1, [pc, #48]	; (8003250 <HAL_RCC_ClockConfig+0x1b8>)
 8003220:	5ccb      	ldrb	r3, [r1, r3]
 8003222:	f003 031f 	and.w	r3, r3, #31
 8003226:	fa22 f303 	lsr.w	r3, r2, r3
 800322a:	4a0a      	ldr	r2, [pc, #40]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800322e:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7fd ffb8 	bl	80011a8 <HAL_InitTick>
 8003238:	4603      	mov	r3, r0
 800323a:	72fb      	strb	r3, [r7, #11]

  return status;
 800323c:	7afb      	ldrb	r3, [r7, #11]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40022000 	.word	0x40022000
 800324c:	40021000 	.word	0x40021000
 8003250:	08004fb0 	.word	0x08004fb0
 8003254:	20000000 	.word	0x20000000
 8003258:	20000004 	.word	0x20000004

0800325c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800325c:	b480      	push	{r7}
 800325e:	b089      	sub	sp, #36	; 0x24
 8003260:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	61fb      	str	r3, [r7, #28]
 8003266:	2300      	movs	r3, #0
 8003268:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800326a:	4b3e      	ldr	r3, [pc, #248]	; (8003364 <HAL_RCC_GetSysClockFreq+0x108>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 030c 	and.w	r3, r3, #12
 8003272:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003274:	4b3b      	ldr	r3, [pc, #236]	; (8003364 <HAL_RCC_GetSysClockFreq+0x108>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f003 0303 	and.w	r3, r3, #3
 800327c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d005      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x34>
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	2b0c      	cmp	r3, #12
 8003288:	d121      	bne.n	80032ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d11e      	bne.n	80032ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003290:	4b34      	ldr	r3, [pc, #208]	; (8003364 <HAL_RCC_GetSysClockFreq+0x108>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b00      	cmp	r3, #0
 800329a:	d107      	bne.n	80032ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800329c:	4b31      	ldr	r3, [pc, #196]	; (8003364 <HAL_RCC_GetSysClockFreq+0x108>)
 800329e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032a2:	0a1b      	lsrs	r3, r3, #8
 80032a4:	f003 030f 	and.w	r3, r3, #15
 80032a8:	61fb      	str	r3, [r7, #28]
 80032aa:	e005      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032ac:	4b2d      	ldr	r3, [pc, #180]	; (8003364 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	091b      	lsrs	r3, r3, #4
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032b8:	4a2b      	ldr	r2, [pc, #172]	; (8003368 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10d      	bne.n	80032e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032cc:	e00a      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d102      	bne.n	80032da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032d4:	4b25      	ldr	r3, [pc, #148]	; (800336c <HAL_RCC_GetSysClockFreq+0x110>)
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	e004      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d101      	bne.n	80032e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032e0:	4b23      	ldr	r3, [pc, #140]	; (8003370 <HAL_RCC_GetSysClockFreq+0x114>)
 80032e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	2b0c      	cmp	r3, #12
 80032e8:	d134      	bne.n	8003354 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032ea:	4b1e      	ldr	r3, [pc, #120]	; (8003364 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d003      	beq.n	8003302 <HAL_RCC_GetSysClockFreq+0xa6>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d003      	beq.n	8003308 <HAL_RCC_GetSysClockFreq+0xac>
 8003300:	e005      	b.n	800330e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003302:	4b1a      	ldr	r3, [pc, #104]	; (800336c <HAL_RCC_GetSysClockFreq+0x110>)
 8003304:	617b      	str	r3, [r7, #20]
      break;
 8003306:	e005      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003308:	4b19      	ldr	r3, [pc, #100]	; (8003370 <HAL_RCC_GetSysClockFreq+0x114>)
 800330a:	617b      	str	r3, [r7, #20]
      break;
 800330c:	e002      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	617b      	str	r3, [r7, #20]
      break;
 8003312:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003314:	4b13      	ldr	r3, [pc, #76]	; (8003364 <HAL_RCC_GetSysClockFreq+0x108>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	3301      	adds	r3, #1
 8003320:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003322:	4b10      	ldr	r3, [pc, #64]	; (8003364 <HAL_RCC_GetSysClockFreq+0x108>)
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	0a1b      	lsrs	r3, r3, #8
 8003328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	fb02 f203 	mul.w	r2, r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	fbb2 f3f3 	udiv	r3, r2, r3
 8003338:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800333a:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <HAL_RCC_GetSysClockFreq+0x108>)
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	0e5b      	lsrs	r3, r3, #25
 8003340:	f003 0303 	and.w	r3, r3, #3
 8003344:	3301      	adds	r3, #1
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003352:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003354:	69bb      	ldr	r3, [r7, #24]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3724      	adds	r7, #36	; 0x24
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000
 8003368:	08004fc8 	.word	0x08004fc8
 800336c:	00f42400 	.word	0x00f42400
 8003370:	007a1200 	.word	0x007a1200

08003374 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003378:	4b03      	ldr	r3, [pc, #12]	; (8003388 <HAL_RCC_GetHCLKFreq+0x14>)
 800337a:	681b      	ldr	r3, [r3, #0]
}
 800337c:	4618      	mov	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	20000000 	.word	0x20000000

0800338c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003390:	f7ff fff0 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 8003394:	4602      	mov	r2, r0
 8003396:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	0a1b      	lsrs	r3, r3, #8
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	4904      	ldr	r1, [pc, #16]	; (80033b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033a2:	5ccb      	ldrb	r3, [r1, r3]
 80033a4:	f003 031f 	and.w	r3, r3, #31
 80033a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40021000 	.word	0x40021000
 80033b4:	08004fc0 	.word	0x08004fc0

080033b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033bc:	f7ff ffda 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 80033c0:	4602      	mov	r2, r0
 80033c2:	4b06      	ldr	r3, [pc, #24]	; (80033dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	0adb      	lsrs	r3, r3, #11
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	4904      	ldr	r1, [pc, #16]	; (80033e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033ce:	5ccb      	ldrb	r3, [r1, r3]
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d8:	4618      	mov	r0, r3
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40021000 	.word	0x40021000
 80033e0:	08004fc0 	.word	0x08004fc0

080033e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033ec:	2300      	movs	r3, #0
 80033ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033f0:	4b2a      	ldr	r3, [pc, #168]	; (800349c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033fc:	f7ff fa02 	bl	8002804 <HAL_PWREx_GetVoltageRange>
 8003400:	6178      	str	r0, [r7, #20]
 8003402:	e014      	b.n	800342e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003404:	4b25      	ldr	r3, [pc, #148]	; (800349c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003408:	4a24      	ldr	r2, [pc, #144]	; (800349c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800340a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340e:	6593      	str	r3, [r2, #88]	; 0x58
 8003410:	4b22      	ldr	r3, [pc, #136]	; (800349c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800341c:	f7ff f9f2 	bl	8002804 <HAL_PWREx_GetVoltageRange>
 8003420:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003422:	4b1e      	ldr	r3, [pc, #120]	; (800349c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003426:	4a1d      	ldr	r2, [pc, #116]	; (800349c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800342c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003434:	d10b      	bne.n	800344e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b80      	cmp	r3, #128	; 0x80
 800343a:	d919      	bls.n	8003470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2ba0      	cmp	r3, #160	; 0xa0
 8003440:	d902      	bls.n	8003448 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003442:	2302      	movs	r3, #2
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	e013      	b.n	8003470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003448:	2301      	movs	r3, #1
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	e010      	b.n	8003470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b80      	cmp	r3, #128	; 0x80
 8003452:	d902      	bls.n	800345a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003454:	2303      	movs	r3, #3
 8003456:	613b      	str	r3, [r7, #16]
 8003458:	e00a      	b.n	8003470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b80      	cmp	r3, #128	; 0x80
 800345e:	d102      	bne.n	8003466 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003460:	2302      	movs	r3, #2
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	e004      	b.n	8003470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b70      	cmp	r3, #112	; 0x70
 800346a:	d101      	bne.n	8003470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800346c:	2301      	movs	r3, #1
 800346e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003470:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f023 0207 	bic.w	r2, r3, #7
 8003478:	4909      	ldr	r1, [pc, #36]	; (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003480:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	429a      	cmp	r2, r3
 800348c:	d001      	beq.n	8003492 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40021000 	.word	0x40021000
 80034a0:	40022000 	.word	0x40022000

080034a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034ac:	2300      	movs	r3, #0
 80034ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034b0:	2300      	movs	r3, #0
 80034b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d041      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034c8:	d02a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80034ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034ce:	d824      	bhi.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034d4:	d008      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034da:	d81e      	bhi.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80034e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034e4:	d010      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034e6:	e018      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034e8:	4b86      	ldr	r3, [pc, #536]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	4a85      	ldr	r2, [pc, #532]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034f4:	e015      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3304      	adds	r3, #4
 80034fa:	2100      	movs	r1, #0
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 fabb 	bl	8003a78 <RCCEx_PLLSAI1_Config>
 8003502:	4603      	mov	r3, r0
 8003504:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003506:	e00c      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3320      	adds	r3, #32
 800350c:	2100      	movs	r1, #0
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fba6 	bl	8003c60 <RCCEx_PLLSAI2_Config>
 8003514:	4603      	mov	r3, r0
 8003516:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003518:	e003      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	74fb      	strb	r3, [r7, #19]
      break;
 800351e:	e000      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003520:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003522:	7cfb      	ldrb	r3, [r7, #19]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10b      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003528:	4b76      	ldr	r3, [pc, #472]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800352a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003536:	4973      	ldr	r1, [pc, #460]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003538:	4313      	orrs	r3, r2
 800353a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800353e:	e001      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003540:	7cfb      	ldrb	r3, [r7, #19]
 8003542:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d041      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003554:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003558:	d02a      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800355a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800355e:	d824      	bhi.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003560:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003564:	d008      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003566:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800356a:	d81e      	bhi.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003574:	d010      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003576:	e018      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003578:	4b62      	ldr	r3, [pc, #392]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4a61      	ldr	r2, [pc, #388]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003582:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003584:	e015      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3304      	adds	r3, #4
 800358a:	2100      	movs	r1, #0
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fa73 	bl	8003a78 <RCCEx_PLLSAI1_Config>
 8003592:	4603      	mov	r3, r0
 8003594:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003596:	e00c      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3320      	adds	r3, #32
 800359c:	2100      	movs	r1, #0
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fb5e 	bl	8003c60 <RCCEx_PLLSAI2_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035a8:	e003      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	74fb      	strb	r3, [r7, #19]
      break;
 80035ae:	e000      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80035b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035b2:	7cfb      	ldrb	r3, [r7, #19]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10b      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035b8:	4b52      	ldr	r3, [pc, #328]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035c6:	494f      	ldr	r1, [pc, #316]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035ce:	e001      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80a0 	beq.w	8003722 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035e2:	2300      	movs	r3, #0
 80035e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035e6:	4b47      	ldr	r3, [pc, #284]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80035f2:	2301      	movs	r3, #1
 80035f4:	e000      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80035f6:	2300      	movs	r3, #0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00d      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035fc:	4b41      	ldr	r3, [pc, #260]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003600:	4a40      	ldr	r2, [pc, #256]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003606:	6593      	str	r3, [r2, #88]	; 0x58
 8003608:	4b3e      	ldr	r3, [pc, #248]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003610:	60bb      	str	r3, [r7, #8]
 8003612:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003614:	2301      	movs	r3, #1
 8003616:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003618:	4b3b      	ldr	r3, [pc, #236]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a3a      	ldr	r2, [pc, #232]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800361e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003622:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003624:	f7fd fe10 	bl	8001248 <HAL_GetTick>
 8003628:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800362a:	e009      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362c:	f7fd fe0c 	bl	8001248 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d902      	bls.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	74fb      	strb	r3, [r7, #19]
        break;
 800363e:	e005      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003640:	4b31      	ldr	r3, [pc, #196]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0ef      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800364c:	7cfb      	ldrb	r3, [r7, #19]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d15c      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003652:	4b2c      	ldr	r3, [pc, #176]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003658:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800365c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d01f      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	429a      	cmp	r2, r3
 800366e:	d019      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003670:	4b24      	ldr	r3, [pc, #144]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800367a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800367c:	4b21      	ldr	r3, [pc, #132]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800367e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003682:	4a20      	ldr	r2, [pc, #128]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800368c:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800368e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003692:	4a1c      	ldr	r2, [pc, #112]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800369c:	4a19      	ldr	r2, [pc, #100]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d016      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ae:	f7fd fdcb 	bl	8001248 <HAL_GetTick>
 80036b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036b4:	e00b      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b6:	f7fd fdc7 	bl	8001248 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d902      	bls.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	74fb      	strb	r3, [r7, #19]
            break;
 80036cc:	e006      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ce:	4b0d      	ldr	r3, [pc, #52]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0ec      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80036dc:	7cfb      	ldrb	r3, [r7, #19]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10c      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036e2:	4b08      	ldr	r3, [pc, #32]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036f2:	4904      	ldr	r1, [pc, #16]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80036fa:	e009      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036fc:	7cfb      	ldrb	r3, [r7, #19]
 80036fe:	74bb      	strb	r3, [r7, #18]
 8003700:	e006      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003702:	bf00      	nop
 8003704:	40021000 	.word	0x40021000
 8003708:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370c:	7cfb      	ldrb	r3, [r7, #19]
 800370e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003710:	7c7b      	ldrb	r3, [r7, #17]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d105      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003716:	4b9e      	ldr	r3, [pc, #632]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371a:	4a9d      	ldr	r2, [pc, #628]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003720:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800372e:	4b98      	ldr	r3, [pc, #608]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003734:	f023 0203 	bic.w	r2, r3, #3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373c:	4994      	ldr	r1, [pc, #592]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00a      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003750:	4b8f      	ldr	r3, [pc, #572]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003756:	f023 020c 	bic.w	r2, r3, #12
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375e:	498c      	ldr	r1, [pc, #560]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003772:	4b87      	ldr	r3, [pc, #540]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003778:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	4983      	ldr	r1, [pc, #524]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003794:	4b7e      	ldr	r3, [pc, #504]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a2:	497b      	ldr	r1, [pc, #492]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0310 	and.w	r3, r3, #16
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037b6:	4b76      	ldr	r3, [pc, #472]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c4:	4972      	ldr	r1, [pc, #456]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0320 	and.w	r3, r3, #32
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037d8:	4b6d      	ldr	r3, [pc, #436]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e6:	496a      	ldr	r1, [pc, #424]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037fa:	4b65      	ldr	r3, [pc, #404]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003800:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003808:	4961      	ldr	r1, [pc, #388]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800381c:	4b5c      	ldr	r3, [pc, #368]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003822:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800382a:	4959      	ldr	r1, [pc, #356]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800383e:	4b54      	ldr	r3, [pc, #336]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003844:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384c:	4950      	ldr	r1, [pc, #320]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003860:	4b4b      	ldr	r3, [pc, #300]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003866:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386e:	4948      	ldr	r1, [pc, #288]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003882:	4b43      	ldr	r3, [pc, #268]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003888:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003890:	493f      	ldr	r1, [pc, #252]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d028      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038a4:	4b3a      	ldr	r3, [pc, #232]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038b2:	4937      	ldr	r1, [pc, #220]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038c2:	d106      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038c4:	4b32      	ldr	r3, [pc, #200]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	4a31      	ldr	r2, [pc, #196]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038ce:	60d3      	str	r3, [r2, #12]
 80038d0:	e011      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038da:	d10c      	bne.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3304      	adds	r3, #4
 80038e0:	2101      	movs	r1, #1
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 f8c8 	bl	8003a78 <RCCEx_PLLSAI1_Config>
 80038e8:	4603      	mov	r3, r0
 80038ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038ec:	7cfb      	ldrb	r3, [r7, #19]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80038f2:	7cfb      	ldrb	r3, [r7, #19]
 80038f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d028      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003902:	4b23      	ldr	r3, [pc, #140]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003908:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003910:	491f      	ldr	r1, [pc, #124]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003920:	d106      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003922:	4b1b      	ldr	r3, [pc, #108]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	4a1a      	ldr	r2, [pc, #104]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003928:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800392c:	60d3      	str	r3, [r2, #12]
 800392e:	e011      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003934:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003938:	d10c      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3304      	adds	r3, #4
 800393e:	2101      	movs	r1, #1
 8003940:	4618      	mov	r0, r3
 8003942:	f000 f899 	bl	8003a78 <RCCEx_PLLSAI1_Config>
 8003946:	4603      	mov	r3, r0
 8003948:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800394a:	7cfb      	ldrb	r3, [r7, #19]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003950:	7cfb      	ldrb	r3, [r7, #19]
 8003952:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d02b      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003960:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003966:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800396e:	4908      	ldr	r1, [pc, #32]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800397a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800397e:	d109      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003980:	4b03      	ldr	r3, [pc, #12]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4a02      	ldr	r2, [pc, #8]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800398a:	60d3      	str	r3, [r2, #12]
 800398c:	e014      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800398e:	bf00      	nop
 8003990:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003998:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800399c:	d10c      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3304      	adds	r3, #4
 80039a2:	2101      	movs	r1, #1
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 f867 	bl	8003a78 <RCCEx_PLLSAI1_Config>
 80039aa:	4603      	mov	r3, r0
 80039ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039ae:	7cfb      	ldrb	r3, [r7, #19]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80039b4:	7cfb      	ldrb	r3, [r7, #19]
 80039b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d02f      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039c4:	4b2b      	ldr	r3, [pc, #172]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039d2:	4928      	ldr	r1, [pc, #160]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039e2:	d10d      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3304      	adds	r3, #4
 80039e8:	2102      	movs	r1, #2
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 f844 	bl	8003a78 <RCCEx_PLLSAI1_Config>
 80039f0:	4603      	mov	r3, r0
 80039f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039f4:	7cfb      	ldrb	r3, [r7, #19]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d014      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80039fa:	7cfb      	ldrb	r3, [r7, #19]
 80039fc:	74bb      	strb	r3, [r7, #18]
 80039fe:	e011      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a08:	d10c      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3320      	adds	r3, #32
 8003a0e:	2102      	movs	r1, #2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 f925 	bl	8003c60 <RCCEx_PLLSAI2_Config>
 8003a16:	4603      	mov	r3, r0
 8003a18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a1a:	7cfb      	ldrb	r3, [r7, #19]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a20:	7cfb      	ldrb	r3, [r7, #19]
 8003a22:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00a      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a30:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a36:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a3e:	490d      	ldr	r1, [pc, #52]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00b      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a52:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a62:	4904      	ldr	r1, [pc, #16]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a6a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40021000 	.word	0x40021000

08003a78 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a86:	4b75      	ldr	r3, [pc, #468]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d018      	beq.n	8003ac4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a92:	4b72      	ldr	r3, [pc, #456]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f003 0203 	and.w	r2, r3, #3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d10d      	bne.n	8003abe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
       ||
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d009      	beq.n	8003abe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003aaa:	4b6c      	ldr	r3, [pc, #432]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	091b      	lsrs	r3, r3, #4
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
       ||
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d047      	beq.n	8003b4e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	73fb      	strb	r3, [r7, #15]
 8003ac2:	e044      	b.n	8003b4e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d018      	beq.n	8003afe <RCCEx_PLLSAI1_Config+0x86>
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d825      	bhi.n	8003b1c <RCCEx_PLLSAI1_Config+0xa4>
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d002      	beq.n	8003ada <RCCEx_PLLSAI1_Config+0x62>
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d009      	beq.n	8003aec <RCCEx_PLLSAI1_Config+0x74>
 8003ad8:	e020      	b.n	8003b1c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ada:	4b60      	ldr	r3, [pc, #384]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d11d      	bne.n	8003b22 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aea:	e01a      	b.n	8003b22 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003aec:	4b5b      	ldr	r3, [pc, #364]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d116      	bne.n	8003b26 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003afc:	e013      	b.n	8003b26 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003afe:	4b57      	ldr	r3, [pc, #348]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10f      	bne.n	8003b2a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b0a:	4b54      	ldr	r3, [pc, #336]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d109      	bne.n	8003b2a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b1a:	e006      	b.n	8003b2a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b20:	e004      	b.n	8003b2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b22:	bf00      	nop
 8003b24:	e002      	b.n	8003b2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b26:	bf00      	nop
 8003b28:	e000      	b.n	8003b2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10d      	bne.n	8003b4e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b32:	4b4a      	ldr	r3, [pc, #296]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6819      	ldr	r1, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	430b      	orrs	r3, r1
 8003b48:	4944      	ldr	r1, [pc, #272]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d17d      	bne.n	8003c50 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b54:	4b41      	ldr	r3, [pc, #260]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a40      	ldr	r2, [pc, #256]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b60:	f7fd fb72 	bl	8001248 <HAL_GetTick>
 8003b64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b66:	e009      	b.n	8003b7c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b68:	f7fd fb6e 	bl	8001248 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d902      	bls.n	8003b7c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	73fb      	strb	r3, [r7, #15]
        break;
 8003b7a:	e005      	b.n	8003b88 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b7c:	4b37      	ldr	r3, [pc, #220]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1ef      	bne.n	8003b68 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d160      	bne.n	8003c50 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d111      	bne.n	8003bb8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b94:	4b31      	ldr	r3, [pc, #196]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6892      	ldr	r2, [r2, #8]
 8003ba4:	0211      	lsls	r1, r2, #8
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	68d2      	ldr	r2, [r2, #12]
 8003baa:	0912      	lsrs	r2, r2, #4
 8003bac:	0452      	lsls	r2, r2, #17
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	492a      	ldr	r1, [pc, #168]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	610b      	str	r3, [r1, #16]
 8003bb6:	e027      	b.n	8003c08 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d112      	bne.n	8003be4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bbe:	4b27      	ldr	r3, [pc, #156]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003bc6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6892      	ldr	r2, [r2, #8]
 8003bce:	0211      	lsls	r1, r2, #8
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6912      	ldr	r2, [r2, #16]
 8003bd4:	0852      	lsrs	r2, r2, #1
 8003bd6:	3a01      	subs	r2, #1
 8003bd8:	0552      	lsls	r2, r2, #21
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	491f      	ldr	r1, [pc, #124]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	610b      	str	r3, [r1, #16]
 8003be2:	e011      	b.n	8003c08 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003be4:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003bec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6892      	ldr	r2, [r2, #8]
 8003bf4:	0211      	lsls	r1, r2, #8
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6952      	ldr	r2, [r2, #20]
 8003bfa:	0852      	lsrs	r2, r2, #1
 8003bfc:	3a01      	subs	r2, #1
 8003bfe:	0652      	lsls	r2, r2, #25
 8003c00:	430a      	orrs	r2, r1
 8003c02:	4916      	ldr	r1, [pc, #88]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c08:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a13      	ldr	r2, [pc, #76]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c14:	f7fd fb18 	bl	8001248 <HAL_GetTick>
 8003c18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c1a:	e009      	b.n	8003c30 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c1c:	f7fd fb14 	bl	8001248 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d902      	bls.n	8003c30 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	73fb      	strb	r3, [r7, #15]
          break;
 8003c2e:	e005      	b.n	8003c3c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c30:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0ef      	beq.n	8003c1c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c42:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c44:	691a      	ldr	r2, [r3, #16]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	4904      	ldr	r1, [pc, #16]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40021000 	.word	0x40021000

08003c60 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c6e:	4b6a      	ldr	r3, [pc, #424]	; (8003e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d018      	beq.n	8003cac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c7a:	4b67      	ldr	r3, [pc, #412]	; (8003e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 0203 	and.w	r2, r3, #3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d10d      	bne.n	8003ca6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
       ||
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d009      	beq.n	8003ca6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c92:	4b61      	ldr	r3, [pc, #388]	; (8003e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	091b      	lsrs	r3, r3, #4
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d047      	beq.n	8003d36 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	73fb      	strb	r3, [r7, #15]
 8003caa:	e044      	b.n	8003d36 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b03      	cmp	r3, #3
 8003cb2:	d018      	beq.n	8003ce6 <RCCEx_PLLSAI2_Config+0x86>
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d825      	bhi.n	8003d04 <RCCEx_PLLSAI2_Config+0xa4>
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d002      	beq.n	8003cc2 <RCCEx_PLLSAI2_Config+0x62>
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d009      	beq.n	8003cd4 <RCCEx_PLLSAI2_Config+0x74>
 8003cc0:	e020      	b.n	8003d04 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cc2:	4b55      	ldr	r3, [pc, #340]	; (8003e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d11d      	bne.n	8003d0a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cd2:	e01a      	b.n	8003d0a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cd4:	4b50      	ldr	r3, [pc, #320]	; (8003e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d116      	bne.n	8003d0e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ce4:	e013      	b.n	8003d0e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ce6:	4b4c      	ldr	r3, [pc, #304]	; (8003e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10f      	bne.n	8003d12 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cf2:	4b49      	ldr	r3, [pc, #292]	; (8003e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d109      	bne.n	8003d12 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d02:	e006      	b.n	8003d12 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	73fb      	strb	r3, [r7, #15]
      break;
 8003d08:	e004      	b.n	8003d14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d0a:	bf00      	nop
 8003d0c:	e002      	b.n	8003d14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d0e:	bf00      	nop
 8003d10:	e000      	b.n	8003d14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d12:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10d      	bne.n	8003d36 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d1a:	4b3f      	ldr	r3, [pc, #252]	; (8003e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6819      	ldr	r1, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	430b      	orrs	r3, r1
 8003d30:	4939      	ldr	r1, [pc, #228]	; (8003e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d167      	bne.n	8003e0c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d3c:	4b36      	ldr	r3, [pc, #216]	; (8003e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a35      	ldr	r2, [pc, #212]	; (8003e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d48:	f7fd fa7e 	bl	8001248 <HAL_GetTick>
 8003d4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d4e:	e009      	b.n	8003d64 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d50:	f7fd fa7a 	bl	8001248 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d902      	bls.n	8003d64 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	73fb      	strb	r3, [r7, #15]
        break;
 8003d62:	e005      	b.n	8003d70 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d64:	4b2c      	ldr	r3, [pc, #176]	; (8003e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1ef      	bne.n	8003d50 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d14a      	bne.n	8003e0c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d111      	bne.n	8003da0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d7c:	4b26      	ldr	r3, [pc, #152]	; (8003e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6892      	ldr	r2, [r2, #8]
 8003d8c:	0211      	lsls	r1, r2, #8
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	68d2      	ldr	r2, [r2, #12]
 8003d92:	0912      	lsrs	r2, r2, #4
 8003d94:	0452      	lsls	r2, r2, #17
 8003d96:	430a      	orrs	r2, r1
 8003d98:	491f      	ldr	r1, [pc, #124]	; (8003e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	614b      	str	r3, [r1, #20]
 8003d9e:	e011      	b.n	8003dc4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003da0:	4b1d      	ldr	r3, [pc, #116]	; (8003e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003da8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6892      	ldr	r2, [r2, #8]
 8003db0:	0211      	lsls	r1, r2, #8
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6912      	ldr	r2, [r2, #16]
 8003db6:	0852      	lsrs	r2, r2, #1
 8003db8:	3a01      	subs	r2, #1
 8003dba:	0652      	lsls	r2, r2, #25
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	4916      	ldr	r1, [pc, #88]	; (8003e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003dc4:	4b14      	ldr	r3, [pc, #80]	; (8003e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a13      	ldr	r2, [pc, #76]	; (8003e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd0:	f7fd fa3a 	bl	8001248 <HAL_GetTick>
 8003dd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003dd6:	e009      	b.n	8003dec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003dd8:	f7fd fa36 	bl	8001248 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d902      	bls.n	8003dec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	73fb      	strb	r3, [r7, #15]
          break;
 8003dea:	e005      	b.n	8003df8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003dec:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0ef      	beq.n	8003dd8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d106      	bne.n	8003e0c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003dfe:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e00:	695a      	ldr	r2, [r3, #20]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	4904      	ldr	r1, [pc, #16]	; (8003e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40021000 	.word	0x40021000

08003e1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e040      	b.n	8003eb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d106      	bne.n	8003e44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7fd f880 	bl	8000f44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2224      	movs	r2, #36	; 0x24
 8003e48:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0201 	bic.w	r2, r2, #1
 8003e58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f82c 	bl	8003eb8 <UART_SetConfig>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d101      	bne.n	8003e6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e022      	b.n	8003eb0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 faaa 	bl	80043cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0201 	orr.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 fb31 	bl	8004510 <UART_CheckIdleState>
 8003eae:	4603      	mov	r3, r0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eb8:	b5b0      	push	{r4, r5, r7, lr}
 8003eba:	b088      	sub	sp, #32
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	4bad      	ldr	r3, [pc, #692]	; (8004198 <UART_SetConfig+0x2e0>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6812      	ldr	r2, [r2, #0]
 8003eea:	69f9      	ldr	r1, [r7, #28]
 8003eec:	430b      	orrs	r3, r1
 8003eee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4aa2      	ldr	r2, [pc, #648]	; (800419c <UART_SetConfig+0x2e4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d004      	beq.n	8003f20 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	69fa      	ldr	r2, [r7, #28]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	69fa      	ldr	r2, [r7, #28]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a99      	ldr	r2, [pc, #612]	; (80041a0 <UART_SetConfig+0x2e8>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d121      	bne.n	8003f82 <UART_SetConfig+0xca>
 8003f3e:	4b99      	ldr	r3, [pc, #612]	; (80041a4 <UART_SetConfig+0x2ec>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f44:	f003 0303 	and.w	r3, r3, #3
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d817      	bhi.n	8003f7c <UART_SetConfig+0xc4>
 8003f4c:	a201      	add	r2, pc, #4	; (adr r2, 8003f54 <UART_SetConfig+0x9c>)
 8003f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f52:	bf00      	nop
 8003f54:	08003f65 	.word	0x08003f65
 8003f58:	08003f71 	.word	0x08003f71
 8003f5c:	08003f6b 	.word	0x08003f6b
 8003f60:	08003f77 	.word	0x08003f77
 8003f64:	2301      	movs	r3, #1
 8003f66:	76fb      	strb	r3, [r7, #27]
 8003f68:	e0e7      	b.n	800413a <UART_SetConfig+0x282>
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	76fb      	strb	r3, [r7, #27]
 8003f6e:	e0e4      	b.n	800413a <UART_SetConfig+0x282>
 8003f70:	2304      	movs	r3, #4
 8003f72:	76fb      	strb	r3, [r7, #27]
 8003f74:	e0e1      	b.n	800413a <UART_SetConfig+0x282>
 8003f76:	2308      	movs	r3, #8
 8003f78:	76fb      	strb	r3, [r7, #27]
 8003f7a:	e0de      	b.n	800413a <UART_SetConfig+0x282>
 8003f7c:	2310      	movs	r3, #16
 8003f7e:	76fb      	strb	r3, [r7, #27]
 8003f80:	e0db      	b.n	800413a <UART_SetConfig+0x282>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a88      	ldr	r2, [pc, #544]	; (80041a8 <UART_SetConfig+0x2f0>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d132      	bne.n	8003ff2 <UART_SetConfig+0x13a>
 8003f8c:	4b85      	ldr	r3, [pc, #532]	; (80041a4 <UART_SetConfig+0x2ec>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f92:	f003 030c 	and.w	r3, r3, #12
 8003f96:	2b0c      	cmp	r3, #12
 8003f98:	d828      	bhi.n	8003fec <UART_SetConfig+0x134>
 8003f9a:	a201      	add	r2, pc, #4	; (adr r2, 8003fa0 <UART_SetConfig+0xe8>)
 8003f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa0:	08003fd5 	.word	0x08003fd5
 8003fa4:	08003fed 	.word	0x08003fed
 8003fa8:	08003fed 	.word	0x08003fed
 8003fac:	08003fed 	.word	0x08003fed
 8003fb0:	08003fe1 	.word	0x08003fe1
 8003fb4:	08003fed 	.word	0x08003fed
 8003fb8:	08003fed 	.word	0x08003fed
 8003fbc:	08003fed 	.word	0x08003fed
 8003fc0:	08003fdb 	.word	0x08003fdb
 8003fc4:	08003fed 	.word	0x08003fed
 8003fc8:	08003fed 	.word	0x08003fed
 8003fcc:	08003fed 	.word	0x08003fed
 8003fd0:	08003fe7 	.word	0x08003fe7
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	76fb      	strb	r3, [r7, #27]
 8003fd8:	e0af      	b.n	800413a <UART_SetConfig+0x282>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	76fb      	strb	r3, [r7, #27]
 8003fde:	e0ac      	b.n	800413a <UART_SetConfig+0x282>
 8003fe0:	2304      	movs	r3, #4
 8003fe2:	76fb      	strb	r3, [r7, #27]
 8003fe4:	e0a9      	b.n	800413a <UART_SetConfig+0x282>
 8003fe6:	2308      	movs	r3, #8
 8003fe8:	76fb      	strb	r3, [r7, #27]
 8003fea:	e0a6      	b.n	800413a <UART_SetConfig+0x282>
 8003fec:	2310      	movs	r3, #16
 8003fee:	76fb      	strb	r3, [r7, #27]
 8003ff0:	e0a3      	b.n	800413a <UART_SetConfig+0x282>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a6d      	ldr	r2, [pc, #436]	; (80041ac <UART_SetConfig+0x2f4>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d120      	bne.n	800403e <UART_SetConfig+0x186>
 8003ffc:	4b69      	ldr	r3, [pc, #420]	; (80041a4 <UART_SetConfig+0x2ec>)
 8003ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004002:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004006:	2b30      	cmp	r3, #48	; 0x30
 8004008:	d013      	beq.n	8004032 <UART_SetConfig+0x17a>
 800400a:	2b30      	cmp	r3, #48	; 0x30
 800400c:	d814      	bhi.n	8004038 <UART_SetConfig+0x180>
 800400e:	2b20      	cmp	r3, #32
 8004010:	d009      	beq.n	8004026 <UART_SetConfig+0x16e>
 8004012:	2b20      	cmp	r3, #32
 8004014:	d810      	bhi.n	8004038 <UART_SetConfig+0x180>
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <UART_SetConfig+0x168>
 800401a:	2b10      	cmp	r3, #16
 800401c:	d006      	beq.n	800402c <UART_SetConfig+0x174>
 800401e:	e00b      	b.n	8004038 <UART_SetConfig+0x180>
 8004020:	2300      	movs	r3, #0
 8004022:	76fb      	strb	r3, [r7, #27]
 8004024:	e089      	b.n	800413a <UART_SetConfig+0x282>
 8004026:	2302      	movs	r3, #2
 8004028:	76fb      	strb	r3, [r7, #27]
 800402a:	e086      	b.n	800413a <UART_SetConfig+0x282>
 800402c:	2304      	movs	r3, #4
 800402e:	76fb      	strb	r3, [r7, #27]
 8004030:	e083      	b.n	800413a <UART_SetConfig+0x282>
 8004032:	2308      	movs	r3, #8
 8004034:	76fb      	strb	r3, [r7, #27]
 8004036:	e080      	b.n	800413a <UART_SetConfig+0x282>
 8004038:	2310      	movs	r3, #16
 800403a:	76fb      	strb	r3, [r7, #27]
 800403c:	e07d      	b.n	800413a <UART_SetConfig+0x282>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a5b      	ldr	r2, [pc, #364]	; (80041b0 <UART_SetConfig+0x2f8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d120      	bne.n	800408a <UART_SetConfig+0x1d2>
 8004048:	4b56      	ldr	r3, [pc, #344]	; (80041a4 <UART_SetConfig+0x2ec>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004052:	2bc0      	cmp	r3, #192	; 0xc0
 8004054:	d013      	beq.n	800407e <UART_SetConfig+0x1c6>
 8004056:	2bc0      	cmp	r3, #192	; 0xc0
 8004058:	d814      	bhi.n	8004084 <UART_SetConfig+0x1cc>
 800405a:	2b80      	cmp	r3, #128	; 0x80
 800405c:	d009      	beq.n	8004072 <UART_SetConfig+0x1ba>
 800405e:	2b80      	cmp	r3, #128	; 0x80
 8004060:	d810      	bhi.n	8004084 <UART_SetConfig+0x1cc>
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <UART_SetConfig+0x1b4>
 8004066:	2b40      	cmp	r3, #64	; 0x40
 8004068:	d006      	beq.n	8004078 <UART_SetConfig+0x1c0>
 800406a:	e00b      	b.n	8004084 <UART_SetConfig+0x1cc>
 800406c:	2300      	movs	r3, #0
 800406e:	76fb      	strb	r3, [r7, #27]
 8004070:	e063      	b.n	800413a <UART_SetConfig+0x282>
 8004072:	2302      	movs	r3, #2
 8004074:	76fb      	strb	r3, [r7, #27]
 8004076:	e060      	b.n	800413a <UART_SetConfig+0x282>
 8004078:	2304      	movs	r3, #4
 800407a:	76fb      	strb	r3, [r7, #27]
 800407c:	e05d      	b.n	800413a <UART_SetConfig+0x282>
 800407e:	2308      	movs	r3, #8
 8004080:	76fb      	strb	r3, [r7, #27]
 8004082:	e05a      	b.n	800413a <UART_SetConfig+0x282>
 8004084:	2310      	movs	r3, #16
 8004086:	76fb      	strb	r3, [r7, #27]
 8004088:	e057      	b.n	800413a <UART_SetConfig+0x282>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a49      	ldr	r2, [pc, #292]	; (80041b4 <UART_SetConfig+0x2fc>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d125      	bne.n	80040e0 <UART_SetConfig+0x228>
 8004094:	4b43      	ldr	r3, [pc, #268]	; (80041a4 <UART_SetConfig+0x2ec>)
 8004096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800409e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040a2:	d017      	beq.n	80040d4 <UART_SetConfig+0x21c>
 80040a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040a8:	d817      	bhi.n	80040da <UART_SetConfig+0x222>
 80040aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040ae:	d00b      	beq.n	80040c8 <UART_SetConfig+0x210>
 80040b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040b4:	d811      	bhi.n	80040da <UART_SetConfig+0x222>
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <UART_SetConfig+0x20a>
 80040ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040be:	d006      	beq.n	80040ce <UART_SetConfig+0x216>
 80040c0:	e00b      	b.n	80040da <UART_SetConfig+0x222>
 80040c2:	2300      	movs	r3, #0
 80040c4:	76fb      	strb	r3, [r7, #27]
 80040c6:	e038      	b.n	800413a <UART_SetConfig+0x282>
 80040c8:	2302      	movs	r3, #2
 80040ca:	76fb      	strb	r3, [r7, #27]
 80040cc:	e035      	b.n	800413a <UART_SetConfig+0x282>
 80040ce:	2304      	movs	r3, #4
 80040d0:	76fb      	strb	r3, [r7, #27]
 80040d2:	e032      	b.n	800413a <UART_SetConfig+0x282>
 80040d4:	2308      	movs	r3, #8
 80040d6:	76fb      	strb	r3, [r7, #27]
 80040d8:	e02f      	b.n	800413a <UART_SetConfig+0x282>
 80040da:	2310      	movs	r3, #16
 80040dc:	76fb      	strb	r3, [r7, #27]
 80040de:	e02c      	b.n	800413a <UART_SetConfig+0x282>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a2d      	ldr	r2, [pc, #180]	; (800419c <UART_SetConfig+0x2e4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d125      	bne.n	8004136 <UART_SetConfig+0x27e>
 80040ea:	4b2e      	ldr	r3, [pc, #184]	; (80041a4 <UART_SetConfig+0x2ec>)
 80040ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040f8:	d017      	beq.n	800412a <UART_SetConfig+0x272>
 80040fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040fe:	d817      	bhi.n	8004130 <UART_SetConfig+0x278>
 8004100:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004104:	d00b      	beq.n	800411e <UART_SetConfig+0x266>
 8004106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800410a:	d811      	bhi.n	8004130 <UART_SetConfig+0x278>
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <UART_SetConfig+0x260>
 8004110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004114:	d006      	beq.n	8004124 <UART_SetConfig+0x26c>
 8004116:	e00b      	b.n	8004130 <UART_SetConfig+0x278>
 8004118:	2300      	movs	r3, #0
 800411a:	76fb      	strb	r3, [r7, #27]
 800411c:	e00d      	b.n	800413a <UART_SetConfig+0x282>
 800411e:	2302      	movs	r3, #2
 8004120:	76fb      	strb	r3, [r7, #27]
 8004122:	e00a      	b.n	800413a <UART_SetConfig+0x282>
 8004124:	2304      	movs	r3, #4
 8004126:	76fb      	strb	r3, [r7, #27]
 8004128:	e007      	b.n	800413a <UART_SetConfig+0x282>
 800412a:	2308      	movs	r3, #8
 800412c:	76fb      	strb	r3, [r7, #27]
 800412e:	e004      	b.n	800413a <UART_SetConfig+0x282>
 8004130:	2310      	movs	r3, #16
 8004132:	76fb      	strb	r3, [r7, #27]
 8004134:	e001      	b.n	800413a <UART_SetConfig+0x282>
 8004136:	2310      	movs	r3, #16
 8004138:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a17      	ldr	r2, [pc, #92]	; (800419c <UART_SetConfig+0x2e4>)
 8004140:	4293      	cmp	r3, r2
 8004142:	f040 8087 	bne.w	8004254 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004146:	7efb      	ldrb	r3, [r7, #27]
 8004148:	2b08      	cmp	r3, #8
 800414a:	d837      	bhi.n	80041bc <UART_SetConfig+0x304>
 800414c:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <UART_SetConfig+0x29c>)
 800414e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004152:	bf00      	nop
 8004154:	08004179 	.word	0x08004179
 8004158:	080041bd 	.word	0x080041bd
 800415c:	08004181 	.word	0x08004181
 8004160:	080041bd 	.word	0x080041bd
 8004164:	08004187 	.word	0x08004187
 8004168:	080041bd 	.word	0x080041bd
 800416c:	080041bd 	.word	0x080041bd
 8004170:	080041bd 	.word	0x080041bd
 8004174:	0800418f 	.word	0x0800418f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004178:	f7ff f908 	bl	800338c <HAL_RCC_GetPCLK1Freq>
 800417c:	6178      	str	r0, [r7, #20]
        break;
 800417e:	e022      	b.n	80041c6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004180:	4b0d      	ldr	r3, [pc, #52]	; (80041b8 <UART_SetConfig+0x300>)
 8004182:	617b      	str	r3, [r7, #20]
        break;
 8004184:	e01f      	b.n	80041c6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004186:	f7ff f869 	bl	800325c <HAL_RCC_GetSysClockFreq>
 800418a:	6178      	str	r0, [r7, #20]
        break;
 800418c:	e01b      	b.n	80041c6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800418e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004192:	617b      	str	r3, [r7, #20]
        break;
 8004194:	e017      	b.n	80041c6 <UART_SetConfig+0x30e>
 8004196:	bf00      	nop
 8004198:	efff69f3 	.word	0xefff69f3
 800419c:	40008000 	.word	0x40008000
 80041a0:	40013800 	.word	0x40013800
 80041a4:	40021000 	.word	0x40021000
 80041a8:	40004400 	.word	0x40004400
 80041ac:	40004800 	.word	0x40004800
 80041b0:	40004c00 	.word	0x40004c00
 80041b4:	40005000 	.word	0x40005000
 80041b8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	76bb      	strb	r3, [r7, #26]
        break;
 80041c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 80f1 	beq.w	80043b0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	4613      	mov	r3, r2
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	4413      	add	r3, r2
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d305      	bcc.n	80041ea <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d902      	bls.n	80041f0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	76bb      	strb	r3, [r7, #26]
 80041ee:	e0df      	b.n	80043b0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f04f 0100 	mov.w	r1, #0
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	020b      	lsls	r3, r1, #8
 8004202:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004206:	0202      	lsls	r2, r0, #8
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	6849      	ldr	r1, [r1, #4]
 800420c:	0849      	lsrs	r1, r1, #1
 800420e:	4608      	mov	r0, r1
 8004210:	f04f 0100 	mov.w	r1, #0
 8004214:	1814      	adds	r4, r2, r0
 8004216:	eb43 0501 	adc.w	r5, r3, r1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	461a      	mov	r2, r3
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	4620      	mov	r0, r4
 8004226:	4629      	mov	r1, r5
 8004228:	f7fc f82a 	bl	8000280 <__aeabi_uldivmod>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	4613      	mov	r3, r2
 8004232:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800423a:	d308      	bcc.n	800424e <UART_SetConfig+0x396>
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004242:	d204      	bcs.n	800424e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	60da      	str	r2, [r3, #12]
 800424c:	e0b0      	b.n	80043b0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	76bb      	strb	r3, [r7, #26]
 8004252:	e0ad      	b.n	80043b0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800425c:	d15c      	bne.n	8004318 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800425e:	7efb      	ldrb	r3, [r7, #27]
 8004260:	2b08      	cmp	r3, #8
 8004262:	d828      	bhi.n	80042b6 <UART_SetConfig+0x3fe>
 8004264:	a201      	add	r2, pc, #4	; (adr r2, 800426c <UART_SetConfig+0x3b4>)
 8004266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426a:	bf00      	nop
 800426c:	08004291 	.word	0x08004291
 8004270:	08004299 	.word	0x08004299
 8004274:	080042a1 	.word	0x080042a1
 8004278:	080042b7 	.word	0x080042b7
 800427c:	080042a7 	.word	0x080042a7
 8004280:	080042b7 	.word	0x080042b7
 8004284:	080042b7 	.word	0x080042b7
 8004288:	080042b7 	.word	0x080042b7
 800428c:	080042af 	.word	0x080042af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004290:	f7ff f87c 	bl	800338c <HAL_RCC_GetPCLK1Freq>
 8004294:	6178      	str	r0, [r7, #20]
        break;
 8004296:	e013      	b.n	80042c0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004298:	f7ff f88e 	bl	80033b8 <HAL_RCC_GetPCLK2Freq>
 800429c:	6178      	str	r0, [r7, #20]
        break;
 800429e:	e00f      	b.n	80042c0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042a0:	4b49      	ldr	r3, [pc, #292]	; (80043c8 <UART_SetConfig+0x510>)
 80042a2:	617b      	str	r3, [r7, #20]
        break;
 80042a4:	e00c      	b.n	80042c0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042a6:	f7fe ffd9 	bl	800325c <HAL_RCC_GetSysClockFreq>
 80042aa:	6178      	str	r0, [r7, #20]
        break;
 80042ac:	e008      	b.n	80042c0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042b2:	617b      	str	r3, [r7, #20]
        break;
 80042b4:	e004      	b.n	80042c0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	76bb      	strb	r3, [r7, #26]
        break;
 80042be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d074      	beq.n	80043b0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	005a      	lsls	r2, r3, #1
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	085b      	lsrs	r3, r3, #1
 80042d0:	441a      	add	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042da:	b29b      	uxth	r3, r3
 80042dc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	2b0f      	cmp	r3, #15
 80042e2:	d916      	bls.n	8004312 <UART_SetConfig+0x45a>
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ea:	d212      	bcs.n	8004312 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	f023 030f 	bic.w	r3, r3, #15
 80042f4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	085b      	lsrs	r3, r3, #1
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	b29a      	uxth	r2, r3
 8004302:	89fb      	ldrh	r3, [r7, #14]
 8004304:	4313      	orrs	r3, r2
 8004306:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	89fa      	ldrh	r2, [r7, #14]
 800430e:	60da      	str	r2, [r3, #12]
 8004310:	e04e      	b.n	80043b0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	76bb      	strb	r3, [r7, #26]
 8004316:	e04b      	b.n	80043b0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004318:	7efb      	ldrb	r3, [r7, #27]
 800431a:	2b08      	cmp	r3, #8
 800431c:	d827      	bhi.n	800436e <UART_SetConfig+0x4b6>
 800431e:	a201      	add	r2, pc, #4	; (adr r2, 8004324 <UART_SetConfig+0x46c>)
 8004320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004324:	08004349 	.word	0x08004349
 8004328:	08004351 	.word	0x08004351
 800432c:	08004359 	.word	0x08004359
 8004330:	0800436f 	.word	0x0800436f
 8004334:	0800435f 	.word	0x0800435f
 8004338:	0800436f 	.word	0x0800436f
 800433c:	0800436f 	.word	0x0800436f
 8004340:	0800436f 	.word	0x0800436f
 8004344:	08004367 	.word	0x08004367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004348:	f7ff f820 	bl	800338c <HAL_RCC_GetPCLK1Freq>
 800434c:	6178      	str	r0, [r7, #20]
        break;
 800434e:	e013      	b.n	8004378 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004350:	f7ff f832 	bl	80033b8 <HAL_RCC_GetPCLK2Freq>
 8004354:	6178      	str	r0, [r7, #20]
        break;
 8004356:	e00f      	b.n	8004378 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004358:	4b1b      	ldr	r3, [pc, #108]	; (80043c8 <UART_SetConfig+0x510>)
 800435a:	617b      	str	r3, [r7, #20]
        break;
 800435c:	e00c      	b.n	8004378 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800435e:	f7fe ff7d 	bl	800325c <HAL_RCC_GetSysClockFreq>
 8004362:	6178      	str	r0, [r7, #20]
        break;
 8004364:	e008      	b.n	8004378 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800436a:	617b      	str	r3, [r7, #20]
        break;
 800436c:	e004      	b.n	8004378 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	76bb      	strb	r3, [r7, #26]
        break;
 8004376:	bf00      	nop
    }

    if (pclk != 0U)
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d018      	beq.n	80043b0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	085a      	lsrs	r2, r3, #1
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	441a      	add	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004390:	b29b      	uxth	r3, r3
 8004392:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2b0f      	cmp	r3, #15
 8004398:	d908      	bls.n	80043ac <UART_SetConfig+0x4f4>
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a0:	d204      	bcs.n	80043ac <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	60da      	str	r2, [r3, #12]
 80043aa:	e001      	b.n	80043b0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80043bc:	7ebb      	ldrb	r3, [r7, #26]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3720      	adds	r7, #32
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bdb0      	pop	{r4, r5, r7, pc}
 80043c6:	bf00      	nop
 80043c8:	00f42400 	.word	0x00f42400

080043cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00a      	beq.n	80043f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d01a      	beq.n	80044e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ca:	d10a      	bne.n	80044e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	605a      	str	r2, [r3, #4]
  }
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af02      	add	r7, sp, #8
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004520:	f7fc fe92 	bl	8001248 <HAL_GetTick>
 8004524:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0308 	and.w	r3, r3, #8
 8004530:	2b08      	cmp	r3, #8
 8004532:	d10e      	bne.n	8004552 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004534:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f82d 	bl	80045a2 <UART_WaitOnFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e023      	b.n	800459a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b04      	cmp	r3, #4
 800455e:	d10e      	bne.n	800457e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004560:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f817 	bl	80045a2 <UART_WaitOnFlagUntilTimeout>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e00d      	b.n	800459a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2220      	movs	r2, #32
 8004582:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2220      	movs	r2, #32
 8004588:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	603b      	str	r3, [r7, #0]
 80045ae:	4613      	mov	r3, r2
 80045b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045b2:	e05e      	b.n	8004672 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045ba:	d05a      	beq.n	8004672 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045bc:	f7fc fe44 	bl	8001248 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d302      	bcc.n	80045d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d11b      	bne.n	800460a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045e0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0201 	bic.w	r2, r2, #1
 80045f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2220      	movs	r2, #32
 80045f6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2220      	movs	r2, #32
 80045fc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e043      	b.n	8004692 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	d02c      	beq.n	8004672 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004626:	d124      	bne.n	8004672 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004630:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004640:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0201 	bic.w	r2, r2, #1
 8004650:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2220      	movs	r2, #32
 8004656:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2220      	movs	r2, #32
 800465c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2220      	movs	r2, #32
 8004662:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e00f      	b.n	8004692 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69da      	ldr	r2, [r3, #28]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	4013      	ands	r3, r2
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	429a      	cmp	r2, r3
 8004680:	bf0c      	ite	eq
 8004682:	2301      	moveq	r3, #1
 8004684:	2300      	movne	r3, #0
 8004686:	b2db      	uxtb	r3, r3
 8004688:	461a      	mov	r2, r3
 800468a:	79fb      	ldrb	r3, [r7, #7]
 800468c:	429a      	cmp	r2, r3
 800468e:	d091      	beq.n	80045b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
	...

0800469c <__errno>:
 800469c:	4b01      	ldr	r3, [pc, #4]	; (80046a4 <__errno+0x8>)
 800469e:	6818      	ldr	r0, [r3, #0]
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	2000000c 	.word	0x2000000c

080046a8 <__libc_init_array>:
 80046a8:	b570      	push	{r4, r5, r6, lr}
 80046aa:	4d0d      	ldr	r5, [pc, #52]	; (80046e0 <__libc_init_array+0x38>)
 80046ac:	4c0d      	ldr	r4, [pc, #52]	; (80046e4 <__libc_init_array+0x3c>)
 80046ae:	1b64      	subs	r4, r4, r5
 80046b0:	10a4      	asrs	r4, r4, #2
 80046b2:	2600      	movs	r6, #0
 80046b4:	42a6      	cmp	r6, r4
 80046b6:	d109      	bne.n	80046cc <__libc_init_array+0x24>
 80046b8:	4d0b      	ldr	r5, [pc, #44]	; (80046e8 <__libc_init_array+0x40>)
 80046ba:	4c0c      	ldr	r4, [pc, #48]	; (80046ec <__libc_init_array+0x44>)
 80046bc:	f000 fc4e 	bl	8004f5c <_init>
 80046c0:	1b64      	subs	r4, r4, r5
 80046c2:	10a4      	asrs	r4, r4, #2
 80046c4:	2600      	movs	r6, #0
 80046c6:	42a6      	cmp	r6, r4
 80046c8:	d105      	bne.n	80046d6 <__libc_init_array+0x2e>
 80046ca:	bd70      	pop	{r4, r5, r6, pc}
 80046cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80046d0:	4798      	blx	r3
 80046d2:	3601      	adds	r6, #1
 80046d4:	e7ee      	b.n	80046b4 <__libc_init_array+0xc>
 80046d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046da:	4798      	blx	r3
 80046dc:	3601      	adds	r6, #1
 80046de:	e7f2      	b.n	80046c6 <__libc_init_array+0x1e>
 80046e0:	08005034 	.word	0x08005034
 80046e4:	08005034 	.word	0x08005034
 80046e8:	08005034 	.word	0x08005034
 80046ec:	08005038 	.word	0x08005038

080046f0 <memset>:
 80046f0:	4402      	add	r2, r0
 80046f2:	4603      	mov	r3, r0
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d100      	bne.n	80046fa <memset+0xa>
 80046f8:	4770      	bx	lr
 80046fa:	f803 1b01 	strb.w	r1, [r3], #1
 80046fe:	e7f9      	b.n	80046f4 <memset+0x4>

08004700 <siprintf>:
 8004700:	b40e      	push	{r1, r2, r3}
 8004702:	b500      	push	{lr}
 8004704:	b09c      	sub	sp, #112	; 0x70
 8004706:	ab1d      	add	r3, sp, #116	; 0x74
 8004708:	9002      	str	r0, [sp, #8]
 800470a:	9006      	str	r0, [sp, #24]
 800470c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004710:	4809      	ldr	r0, [pc, #36]	; (8004738 <siprintf+0x38>)
 8004712:	9107      	str	r1, [sp, #28]
 8004714:	9104      	str	r1, [sp, #16]
 8004716:	4909      	ldr	r1, [pc, #36]	; (800473c <siprintf+0x3c>)
 8004718:	f853 2b04 	ldr.w	r2, [r3], #4
 800471c:	9105      	str	r1, [sp, #20]
 800471e:	6800      	ldr	r0, [r0, #0]
 8004720:	9301      	str	r3, [sp, #4]
 8004722:	a902      	add	r1, sp, #8
 8004724:	f000 f868 	bl	80047f8 <_svfiprintf_r>
 8004728:	9b02      	ldr	r3, [sp, #8]
 800472a:	2200      	movs	r2, #0
 800472c:	701a      	strb	r2, [r3, #0]
 800472e:	b01c      	add	sp, #112	; 0x70
 8004730:	f85d eb04 	ldr.w	lr, [sp], #4
 8004734:	b003      	add	sp, #12
 8004736:	4770      	bx	lr
 8004738:	2000000c 	.word	0x2000000c
 800473c:	ffff0208 	.word	0xffff0208

08004740 <__ssputs_r>:
 8004740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004744:	688e      	ldr	r6, [r1, #8]
 8004746:	429e      	cmp	r6, r3
 8004748:	4682      	mov	sl, r0
 800474a:	460c      	mov	r4, r1
 800474c:	4690      	mov	r8, r2
 800474e:	461f      	mov	r7, r3
 8004750:	d838      	bhi.n	80047c4 <__ssputs_r+0x84>
 8004752:	898a      	ldrh	r2, [r1, #12]
 8004754:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004758:	d032      	beq.n	80047c0 <__ssputs_r+0x80>
 800475a:	6825      	ldr	r5, [r4, #0]
 800475c:	6909      	ldr	r1, [r1, #16]
 800475e:	eba5 0901 	sub.w	r9, r5, r1
 8004762:	6965      	ldr	r5, [r4, #20]
 8004764:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004768:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800476c:	3301      	adds	r3, #1
 800476e:	444b      	add	r3, r9
 8004770:	106d      	asrs	r5, r5, #1
 8004772:	429d      	cmp	r5, r3
 8004774:	bf38      	it	cc
 8004776:	461d      	movcc	r5, r3
 8004778:	0553      	lsls	r3, r2, #21
 800477a:	d531      	bpl.n	80047e0 <__ssputs_r+0xa0>
 800477c:	4629      	mov	r1, r5
 800477e:	f000 fb47 	bl	8004e10 <_malloc_r>
 8004782:	4606      	mov	r6, r0
 8004784:	b950      	cbnz	r0, 800479c <__ssputs_r+0x5c>
 8004786:	230c      	movs	r3, #12
 8004788:	f8ca 3000 	str.w	r3, [sl]
 800478c:	89a3      	ldrh	r3, [r4, #12]
 800478e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004792:	81a3      	strh	r3, [r4, #12]
 8004794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800479c:	6921      	ldr	r1, [r4, #16]
 800479e:	464a      	mov	r2, r9
 80047a0:	f000 fabe 	bl	8004d20 <memcpy>
 80047a4:	89a3      	ldrh	r3, [r4, #12]
 80047a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80047aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ae:	81a3      	strh	r3, [r4, #12]
 80047b0:	6126      	str	r6, [r4, #16]
 80047b2:	6165      	str	r5, [r4, #20]
 80047b4:	444e      	add	r6, r9
 80047b6:	eba5 0509 	sub.w	r5, r5, r9
 80047ba:	6026      	str	r6, [r4, #0]
 80047bc:	60a5      	str	r5, [r4, #8]
 80047be:	463e      	mov	r6, r7
 80047c0:	42be      	cmp	r6, r7
 80047c2:	d900      	bls.n	80047c6 <__ssputs_r+0x86>
 80047c4:	463e      	mov	r6, r7
 80047c6:	4632      	mov	r2, r6
 80047c8:	6820      	ldr	r0, [r4, #0]
 80047ca:	4641      	mov	r1, r8
 80047cc:	f000 fab6 	bl	8004d3c <memmove>
 80047d0:	68a3      	ldr	r3, [r4, #8]
 80047d2:	6822      	ldr	r2, [r4, #0]
 80047d4:	1b9b      	subs	r3, r3, r6
 80047d6:	4432      	add	r2, r6
 80047d8:	60a3      	str	r3, [r4, #8]
 80047da:	6022      	str	r2, [r4, #0]
 80047dc:	2000      	movs	r0, #0
 80047de:	e7db      	b.n	8004798 <__ssputs_r+0x58>
 80047e0:	462a      	mov	r2, r5
 80047e2:	f000 fb6f 	bl	8004ec4 <_realloc_r>
 80047e6:	4606      	mov	r6, r0
 80047e8:	2800      	cmp	r0, #0
 80047ea:	d1e1      	bne.n	80047b0 <__ssputs_r+0x70>
 80047ec:	6921      	ldr	r1, [r4, #16]
 80047ee:	4650      	mov	r0, sl
 80047f0:	f000 fabe 	bl	8004d70 <_free_r>
 80047f4:	e7c7      	b.n	8004786 <__ssputs_r+0x46>
	...

080047f8 <_svfiprintf_r>:
 80047f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047fc:	4698      	mov	r8, r3
 80047fe:	898b      	ldrh	r3, [r1, #12]
 8004800:	061b      	lsls	r3, r3, #24
 8004802:	b09d      	sub	sp, #116	; 0x74
 8004804:	4607      	mov	r7, r0
 8004806:	460d      	mov	r5, r1
 8004808:	4614      	mov	r4, r2
 800480a:	d50e      	bpl.n	800482a <_svfiprintf_r+0x32>
 800480c:	690b      	ldr	r3, [r1, #16]
 800480e:	b963      	cbnz	r3, 800482a <_svfiprintf_r+0x32>
 8004810:	2140      	movs	r1, #64	; 0x40
 8004812:	f000 fafd 	bl	8004e10 <_malloc_r>
 8004816:	6028      	str	r0, [r5, #0]
 8004818:	6128      	str	r0, [r5, #16]
 800481a:	b920      	cbnz	r0, 8004826 <_svfiprintf_r+0x2e>
 800481c:	230c      	movs	r3, #12
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004824:	e0d1      	b.n	80049ca <_svfiprintf_r+0x1d2>
 8004826:	2340      	movs	r3, #64	; 0x40
 8004828:	616b      	str	r3, [r5, #20]
 800482a:	2300      	movs	r3, #0
 800482c:	9309      	str	r3, [sp, #36]	; 0x24
 800482e:	2320      	movs	r3, #32
 8004830:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004834:	f8cd 800c 	str.w	r8, [sp, #12]
 8004838:	2330      	movs	r3, #48	; 0x30
 800483a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80049e4 <_svfiprintf_r+0x1ec>
 800483e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004842:	f04f 0901 	mov.w	r9, #1
 8004846:	4623      	mov	r3, r4
 8004848:	469a      	mov	sl, r3
 800484a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800484e:	b10a      	cbz	r2, 8004854 <_svfiprintf_r+0x5c>
 8004850:	2a25      	cmp	r2, #37	; 0x25
 8004852:	d1f9      	bne.n	8004848 <_svfiprintf_r+0x50>
 8004854:	ebba 0b04 	subs.w	fp, sl, r4
 8004858:	d00b      	beq.n	8004872 <_svfiprintf_r+0x7a>
 800485a:	465b      	mov	r3, fp
 800485c:	4622      	mov	r2, r4
 800485e:	4629      	mov	r1, r5
 8004860:	4638      	mov	r0, r7
 8004862:	f7ff ff6d 	bl	8004740 <__ssputs_r>
 8004866:	3001      	adds	r0, #1
 8004868:	f000 80aa 	beq.w	80049c0 <_svfiprintf_r+0x1c8>
 800486c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800486e:	445a      	add	r2, fp
 8004870:	9209      	str	r2, [sp, #36]	; 0x24
 8004872:	f89a 3000 	ldrb.w	r3, [sl]
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 80a2 	beq.w	80049c0 <_svfiprintf_r+0x1c8>
 800487c:	2300      	movs	r3, #0
 800487e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004882:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004886:	f10a 0a01 	add.w	sl, sl, #1
 800488a:	9304      	str	r3, [sp, #16]
 800488c:	9307      	str	r3, [sp, #28]
 800488e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004892:	931a      	str	r3, [sp, #104]	; 0x68
 8004894:	4654      	mov	r4, sl
 8004896:	2205      	movs	r2, #5
 8004898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800489c:	4851      	ldr	r0, [pc, #324]	; (80049e4 <_svfiprintf_r+0x1ec>)
 800489e:	f7fb fc9f 	bl	80001e0 <memchr>
 80048a2:	9a04      	ldr	r2, [sp, #16]
 80048a4:	b9d8      	cbnz	r0, 80048de <_svfiprintf_r+0xe6>
 80048a6:	06d0      	lsls	r0, r2, #27
 80048a8:	bf44      	itt	mi
 80048aa:	2320      	movmi	r3, #32
 80048ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048b0:	0711      	lsls	r1, r2, #28
 80048b2:	bf44      	itt	mi
 80048b4:	232b      	movmi	r3, #43	; 0x2b
 80048b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048ba:	f89a 3000 	ldrb.w	r3, [sl]
 80048be:	2b2a      	cmp	r3, #42	; 0x2a
 80048c0:	d015      	beq.n	80048ee <_svfiprintf_r+0xf6>
 80048c2:	9a07      	ldr	r2, [sp, #28]
 80048c4:	4654      	mov	r4, sl
 80048c6:	2000      	movs	r0, #0
 80048c8:	f04f 0c0a 	mov.w	ip, #10
 80048cc:	4621      	mov	r1, r4
 80048ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048d2:	3b30      	subs	r3, #48	; 0x30
 80048d4:	2b09      	cmp	r3, #9
 80048d6:	d94e      	bls.n	8004976 <_svfiprintf_r+0x17e>
 80048d8:	b1b0      	cbz	r0, 8004908 <_svfiprintf_r+0x110>
 80048da:	9207      	str	r2, [sp, #28]
 80048dc:	e014      	b.n	8004908 <_svfiprintf_r+0x110>
 80048de:	eba0 0308 	sub.w	r3, r0, r8
 80048e2:	fa09 f303 	lsl.w	r3, r9, r3
 80048e6:	4313      	orrs	r3, r2
 80048e8:	9304      	str	r3, [sp, #16]
 80048ea:	46a2      	mov	sl, r4
 80048ec:	e7d2      	b.n	8004894 <_svfiprintf_r+0x9c>
 80048ee:	9b03      	ldr	r3, [sp, #12]
 80048f0:	1d19      	adds	r1, r3, #4
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	9103      	str	r1, [sp, #12]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	bfbb      	ittet	lt
 80048fa:	425b      	neglt	r3, r3
 80048fc:	f042 0202 	orrlt.w	r2, r2, #2
 8004900:	9307      	strge	r3, [sp, #28]
 8004902:	9307      	strlt	r3, [sp, #28]
 8004904:	bfb8      	it	lt
 8004906:	9204      	strlt	r2, [sp, #16]
 8004908:	7823      	ldrb	r3, [r4, #0]
 800490a:	2b2e      	cmp	r3, #46	; 0x2e
 800490c:	d10c      	bne.n	8004928 <_svfiprintf_r+0x130>
 800490e:	7863      	ldrb	r3, [r4, #1]
 8004910:	2b2a      	cmp	r3, #42	; 0x2a
 8004912:	d135      	bne.n	8004980 <_svfiprintf_r+0x188>
 8004914:	9b03      	ldr	r3, [sp, #12]
 8004916:	1d1a      	adds	r2, r3, #4
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	9203      	str	r2, [sp, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	bfb8      	it	lt
 8004920:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004924:	3402      	adds	r4, #2
 8004926:	9305      	str	r3, [sp, #20]
 8004928:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80049f4 <_svfiprintf_r+0x1fc>
 800492c:	7821      	ldrb	r1, [r4, #0]
 800492e:	2203      	movs	r2, #3
 8004930:	4650      	mov	r0, sl
 8004932:	f7fb fc55 	bl	80001e0 <memchr>
 8004936:	b140      	cbz	r0, 800494a <_svfiprintf_r+0x152>
 8004938:	2340      	movs	r3, #64	; 0x40
 800493a:	eba0 000a 	sub.w	r0, r0, sl
 800493e:	fa03 f000 	lsl.w	r0, r3, r0
 8004942:	9b04      	ldr	r3, [sp, #16]
 8004944:	4303      	orrs	r3, r0
 8004946:	3401      	adds	r4, #1
 8004948:	9304      	str	r3, [sp, #16]
 800494a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800494e:	4826      	ldr	r0, [pc, #152]	; (80049e8 <_svfiprintf_r+0x1f0>)
 8004950:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004954:	2206      	movs	r2, #6
 8004956:	f7fb fc43 	bl	80001e0 <memchr>
 800495a:	2800      	cmp	r0, #0
 800495c:	d038      	beq.n	80049d0 <_svfiprintf_r+0x1d8>
 800495e:	4b23      	ldr	r3, [pc, #140]	; (80049ec <_svfiprintf_r+0x1f4>)
 8004960:	bb1b      	cbnz	r3, 80049aa <_svfiprintf_r+0x1b2>
 8004962:	9b03      	ldr	r3, [sp, #12]
 8004964:	3307      	adds	r3, #7
 8004966:	f023 0307 	bic.w	r3, r3, #7
 800496a:	3308      	adds	r3, #8
 800496c:	9303      	str	r3, [sp, #12]
 800496e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004970:	4433      	add	r3, r6
 8004972:	9309      	str	r3, [sp, #36]	; 0x24
 8004974:	e767      	b.n	8004846 <_svfiprintf_r+0x4e>
 8004976:	fb0c 3202 	mla	r2, ip, r2, r3
 800497a:	460c      	mov	r4, r1
 800497c:	2001      	movs	r0, #1
 800497e:	e7a5      	b.n	80048cc <_svfiprintf_r+0xd4>
 8004980:	2300      	movs	r3, #0
 8004982:	3401      	adds	r4, #1
 8004984:	9305      	str	r3, [sp, #20]
 8004986:	4619      	mov	r1, r3
 8004988:	f04f 0c0a 	mov.w	ip, #10
 800498c:	4620      	mov	r0, r4
 800498e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004992:	3a30      	subs	r2, #48	; 0x30
 8004994:	2a09      	cmp	r2, #9
 8004996:	d903      	bls.n	80049a0 <_svfiprintf_r+0x1a8>
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0c5      	beq.n	8004928 <_svfiprintf_r+0x130>
 800499c:	9105      	str	r1, [sp, #20]
 800499e:	e7c3      	b.n	8004928 <_svfiprintf_r+0x130>
 80049a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80049a4:	4604      	mov	r4, r0
 80049a6:	2301      	movs	r3, #1
 80049a8:	e7f0      	b.n	800498c <_svfiprintf_r+0x194>
 80049aa:	ab03      	add	r3, sp, #12
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	462a      	mov	r2, r5
 80049b0:	4b0f      	ldr	r3, [pc, #60]	; (80049f0 <_svfiprintf_r+0x1f8>)
 80049b2:	a904      	add	r1, sp, #16
 80049b4:	4638      	mov	r0, r7
 80049b6:	f3af 8000 	nop.w
 80049ba:	1c42      	adds	r2, r0, #1
 80049bc:	4606      	mov	r6, r0
 80049be:	d1d6      	bne.n	800496e <_svfiprintf_r+0x176>
 80049c0:	89ab      	ldrh	r3, [r5, #12]
 80049c2:	065b      	lsls	r3, r3, #25
 80049c4:	f53f af2c 	bmi.w	8004820 <_svfiprintf_r+0x28>
 80049c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049ca:	b01d      	add	sp, #116	; 0x74
 80049cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049d0:	ab03      	add	r3, sp, #12
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	462a      	mov	r2, r5
 80049d6:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <_svfiprintf_r+0x1f8>)
 80049d8:	a904      	add	r1, sp, #16
 80049da:	4638      	mov	r0, r7
 80049dc:	f000 f87a 	bl	8004ad4 <_printf_i>
 80049e0:	e7eb      	b.n	80049ba <_svfiprintf_r+0x1c2>
 80049e2:	bf00      	nop
 80049e4:	08004ff8 	.word	0x08004ff8
 80049e8:	08005002 	.word	0x08005002
 80049ec:	00000000 	.word	0x00000000
 80049f0:	08004741 	.word	0x08004741
 80049f4:	08004ffe 	.word	0x08004ffe

080049f8 <_printf_common>:
 80049f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049fc:	4616      	mov	r6, r2
 80049fe:	4699      	mov	r9, r3
 8004a00:	688a      	ldr	r2, [r1, #8]
 8004a02:	690b      	ldr	r3, [r1, #16]
 8004a04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	bfb8      	it	lt
 8004a0c:	4613      	movlt	r3, r2
 8004a0e:	6033      	str	r3, [r6, #0]
 8004a10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a14:	4607      	mov	r7, r0
 8004a16:	460c      	mov	r4, r1
 8004a18:	b10a      	cbz	r2, 8004a1e <_printf_common+0x26>
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	6033      	str	r3, [r6, #0]
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	0699      	lsls	r1, r3, #26
 8004a22:	bf42      	ittt	mi
 8004a24:	6833      	ldrmi	r3, [r6, #0]
 8004a26:	3302      	addmi	r3, #2
 8004a28:	6033      	strmi	r3, [r6, #0]
 8004a2a:	6825      	ldr	r5, [r4, #0]
 8004a2c:	f015 0506 	ands.w	r5, r5, #6
 8004a30:	d106      	bne.n	8004a40 <_printf_common+0x48>
 8004a32:	f104 0a19 	add.w	sl, r4, #25
 8004a36:	68e3      	ldr	r3, [r4, #12]
 8004a38:	6832      	ldr	r2, [r6, #0]
 8004a3a:	1a9b      	subs	r3, r3, r2
 8004a3c:	42ab      	cmp	r3, r5
 8004a3e:	dc26      	bgt.n	8004a8e <_printf_common+0x96>
 8004a40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a44:	1e13      	subs	r3, r2, #0
 8004a46:	6822      	ldr	r2, [r4, #0]
 8004a48:	bf18      	it	ne
 8004a4a:	2301      	movne	r3, #1
 8004a4c:	0692      	lsls	r2, r2, #26
 8004a4e:	d42b      	bmi.n	8004aa8 <_printf_common+0xb0>
 8004a50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a54:	4649      	mov	r1, r9
 8004a56:	4638      	mov	r0, r7
 8004a58:	47c0      	blx	r8
 8004a5a:	3001      	adds	r0, #1
 8004a5c:	d01e      	beq.n	8004a9c <_printf_common+0xa4>
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	68e5      	ldr	r5, [r4, #12]
 8004a62:	6832      	ldr	r2, [r6, #0]
 8004a64:	f003 0306 	and.w	r3, r3, #6
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	bf08      	it	eq
 8004a6c:	1aad      	subeq	r5, r5, r2
 8004a6e:	68a3      	ldr	r3, [r4, #8]
 8004a70:	6922      	ldr	r2, [r4, #16]
 8004a72:	bf0c      	ite	eq
 8004a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a78:	2500      	movne	r5, #0
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	bfc4      	itt	gt
 8004a7e:	1a9b      	subgt	r3, r3, r2
 8004a80:	18ed      	addgt	r5, r5, r3
 8004a82:	2600      	movs	r6, #0
 8004a84:	341a      	adds	r4, #26
 8004a86:	42b5      	cmp	r5, r6
 8004a88:	d11a      	bne.n	8004ac0 <_printf_common+0xc8>
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	e008      	b.n	8004aa0 <_printf_common+0xa8>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	4652      	mov	r2, sl
 8004a92:	4649      	mov	r1, r9
 8004a94:	4638      	mov	r0, r7
 8004a96:	47c0      	blx	r8
 8004a98:	3001      	adds	r0, #1
 8004a9a:	d103      	bne.n	8004aa4 <_printf_common+0xac>
 8004a9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aa4:	3501      	adds	r5, #1
 8004aa6:	e7c6      	b.n	8004a36 <_printf_common+0x3e>
 8004aa8:	18e1      	adds	r1, r4, r3
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	2030      	movs	r0, #48	; 0x30
 8004aae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ab2:	4422      	add	r2, r4
 8004ab4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ab8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004abc:	3302      	adds	r3, #2
 8004abe:	e7c7      	b.n	8004a50 <_printf_common+0x58>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	4622      	mov	r2, r4
 8004ac4:	4649      	mov	r1, r9
 8004ac6:	4638      	mov	r0, r7
 8004ac8:	47c0      	blx	r8
 8004aca:	3001      	adds	r0, #1
 8004acc:	d0e6      	beq.n	8004a9c <_printf_common+0xa4>
 8004ace:	3601      	adds	r6, #1
 8004ad0:	e7d9      	b.n	8004a86 <_printf_common+0x8e>
	...

08004ad4 <_printf_i>:
 8004ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ad8:	460c      	mov	r4, r1
 8004ada:	4691      	mov	r9, r2
 8004adc:	7e27      	ldrb	r7, [r4, #24]
 8004ade:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004ae0:	2f78      	cmp	r7, #120	; 0x78
 8004ae2:	4680      	mov	r8, r0
 8004ae4:	469a      	mov	sl, r3
 8004ae6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004aea:	d807      	bhi.n	8004afc <_printf_i+0x28>
 8004aec:	2f62      	cmp	r7, #98	; 0x62
 8004aee:	d80a      	bhi.n	8004b06 <_printf_i+0x32>
 8004af0:	2f00      	cmp	r7, #0
 8004af2:	f000 80d8 	beq.w	8004ca6 <_printf_i+0x1d2>
 8004af6:	2f58      	cmp	r7, #88	; 0x58
 8004af8:	f000 80a3 	beq.w	8004c42 <_printf_i+0x16e>
 8004afc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b04:	e03a      	b.n	8004b7c <_printf_i+0xa8>
 8004b06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b0a:	2b15      	cmp	r3, #21
 8004b0c:	d8f6      	bhi.n	8004afc <_printf_i+0x28>
 8004b0e:	a001      	add	r0, pc, #4	; (adr r0, 8004b14 <_printf_i+0x40>)
 8004b10:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004b14:	08004b6d 	.word	0x08004b6d
 8004b18:	08004b81 	.word	0x08004b81
 8004b1c:	08004afd 	.word	0x08004afd
 8004b20:	08004afd 	.word	0x08004afd
 8004b24:	08004afd 	.word	0x08004afd
 8004b28:	08004afd 	.word	0x08004afd
 8004b2c:	08004b81 	.word	0x08004b81
 8004b30:	08004afd 	.word	0x08004afd
 8004b34:	08004afd 	.word	0x08004afd
 8004b38:	08004afd 	.word	0x08004afd
 8004b3c:	08004afd 	.word	0x08004afd
 8004b40:	08004c8d 	.word	0x08004c8d
 8004b44:	08004bb1 	.word	0x08004bb1
 8004b48:	08004c6f 	.word	0x08004c6f
 8004b4c:	08004afd 	.word	0x08004afd
 8004b50:	08004afd 	.word	0x08004afd
 8004b54:	08004caf 	.word	0x08004caf
 8004b58:	08004afd 	.word	0x08004afd
 8004b5c:	08004bb1 	.word	0x08004bb1
 8004b60:	08004afd 	.word	0x08004afd
 8004b64:	08004afd 	.word	0x08004afd
 8004b68:	08004c77 	.word	0x08004c77
 8004b6c:	680b      	ldr	r3, [r1, #0]
 8004b6e:	1d1a      	adds	r2, r3, #4
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	600a      	str	r2, [r1, #0]
 8004b74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e0a3      	b.n	8004cc8 <_printf_i+0x1f4>
 8004b80:	6825      	ldr	r5, [r4, #0]
 8004b82:	6808      	ldr	r0, [r1, #0]
 8004b84:	062e      	lsls	r6, r5, #24
 8004b86:	f100 0304 	add.w	r3, r0, #4
 8004b8a:	d50a      	bpl.n	8004ba2 <_printf_i+0xce>
 8004b8c:	6805      	ldr	r5, [r0, #0]
 8004b8e:	600b      	str	r3, [r1, #0]
 8004b90:	2d00      	cmp	r5, #0
 8004b92:	da03      	bge.n	8004b9c <_printf_i+0xc8>
 8004b94:	232d      	movs	r3, #45	; 0x2d
 8004b96:	426d      	negs	r5, r5
 8004b98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b9c:	485e      	ldr	r0, [pc, #376]	; (8004d18 <_printf_i+0x244>)
 8004b9e:	230a      	movs	r3, #10
 8004ba0:	e019      	b.n	8004bd6 <_printf_i+0x102>
 8004ba2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004ba6:	6805      	ldr	r5, [r0, #0]
 8004ba8:	600b      	str	r3, [r1, #0]
 8004baa:	bf18      	it	ne
 8004bac:	b22d      	sxthne	r5, r5
 8004bae:	e7ef      	b.n	8004b90 <_printf_i+0xbc>
 8004bb0:	680b      	ldr	r3, [r1, #0]
 8004bb2:	6825      	ldr	r5, [r4, #0]
 8004bb4:	1d18      	adds	r0, r3, #4
 8004bb6:	6008      	str	r0, [r1, #0]
 8004bb8:	0628      	lsls	r0, r5, #24
 8004bba:	d501      	bpl.n	8004bc0 <_printf_i+0xec>
 8004bbc:	681d      	ldr	r5, [r3, #0]
 8004bbe:	e002      	b.n	8004bc6 <_printf_i+0xf2>
 8004bc0:	0669      	lsls	r1, r5, #25
 8004bc2:	d5fb      	bpl.n	8004bbc <_printf_i+0xe8>
 8004bc4:	881d      	ldrh	r5, [r3, #0]
 8004bc6:	4854      	ldr	r0, [pc, #336]	; (8004d18 <_printf_i+0x244>)
 8004bc8:	2f6f      	cmp	r7, #111	; 0x6f
 8004bca:	bf0c      	ite	eq
 8004bcc:	2308      	moveq	r3, #8
 8004bce:	230a      	movne	r3, #10
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bd6:	6866      	ldr	r6, [r4, #4]
 8004bd8:	60a6      	str	r6, [r4, #8]
 8004bda:	2e00      	cmp	r6, #0
 8004bdc:	bfa2      	ittt	ge
 8004bde:	6821      	ldrge	r1, [r4, #0]
 8004be0:	f021 0104 	bicge.w	r1, r1, #4
 8004be4:	6021      	strge	r1, [r4, #0]
 8004be6:	b90d      	cbnz	r5, 8004bec <_printf_i+0x118>
 8004be8:	2e00      	cmp	r6, #0
 8004bea:	d04d      	beq.n	8004c88 <_printf_i+0x1b4>
 8004bec:	4616      	mov	r6, r2
 8004bee:	fbb5 f1f3 	udiv	r1, r5, r3
 8004bf2:	fb03 5711 	mls	r7, r3, r1, r5
 8004bf6:	5dc7      	ldrb	r7, [r0, r7]
 8004bf8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004bfc:	462f      	mov	r7, r5
 8004bfe:	42bb      	cmp	r3, r7
 8004c00:	460d      	mov	r5, r1
 8004c02:	d9f4      	bls.n	8004bee <_printf_i+0x11a>
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	d10b      	bne.n	8004c20 <_printf_i+0x14c>
 8004c08:	6823      	ldr	r3, [r4, #0]
 8004c0a:	07df      	lsls	r7, r3, #31
 8004c0c:	d508      	bpl.n	8004c20 <_printf_i+0x14c>
 8004c0e:	6923      	ldr	r3, [r4, #16]
 8004c10:	6861      	ldr	r1, [r4, #4]
 8004c12:	4299      	cmp	r1, r3
 8004c14:	bfde      	ittt	le
 8004c16:	2330      	movle	r3, #48	; 0x30
 8004c18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c1c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004c20:	1b92      	subs	r2, r2, r6
 8004c22:	6122      	str	r2, [r4, #16]
 8004c24:	f8cd a000 	str.w	sl, [sp]
 8004c28:	464b      	mov	r3, r9
 8004c2a:	aa03      	add	r2, sp, #12
 8004c2c:	4621      	mov	r1, r4
 8004c2e:	4640      	mov	r0, r8
 8004c30:	f7ff fee2 	bl	80049f8 <_printf_common>
 8004c34:	3001      	adds	r0, #1
 8004c36:	d14c      	bne.n	8004cd2 <_printf_i+0x1fe>
 8004c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c3c:	b004      	add	sp, #16
 8004c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c42:	4835      	ldr	r0, [pc, #212]	; (8004d18 <_printf_i+0x244>)
 8004c44:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	680e      	ldr	r6, [r1, #0]
 8004c4c:	061f      	lsls	r7, r3, #24
 8004c4e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004c52:	600e      	str	r6, [r1, #0]
 8004c54:	d514      	bpl.n	8004c80 <_printf_i+0x1ac>
 8004c56:	07d9      	lsls	r1, r3, #31
 8004c58:	bf44      	itt	mi
 8004c5a:	f043 0320 	orrmi.w	r3, r3, #32
 8004c5e:	6023      	strmi	r3, [r4, #0]
 8004c60:	b91d      	cbnz	r5, 8004c6a <_printf_i+0x196>
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	f023 0320 	bic.w	r3, r3, #32
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	2310      	movs	r3, #16
 8004c6c:	e7b0      	b.n	8004bd0 <_printf_i+0xfc>
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	f043 0320 	orr.w	r3, r3, #32
 8004c74:	6023      	str	r3, [r4, #0]
 8004c76:	2378      	movs	r3, #120	; 0x78
 8004c78:	4828      	ldr	r0, [pc, #160]	; (8004d1c <_printf_i+0x248>)
 8004c7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c7e:	e7e3      	b.n	8004c48 <_printf_i+0x174>
 8004c80:	065e      	lsls	r6, r3, #25
 8004c82:	bf48      	it	mi
 8004c84:	b2ad      	uxthmi	r5, r5
 8004c86:	e7e6      	b.n	8004c56 <_printf_i+0x182>
 8004c88:	4616      	mov	r6, r2
 8004c8a:	e7bb      	b.n	8004c04 <_printf_i+0x130>
 8004c8c:	680b      	ldr	r3, [r1, #0]
 8004c8e:	6826      	ldr	r6, [r4, #0]
 8004c90:	6960      	ldr	r0, [r4, #20]
 8004c92:	1d1d      	adds	r5, r3, #4
 8004c94:	600d      	str	r5, [r1, #0]
 8004c96:	0635      	lsls	r5, r6, #24
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	d501      	bpl.n	8004ca0 <_printf_i+0x1cc>
 8004c9c:	6018      	str	r0, [r3, #0]
 8004c9e:	e002      	b.n	8004ca6 <_printf_i+0x1d2>
 8004ca0:	0671      	lsls	r1, r6, #25
 8004ca2:	d5fb      	bpl.n	8004c9c <_printf_i+0x1c8>
 8004ca4:	8018      	strh	r0, [r3, #0]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	6123      	str	r3, [r4, #16]
 8004caa:	4616      	mov	r6, r2
 8004cac:	e7ba      	b.n	8004c24 <_printf_i+0x150>
 8004cae:	680b      	ldr	r3, [r1, #0]
 8004cb0:	1d1a      	adds	r2, r3, #4
 8004cb2:	600a      	str	r2, [r1, #0]
 8004cb4:	681e      	ldr	r6, [r3, #0]
 8004cb6:	6862      	ldr	r2, [r4, #4]
 8004cb8:	2100      	movs	r1, #0
 8004cba:	4630      	mov	r0, r6
 8004cbc:	f7fb fa90 	bl	80001e0 <memchr>
 8004cc0:	b108      	cbz	r0, 8004cc6 <_printf_i+0x1f2>
 8004cc2:	1b80      	subs	r0, r0, r6
 8004cc4:	6060      	str	r0, [r4, #4]
 8004cc6:	6863      	ldr	r3, [r4, #4]
 8004cc8:	6123      	str	r3, [r4, #16]
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cd0:	e7a8      	b.n	8004c24 <_printf_i+0x150>
 8004cd2:	6923      	ldr	r3, [r4, #16]
 8004cd4:	4632      	mov	r2, r6
 8004cd6:	4649      	mov	r1, r9
 8004cd8:	4640      	mov	r0, r8
 8004cda:	47d0      	blx	sl
 8004cdc:	3001      	adds	r0, #1
 8004cde:	d0ab      	beq.n	8004c38 <_printf_i+0x164>
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	079b      	lsls	r3, r3, #30
 8004ce4:	d413      	bmi.n	8004d0e <_printf_i+0x23a>
 8004ce6:	68e0      	ldr	r0, [r4, #12]
 8004ce8:	9b03      	ldr	r3, [sp, #12]
 8004cea:	4298      	cmp	r0, r3
 8004cec:	bfb8      	it	lt
 8004cee:	4618      	movlt	r0, r3
 8004cf0:	e7a4      	b.n	8004c3c <_printf_i+0x168>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	4632      	mov	r2, r6
 8004cf6:	4649      	mov	r1, r9
 8004cf8:	4640      	mov	r0, r8
 8004cfa:	47d0      	blx	sl
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d09b      	beq.n	8004c38 <_printf_i+0x164>
 8004d00:	3501      	adds	r5, #1
 8004d02:	68e3      	ldr	r3, [r4, #12]
 8004d04:	9903      	ldr	r1, [sp, #12]
 8004d06:	1a5b      	subs	r3, r3, r1
 8004d08:	42ab      	cmp	r3, r5
 8004d0a:	dcf2      	bgt.n	8004cf2 <_printf_i+0x21e>
 8004d0c:	e7eb      	b.n	8004ce6 <_printf_i+0x212>
 8004d0e:	2500      	movs	r5, #0
 8004d10:	f104 0619 	add.w	r6, r4, #25
 8004d14:	e7f5      	b.n	8004d02 <_printf_i+0x22e>
 8004d16:	bf00      	nop
 8004d18:	08005009 	.word	0x08005009
 8004d1c:	0800501a 	.word	0x0800501a

08004d20 <memcpy>:
 8004d20:	440a      	add	r2, r1
 8004d22:	4291      	cmp	r1, r2
 8004d24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004d28:	d100      	bne.n	8004d2c <memcpy+0xc>
 8004d2a:	4770      	bx	lr
 8004d2c:	b510      	push	{r4, lr}
 8004d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d36:	4291      	cmp	r1, r2
 8004d38:	d1f9      	bne.n	8004d2e <memcpy+0xe>
 8004d3a:	bd10      	pop	{r4, pc}

08004d3c <memmove>:
 8004d3c:	4288      	cmp	r0, r1
 8004d3e:	b510      	push	{r4, lr}
 8004d40:	eb01 0402 	add.w	r4, r1, r2
 8004d44:	d902      	bls.n	8004d4c <memmove+0x10>
 8004d46:	4284      	cmp	r4, r0
 8004d48:	4623      	mov	r3, r4
 8004d4a:	d807      	bhi.n	8004d5c <memmove+0x20>
 8004d4c:	1e43      	subs	r3, r0, #1
 8004d4e:	42a1      	cmp	r1, r4
 8004d50:	d008      	beq.n	8004d64 <memmove+0x28>
 8004d52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d5a:	e7f8      	b.n	8004d4e <memmove+0x12>
 8004d5c:	4402      	add	r2, r0
 8004d5e:	4601      	mov	r1, r0
 8004d60:	428a      	cmp	r2, r1
 8004d62:	d100      	bne.n	8004d66 <memmove+0x2a>
 8004d64:	bd10      	pop	{r4, pc}
 8004d66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d6e:	e7f7      	b.n	8004d60 <memmove+0x24>

08004d70 <_free_r>:
 8004d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d72:	2900      	cmp	r1, #0
 8004d74:	d048      	beq.n	8004e08 <_free_r+0x98>
 8004d76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d7a:	9001      	str	r0, [sp, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f1a1 0404 	sub.w	r4, r1, #4
 8004d82:	bfb8      	it	lt
 8004d84:	18e4      	addlt	r4, r4, r3
 8004d86:	f000 f8d3 	bl	8004f30 <__malloc_lock>
 8004d8a:	4a20      	ldr	r2, [pc, #128]	; (8004e0c <_free_r+0x9c>)
 8004d8c:	9801      	ldr	r0, [sp, #4]
 8004d8e:	6813      	ldr	r3, [r2, #0]
 8004d90:	4615      	mov	r5, r2
 8004d92:	b933      	cbnz	r3, 8004da2 <_free_r+0x32>
 8004d94:	6063      	str	r3, [r4, #4]
 8004d96:	6014      	str	r4, [r2, #0]
 8004d98:	b003      	add	sp, #12
 8004d9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d9e:	f000 b8cd 	b.w	8004f3c <__malloc_unlock>
 8004da2:	42a3      	cmp	r3, r4
 8004da4:	d90b      	bls.n	8004dbe <_free_r+0x4e>
 8004da6:	6821      	ldr	r1, [r4, #0]
 8004da8:	1862      	adds	r2, r4, r1
 8004daa:	4293      	cmp	r3, r2
 8004dac:	bf04      	itt	eq
 8004dae:	681a      	ldreq	r2, [r3, #0]
 8004db0:	685b      	ldreq	r3, [r3, #4]
 8004db2:	6063      	str	r3, [r4, #4]
 8004db4:	bf04      	itt	eq
 8004db6:	1852      	addeq	r2, r2, r1
 8004db8:	6022      	streq	r2, [r4, #0]
 8004dba:	602c      	str	r4, [r5, #0]
 8004dbc:	e7ec      	b.n	8004d98 <_free_r+0x28>
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	b10b      	cbz	r3, 8004dc8 <_free_r+0x58>
 8004dc4:	42a3      	cmp	r3, r4
 8004dc6:	d9fa      	bls.n	8004dbe <_free_r+0x4e>
 8004dc8:	6811      	ldr	r1, [r2, #0]
 8004dca:	1855      	adds	r5, r2, r1
 8004dcc:	42a5      	cmp	r5, r4
 8004dce:	d10b      	bne.n	8004de8 <_free_r+0x78>
 8004dd0:	6824      	ldr	r4, [r4, #0]
 8004dd2:	4421      	add	r1, r4
 8004dd4:	1854      	adds	r4, r2, r1
 8004dd6:	42a3      	cmp	r3, r4
 8004dd8:	6011      	str	r1, [r2, #0]
 8004dda:	d1dd      	bne.n	8004d98 <_free_r+0x28>
 8004ddc:	681c      	ldr	r4, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	6053      	str	r3, [r2, #4]
 8004de2:	4421      	add	r1, r4
 8004de4:	6011      	str	r1, [r2, #0]
 8004de6:	e7d7      	b.n	8004d98 <_free_r+0x28>
 8004de8:	d902      	bls.n	8004df0 <_free_r+0x80>
 8004dea:	230c      	movs	r3, #12
 8004dec:	6003      	str	r3, [r0, #0]
 8004dee:	e7d3      	b.n	8004d98 <_free_r+0x28>
 8004df0:	6825      	ldr	r5, [r4, #0]
 8004df2:	1961      	adds	r1, r4, r5
 8004df4:	428b      	cmp	r3, r1
 8004df6:	bf04      	itt	eq
 8004df8:	6819      	ldreq	r1, [r3, #0]
 8004dfa:	685b      	ldreq	r3, [r3, #4]
 8004dfc:	6063      	str	r3, [r4, #4]
 8004dfe:	bf04      	itt	eq
 8004e00:	1949      	addeq	r1, r1, r5
 8004e02:	6021      	streq	r1, [r4, #0]
 8004e04:	6054      	str	r4, [r2, #4]
 8004e06:	e7c7      	b.n	8004d98 <_free_r+0x28>
 8004e08:	b003      	add	sp, #12
 8004e0a:	bd30      	pop	{r4, r5, pc}
 8004e0c:	20000094 	.word	0x20000094

08004e10 <_malloc_r>:
 8004e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e12:	1ccd      	adds	r5, r1, #3
 8004e14:	f025 0503 	bic.w	r5, r5, #3
 8004e18:	3508      	adds	r5, #8
 8004e1a:	2d0c      	cmp	r5, #12
 8004e1c:	bf38      	it	cc
 8004e1e:	250c      	movcc	r5, #12
 8004e20:	2d00      	cmp	r5, #0
 8004e22:	4606      	mov	r6, r0
 8004e24:	db01      	blt.n	8004e2a <_malloc_r+0x1a>
 8004e26:	42a9      	cmp	r1, r5
 8004e28:	d903      	bls.n	8004e32 <_malloc_r+0x22>
 8004e2a:	230c      	movs	r3, #12
 8004e2c:	6033      	str	r3, [r6, #0]
 8004e2e:	2000      	movs	r0, #0
 8004e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e32:	f000 f87d 	bl	8004f30 <__malloc_lock>
 8004e36:	4921      	ldr	r1, [pc, #132]	; (8004ebc <_malloc_r+0xac>)
 8004e38:	680a      	ldr	r2, [r1, #0]
 8004e3a:	4614      	mov	r4, r2
 8004e3c:	b99c      	cbnz	r4, 8004e66 <_malloc_r+0x56>
 8004e3e:	4f20      	ldr	r7, [pc, #128]	; (8004ec0 <_malloc_r+0xb0>)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	b923      	cbnz	r3, 8004e4e <_malloc_r+0x3e>
 8004e44:	4621      	mov	r1, r4
 8004e46:	4630      	mov	r0, r6
 8004e48:	f000 f862 	bl	8004f10 <_sbrk_r>
 8004e4c:	6038      	str	r0, [r7, #0]
 8004e4e:	4629      	mov	r1, r5
 8004e50:	4630      	mov	r0, r6
 8004e52:	f000 f85d 	bl	8004f10 <_sbrk_r>
 8004e56:	1c43      	adds	r3, r0, #1
 8004e58:	d123      	bne.n	8004ea2 <_malloc_r+0x92>
 8004e5a:	230c      	movs	r3, #12
 8004e5c:	6033      	str	r3, [r6, #0]
 8004e5e:	4630      	mov	r0, r6
 8004e60:	f000 f86c 	bl	8004f3c <__malloc_unlock>
 8004e64:	e7e3      	b.n	8004e2e <_malloc_r+0x1e>
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	1b5b      	subs	r3, r3, r5
 8004e6a:	d417      	bmi.n	8004e9c <_malloc_r+0x8c>
 8004e6c:	2b0b      	cmp	r3, #11
 8004e6e:	d903      	bls.n	8004e78 <_malloc_r+0x68>
 8004e70:	6023      	str	r3, [r4, #0]
 8004e72:	441c      	add	r4, r3
 8004e74:	6025      	str	r5, [r4, #0]
 8004e76:	e004      	b.n	8004e82 <_malloc_r+0x72>
 8004e78:	6863      	ldr	r3, [r4, #4]
 8004e7a:	42a2      	cmp	r2, r4
 8004e7c:	bf0c      	ite	eq
 8004e7e:	600b      	streq	r3, [r1, #0]
 8004e80:	6053      	strne	r3, [r2, #4]
 8004e82:	4630      	mov	r0, r6
 8004e84:	f000 f85a 	bl	8004f3c <__malloc_unlock>
 8004e88:	f104 000b 	add.w	r0, r4, #11
 8004e8c:	1d23      	adds	r3, r4, #4
 8004e8e:	f020 0007 	bic.w	r0, r0, #7
 8004e92:	1ac2      	subs	r2, r0, r3
 8004e94:	d0cc      	beq.n	8004e30 <_malloc_r+0x20>
 8004e96:	1a1b      	subs	r3, r3, r0
 8004e98:	50a3      	str	r3, [r4, r2]
 8004e9a:	e7c9      	b.n	8004e30 <_malloc_r+0x20>
 8004e9c:	4622      	mov	r2, r4
 8004e9e:	6864      	ldr	r4, [r4, #4]
 8004ea0:	e7cc      	b.n	8004e3c <_malloc_r+0x2c>
 8004ea2:	1cc4      	adds	r4, r0, #3
 8004ea4:	f024 0403 	bic.w	r4, r4, #3
 8004ea8:	42a0      	cmp	r0, r4
 8004eaa:	d0e3      	beq.n	8004e74 <_malloc_r+0x64>
 8004eac:	1a21      	subs	r1, r4, r0
 8004eae:	4630      	mov	r0, r6
 8004eb0:	f000 f82e 	bl	8004f10 <_sbrk_r>
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	d1dd      	bne.n	8004e74 <_malloc_r+0x64>
 8004eb8:	e7cf      	b.n	8004e5a <_malloc_r+0x4a>
 8004eba:	bf00      	nop
 8004ebc:	20000094 	.word	0x20000094
 8004ec0:	20000098 	.word	0x20000098

08004ec4 <_realloc_r>:
 8004ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec6:	4607      	mov	r7, r0
 8004ec8:	4614      	mov	r4, r2
 8004eca:	460e      	mov	r6, r1
 8004ecc:	b921      	cbnz	r1, 8004ed8 <_realloc_r+0x14>
 8004ece:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ed2:	4611      	mov	r1, r2
 8004ed4:	f7ff bf9c 	b.w	8004e10 <_malloc_r>
 8004ed8:	b922      	cbnz	r2, 8004ee4 <_realloc_r+0x20>
 8004eda:	f7ff ff49 	bl	8004d70 <_free_r>
 8004ede:	4625      	mov	r5, r4
 8004ee0:	4628      	mov	r0, r5
 8004ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ee4:	f000 f830 	bl	8004f48 <_malloc_usable_size_r>
 8004ee8:	42a0      	cmp	r0, r4
 8004eea:	d20f      	bcs.n	8004f0c <_realloc_r+0x48>
 8004eec:	4621      	mov	r1, r4
 8004eee:	4638      	mov	r0, r7
 8004ef0:	f7ff ff8e 	bl	8004e10 <_malloc_r>
 8004ef4:	4605      	mov	r5, r0
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	d0f2      	beq.n	8004ee0 <_realloc_r+0x1c>
 8004efa:	4631      	mov	r1, r6
 8004efc:	4622      	mov	r2, r4
 8004efe:	f7ff ff0f 	bl	8004d20 <memcpy>
 8004f02:	4631      	mov	r1, r6
 8004f04:	4638      	mov	r0, r7
 8004f06:	f7ff ff33 	bl	8004d70 <_free_r>
 8004f0a:	e7e9      	b.n	8004ee0 <_realloc_r+0x1c>
 8004f0c:	4635      	mov	r5, r6
 8004f0e:	e7e7      	b.n	8004ee0 <_realloc_r+0x1c>

08004f10 <_sbrk_r>:
 8004f10:	b538      	push	{r3, r4, r5, lr}
 8004f12:	4d06      	ldr	r5, [pc, #24]	; (8004f2c <_sbrk_r+0x1c>)
 8004f14:	2300      	movs	r3, #0
 8004f16:	4604      	mov	r4, r0
 8004f18:	4608      	mov	r0, r1
 8004f1a:	602b      	str	r3, [r5, #0]
 8004f1c:	f7fc f892 	bl	8001044 <_sbrk>
 8004f20:	1c43      	adds	r3, r0, #1
 8004f22:	d102      	bne.n	8004f2a <_sbrk_r+0x1a>
 8004f24:	682b      	ldr	r3, [r5, #0]
 8004f26:	b103      	cbz	r3, 8004f2a <_sbrk_r+0x1a>
 8004f28:	6023      	str	r3, [r4, #0]
 8004f2a:	bd38      	pop	{r3, r4, r5, pc}
 8004f2c:	20000188 	.word	0x20000188

08004f30 <__malloc_lock>:
 8004f30:	4801      	ldr	r0, [pc, #4]	; (8004f38 <__malloc_lock+0x8>)
 8004f32:	f000 b811 	b.w	8004f58 <__retarget_lock_acquire_recursive>
 8004f36:	bf00      	nop
 8004f38:	20000190 	.word	0x20000190

08004f3c <__malloc_unlock>:
 8004f3c:	4801      	ldr	r0, [pc, #4]	; (8004f44 <__malloc_unlock+0x8>)
 8004f3e:	f000 b80c 	b.w	8004f5a <__retarget_lock_release_recursive>
 8004f42:	bf00      	nop
 8004f44:	20000190 	.word	0x20000190

08004f48 <_malloc_usable_size_r>:
 8004f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f4c:	1f18      	subs	r0, r3, #4
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	bfbc      	itt	lt
 8004f52:	580b      	ldrlt	r3, [r1, r0]
 8004f54:	18c0      	addlt	r0, r0, r3
 8004f56:	4770      	bx	lr

08004f58 <__retarget_lock_acquire_recursive>:
 8004f58:	4770      	bx	lr

08004f5a <__retarget_lock_release_recursive>:
 8004f5a:	4770      	bx	lr

08004f5c <_init>:
 8004f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5e:	bf00      	nop
 8004f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f62:	bc08      	pop	{r3}
 8004f64:	469e      	mov	lr, r3
 8004f66:	4770      	bx	lr

08004f68 <_fini>:
 8004f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6a:	bf00      	nop
 8004f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f6e:	bc08      	pop	{r3}
 8004f70:	469e      	mov	lr, r3
 8004f72:	4770      	bx	lr
