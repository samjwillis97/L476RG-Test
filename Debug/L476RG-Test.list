
L476RG-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004280  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004408  08004408  00014408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800447c  0800447c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800447c  0800447c  0001447c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004484  08004484  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004484  08004484  00014484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004488  08004488  00014488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800448c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  08004498  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08004498  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f887  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001efe  00000000  00000000  0002f8c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  000317c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c28  00000000  00000000  000324a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027fed  00000000  00000000  000330d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d54a  00000000  00000000  0005b0bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc96b  00000000  00000000  00068607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00164f72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035c0  00000000  00000000  00164fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080043f0 	.word	0x080043f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080043f0 	.word	0x080043f0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80004d0:	b5b0      	push	{r4, r5, r7, lr}
 80004d2:	b08a      	sub	sp, #40	; 0x28
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
 80004dc:	603b      	str	r3, [r7, #0]

	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80004de:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80004e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80004e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80004ea:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80004ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80004ee:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80004f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80004f2:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);		// Some sort of pointer to the lcd type def just init
 8000500:	f107 0310 	add.w	r3, r7, #16
 8000504:	4618      	mov	r0, r3
 8000506:	f000 f80e 	bl	8000526 <Lcd_init>

	return lcd;
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	461d      	mov	r5, r3
 800050e:	f107 0410 	add.w	r4, r7, #16
 8000512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000514:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000516:	e894 0003 	ldmia.w	r4, {r0, r1}
 800051a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800051e:	68f8      	ldr	r0, [r7, #12]
 8000520:	3728      	adds	r7, #40	; 0x28
 8000522:	46bd      	mov	sp, r7
 8000524:	bdb0      	pop	{r4, r5, r7, pc}

08000526 <Lcd_init>:

/**
 * Init 16 x 2 LCD without cursor
 */
void Lcd_init(Lcd_HandleTypeDef *lcd) {
 8000526:	b580      	push	{r7, lr}
 8000528:	b082      	sub	sp, #8
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
	if (lcd->mode == LCD_4_BIT_MODE)	// gets mode from the struct that lcd points to
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	7d9b      	ldrb	r3, [r3, #22]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d10c      	bne.n	8000550 <Lcd_init+0x2a>
	{
		lcd_write_command(lcd, 0x33);		// 0011 0011 ??
 8000536:	2133      	movs	r1, #51	; 0x33
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	f000 f857 	bl	80005ec <lcd_write_command>
		lcd_write_command(lcd, 0x32);		// 0011 0010 ??
 800053e:	2132      	movs	r1, #50	; 0x32
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f000 f853 	bl	80005ec <lcd_write_command>
		lcd_write_command(lcd, FUNCTION_SET | OPT_N);	// 4-Bit Mode
 8000546:	2128      	movs	r1, #40	; 0x28
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f000 f84f 	bl	80005ec <lcd_write_command>
 800054e:	e003      	b.n	8000558 <Lcd_init+0x32>
	}
	else {
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N); // ?
 8000550:	2138      	movs	r1, #56	; 0x38
 8000552:	6878      	ldr	r0, [r7, #4]
 8000554:	f000 f84a 	bl	80005ec <lcd_write_command>
	}

	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear Display
 8000558:	2101      	movs	r1, #1
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f000 f846 	bl	80005ec <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// LCD-On, Cursor-Off, No-Blink
 8000560:	210c      	movs	r1, #12
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f000 f842 	bl	80005ec <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment Cursor?
 8000568:	2106      	movs	r1, #6
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f000 f83e 	bl	80005ec <lcd_write_command>
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <Lcd_string>:


/**
 * Write String in current cursor position
 */
void Lcd_string(Lcd_HandleTypeDef *lcd, char *string) {
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++) {
 8000582:	2300      	movs	r3, #0
 8000584:	73fb      	strb	r3, [r7, #15]
 8000586:	e00a      	b.n	800059e <Lcd_string+0x26>
		lcd_write_data(lcd, string[i]);
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	683a      	ldr	r2, [r7, #0]
 800058c:	4413      	add	r3, r2
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	4619      	mov	r1, r3
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f000 f858 	bl	8000648 <lcd_write_data>
	for (uint8_t i = 0; i < strlen(string); i++) {
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	3301      	adds	r3, #1
 800059c:	73fb      	strb	r3, [r7, #15]
 800059e:	7bfc      	ldrb	r4, [r7, #15]
 80005a0:	6838      	ldr	r0, [r7, #0]
 80005a2:	f7ff fe11 	bl	80001c8 <strlen>
 80005a6:	4603      	mov	r3, r0
 80005a8:	429c      	cmp	r4, r3
 80005aa:	d3ed      	bcc.n	8000588 <Lcd_string+0x10>
	}
}
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd90      	pop	{r4, r7, pc}
	...

080005b8 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef *lcd, uint8_t row, uint8_t col) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	460b      	mov	r3, r1
 80005c2:	70fb      	strb	r3, [r7, #3]
 80005c4:	4613      	mov	r3, r2
 80005c6:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80005c8:	78fb      	ldrb	r3, [r7, #3]
 80005ca:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <Lcd_cursor+0x30>)
 80005cc:	5cd2      	ldrb	r2, [r2, r3]
 80005ce:	78bb      	ldrb	r3, [r7, #2]
 80005d0:	4413      	add	r3, r2
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	3b80      	subs	r3, #128	; 0x80
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	4619      	mov	r1, r3
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f000 f806 	bl	80005ec <lcd_write_command>
	#endif
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	08004430 	.word	0x08004430

080005ec <lcd_write_command>:

/************************************** Static function definition **************************************/
/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef *lcd, uint8_t command) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);	// Write to Command Register
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6898      	ldr	r0, [r3, #8]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	899b      	ldrh	r3, [r3, #12]
 8000600:	2200      	movs	r2, #0
 8000602:	4619      	mov	r1, r3
 8000604:	f001 ff32 	bl	800246c <HAL_GPIO_WritePin>

	if (lcd->mode == LCD_4_BIT_MODE) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	7d9b      	ldrb	r3, [r3, #22]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d111      	bne.n	8000634 <lcd_write_command+0x48>
		// Writing Command in two seperate nibs due to 4 Bit Mode
		lcd_write(lcd, (command >> 4), LCD_NIB);	// Send 4 MSB
 8000610:	78fb      	ldrb	r3, [r7, #3]
 8000612:	091b      	lsrs	r3, r3, #4
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2204      	movs	r2, #4
 8000618:	4619      	mov	r1, r3
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f000 f842 	bl	80006a4 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);	// Send 4 LSB
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	f003 030f 	and.w	r3, r3, #15
 8000626:	b2db      	uxtb	r3, r3
 8000628:	2204      	movs	r2, #4
 800062a:	4619      	mov	r1, r3
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f000 f839 	bl	80006a4 <lcd_write>
	}
	else {
		// Write Command in one go with 8 bit
		lcd_write(lcd, command, LCD_BYTE);
	}
}
 8000632:	e005      	b.n	8000640 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000634:	78fb      	ldrb	r3, [r7, #3]
 8000636:	2208      	movs	r2, #8
 8000638:	4619      	mov	r1, r3
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f000 f832 	bl	80006a4 <lcd_write>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef *lcd, uint8_t data) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	6898      	ldr	r0, [r3, #8]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	899b      	ldrh	r3, [r3, #12]
 800065c:	2201      	movs	r2, #1
 800065e:	4619      	mov	r1, r3
 8000660:	f001 ff04 	bl	800246c <HAL_GPIO_WritePin>

	// Writing Command in two seperate nibs due to 4 Bit Mode
	if(lcd->mode == LCD_4_BIT_MODE) {
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	7d9b      	ldrb	r3, [r3, #22]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d111      	bne.n	8000690 <lcd_write_data+0x48>
		lcd_write(lcd, data >> 4, LCD_NIB);		// Send 4 MSB
 800066c:	78fb      	ldrb	r3, [r7, #3]
 800066e:	091b      	lsrs	r3, r3, #4
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2204      	movs	r2, #4
 8000674:	4619      	mov	r1, r3
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f000 f814 	bl	80006a4 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);	// Send 4 LSB
 800067c:	78fb      	ldrb	r3, [r7, #3]
 800067e:	f003 030f 	and.w	r3, r3, #15
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2204      	movs	r2, #4
 8000686:	4619      	mov	r1, r3
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f000 f80b 	bl	80006a4 <lcd_write>
	}
	else {
		// Write Command in one go with 8 bit
		lcd_write(lcd, data, LCD_BYTE);
	}
}
 800068e:	e005      	b.n	800069c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000690:	78fb      	ldrb	r3, [r7, #3]
 8000692:	2208      	movs	r2, #8
 8000694:	4619      	mov	r1, r3
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f000 f804 	bl	80006a4 <lcd_write>
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <lcd_write>:


/**
 * Set len bits on the bus toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef *lcd, uint8_t data, uint8_t len) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	460b      	mov	r3, r1
 80006ae:	70fb      	strb	r3, [r7, #3]
 80006b0:	4613      	mov	r3, r2
 80006b2:	70bb      	strb	r3, [r7, #2]
	for (uint8_t i = 0; i < len; i++) {
 80006b4:	2300      	movs	r3, #0
 80006b6:	73fb      	strb	r3, [r7, #15]
 80006b8:	e019      	b.n	80006ee <lcd_write+0x4a>
		// Right shifts data, then gets the least significant bit to write
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	4413      	add	r3, r2
 80006c4:	6818      	ldr	r0, [r3, #0]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	685a      	ldr	r2, [r3, #4]
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	4413      	add	r3, r2
 80006d0:	8819      	ldrh	r1, [r3, #0]
 80006d2:	78fa      	ldrb	r2, [r7, #3]
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	fa42 f303 	asr.w	r3, r2, r3
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	461a      	mov	r2, r3
 80006e4:	f001 fec2 	bl	800246c <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < len; i++) {
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	3301      	adds	r3, #1
 80006ec:	73fb      	strb	r3, [r7, #15]
 80006ee:	7bfa      	ldrb	r2, [r7, #15]
 80006f0:	78bb      	ldrb	r3, [r7, #2]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d3e1      	bcc.n	80006ba <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6918      	ldr	r0, [r3, #16]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	8a9b      	ldrh	r3, [r3, #20]
 80006fe:	2201      	movs	r2, #1
 8000700:	4619      	mov	r1, r3
 8000702:	f001 feb3 	bl	800246c <HAL_GPIO_WritePin>
	DELAY(1);
 8000706:	2001      	movs	r0, #1
 8000708:	f000 fc28 	bl	8000f5c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6918      	ldr	r0, [r3, #16]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	8a9b      	ldrh	r3, [r3, #20]
 8000714:	2200      	movs	r2, #0
 8000716:	4619      	mov	r1, r3
 8000718:	f001 fea8 	bl	800246c <HAL_GPIO_WritePin>
}
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b091      	sub	sp, #68	; 0x44
 8000728:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072a:	f000 fb9b 	bl	8000e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072e:	f000 f84d 	bl	80007cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000732:	f000 f979 	bl	8000a28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000736:	f000 f947 	bl	80009c8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800073a:	f000 f8cf 	bl	80008dc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2120      	movs	r1, #32
 8000742:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000746:	f001 fe91 	bl	800246c <HAL_GPIO_WritePin>

  Lcd_PortType ports[] = {
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <main+0x94>)
 800074c:	f107 0420 	add.w	r4, r7, #32
 8000750:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000752:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  GPIOB, GPIOB, GPIOB, GPIOB
  };

  Lcd_PinType pins[] = {
 8000756:	4a19      	ldr	r2, [pc, #100]	; (80007bc <main+0x98>)
 8000758:	f107 0318 	add.w	r3, r7, #24
 800075c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000760:	e883 0003 	stmia.w	r3, {r0, r1}
		  D4_Pin, D5_Pin, D6_Pin, D7_Pin
  };

  Lcd_HandleTypeDef lcd = Lcd_create(
 8000764:	4638      	mov	r0, r7
 8000766:	f107 0218 	add.w	r2, r7, #24
 800076a:	f107 0120 	add.w	r1, r7, #32
 800076e:	2300      	movs	r3, #0
 8000770:	9303      	str	r3, [sp, #12]
 8000772:	2380      	movs	r3, #128	; 0x80
 8000774:	9302      	str	r3, [sp, #8]
 8000776:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <main+0x9c>)
 8000778:	9301      	str	r3, [sp, #4]
 800077a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000784:	f7ff fea4 	bl	80004d0 <Lcd_create>
		  GPIOA, LCD_RS_Pin,
		  LCD_Enable_GPIO_Port, LCD_Enable_Pin,
		  LCD_4_BIT_MODE
		  );

  Lcd_string(&lcd, "Hello, World!");
 8000788:	463b      	mov	r3, r7
 800078a:	490e      	ldr	r1, [pc, #56]	; (80007c4 <main+0xa0>)
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fef3 	bl	8000578 <Lcd_string>
  Lcd_cursor(&lcd, 1, 1);
 8000792:	463b      	mov	r3, r7
 8000794:	2201      	movs	r2, #1
 8000796:	2101      	movs	r1, #1
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff0d 	bl	80005b8 <Lcd_cursor>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (btn != 0) {
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <main+0xa4>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d0fb      	beq.n	800079e <main+0x7a>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007a6:	2120      	movs	r1, #32
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ac:	f001 fe76 	bl	800249c <HAL_GPIO_TogglePin>
		  btn = 0;
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <main+0xa4>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	801a      	strh	r2, [r3, #0]
	  if (btn != 0) {
 80007b6:	e7f2      	b.n	800079e <main+0x7a>
 80007b8:	08004418 	.word	0x08004418
 80007bc:	08004428 	.word	0x08004428
 80007c0:	48000800 	.word	0x48000800
 80007c4:	08004408 	.word	0x08004408
 80007c8:	20000028 	.word	0x20000028

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b0b8      	sub	sp, #224	; 0xe0
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007d6:	2244      	movs	r2, #68	; 0x44
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f003 fe00 	bl	80043e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f0:	463b      	mov	r3, r7
 80007f2:	2288      	movs	r2, #136	; 0x88
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f003 fdf2 	bl	80043e0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fc:	2302      	movs	r3, #2
 80007fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000802:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000806:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080a:	2310      	movs	r3, #16
 800080c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000810:	2302      	movs	r3, #2
 8000812:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000816:	2302      	movs	r3, #2
 8000818:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800081c:	2301      	movs	r3, #1
 800081e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000822:	230a      	movs	r3, #10
 8000824:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000828:	2307      	movs	r3, #7
 800082a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800082e:	2302      	movs	r3, #2
 8000830:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000834:	2302      	movs	r3, #2
 8000836:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800083e:	4618      	mov	r0, r3
 8000840:	f001 fec2 	bl	80025c8 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800084a:	f000 f9c7 	bl	8000bdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	230f      	movs	r3, #15
 8000850:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000854:	2303      	movs	r3, #3
 8000856:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800086c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000870:	2104      	movs	r1, #4
 8000872:	4618      	mov	r0, r3
 8000874:	f002 fa8e 	bl	8002d94 <HAL_RCC_ClockConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800087e:	f000 f9ad 	bl	8000bdc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000882:	f244 0302 	movw	r3, #16386	; 0x4002
 8000886:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000888:	2300      	movs	r3, #0
 800088a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800088c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000890:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000892:	2302      	movs	r3, #2
 8000894:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000896:	2301      	movs	r3, #1
 8000898:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800089a:	2308      	movs	r3, #8
 800089c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800089e:	2307      	movs	r3, #7
 80008a0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80008a6:	2302      	movs	r3, #2
 80008a8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80008aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008ae:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b0:	463b      	mov	r3, r7
 80008b2:	4618      	mov	r0, r3
 80008b4:	f002 fc74 	bl	80031a0 <HAL_RCCEx_PeriphCLKConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80008be:	f000 f98d 	bl	8000bdc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008c6:	f001 fe29 	bl	800251c <HAL_PWREx_ControlVoltageScaling>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80008d0:	f000 f984 	bl	8000bdc <Error_Handler>
  }
}
 80008d4:	bf00      	nop
 80008d6:	37e0      	adds	r7, #224	; 0xe0
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
 80008fc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80008fe:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <MX_ADC1_Init+0xe0>)
 8000900:	4a2f      	ldr	r2, [pc, #188]	; (80009c0 <MX_ADC1_Init+0xe4>)
 8000902:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000904:	4b2d      	ldr	r3, [pc, #180]	; (80009bc <MX_ADC1_Init+0xe0>)
 8000906:	2200      	movs	r2, #0
 8000908:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800090a:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <MX_ADC1_Init+0xe0>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000910:	4b2a      	ldr	r3, [pc, #168]	; (80009bc <MX_ADC1_Init+0xe0>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000916:	4b29      	ldr	r3, [pc, #164]	; (80009bc <MX_ADC1_Init+0xe0>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800091c:	4b27      	ldr	r3, [pc, #156]	; (80009bc <MX_ADC1_Init+0xe0>)
 800091e:	2204      	movs	r2, #4
 8000920:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000922:	4b26      	ldr	r3, [pc, #152]	; (80009bc <MX_ADC1_Init+0xe0>)
 8000924:	2200      	movs	r2, #0
 8000926:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000928:	4b24      	ldr	r3, [pc, #144]	; (80009bc <MX_ADC1_Init+0xe0>)
 800092a:	2200      	movs	r2, #0
 800092c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800092e:	4b23      	ldr	r3, [pc, #140]	; (80009bc <MX_ADC1_Init+0xe0>)
 8000930:	2201      	movs	r2, #1
 8000932:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000934:	4b21      	ldr	r3, [pc, #132]	; (80009bc <MX_ADC1_Init+0xe0>)
 8000936:	2200      	movs	r2, #0
 8000938:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800093c:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <MX_ADC1_Init+0xe0>)
 800093e:	2200      	movs	r2, #0
 8000940:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000942:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <MX_ADC1_Init+0xe0>)
 8000944:	2200      	movs	r2, #0
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000948:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <MX_ADC1_Init+0xe0>)
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_ADC1_Init+0xe0>)
 8000952:	2200      	movs	r2, #0
 8000954:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <MX_ADC1_Init+0xe0>)
 8000958:	2200      	movs	r2, #0
 800095a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800095e:	4817      	ldr	r0, [pc, #92]	; (80009bc <MX_ADC1_Init+0xe0>)
 8000960:	f000 fcac 	bl	80012bc <HAL_ADC_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800096a:	f000 f937 	bl	8000bdc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4810      	ldr	r0, [pc, #64]	; (80009bc <MX_ADC1_Init+0xe0>)
 800097a:	f001 fa0b 	bl	8001d94 <HAL_ADCEx_MultiModeConfigChannel>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000984:	f000 f92a 	bl	8000bdc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_ADC1_Init+0xe8>)
 800098a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800098c:	2306      	movs	r3, #6
 800098e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000994:	237f      	movs	r3, #127	; 0x7f
 8000996:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000998:	2304      	movs	r3, #4
 800099a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_ADC1_Init+0xe0>)
 80009a6:	f000 fddf 	bl	8001568 <HAL_ADC_ConfigChannel>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80009b0:	f000 f914 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	3728      	adds	r7, #40	; 0x28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	2000002c 	.word	0x2000002c
 80009c0:	50040000 	.word	0x50040000
 80009c4:	14f00020 	.word	0x14f00020

080009c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_USART2_UART_Init+0x58>)
 80009ce:	4a15      	ldr	r2, [pc, #84]	; (8000a24 <MX_USART2_UART_Init+0x5c>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_USART2_UART_Init+0x58>)
 80009d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_USART2_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_USART2_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_USART2_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_USART2_UART_Init+0x58>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_USART2_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_USART2_UART_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_USART2_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_USART2_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_USART2_UART_Init+0x58>)
 8000a0c:	f003 f884 	bl	8003b18 <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a16:	f000 f8e1 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000090 	.word	0x20000090
 8000a24:	40004400 	.word	0x40004400

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	4b55      	ldr	r3, [pc, #340]	; (8000b94 <MX_GPIO_Init+0x16c>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	4a54      	ldr	r2, [pc, #336]	; (8000b94 <MX_GPIO_Init+0x16c>)
 8000a44:	f043 0304 	orr.w	r3, r3, #4
 8000a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4a:	4b52      	ldr	r3, [pc, #328]	; (8000b94 <MX_GPIO_Init+0x16c>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a56:	4b4f      	ldr	r3, [pc, #316]	; (8000b94 <MX_GPIO_Init+0x16c>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	4a4e      	ldr	r2, [pc, #312]	; (8000b94 <MX_GPIO_Init+0x16c>)
 8000a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a62:	4b4c      	ldr	r3, [pc, #304]	; (8000b94 <MX_GPIO_Init+0x16c>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	4b49      	ldr	r3, [pc, #292]	; (8000b94 <MX_GPIO_Init+0x16c>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	4a48      	ldr	r2, [pc, #288]	; (8000b94 <MX_GPIO_Init+0x16c>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7a:	4b46      	ldr	r3, [pc, #280]	; (8000b94 <MX_GPIO_Init+0x16c>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a86:	4b43      	ldr	r3, [pc, #268]	; (8000b94 <MX_GPIO_Init+0x16c>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	4a42      	ldr	r2, [pc, #264]	; (8000b94 <MX_GPIO_Init+0x16c>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a92:	4b40      	ldr	r3, [pc, #256]	; (8000b94 <MX_GPIO_Init+0x16c>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa8:	f001 fce0 	bl	800246c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	f240 4132 	movw	r1, #1074	; 0x432
 8000ab2:	4839      	ldr	r0, [pc, #228]	; (8000b98 <MX_GPIO_Init+0x170>)
 8000ab4:	f001 fcda 	bl	800246c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_Enable_GPIO_Port, LCD_Enable_Pin, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2180      	movs	r1, #128	; 0x80
 8000abc:	4837      	ldr	r0, [pc, #220]	; (8000b9c <MX_GPIO_Init+0x174>)
 8000abe:	f001 fcd5 	bl	800246c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ac2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ac8:	4b35      	ldr	r3, [pc, #212]	; (8000ba0 <MX_GPIO_Init+0x178>)
 8000aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4831      	ldr	r0, [pc, #196]	; (8000b9c <MX_GPIO_Init+0x174>)
 8000ad8:	f001 fb1e 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LCD_RS_Pin;
 8000adc:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af8:	f001 fb0e 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D5_Pin|D4_Pin;
 8000afc:	f240 4332 	movw	r3, #1074	; 0x432
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	4820      	ldr	r0, [pc, #128]	; (8000b98 <MX_GPIO_Init+0x170>)
 8000b16:	f001 faff 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_Enable_Pin */
  GPIO_InitStruct.Pin = LCD_Enable_Pin;
 8000b1a:	2380      	movs	r3, #128	; 0x80
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_Enable_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	481a      	ldr	r0, [pc, #104]	; (8000b9c <MX_GPIO_Init+0x174>)
 8000b32:	f001 faf1 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8000b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b3c:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_GPIO_Init+0x17c>)
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4e:	f001 fae3 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 8000b52:	2340      	movs	r3, #64	; 0x40
 8000b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MX_GPIO_Init+0x17c>)
 8000b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	480c      	ldr	r0, [pc, #48]	; (8000b98 <MX_GPIO_Init+0x170>)
 8000b66:	f001 fad7 	bl	8002118 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	2017      	movs	r0, #23
 8000b70:	f001 fa9b 	bl	80020aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b74:	2017      	movs	r0, #23
 8000b76:	f001 fab4 	bl	80020e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2028      	movs	r0, #40	; 0x28
 8000b80:	f001 fa93 	bl	80020aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b84:	2028      	movs	r0, #40	; 0x28
 8000b86:	f001 faac 	bl	80020e2 <HAL_NVIC_EnableIRQ>

}
 8000b8a:	bf00      	nop
 8000b8c:	3728      	adds	r7, #40	; 0x28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40021000 	.word	0x40021000
 8000b98:	48000400 	.word	0x48000400
 8000b9c:	48000800 	.word	0x48000800
 8000ba0:	10210000 	.word	0x10210000
 8000ba4:	10110000 	.word	0x10110000

08000ba8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == BTN1_Pin) {
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bb8:	d102      	bne.n	8000bc0 <HAL_GPIO_EXTI_Callback+0x18>
		btn = 1;
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <HAL_GPIO_EXTI_Callback+0x30>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	801a      	strh	r2, [r3, #0]
	}
	if (GPIO_Pin == BTN2_Pin) {
 8000bc0:	88fb      	ldrh	r3, [r7, #6]
 8000bc2:	2b40      	cmp	r3, #64	; 0x40
 8000bc4:	d102      	bne.n	8000bcc <HAL_GPIO_EXTI_Callback+0x24>
		btn = 2;
 8000bc6:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <HAL_GPIO_EXTI_Callback+0x30>)
 8000bc8:	2202      	movs	r2, #2
 8000bca:	801a      	strh	r2, [r3, #0]
	}
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	20000028 	.word	0x20000028

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <Error_Handler+0x8>
	...

08000be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <HAL_MspInit+0x44>)
 8000bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <HAL_MspInit+0x44>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <HAL_MspInit+0x44>)
 8000bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <HAL_MspInit+0x44>)
 8000c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0a:	4a08      	ldr	r2, [pc, #32]	; (8000c2c <HAL_MspInit+0x44>)
 8000c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c10:	6593      	str	r3, [r2, #88]	; 0x58
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_MspInit+0x44>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40021000 	.word	0x40021000

08000c30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a15      	ldr	r2, [pc, #84]	; (8000ca4 <HAL_ADC_MspInit+0x74>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d124      	bne.n	8000c9c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HAL_ADC_MspInit+0x78>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c56:	4a14      	ldr	r2, [pc, #80]	; (8000ca8 <HAL_ADC_MspInit+0x78>)
 8000c58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5e:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_ADC_MspInit+0x78>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <HAL_ADC_MspInit+0x78>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <HAL_ADC_MspInit+0x78>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <HAL_ADC_MspInit+0x78>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c82:	2301      	movs	r3, #1
 8000c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c86:	230b      	movs	r3, #11
 8000c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c98:	f001 fa3e 	bl	8002118 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c9c:	bf00      	nop
 8000c9e:	3728      	adds	r7, #40	; 0x28
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	50040000 	.word	0x50040000
 8000ca8:	40021000 	.word	0x40021000

08000cac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a17      	ldr	r2, [pc, #92]	; (8000d28 <HAL_UART_MspInit+0x7c>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d128      	bne.n	8000d20 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <HAL_UART_MspInit+0x80>)
 8000cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd2:	4a16      	ldr	r2, [pc, #88]	; (8000d2c <HAL_UART_MspInit+0x80>)
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <HAL_UART_MspInit+0x80>)
 8000cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_UART_MspInit+0x80>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <HAL_UART_MspInit+0x80>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_UART_MspInit+0x80>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cfe:	230c      	movs	r3, #12
 8000d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d0e:	2307      	movs	r3, #7
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1c:	f001 f9fc 	bl	8002118 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d20:	bf00      	nop
 8000d22:	3728      	adds	r7, #40	; 0x28
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40004400 	.word	0x40004400
 8000d2c:	40021000 	.word	0x40021000

08000d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <NMI_Handler+0x4>

08000d36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <MemManage_Handler+0x4>

08000d42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7c:	f000 f8ce 	bl	8000f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000d88:	2040      	movs	r0, #64	; 0x40
 8000d8a:	f001 fba1 	bl	80024d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000d96:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d9a:	f001 fb99 	bl	80024d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d9e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000da2:	f001 fb95 	bl	80024d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <SystemInit+0x5c>)
 8000db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db6:	4a14      	ldr	r2, [pc, #80]	; (8000e08 <SystemInit+0x5c>)
 8000db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <SystemInit+0x60>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a11      	ldr	r2, [pc, #68]	; (8000e0c <SystemInit+0x60>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <SystemInit+0x60>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <SystemInit+0x60>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <SystemInit+0x60>)
 8000dd8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ddc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000de0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <SystemInit+0x60>)
 8000de4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000de8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <SystemInit+0x60>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <SystemInit+0x60>)
 8000df0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <SystemInit+0x60>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00
 8000e0c:	40021000 	.word	0x40021000

08000e10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e14:	f7ff ffca 	bl	8000dac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e18:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e1a:	e003      	b.n	8000e24 <LoopCopyDataInit>

08000e1c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e1e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e20:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e22:	3104      	adds	r1, #4

08000e24 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e24:	480a      	ldr	r0, [pc, #40]	; (8000e50 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e28:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e2a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e2c:	d3f6      	bcc.n	8000e1c <CopyDataInit>
	ldr	r2, =_sbss
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e30:	e002      	b.n	8000e38 <LoopFillZerobss>

08000e32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e32:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e34:	f842 3b04 	str.w	r3, [r2], #4

08000e38 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <LoopForever+0x16>)
	cmp	r2, r3
 8000e3a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e3c:	d3f9      	bcc.n	8000e32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f003 faab 	bl	8004398 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e42:	f7ff fc6f 	bl	8000724 <main>

08000e46 <LoopForever>:

LoopForever:
    b LoopForever
 8000e46:	e7fe      	b.n	8000e46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e48:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000e4c:	0800448c 	.word	0x0800448c
	ldr	r0, =_sdata
 8000e50:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e54:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000e58:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000e5c:	20000118 	.word	0x20000118

08000e60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e60:	e7fe      	b.n	8000e60 <ADC1_2_IRQHandler>
	...

08000e64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <HAL_Init+0x3c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <HAL_Init+0x3c>)
 8000e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e78:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7a:	2003      	movs	r0, #3
 8000e7c:	f001 f90a 	bl	8002094 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e80:	2000      	movs	r0, #0
 8000e82:	f000 f80f 	bl	8000ea4 <HAL_InitTick>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d002      	beq.n	8000e92 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	71fb      	strb	r3, [r7, #7]
 8000e90:	e001      	b.n	8000e96 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e92:	f7ff fea9 	bl	8000be8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e96:	79fb      	ldrb	r3, [r7, #7]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40022000 	.word	0x40022000

08000ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000eb0:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <HAL_InitTick+0x6c>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d023      	beq.n	8000f00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000eb8:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <HAL_InitTick+0x70>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <HAL_InitTick+0x6c>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f001 f915 	bl	80020fe <HAL_SYSTICK_Config>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d10f      	bne.n	8000efa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b0f      	cmp	r3, #15
 8000ede:	d809      	bhi.n	8000ef4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ee8:	f001 f8df 	bl	80020aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eec:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <HAL_InitTick+0x74>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	e007      	b.n	8000f04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
 8000ef8:	e004      	b.n	8000f04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	73fb      	strb	r3, [r7, #15]
 8000efe:	e001      	b.n	8000f04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000004 	.word	0x20000004

08000f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x20>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x24>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_IncTick+0x24>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	20000114 	.word	0x20000114

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000114 	.word	0x20000114

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff ffee 	bl	8000f44 <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_Delay+0x44>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f82:	bf00      	nop
 8000f84:	f7ff ffde 	bl	8000f44 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000008 	.word	0x20000008

08000fa4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	431a      	orrs	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800100c:	b480      	push	{r7}
 800100e:	b087      	sub	sp, #28
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	3360      	adds	r3, #96	; 0x60
 800101e:	461a      	mov	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <LL_ADC_SetOffset+0x44>)
 800102e:	4013      	ands	r3, r2
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	430a      	orrs	r2, r1
 800103a:	4313      	orrs	r3, r2
 800103c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001044:	bf00      	nop
 8001046:	371c      	adds	r7, #28
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	03fff000 	.word	0x03fff000

08001054 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3360      	adds	r3, #96	; 0x60
 8001062:	461a      	mov	r2, r3
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001074:	4618      	mov	r0, r3
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001080:	b480      	push	{r7}
 8001082:	b087      	sub	sp, #28
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	3360      	adds	r3, #96	; 0x60
 8001090:	461a      	mov	r2, r3
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	431a      	orrs	r2, r3
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80010aa:	bf00      	nop
 80010ac:	371c      	adds	r7, #28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b087      	sub	sp, #28
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	3330      	adds	r3, #48	; 0x30
 80010c6:	461a      	mov	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	0a1b      	lsrs	r3, r3, #8
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	f003 030c 	and.w	r3, r3, #12
 80010d2:	4413      	add	r3, r2
 80010d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	f003 031f 	and.w	r3, r3, #31
 80010e0:	211f      	movs	r1, #31
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	401a      	ands	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	0e9b      	lsrs	r3, r3, #26
 80010ee:	f003 011f 	and.w	r1, r3, #31
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	f003 031f 	and.w	r3, r3, #31
 80010f8:	fa01 f303 	lsl.w	r3, r1, r3
 80010fc:	431a      	orrs	r2, r3
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001102:	bf00      	nop
 8001104:	371c      	adds	r7, #28
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800110e:	b480      	push	{r7}
 8001110:	b087      	sub	sp, #28
 8001112:	af00      	add	r7, sp, #0
 8001114:	60f8      	str	r0, [r7, #12]
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3314      	adds	r3, #20
 800111e:	461a      	mov	r2, r3
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	0e5b      	lsrs	r3, r3, #25
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	f003 0304 	and.w	r3, r3, #4
 800112a:	4413      	add	r3, r2
 800112c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	0d1b      	lsrs	r3, r3, #20
 8001136:	f003 031f 	and.w	r3, r3, #31
 800113a:	2107      	movs	r1, #7
 800113c:	fa01 f303 	lsl.w	r3, r1, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	401a      	ands	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	0d1b      	lsrs	r3, r3, #20
 8001148:	f003 031f 	and.w	r3, r3, #31
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	431a      	orrs	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001158:	bf00      	nop
 800115a:	371c      	adds	r7, #28
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800117c:	43db      	mvns	r3, r3
 800117e:	401a      	ands	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0318 	and.w	r3, r3, #24
 8001186:	4908      	ldr	r1, [pc, #32]	; (80011a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001188:	40d9      	lsrs	r1, r3
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	400b      	ands	r3, r1
 800118e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001192:	431a      	orrs	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	0007ffff 	.word	0x0007ffff

080011ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80011bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	6093      	str	r3, [r2, #8]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011e4:	d101      	bne.n	80011ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001208:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800120c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001230:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001234:	d101      	bne.n	800123a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b01      	cmp	r3, #1
 800125a:	d101      	bne.n	8001260 <LL_ADC_IsEnabled+0x18>
 800125c:	2301      	movs	r3, #1
 800125e:	e000      	b.n	8001262 <LL_ADC_IsEnabled+0x1a>
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	2b04      	cmp	r3, #4
 8001280:	d101      	bne.n	8001286 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	2b08      	cmp	r3, #8
 80012a6:	d101      	bne.n	80012ac <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012a8:	2301      	movs	r3, #1
 80012aa:	e000      	b.n	80012ae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b089      	sub	sp, #36	; 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e136      	b.n	8001544 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d109      	bne.n	80012f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff fca3 	bl	8000c30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff67 	bl	80011d0 <LL_ADC_IsDeepPowerDownEnabled>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d004      	beq.n	8001312 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff4d 	bl	80011ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff ff82 	bl	8001220 <LL_ADC_IsInternalRegulatorEnabled>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d115      	bne.n	800134e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ff66 	bl	80011f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800132c:	4b87      	ldr	r3, [pc, #540]	; (800154c <HAL_ADC_Init+0x290>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	099b      	lsrs	r3, r3, #6
 8001332:	4a87      	ldr	r2, [pc, #540]	; (8001550 <HAL_ADC_Init+0x294>)
 8001334:	fba2 2303 	umull	r2, r3, r2, r3
 8001338:	099b      	lsrs	r3, r3, #6
 800133a:	3301      	adds	r3, #1
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001340:	e002      	b.n	8001348 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	3b01      	subs	r3, #1
 8001346:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f9      	bne.n	8001342 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ff64 	bl	8001220 <LL_ADC_IsInternalRegulatorEnabled>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10d      	bne.n	800137a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001362:	f043 0210 	orr.w	r2, r3, #16
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136e:	f043 0201 	orr.w	r2, r3, #1
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ff75 	bl	800126e <LL_ADC_REG_IsConversionOngoing>
 8001384:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138a:	f003 0310 	and.w	r3, r3, #16
 800138e:	2b00      	cmp	r3, #0
 8001390:	f040 80cf 	bne.w	8001532 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	2b00      	cmp	r3, #0
 8001398:	f040 80cb 	bne.w	8001532 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80013a4:	f043 0202 	orr.w	r2, r3, #2
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff49 	bl	8001248 <LL_ADC_IsEnabled>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d115      	bne.n	80013e8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013bc:	4865      	ldr	r0, [pc, #404]	; (8001554 <HAL_ADC_Init+0x298>)
 80013be:	f7ff ff43 	bl	8001248 <LL_ADC_IsEnabled>
 80013c2:	4604      	mov	r4, r0
 80013c4:	4864      	ldr	r0, [pc, #400]	; (8001558 <HAL_ADC_Init+0x29c>)
 80013c6:	f7ff ff3f 	bl	8001248 <LL_ADC_IsEnabled>
 80013ca:	4603      	mov	r3, r0
 80013cc:	431c      	orrs	r4, r3
 80013ce:	4863      	ldr	r0, [pc, #396]	; (800155c <HAL_ADC_Init+0x2a0>)
 80013d0:	f7ff ff3a 	bl	8001248 <LL_ADC_IsEnabled>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4323      	orrs	r3, r4
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d105      	bne.n	80013e8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	4619      	mov	r1, r3
 80013e2:	485f      	ldr	r0, [pc, #380]	; (8001560 <HAL_ADC_Init+0x2a4>)
 80013e4:	f7ff fdde 	bl	8000fa4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	7e5b      	ldrb	r3, [r3, #25]
 80013ec:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013f2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80013f8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80013fe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001406:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d106      	bne.n	8001424 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	3b01      	subs	r3, #1
 800141c:	045b      	lsls	r3, r3, #17
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001428:	2b00      	cmp	r3, #0
 800142a:	d009      	beq.n	8001440 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001430:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001438:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	4b47      	ldr	r3, [pc, #284]	; (8001564 <HAL_ADC_Init+0x2a8>)
 8001448:	4013      	ands	r3, r2
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6812      	ldr	r2, [r2, #0]
 800144e:	69b9      	ldr	r1, [r7, #24]
 8001450:	430b      	orrs	r3, r1
 8001452:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff08 	bl	800126e <LL_ADC_REG_IsConversionOngoing>
 800145e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff15 	bl	8001294 <LL_ADC_INJ_IsConversionOngoing>
 800146a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d13d      	bne.n	80014ee <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d13a      	bne.n	80014ee <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800147c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001484:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001494:	f023 0302 	bic.w	r3, r3, #2
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	69b9      	ldr	r1, [r7, #24]
 800149e:	430b      	orrs	r3, r1
 80014a0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d118      	bne.n	80014de <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80014b6:	f023 0304 	bic.w	r3, r3, #4
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014c2:	4311      	orrs	r1, r2
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80014c8:	4311      	orrs	r1, r2
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80014ce:	430a      	orrs	r2, r1
 80014d0:	431a      	orrs	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0201 	orr.w	r2, r2, #1
 80014da:	611a      	str	r2, [r3, #16]
 80014dc:	e007      	b.n	80014ee <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	691a      	ldr	r2, [r3, #16]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 0201 	bic.w	r2, r2, #1
 80014ec:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d10c      	bne.n	8001510 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	f023 010f 	bic.w	r1, r3, #15
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	1e5a      	subs	r2, r3, #1
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	631a      	str	r2, [r3, #48]	; 0x30
 800150e:	e007      	b.n	8001520 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 020f 	bic.w	r2, r2, #15
 800151e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001524:	f023 0303 	bic.w	r3, r3, #3
 8001528:	f043 0201 	orr.w	r2, r3, #1
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	655a      	str	r2, [r3, #84]	; 0x54
 8001530:	e007      	b.n	8001542 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001536:	f043 0210 	orr.w	r2, r3, #16
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001542:	7ffb      	ldrb	r3, [r7, #31]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3724      	adds	r7, #36	; 0x24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd90      	pop	{r4, r7, pc}
 800154c:	20000000 	.word	0x20000000
 8001550:	053e2d63 	.word	0x053e2d63
 8001554:	50040000 	.word	0x50040000
 8001558:	50040100 	.word	0x50040100
 800155c:	50040200 	.word	0x50040200
 8001560:	50040300 	.word	0x50040300
 8001564:	fff0c007 	.word	0xfff0c007

08001568 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b0b6      	sub	sp, #216	; 0xd8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001582:	2b01      	cmp	r3, #1
 8001584:	d101      	bne.n	800158a <HAL_ADC_ConfigChannel+0x22>
 8001586:	2302      	movs	r3, #2
 8001588:	e3c7      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x7b2>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fe69 	bl	800126e <LL_ADC_REG_IsConversionOngoing>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f040 83a8 	bne.w	8001cf4 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b05      	cmp	r3, #5
 80015aa:	d824      	bhi.n	80015f6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	3b02      	subs	r3, #2
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d81b      	bhi.n	80015ee <HAL_ADC_ConfigChannel+0x86>
 80015b6:	a201      	add	r2, pc, #4	; (adr r2, 80015bc <HAL_ADC_ConfigChannel+0x54>)
 80015b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015bc:	080015cd 	.word	0x080015cd
 80015c0:	080015d5 	.word	0x080015d5
 80015c4:	080015dd 	.word	0x080015dd
 80015c8:	080015e5 	.word	0x080015e5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	220c      	movs	r2, #12
 80015d0:	605a      	str	r2, [r3, #4]
          break;
 80015d2:	e011      	b.n	80015f8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	2212      	movs	r2, #18
 80015d8:	605a      	str	r2, [r3, #4]
          break;
 80015da:	e00d      	b.n	80015f8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	2218      	movs	r2, #24
 80015e0:	605a      	str	r2, [r3, #4]
          break;
 80015e2:	e009      	b.n	80015f8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ea:	605a      	str	r2, [r3, #4]
          break;
 80015ec:	e004      	b.n	80015f8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	2206      	movs	r2, #6
 80015f2:	605a      	str	r2, [r3, #4]
          break;
 80015f4:	e000      	b.n	80015f8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80015f6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6818      	ldr	r0, [r3, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	6859      	ldr	r1, [r3, #4]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	f7ff fd56 	bl	80010b6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fe2d 	bl	800126e <LL_ADC_REG_IsConversionOngoing>
 8001614:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fe39 	bl	8001294 <LL_ADC_INJ_IsConversionOngoing>
 8001622:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001626:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800162a:	2b00      	cmp	r3, #0
 800162c:	f040 81a6 	bne.w	800197c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001630:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001634:	2b00      	cmp	r3, #0
 8001636:	f040 81a1 	bne.w	800197c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6818      	ldr	r0, [r3, #0]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	6819      	ldr	r1, [r3, #0]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	461a      	mov	r2, r3
 8001648:	f7ff fd61 	bl	800110e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	695a      	ldr	r2, [r3, #20]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	08db      	lsrs	r3, r3, #3
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	2b04      	cmp	r3, #4
 800166c:	d00a      	beq.n	8001684 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6818      	ldr	r0, [r3, #0]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	6919      	ldr	r1, [r3, #16]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800167e:	f7ff fcc5 	bl	800100c <LL_ADC_SetOffset>
 8001682:	e17b      	b.n	800197c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fce2 	bl	8001054 <LL_ADC_GetOffsetChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10a      	bne.n	80016b0 <HAL_ADC_ConfigChannel+0x148>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2100      	movs	r1, #0
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fcd7 	bl	8001054 <LL_ADC_GetOffsetChannel>
 80016a6:	4603      	mov	r3, r0
 80016a8:	0e9b      	lsrs	r3, r3, #26
 80016aa:	f003 021f 	and.w	r2, r3, #31
 80016ae:	e01e      	b.n	80016ee <HAL_ADC_ConfigChannel+0x186>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fccc 	bl	8001054 <LL_ADC_GetOffsetChannel>
 80016bc:	4603      	mov	r3, r0
 80016be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80016c6:	fa93 f3a3 	rbit	r3, r3
 80016ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80016d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80016de:	2320      	movs	r3, #32
 80016e0:	e004      	b.n	80016ec <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80016e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016e6:	fab3 f383 	clz	r3, r3
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d105      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x19e>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	0e9b      	lsrs	r3, r3, #26
 8001700:	f003 031f 	and.w	r3, r3, #31
 8001704:	e018      	b.n	8001738 <HAL_ADC_ConfigChannel+0x1d0>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001712:	fa93 f3a3 	rbit	r3, r3
 8001716:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800171a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800171e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001722:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800172a:	2320      	movs	r3, #32
 800172c:	e004      	b.n	8001738 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800172e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001732:	fab3 f383 	clz	r3, r3
 8001736:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001738:	429a      	cmp	r2, r3
 800173a:	d106      	bne.n	800174a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2200      	movs	r2, #0
 8001742:	2100      	movs	r1, #0
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fc9b 	bl	8001080 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2101      	movs	r1, #1
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fc7f 	bl	8001054 <LL_ADC_GetOffsetChannel>
 8001756:	4603      	mov	r3, r0
 8001758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800175c:	2b00      	cmp	r3, #0
 800175e:	d10a      	bne.n	8001776 <HAL_ADC_ConfigChannel+0x20e>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2101      	movs	r1, #1
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fc74 	bl	8001054 <LL_ADC_GetOffsetChannel>
 800176c:	4603      	mov	r3, r0
 800176e:	0e9b      	lsrs	r3, r3, #26
 8001770:	f003 021f 	and.w	r2, r3, #31
 8001774:	e01e      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x24c>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2101      	movs	r1, #1
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fc69 	bl	8001054 <LL_ADC_GetOffsetChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001788:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800178c:	fa93 f3a3 	rbit	r3, r3
 8001790:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001794:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001798:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800179c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80017a4:	2320      	movs	r3, #32
 80017a6:	e004      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80017a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017ac:	fab3 f383 	clz	r3, r3
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d105      	bne.n	80017cc <HAL_ADC_ConfigChannel+0x264>
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	0e9b      	lsrs	r3, r3, #26
 80017c6:	f003 031f 	and.w	r3, r3, #31
 80017ca:	e018      	b.n	80017fe <HAL_ADC_ConfigChannel+0x296>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017d8:	fa93 f3a3 	rbit	r3, r3
 80017dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80017e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80017e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80017e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80017f0:	2320      	movs	r3, #32
 80017f2:	e004      	b.n	80017fe <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80017f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017f8:	fab3 f383 	clz	r3, r3
 80017fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017fe:	429a      	cmp	r2, r3
 8001800:	d106      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2200      	movs	r2, #0
 8001808:	2101      	movs	r1, #1
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fc38 	bl	8001080 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2102      	movs	r1, #2
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fc1c 	bl	8001054 <LL_ADC_GetOffsetChannel>
 800181c:	4603      	mov	r3, r0
 800181e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10a      	bne.n	800183c <HAL_ADC_ConfigChannel+0x2d4>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2102      	movs	r1, #2
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fc11 	bl	8001054 <LL_ADC_GetOffsetChannel>
 8001832:	4603      	mov	r3, r0
 8001834:	0e9b      	lsrs	r3, r3, #26
 8001836:	f003 021f 	and.w	r2, r3, #31
 800183a:	e01e      	b.n	800187a <HAL_ADC_ConfigChannel+0x312>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2102      	movs	r1, #2
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fc06 	bl	8001054 <LL_ADC_GetOffsetChannel>
 8001848:	4603      	mov	r3, r0
 800184a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001852:	fa93 f3a3 	rbit	r3, r3
 8001856:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800185a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800185e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001862:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800186a:	2320      	movs	r3, #32
 800186c:	e004      	b.n	8001878 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800186e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001872:	fab3 f383 	clz	r3, r3
 8001876:	b2db      	uxtb	r3, r3
 8001878:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001882:	2b00      	cmp	r3, #0
 8001884:	d105      	bne.n	8001892 <HAL_ADC_ConfigChannel+0x32a>
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	0e9b      	lsrs	r3, r3, #26
 800188c:	f003 031f 	and.w	r3, r3, #31
 8001890:	e016      	b.n	80018c0 <HAL_ADC_ConfigChannel+0x358>
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800189e:	fa93 f3a3 	rbit	r3, r3
 80018a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80018a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80018aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80018b2:	2320      	movs	r3, #32
 80018b4:	e004      	b.n	80018c0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80018b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018ba:	fab3 f383 	clz	r3, r3
 80018be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d106      	bne.n	80018d2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2200      	movs	r2, #0
 80018ca:	2102      	movs	r1, #2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fbd7 	bl	8001080 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2103      	movs	r1, #3
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fbbb 	bl	8001054 <LL_ADC_GetOffsetChannel>
 80018de:	4603      	mov	r3, r0
 80018e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d10a      	bne.n	80018fe <HAL_ADC_ConfigChannel+0x396>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2103      	movs	r1, #3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fbb0 	bl	8001054 <LL_ADC_GetOffsetChannel>
 80018f4:	4603      	mov	r3, r0
 80018f6:	0e9b      	lsrs	r3, r3, #26
 80018f8:	f003 021f 	and.w	r2, r3, #31
 80018fc:	e017      	b.n	800192e <HAL_ADC_ConfigChannel+0x3c6>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2103      	movs	r1, #3
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fba5 	bl	8001054 <LL_ADC_GetOffsetChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001910:	fa93 f3a3 	rbit	r3, r3
 8001914:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001916:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001918:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800191a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001920:	2320      	movs	r3, #32
 8001922:	e003      	b.n	800192c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001926:	fab3 f383 	clz	r3, r3
 800192a:	b2db      	uxtb	r3, r3
 800192c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001936:	2b00      	cmp	r3, #0
 8001938:	d105      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x3de>
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	0e9b      	lsrs	r3, r3, #26
 8001940:	f003 031f 	and.w	r3, r3, #31
 8001944:	e011      	b.n	800196a <HAL_ADC_ConfigChannel+0x402>
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800194e:	fa93 f3a3 	rbit	r3, r3
 8001952:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001956:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800195e:	2320      	movs	r3, #32
 8001960:	e003      	b.n	800196a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001964:	fab3 f383 	clz	r3, r3
 8001968:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800196a:	429a      	cmp	r2, r3
 800196c:	d106      	bne.n	800197c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2200      	movs	r2, #0
 8001974:	2103      	movs	r1, #3
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fb82 	bl	8001080 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fc61 	bl	8001248 <LL_ADC_IsEnabled>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	f040 813f 	bne.w	8001c0c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	6819      	ldr	r1, [r3, #0]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	461a      	mov	r2, r3
 800199c:	f7ff fbe2 	bl	8001164 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	4a8e      	ldr	r2, [pc, #568]	; (8001be0 <HAL_ADC_ConfigChannel+0x678>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	f040 8130 	bne.w	8001c0c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10b      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x46c>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	0e9b      	lsrs	r3, r3, #26
 80019c2:	3301      	adds	r3, #1
 80019c4:	f003 031f 	and.w	r3, r3, #31
 80019c8:	2b09      	cmp	r3, #9
 80019ca:	bf94      	ite	ls
 80019cc:	2301      	movls	r3, #1
 80019ce:	2300      	movhi	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	e019      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x4a0>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019dc:	fa93 f3a3 	rbit	r3, r3
 80019e0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80019e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019e4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80019e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80019ec:	2320      	movs	r3, #32
 80019ee:	e003      	b.n	80019f8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80019f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019f2:	fab3 f383 	clz	r3, r3
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	3301      	adds	r3, #1
 80019fa:	f003 031f 	and.w	r3, r3, #31
 80019fe:	2b09      	cmp	r3, #9
 8001a00:	bf94      	ite	ls
 8001a02:	2301      	movls	r3, #1
 8001a04:	2300      	movhi	r3, #0
 8001a06:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d079      	beq.n	8001b00 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d107      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x4c0>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	0e9b      	lsrs	r3, r3, #26
 8001a1e:	3301      	adds	r3, #1
 8001a20:	069b      	lsls	r3, r3, #26
 8001a22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a26:	e015      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x4ec>
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a30:	fa93 f3a3 	rbit	r3, r3
 8001a34:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a38:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001a40:	2320      	movs	r3, #32
 8001a42:	e003      	b.n	8001a4c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a46:	fab3 f383 	clz	r3, r3
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	069b      	lsls	r3, r3, #26
 8001a50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d109      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x50c>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	0e9b      	lsrs	r3, r3, #26
 8001a66:	3301      	adds	r3, #1
 8001a68:	f003 031f 	and.w	r3, r3, #31
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	e017      	b.n	8001aa4 <HAL_ADC_ConfigChannel+0x53c>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a7c:	fa93 f3a3 	rbit	r3, r3
 8001a80:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a84:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001a8c:	2320      	movs	r3, #32
 8001a8e:	e003      	b.n	8001a98 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a92:	fab3 f383 	clz	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	3301      	adds	r3, #1
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa4:	ea42 0103 	orr.w	r1, r2, r3
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d10a      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x562>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	0e9b      	lsrs	r3, r3, #26
 8001aba:	3301      	adds	r3, #1
 8001abc:	f003 021f 	and.w	r2, r3, #31
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4413      	add	r3, r2
 8001ac6:	051b      	lsls	r3, r3, #20
 8001ac8:	e018      	b.n	8001afc <HAL_ADC_ConfigChannel+0x594>
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001ae2:	2320      	movs	r3, #32
 8001ae4:	e003      	b.n	8001aee <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ae8:	fab3 f383 	clz	r3, r3
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	3301      	adds	r3, #1
 8001af0:	f003 021f 	and.w	r2, r3, #31
 8001af4:	4613      	mov	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	4413      	add	r3, r2
 8001afa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001afc:	430b      	orrs	r3, r1
 8001afe:	e080      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d107      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x5b4>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	0e9b      	lsrs	r3, r3, #26
 8001b12:	3301      	adds	r3, #1
 8001b14:	069b      	lsls	r3, r3, #26
 8001b16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b1a:	e015      	b.n	8001b48 <HAL_ADC_ConfigChannel+0x5e0>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b24:	fa93 f3a3 	rbit	r3, r3
 8001b28:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b2c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001b34:	2320      	movs	r3, #32
 8001b36:	e003      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b3a:	fab3 f383 	clz	r3, r3
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	3301      	adds	r3, #1
 8001b42:	069b      	lsls	r3, r3, #26
 8001b44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d109      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x600>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	0e9b      	lsrs	r3, r3, #26
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	f003 031f 	and.w	r3, r3, #31
 8001b60:	2101      	movs	r1, #1
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	e017      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x630>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	fa93 f3a3 	rbit	r3, r3
 8001b74:	61fb      	str	r3, [r7, #28]
  return result;
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001b80:	2320      	movs	r3, #32
 8001b82:	e003      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	fab3 f383 	clz	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	f003 031f 	and.w	r3, r3, #31
 8001b92:	2101      	movs	r1, #1
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	ea42 0103 	orr.w	r1, r2, r3
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10d      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x65c>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	0e9b      	lsrs	r3, r3, #26
 8001bae:	3301      	adds	r3, #1
 8001bb0:	f003 021f 	and.w	r2, r3, #31
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	4413      	add	r3, r2
 8001bba:	3b1e      	subs	r3, #30
 8001bbc:	051b      	lsls	r3, r3, #20
 8001bbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bc2:	e01d      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x698>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	fa93 f3a3 	rbit	r3, r3
 8001bd0:	613b      	str	r3, [r7, #16]
  return result;
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d103      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001bdc:	2320      	movs	r3, #32
 8001bde:	e005      	b.n	8001bec <HAL_ADC_ConfigChannel+0x684>
 8001be0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	fab3 f383 	clz	r3, r3
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	3301      	adds	r3, #1
 8001bee:	f003 021f 	and.w	r2, r3, #31
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3b1e      	subs	r3, #30
 8001bfa:	051b      	lsls	r3, r3, #20
 8001bfc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c00:	430b      	orrs	r3, r1
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	6892      	ldr	r2, [r2, #8]
 8001c06:	4619      	mov	r1, r3
 8001c08:	f7ff fa81 	bl	800110e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b44      	ldr	r3, [pc, #272]	; (8001d24 <HAL_ADC_ConfigChannel+0x7bc>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d07a      	beq.n	8001d0e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c18:	4843      	ldr	r0, [pc, #268]	; (8001d28 <HAL_ADC_ConfigChannel+0x7c0>)
 8001c1a:	f7ff f9e9 	bl	8000ff0 <LL_ADC_GetCommonPathInternalCh>
 8001c1e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a41      	ldr	r2, [pc, #260]	; (8001d2c <HAL_ADC_ConfigChannel+0x7c4>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d12c      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d126      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a3c      	ldr	r2, [pc, #240]	; (8001d30 <HAL_ADC_ConfigChannel+0x7c8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d004      	beq.n	8001c4c <HAL_ADC_ConfigChannel+0x6e4>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a3b      	ldr	r2, [pc, #236]	; (8001d34 <HAL_ADC_ConfigChannel+0x7cc>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d15d      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c54:	4619      	mov	r1, r3
 8001c56:	4834      	ldr	r0, [pc, #208]	; (8001d28 <HAL_ADC_ConfigChannel+0x7c0>)
 8001c58:	f7ff f9b7 	bl	8000fca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c5c:	4b36      	ldr	r3, [pc, #216]	; (8001d38 <HAL_ADC_ConfigChannel+0x7d0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	099b      	lsrs	r3, r3, #6
 8001c62:	4a36      	ldr	r2, [pc, #216]	; (8001d3c <HAL_ADC_ConfigChannel+0x7d4>)
 8001c64:	fba2 2303 	umull	r2, r3, r2, r3
 8001c68:	099b      	lsrs	r3, r3, #6
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4413      	add	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c76:	e002      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f9      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c84:	e040      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a2d      	ldr	r2, [pc, #180]	; (8001d40 <HAL_ADC_ConfigChannel+0x7d8>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d118      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x75a>
 8001c90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d112      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a23      	ldr	r2, [pc, #140]	; (8001d30 <HAL_ADC_ConfigChannel+0x7c8>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d004      	beq.n	8001cb0 <HAL_ADC_ConfigChannel+0x748>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a22      	ldr	r2, [pc, #136]	; (8001d34 <HAL_ADC_ConfigChannel+0x7cc>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d12d      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cb8:	4619      	mov	r1, r3
 8001cba:	481b      	ldr	r0, [pc, #108]	; (8001d28 <HAL_ADC_ConfigChannel+0x7c0>)
 8001cbc:	f7ff f985 	bl	8000fca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cc0:	e024      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a1f      	ldr	r2, [pc, #124]	; (8001d44 <HAL_ADC_ConfigChannel+0x7dc>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d120      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ccc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11a      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <HAL_ADC_ConfigChannel+0x7c8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d115      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ce2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ce6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cea:	4619      	mov	r1, r3
 8001cec:	480e      	ldr	r0, [pc, #56]	; (8001d28 <HAL_ADC_ConfigChannel+0x7c0>)
 8001cee:	f7ff f96c 	bl	8000fca <LL_ADC_SetCommonPathInternalCh>
 8001cf2:	e00c      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf8:	f043 0220 	orr.w	r2, r3, #32
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001d06:	e002      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d08:	bf00      	nop
 8001d0a:	e000      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d16:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	37d8      	adds	r7, #216	; 0xd8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	80080000 	.word	0x80080000
 8001d28:	50040300 	.word	0x50040300
 8001d2c:	c7520000 	.word	0xc7520000
 8001d30:	50040000 	.word	0x50040000
 8001d34:	50040200 	.word	0x50040200
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	053e2d63 	.word	0x053e2d63
 8001d40:	cb840000 	.word	0xcb840000
 8001d44:	80000001 	.word	0x80000001

08001d48 <LL_ADC_IsEnabled>:
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <LL_ADC_IsEnabled+0x18>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <LL_ADC_IsEnabled+0x1a>
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_ADC_REG_IsConversionOngoing>:
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d101      	bne.n	8001d86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b09f      	sub	sp, #124	; 0x7c
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e093      	b.n	8001eda <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001dba:	2300      	movs	r3, #0
 8001dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a47      	ldr	r2, [pc, #284]	; (8001ee4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d102      	bne.n	8001dd2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001dcc:	4b46      	ldr	r3, [pc, #280]	; (8001ee8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	e001      	b.n	8001dd6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10b      	bne.n	8001df4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de0:	f043 0220 	orr.w	r2, r3, #32
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e072      	b.n	8001eda <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff ffb9 	bl	8001d6e <LL_ADC_REG_IsConversionOngoing>
 8001dfc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ffb3 	bl	8001d6e <LL_ADC_REG_IsConversionOngoing>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d154      	bne.n	8001eb8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d151      	bne.n	8001eb8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001e14:	4b35      	ldr	r3, [pc, #212]	; (8001eec <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001e16:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d02c      	beq.n	8001e7a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	6859      	ldr	r1, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e32:	035b      	lsls	r3, r3, #13
 8001e34:	430b      	orrs	r3, r1
 8001e36:	431a      	orrs	r2, r3
 8001e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e3a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e3c:	4829      	ldr	r0, [pc, #164]	; (8001ee4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001e3e:	f7ff ff83 	bl	8001d48 <LL_ADC_IsEnabled>
 8001e42:	4604      	mov	r4, r0
 8001e44:	4828      	ldr	r0, [pc, #160]	; (8001ee8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001e46:	f7ff ff7f 	bl	8001d48 <LL_ADC_IsEnabled>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	431c      	orrs	r4, r3
 8001e4e:	4828      	ldr	r0, [pc, #160]	; (8001ef0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001e50:	f7ff ff7a 	bl	8001d48 <LL_ADC_IsEnabled>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4323      	orrs	r3, r4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d137      	bne.n	8001ecc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e64:	f023 030f 	bic.w	r3, r3, #15
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	6811      	ldr	r1, [r2, #0]
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	6892      	ldr	r2, [r2, #8]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	431a      	orrs	r2, r3
 8001e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e76:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e78:	e028      	b.n	8001ecc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e84:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e86:	4817      	ldr	r0, [pc, #92]	; (8001ee4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001e88:	f7ff ff5e 	bl	8001d48 <LL_ADC_IsEnabled>
 8001e8c:	4604      	mov	r4, r0
 8001e8e:	4816      	ldr	r0, [pc, #88]	; (8001ee8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001e90:	f7ff ff5a 	bl	8001d48 <LL_ADC_IsEnabled>
 8001e94:	4603      	mov	r3, r0
 8001e96:	431c      	orrs	r4, r3
 8001e98:	4815      	ldr	r0, [pc, #84]	; (8001ef0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001e9a:	f7ff ff55 	bl	8001d48 <LL_ADC_IsEnabled>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4323      	orrs	r3, r4
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d112      	bne.n	8001ecc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001eae:	f023 030f 	bic.w	r3, r3, #15
 8001eb2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001eb4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001eb6:	e009      	b.n	8001ecc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebc:	f043 0220 	orr.w	r2, r3, #32
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001eca:	e000      	b.n	8001ece <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ecc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001ed6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	377c      	adds	r7, #124	; 0x7c
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd90      	pop	{r4, r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	50040000 	.word	0x50040000
 8001ee8:	50040100 	.word	0x50040100
 8001eec:	50040300 	.word	0x50040300
 8001ef0:	50040200 	.word	0x50040200

08001ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <__NVIC_SetPriorityGrouping+0x44>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f10:	4013      	ands	r3, r2
 8001f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f26:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <__NVIC_SetPriorityGrouping+0x44>)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	60d3      	str	r3, [r2, #12]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f40:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <__NVIC_GetPriorityGrouping+0x18>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	0a1b      	lsrs	r3, r3, #8
 8001f46:	f003 0307 	and.w	r3, r3, #7
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	db0b      	blt.n	8001f82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	f003 021f 	and.w	r2, r3, #31
 8001f70:	4907      	ldr	r1, [pc, #28]	; (8001f90 <__NVIC_EnableIRQ+0x38>)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	2001      	movs	r0, #1
 8001f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	e000e100 	.word	0xe000e100

08001f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	6039      	str	r1, [r7, #0]
 8001f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	db0a      	blt.n	8001fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	490c      	ldr	r1, [pc, #48]	; (8001fe0 <__NVIC_SetPriority+0x4c>)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	0112      	lsls	r2, r2, #4
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fbc:	e00a      	b.n	8001fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	4908      	ldr	r1, [pc, #32]	; (8001fe4 <__NVIC_SetPriority+0x50>)
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	3b04      	subs	r3, #4
 8001fcc:	0112      	lsls	r2, r2, #4
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	761a      	strb	r2, [r3, #24]
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000e100 	.word	0xe000e100
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b089      	sub	sp, #36	; 0x24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f1c3 0307 	rsb	r3, r3, #7
 8002002:	2b04      	cmp	r3, #4
 8002004:	bf28      	it	cs
 8002006:	2304      	movcs	r3, #4
 8002008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3304      	adds	r3, #4
 800200e:	2b06      	cmp	r3, #6
 8002010:	d902      	bls.n	8002018 <NVIC_EncodePriority+0x30>
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3b03      	subs	r3, #3
 8002016:	e000      	b.n	800201a <NVIC_EncodePriority+0x32>
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43da      	mvns	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	401a      	ands	r2, r3
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002030:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	fa01 f303 	lsl.w	r3, r1, r3
 800203a:	43d9      	mvns	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	4313      	orrs	r3, r2
         );
}
 8002042:	4618      	mov	r0, r3
 8002044:	3724      	adds	r7, #36	; 0x24
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3b01      	subs	r3, #1
 800205c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002060:	d301      	bcc.n	8002066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002062:	2301      	movs	r3, #1
 8002064:	e00f      	b.n	8002086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002066:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <SysTick_Config+0x40>)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3b01      	subs	r3, #1
 800206c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800206e:	210f      	movs	r1, #15
 8002070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002074:	f7ff ff8e 	bl	8001f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <SysTick_Config+0x40>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800207e:	4b04      	ldr	r3, [pc, #16]	; (8002090 <SysTick_Config+0x40>)
 8002080:	2207      	movs	r2, #7
 8002082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	e000e010 	.word	0xe000e010

08002094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ff29 	bl	8001ef4 <__NVIC_SetPriorityGrouping>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b086      	sub	sp, #24
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020bc:	f7ff ff3e 	bl	8001f3c <__NVIC_GetPriorityGrouping>
 80020c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68b9      	ldr	r1, [r7, #8]
 80020c6:	6978      	ldr	r0, [r7, #20]
 80020c8:	f7ff ff8e 	bl	8001fe8 <NVIC_EncodePriority>
 80020cc:	4602      	mov	r2, r0
 80020ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d2:	4611      	mov	r1, r2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff5d 	bl	8001f94 <__NVIC_SetPriority>
}
 80020da:	bf00      	nop
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ff31 	bl	8001f58 <__NVIC_EnableIRQ>
}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff ffa2 	bl	8002050 <SysTick_Config>
 800210c:	4603      	mov	r3, r0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002118:	b480      	push	{r7}
 800211a:	b087      	sub	sp, #28
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002126:	e17f      	b.n	8002428 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	2101      	movs	r1, #1
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	fa01 f303 	lsl.w	r3, r1, r3
 8002134:	4013      	ands	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 8171 	beq.w	8002422 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d00b      	beq.n	8002160 <HAL_GPIO_Init+0x48>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d007      	beq.n	8002160 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002154:	2b11      	cmp	r3, #17
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b12      	cmp	r3, #18
 800215e:	d130      	bne.n	80021c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	2203      	movs	r2, #3
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002196:	2201      	movs	r2, #1
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4013      	ands	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	091b      	lsrs	r3, r3, #4
 80021ac:	f003 0201 	and.w	r2, r3, #1
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d118      	bne.n	8002200 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80021d4:	2201      	movs	r2, #1
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	08db      	lsrs	r3, r3, #3
 80021ea:	f003 0201 	and.w	r2, r3, #1
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	2203      	movs	r2, #3
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b02      	cmp	r3, #2
 8002236:	d003      	beq.n	8002240 <HAL_GPIO_Init+0x128>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b12      	cmp	r3, #18
 800223e:	d123      	bne.n	8002288 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	08da      	lsrs	r2, r3, #3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3208      	adds	r2, #8
 8002248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800224c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	220f      	movs	r2, #15
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	08da      	lsrs	r2, r3, #3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3208      	adds	r2, #8
 8002282:	6939      	ldr	r1, [r7, #16]
 8002284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	2203      	movs	r2, #3
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4013      	ands	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0203 	and.w	r2, r3, #3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 80ac 	beq.w	8002422 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ca:	4b5f      	ldr	r3, [pc, #380]	; (8002448 <HAL_GPIO_Init+0x330>)
 80022cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ce:	4a5e      	ldr	r2, [pc, #376]	; (8002448 <HAL_GPIO_Init+0x330>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	6613      	str	r3, [r2, #96]	; 0x60
 80022d6:	4b5c      	ldr	r3, [pc, #368]	; (8002448 <HAL_GPIO_Init+0x330>)
 80022d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022e2:	4a5a      	ldr	r2, [pc, #360]	; (800244c <HAL_GPIO_Init+0x334>)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	089b      	lsrs	r3, r3, #2
 80022e8:	3302      	adds	r3, #2
 80022ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	220f      	movs	r2, #15
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800230c:	d025      	beq.n	800235a <HAL_GPIO_Init+0x242>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a4f      	ldr	r2, [pc, #316]	; (8002450 <HAL_GPIO_Init+0x338>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d01f      	beq.n	8002356 <HAL_GPIO_Init+0x23e>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a4e      	ldr	r2, [pc, #312]	; (8002454 <HAL_GPIO_Init+0x33c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d019      	beq.n	8002352 <HAL_GPIO_Init+0x23a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a4d      	ldr	r2, [pc, #308]	; (8002458 <HAL_GPIO_Init+0x340>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d013      	beq.n	800234e <HAL_GPIO_Init+0x236>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a4c      	ldr	r2, [pc, #304]	; (800245c <HAL_GPIO_Init+0x344>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d00d      	beq.n	800234a <HAL_GPIO_Init+0x232>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a4b      	ldr	r2, [pc, #300]	; (8002460 <HAL_GPIO_Init+0x348>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d007      	beq.n	8002346 <HAL_GPIO_Init+0x22e>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a4a      	ldr	r2, [pc, #296]	; (8002464 <HAL_GPIO_Init+0x34c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d101      	bne.n	8002342 <HAL_GPIO_Init+0x22a>
 800233e:	2306      	movs	r3, #6
 8002340:	e00c      	b.n	800235c <HAL_GPIO_Init+0x244>
 8002342:	2307      	movs	r3, #7
 8002344:	e00a      	b.n	800235c <HAL_GPIO_Init+0x244>
 8002346:	2305      	movs	r3, #5
 8002348:	e008      	b.n	800235c <HAL_GPIO_Init+0x244>
 800234a:	2304      	movs	r3, #4
 800234c:	e006      	b.n	800235c <HAL_GPIO_Init+0x244>
 800234e:	2303      	movs	r3, #3
 8002350:	e004      	b.n	800235c <HAL_GPIO_Init+0x244>
 8002352:	2302      	movs	r3, #2
 8002354:	e002      	b.n	800235c <HAL_GPIO_Init+0x244>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <HAL_GPIO_Init+0x244>
 800235a:	2300      	movs	r3, #0
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	f002 0203 	and.w	r2, r2, #3
 8002362:	0092      	lsls	r2, r2, #2
 8002364:	4093      	lsls	r3, r2
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800236c:	4937      	ldr	r1, [pc, #220]	; (800244c <HAL_GPIO_Init+0x334>)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	089b      	lsrs	r3, r3, #2
 8002372:	3302      	adds	r3, #2
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800237a:	4b3b      	ldr	r3, [pc, #236]	; (8002468 <HAL_GPIO_Init+0x350>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	43db      	mvns	r3, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4013      	ands	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4313      	orrs	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800239e:	4a32      	ldr	r2, [pc, #200]	; (8002468 <HAL_GPIO_Init+0x350>)
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80023a4:	4b30      	ldr	r3, [pc, #192]	; (8002468 <HAL_GPIO_Init+0x350>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	43db      	mvns	r3, r3
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4013      	ands	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023c8:	4a27      	ldr	r2, [pc, #156]	; (8002468 <HAL_GPIO_Init+0x350>)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023ce:	4b26      	ldr	r3, [pc, #152]	; (8002468 <HAL_GPIO_Init+0x350>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4013      	ands	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023f2:	4a1d      	ldr	r2, [pc, #116]	; (8002468 <HAL_GPIO_Init+0x350>)
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023f8:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <HAL_GPIO_Init+0x350>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	43db      	mvns	r3, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800241c:	4a12      	ldr	r2, [pc, #72]	; (8002468 <HAL_GPIO_Init+0x350>)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	3301      	adds	r3, #1
 8002426:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	fa22 f303 	lsr.w	r3, r2, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	f47f ae78 	bne.w	8002128 <HAL_GPIO_Init+0x10>
  }
}
 8002438:	bf00      	nop
 800243a:	bf00      	nop
 800243c:	371c      	adds	r7, #28
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40021000 	.word	0x40021000
 800244c:	40010000 	.word	0x40010000
 8002450:	48000400 	.word	0x48000400
 8002454:	48000800 	.word	0x48000800
 8002458:	48000c00 	.word	0x48000c00
 800245c:	48001000 	.word	0x48001000
 8002460:	48001400 	.word	0x48001400
 8002464:	48001800 	.word	0x48001800
 8002468:	40010400 	.word	0x40010400

0800246c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	807b      	strh	r3, [r7, #2]
 8002478:	4613      	mov	r3, r2
 800247a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800247c:	787b      	ldrb	r3, [r7, #1]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002482:	887a      	ldrh	r2, [r7, #2]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002488:	e002      	b.n	8002490 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800248a:	887a      	ldrh	r2, [r7, #2]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024ae:	887a      	ldrh	r2, [r7, #2]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4013      	ands	r3, r2
 80024b4:	041a      	lsls	r2, r3, #16
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	43d9      	mvns	r1, r3
 80024ba:	887b      	ldrh	r3, [r7, #2]
 80024bc:	400b      	ands	r3, r1
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	619a      	str	r2, [r3, #24]
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024da:	4b08      	ldr	r3, [pc, #32]	; (80024fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	88fb      	ldrh	r3, [r7, #6]
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d006      	beq.n	80024f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024e6:	4a05      	ldr	r2, [pc, #20]	; (80024fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024e8:	88fb      	ldrh	r3, [r7, #6]
 80024ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024ec:	88fb      	ldrh	r3, [r7, #6]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe fb5a 	bl	8000ba8 <HAL_GPIO_EXTI_Callback>
  }
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40010400 	.word	0x40010400

08002500 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002504:	4b04      	ldr	r3, [pc, #16]	; (8002518 <HAL_PWREx_GetVoltageRange+0x18>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40007000 	.word	0x40007000

0800251c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800252a:	d130      	bne.n	800258e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800252c:	4b23      	ldr	r3, [pc, #140]	; (80025bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002538:	d038      	beq.n	80025ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800253a:	4b20      	ldr	r3, [pc, #128]	; (80025bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002542:	4a1e      	ldr	r2, [pc, #120]	; (80025bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002544:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002548:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800254a:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2232      	movs	r2, #50	; 0x32
 8002550:	fb02 f303 	mul.w	r3, r2, r3
 8002554:	4a1b      	ldr	r2, [pc, #108]	; (80025c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002556:	fba2 2303 	umull	r2, r3, r2, r3
 800255a:	0c9b      	lsrs	r3, r3, #18
 800255c:	3301      	adds	r3, #1
 800255e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002560:	e002      	b.n	8002568 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	3b01      	subs	r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002568:	4b14      	ldr	r3, [pc, #80]	; (80025bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002574:	d102      	bne.n	800257c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f2      	bne.n	8002562 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800257c:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002588:	d110      	bne.n	80025ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e00f      	b.n	80025ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800258e:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259a:	d007      	beq.n	80025ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800259c:	4b07      	ldr	r3, [pc, #28]	; (80025bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025a4:	4a05      	ldr	r2, [pc, #20]	; (80025bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	40007000 	.word	0x40007000
 80025c0:	20000000 	.word	0x20000000
 80025c4:	431bde83 	.word	0x431bde83

080025c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e3d4      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025da:	4ba1      	ldr	r3, [pc, #644]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 030c 	and.w	r3, r3, #12
 80025e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025e4:	4b9e      	ldr	r3, [pc, #632]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 80e4 	beq.w	80027c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d007      	beq.n	8002612 <HAL_RCC_OscConfig+0x4a>
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	2b0c      	cmp	r3, #12
 8002606:	f040 808b 	bne.w	8002720 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2b01      	cmp	r3, #1
 800260e:	f040 8087 	bne.w	8002720 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002612:	4b93      	ldr	r3, [pc, #588]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d005      	beq.n	800262a <HAL_RCC_OscConfig+0x62>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e3ac      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1a      	ldr	r2, [r3, #32]
 800262e:	4b8c      	ldr	r3, [pc, #560]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d004      	beq.n	8002644 <HAL_RCC_OscConfig+0x7c>
 800263a:	4b89      	ldr	r3, [pc, #548]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002642:	e005      	b.n	8002650 <HAL_RCC_OscConfig+0x88>
 8002644:	4b86      	ldr	r3, [pc, #536]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002650:	4293      	cmp	r3, r2
 8002652:	d223      	bcs.n	800269c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	4618      	mov	r0, r3
 800265a:	f000 fd41 	bl	80030e0 <RCC_SetFlashLatencyFromMSIRange>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e38d      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002668:	4b7d      	ldr	r3, [pc, #500]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a7c      	ldr	r2, [pc, #496]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 800266e:	f043 0308 	orr.w	r3, r3, #8
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	4b7a      	ldr	r3, [pc, #488]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	4977      	ldr	r1, [pc, #476]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002686:	4b76      	ldr	r3, [pc, #472]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	021b      	lsls	r3, r3, #8
 8002694:	4972      	ldr	r1, [pc, #456]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
 800269a:	e025      	b.n	80026e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800269c:	4b70      	ldr	r3, [pc, #448]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a6f      	ldr	r2, [pc, #444]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 80026a2:	f043 0308 	orr.w	r3, r3, #8
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	4b6d      	ldr	r3, [pc, #436]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	496a      	ldr	r1, [pc, #424]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ba:	4b69      	ldr	r3, [pc, #420]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	4965      	ldr	r1, [pc, #404]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d109      	bne.n	80026e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fd01 	bl	80030e0 <RCC_SetFlashLatencyFromMSIRange>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e34d      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026e8:	f000 fc36 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 80026ec:	4602      	mov	r2, r0
 80026ee:	4b5c      	ldr	r3, [pc, #368]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	091b      	lsrs	r3, r3, #4
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	495a      	ldr	r1, [pc, #360]	; (8002864 <HAL_RCC_OscConfig+0x29c>)
 80026fa:	5ccb      	ldrb	r3, [r1, r3]
 80026fc:	f003 031f 	and.w	r3, r3, #31
 8002700:	fa22 f303 	lsr.w	r3, r2, r3
 8002704:	4a58      	ldr	r2, [pc, #352]	; (8002868 <HAL_RCC_OscConfig+0x2a0>)
 8002706:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002708:	4b58      	ldr	r3, [pc, #352]	; (800286c <HAL_RCC_OscConfig+0x2a4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe fbc9 	bl	8000ea4 <HAL_InitTick>
 8002712:	4603      	mov	r3, r0
 8002714:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d052      	beq.n	80027c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	e331      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d032      	beq.n	800278e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002728:	4b4d      	ldr	r3, [pc, #308]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a4c      	ldr	r2, [pc, #304]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002734:	f7fe fc06 	bl	8000f44 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800273c:	f7fe fc02 	bl	8000f44 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e31a      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800274e:	4b44      	ldr	r3, [pc, #272]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800275a:	4b41      	ldr	r3, [pc, #260]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a40      	ldr	r2, [pc, #256]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002760:	f043 0308 	orr.w	r3, r3, #8
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b3e      	ldr	r3, [pc, #248]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	493b      	ldr	r1, [pc, #236]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002774:	4313      	orrs	r3, r2
 8002776:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002778:	4b39      	ldr	r3, [pc, #228]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	021b      	lsls	r3, r3, #8
 8002786:	4936      	ldr	r1, [pc, #216]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]
 800278c:	e01a      	b.n	80027c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800278e:	4b34      	ldr	r3, [pc, #208]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a33      	ldr	r2, [pc, #204]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002794:	f023 0301 	bic.w	r3, r3, #1
 8002798:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800279a:	f7fe fbd3 	bl	8000f44 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027a2:	f7fe fbcf 	bl	8000f44 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e2e7      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027b4:	4b2a      	ldr	r3, [pc, #168]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f0      	bne.n	80027a2 <HAL_RCC_OscConfig+0x1da>
 80027c0:	e000      	b.n	80027c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d074      	beq.n	80028ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d005      	beq.n	80027e2 <HAL_RCC_OscConfig+0x21a>
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	2b0c      	cmp	r3, #12
 80027da:	d10e      	bne.n	80027fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d10b      	bne.n	80027fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e2:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d064      	beq.n	80028b8 <HAL_RCC_OscConfig+0x2f0>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d160      	bne.n	80028b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e2c4      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002802:	d106      	bne.n	8002812 <HAL_RCC_OscConfig+0x24a>
 8002804:	4b16      	ldr	r3, [pc, #88]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a15      	ldr	r2, [pc, #84]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 800280a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	e01d      	b.n	800284e <HAL_RCC_OscConfig+0x286>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800281a:	d10c      	bne.n	8002836 <HAL_RCC_OscConfig+0x26e>
 800281c:	4b10      	ldr	r3, [pc, #64]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a0f      	ldr	r2, [pc, #60]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002822:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0c      	ldr	r2, [pc, #48]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 800282e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	e00b      	b.n	800284e <HAL_RCC_OscConfig+0x286>
 8002836:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a09      	ldr	r2, [pc, #36]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 800283c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	4b07      	ldr	r3, [pc, #28]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a06      	ldr	r2, [pc, #24]	; (8002860 <HAL_RCC_OscConfig+0x298>)
 8002848:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800284c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d01c      	beq.n	8002890 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002856:	f7fe fb75 	bl	8000f44 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800285c:	e011      	b.n	8002882 <HAL_RCC_OscConfig+0x2ba>
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	08004434 	.word	0x08004434
 8002868:	20000000 	.word	0x20000000
 800286c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002870:	f7fe fb68 	bl	8000f44 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b64      	cmp	r3, #100	; 0x64
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e280      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002882:	4baf      	ldr	r3, [pc, #700]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x2a8>
 800288e:	e014      	b.n	80028ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7fe fb58 	bl	8000f44 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002898:	f7fe fb54 	bl	8000f44 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b64      	cmp	r3, #100	; 0x64
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e26c      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028aa:	4ba5      	ldr	r3, [pc, #660]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x2d0>
 80028b6:	e000      	b.n	80028ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d060      	beq.n	8002988 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d005      	beq.n	80028d8 <HAL_RCC_OscConfig+0x310>
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	2b0c      	cmp	r3, #12
 80028d0:	d119      	bne.n	8002906 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d116      	bne.n	8002906 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028d8:	4b99      	ldr	r3, [pc, #612]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d005      	beq.n	80028f0 <HAL_RCC_OscConfig+0x328>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e249      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f0:	4b93      	ldr	r3, [pc, #588]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	061b      	lsls	r3, r3, #24
 80028fe:	4990      	ldr	r1, [pc, #576]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002900:	4313      	orrs	r3, r2
 8002902:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002904:	e040      	b.n	8002988 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d023      	beq.n	8002956 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800290e:	4b8c      	ldr	r3, [pc, #560]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a8b      	ldr	r2, [pc, #556]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291a:	f7fe fb13 	bl	8000f44 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002922:	f7fe fb0f 	bl	8000f44 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e227      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002934:	4b82      	ldr	r3, [pc, #520]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002940:	4b7f      	ldr	r3, [pc, #508]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	061b      	lsls	r3, r3, #24
 800294e:	497c      	ldr	r1, [pc, #496]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002950:	4313      	orrs	r3, r2
 8002952:	604b      	str	r3, [r1, #4]
 8002954:	e018      	b.n	8002988 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002956:	4b7a      	ldr	r3, [pc, #488]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a79      	ldr	r2, [pc, #484]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 800295c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002962:	f7fe faef 	bl	8000f44 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800296a:	f7fe faeb 	bl	8000f44 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e203      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800297c:	4b70      	ldr	r3, [pc, #448]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f0      	bne.n	800296a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0308 	and.w	r3, r3, #8
 8002990:	2b00      	cmp	r3, #0
 8002992:	d03c      	beq.n	8002a0e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01c      	beq.n	80029d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800299c:	4b68      	ldr	r3, [pc, #416]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 800299e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029a2:	4a67      	ldr	r2, [pc, #412]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ac:	f7fe faca 	bl	8000f44 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b4:	f7fe fac6 	bl	8000f44 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e1de      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029c6:	4b5e      	ldr	r3, [pc, #376]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 80029c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0ef      	beq.n	80029b4 <HAL_RCC_OscConfig+0x3ec>
 80029d4:	e01b      	b.n	8002a0e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d6:	4b5a      	ldr	r3, [pc, #360]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 80029d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029dc:	4a58      	ldr	r2, [pc, #352]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 80029de:	f023 0301 	bic.w	r3, r3, #1
 80029e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e6:	f7fe faad 	bl	8000f44 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ee:	f7fe faa9 	bl	8000f44 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e1c1      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a00:	4b4f      	ldr	r3, [pc, #316]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1ef      	bne.n	80029ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 80a6 	beq.w	8002b68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a20:	4b47      	ldr	r3, [pc, #284]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10d      	bne.n	8002a48 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2c:	4b44      	ldr	r3, [pc, #272]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a30:	4a43      	ldr	r2, [pc, #268]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a36:	6593      	str	r3, [r2, #88]	; 0x58
 8002a38:	4b41      	ldr	r3, [pc, #260]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a44:	2301      	movs	r3, #1
 8002a46:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a48:	4b3e      	ldr	r3, [pc, #248]	; (8002b44 <HAL_RCC_OscConfig+0x57c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d118      	bne.n	8002a86 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a54:	4b3b      	ldr	r3, [pc, #236]	; (8002b44 <HAL_RCC_OscConfig+0x57c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a3a      	ldr	r2, [pc, #232]	; (8002b44 <HAL_RCC_OscConfig+0x57c>)
 8002a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a60:	f7fe fa70 	bl	8000f44 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a68:	f7fe fa6c 	bl	8000f44 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e184      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a7a:	4b32      	ldr	r3, [pc, #200]	; (8002b44 <HAL_RCC_OscConfig+0x57c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d108      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x4d8>
 8002a8e:	4b2c      	ldr	r3, [pc, #176]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a94:	4a2a      	ldr	r2, [pc, #168]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a9e:	e024      	b.n	8002aea <HAL_RCC_OscConfig+0x522>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2b05      	cmp	r3, #5
 8002aa6:	d110      	bne.n	8002aca <HAL_RCC_OscConfig+0x502>
 8002aa8:	4b25      	ldr	r3, [pc, #148]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aae:	4a24      	ldr	r2, [pc, #144]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002ab0:	f043 0304 	orr.w	r3, r3, #4
 8002ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ab8:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abe:	4a20      	ldr	r2, [pc, #128]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ac8:	e00f      	b.n	8002aea <HAL_RCC_OscConfig+0x522>
 8002aca:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad0:	4a1b      	ldr	r2, [pc, #108]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002ad2:	f023 0301 	bic.w	r3, r3, #1
 8002ad6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ada:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae0:	4a17      	ldr	r2, [pc, #92]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002ae2:	f023 0304 	bic.w	r3, r3, #4
 8002ae6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d016      	beq.n	8002b20 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af2:	f7fe fa27 	bl	8000f44 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002af8:	e00a      	b.n	8002b10 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afa:	f7fe fa23 	bl	8000f44 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e139      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCC_OscConfig+0x578>)
 8002b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0ed      	beq.n	8002afa <HAL_RCC_OscConfig+0x532>
 8002b1e:	e01a      	b.n	8002b56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b20:	f7fe fa10 	bl	8000f44 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b26:	e00f      	b.n	8002b48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b28:	f7fe fa0c 	bl	8000f44 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d906      	bls.n	8002b48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e122      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
 8002b3e:	bf00      	nop
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b48:	4b90      	ldr	r3, [pc, #576]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1e8      	bne.n	8002b28 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b56:	7ffb      	ldrb	r3, [r7, #31]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d105      	bne.n	8002b68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b5c:	4b8b      	ldr	r3, [pc, #556]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b60:	4a8a      	ldr	r2, [pc, #552]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b66:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 8108 	beq.w	8002d82 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	f040 80d0 	bne.w	8002d1c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b7c:	4b83      	ldr	r3, [pc, #524]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f003 0203 	and.w	r2, r3, #3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d130      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d127      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d11f      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bbc:	2a07      	cmp	r2, #7
 8002bbe:	bf14      	ite	ne
 8002bc0:	2201      	movne	r2, #1
 8002bc2:	2200      	moveq	r2, #0
 8002bc4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d113      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd4:	085b      	lsrs	r3, r3, #1
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d109      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	085b      	lsrs	r3, r3, #1
 8002bea:	3b01      	subs	r3, #1
 8002bec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d06e      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	2b0c      	cmp	r3, #12
 8002bf6:	d069      	beq.n	8002ccc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bf8:	4b64      	ldr	r3, [pc, #400]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d105      	bne.n	8002c10 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c04:	4b61      	ldr	r3, [pc, #388]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e0b7      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c14:	4b5d      	ldr	r3, [pc, #372]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a5c      	ldr	r2, [pc, #368]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002c1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c1e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c20:	f7fe f990 	bl	8000f44 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c28:	f7fe f98c 	bl	8000f44 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e0a4      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c3a:	4b54      	ldr	r3, [pc, #336]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c46:	4b51      	ldr	r3, [pc, #324]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	4b51      	ldr	r3, [pc, #324]	; (8002d90 <HAL_RCC_OscConfig+0x7c8>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c56:	3a01      	subs	r2, #1
 8002c58:	0112      	lsls	r2, r2, #4
 8002c5a:	4311      	orrs	r1, r2
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c60:	0212      	lsls	r2, r2, #8
 8002c62:	4311      	orrs	r1, r2
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c68:	0852      	lsrs	r2, r2, #1
 8002c6a:	3a01      	subs	r2, #1
 8002c6c:	0552      	lsls	r2, r2, #21
 8002c6e:	4311      	orrs	r1, r2
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c74:	0852      	lsrs	r2, r2, #1
 8002c76:	3a01      	subs	r2, #1
 8002c78:	0652      	lsls	r2, r2, #25
 8002c7a:	4311      	orrs	r1, r2
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c80:	0912      	lsrs	r2, r2, #4
 8002c82:	0452      	lsls	r2, r2, #17
 8002c84:	430a      	orrs	r2, r1
 8002c86:	4941      	ldr	r1, [pc, #260]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c8c:	4b3f      	ldr	r3, [pc, #252]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a3e      	ldr	r2, [pc, #248]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c98:	4b3c      	ldr	r3, [pc, #240]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	4a3b      	ldr	r2, [pc, #236]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002c9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ca2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ca4:	f7fe f94e 	bl	8000f44 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cac:	f7fe f94a 	bl	8000f44 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e062      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cbe:	4b33      	ldr	r3, [pc, #204]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cca:	e05a      	b.n	8002d82 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e059      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd0:	4b2e      	ldr	r3, [pc, #184]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d152      	bne.n	8002d82 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cdc:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a2a      	ldr	r2, [pc, #168]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ce6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ce8:	4b28      	ldr	r3, [pc, #160]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4a27      	ldr	r2, [pc, #156]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cf2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cf4:	f7fe f926 	bl	8000f44 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfc:	f7fe f922 	bl	8000f44 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e03a      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d0e:	4b1f      	ldr	r3, [pc, #124]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0x734>
 8002d1a:	e032      	b.n	8002d82 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	2b0c      	cmp	r3, #12
 8002d20:	d02d      	beq.n	8002d7e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d22:	4b1a      	ldr	r3, [pc, #104]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a19      	ldr	r2, [pc, #100]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002d28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d2c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002d2e:	4b17      	ldr	r3, [pc, #92]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d105      	bne.n	8002d46 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d3a:	4b14      	ldr	r3, [pc, #80]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	4a13      	ldr	r2, [pc, #76]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002d40:	f023 0303 	bic.w	r3, r3, #3
 8002d44:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d46:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	4a10      	ldr	r2, [pc, #64]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002d4c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d54:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d56:	f7fe f8f5 	bl	8000f44 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d5e:	f7fe f8f1 	bl	8000f44 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e009      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_RCC_OscConfig+0x7c4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1f0      	bne.n	8002d5e <HAL_RCC_OscConfig+0x796>
 8002d7c:	e001      	b.n	8002d82 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3720      	adds	r7, #32
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	f99d808c 	.word	0xf99d808c

08002d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0c8      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002da8:	4b66      	ldr	r3, [pc, #408]	; (8002f44 <HAL_RCC_ClockConfig+0x1b0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d910      	bls.n	8002dd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b63      	ldr	r3, [pc, #396]	; (8002f44 <HAL_RCC_ClockConfig+0x1b0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 0207 	bic.w	r2, r3, #7
 8002dbe:	4961      	ldr	r1, [pc, #388]	; (8002f44 <HAL_RCC_ClockConfig+0x1b0>)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc6:	4b5f      	ldr	r3, [pc, #380]	; (8002f44 <HAL_RCC_ClockConfig+0x1b0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0b0      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d04c      	beq.n	8002e7e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d107      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dec:	4b56      	ldr	r3, [pc, #344]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d121      	bne.n	8002e3c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e09e      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d107      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e04:	4b50      	ldr	r3, [pc, #320]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d115      	bne.n	8002e3c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e092      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d107      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e1c:	4b4a      	ldr	r3, [pc, #296]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d109      	bne.n	8002e3c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e086      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e2c:	4b46      	ldr	r3, [pc, #280]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e07e      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e3c:	4b42      	ldr	r3, [pc, #264]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f023 0203 	bic.w	r2, r3, #3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	493f      	ldr	r1, [pc, #252]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e4e:	f7fe f879 	bl	8000f44 <HAL_GetTick>
 8002e52:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e54:	e00a      	b.n	8002e6c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e56:	f7fe f875 	bl	8000f44 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e066      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6c:	4b36      	ldr	r3, [pc, #216]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 020c 	and.w	r2, r3, #12
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d1eb      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d008      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e8a:	4b2f      	ldr	r3, [pc, #188]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	492c      	ldr	r1, [pc, #176]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e9c:	4b29      	ldr	r3, [pc, #164]	; (8002f44 <HAL_RCC_ClockConfig+0x1b0>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d210      	bcs.n	8002ecc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eaa:	4b26      	ldr	r3, [pc, #152]	; (8002f44 <HAL_RCC_ClockConfig+0x1b0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 0207 	bic.w	r2, r3, #7
 8002eb2:	4924      	ldr	r1, [pc, #144]	; (8002f44 <HAL_RCC_ClockConfig+0x1b0>)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eba:	4b22      	ldr	r3, [pc, #136]	; (8002f44 <HAL_RCC_ClockConfig+0x1b0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e036      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed8:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4918      	ldr	r1, [pc, #96]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ef6:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4910      	ldr	r1, [pc, #64]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f0a:	f000 f825 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <HAL_RCC_ClockConfig+0x1b4>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	490c      	ldr	r1, [pc, #48]	; (8002f4c <HAL_RCC_ClockConfig+0x1b8>)
 8002f1c:	5ccb      	ldrb	r3, [r1, r3]
 8002f1e:	f003 031f 	and.w	r3, r3, #31
 8002f22:	fa22 f303 	lsr.w	r3, r2, r3
 8002f26:	4a0a      	ldr	r2, [pc, #40]	; (8002f50 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <HAL_RCC_ClockConfig+0x1c0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fd ffb8 	bl	8000ea4 <HAL_InitTick>
 8002f34:	4603      	mov	r3, r0
 8002f36:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f38:	7afb      	ldrb	r3, [r7, #11]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40022000 	.word	0x40022000
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	08004434 	.word	0x08004434
 8002f50:	20000000 	.word	0x20000000
 8002f54:	20000004 	.word	0x20000004

08002f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b089      	sub	sp, #36	; 0x24
 8002f5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61fb      	str	r3, [r7, #28]
 8002f62:	2300      	movs	r3, #0
 8002f64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f66:	4b3e      	ldr	r3, [pc, #248]	; (8003060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
 8002f6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f70:	4b3b      	ldr	r3, [pc, #236]	; (8003060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0303 	and.w	r3, r3, #3
 8002f78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_RCC_GetSysClockFreq+0x34>
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	2b0c      	cmp	r3, #12
 8002f84:	d121      	bne.n	8002fca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d11e      	bne.n	8002fca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f8c:	4b34      	ldr	r3, [pc, #208]	; (8003060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d107      	bne.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f98:	4b31      	ldr	r3, [pc, #196]	; (8003060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f9e:	0a1b      	lsrs	r3, r3, #8
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	61fb      	str	r3, [r7, #28]
 8002fa6:	e005      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fa8:	4b2d      	ldr	r3, [pc, #180]	; (8003060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	091b      	lsrs	r3, r3, #4
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fb4:	4a2b      	ldr	r2, [pc, #172]	; (8003064 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10d      	bne.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d102      	bne.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fd0:	4b25      	ldr	r3, [pc, #148]	; (8003068 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fd2:	61bb      	str	r3, [r7, #24]
 8002fd4:	e004      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fdc:	4b23      	ldr	r3, [pc, #140]	; (800306c <HAL_RCC_GetSysClockFreq+0x114>)
 8002fde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	2b0c      	cmp	r3, #12
 8002fe4:	d134      	bne.n	8003050 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fe6:	4b1e      	ldr	r3, [pc, #120]	; (8003060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d003      	beq.n	8002ffe <HAL_RCC_GetSysClockFreq+0xa6>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d003      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0xac>
 8002ffc:	e005      	b.n	800300a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ffe:	4b1a      	ldr	r3, [pc, #104]	; (8003068 <HAL_RCC_GetSysClockFreq+0x110>)
 8003000:	617b      	str	r3, [r7, #20]
      break;
 8003002:	e005      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003004:	4b19      	ldr	r3, [pc, #100]	; (800306c <HAL_RCC_GetSysClockFreq+0x114>)
 8003006:	617b      	str	r3, [r7, #20]
      break;
 8003008:	e002      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	617b      	str	r3, [r7, #20]
      break;
 800300e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003010:	4b13      	ldr	r3, [pc, #76]	; (8003060 <HAL_RCC_GetSysClockFreq+0x108>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	3301      	adds	r3, #1
 800301c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800301e:	4b10      	ldr	r3, [pc, #64]	; (8003060 <HAL_RCC_GetSysClockFreq+0x108>)
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	fb02 f203 	mul.w	r2, r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	fbb2 f3f3 	udiv	r3, r2, r3
 8003034:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003036:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <HAL_RCC_GetSysClockFreq+0x108>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	0e5b      	lsrs	r3, r3, #25
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	3301      	adds	r3, #1
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	fbb2 f3f3 	udiv	r3, r2, r3
 800304e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003050:	69bb      	ldr	r3, [r7, #24]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3724      	adds	r7, #36	; 0x24
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40021000 	.word	0x40021000
 8003064:	0800444c 	.word	0x0800444c
 8003068:	00f42400 	.word	0x00f42400
 800306c:	007a1200 	.word	0x007a1200

08003070 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003074:	4b03      	ldr	r3, [pc, #12]	; (8003084 <HAL_RCC_GetHCLKFreq+0x14>)
 8003076:	681b      	ldr	r3, [r3, #0]
}
 8003078:	4618      	mov	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	20000000 	.word	0x20000000

08003088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800308c:	f7ff fff0 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 8003090:	4602      	mov	r2, r0
 8003092:	4b06      	ldr	r3, [pc, #24]	; (80030ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	0a1b      	lsrs	r3, r3, #8
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	4904      	ldr	r1, [pc, #16]	; (80030b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800309e:	5ccb      	ldrb	r3, [r1, r3]
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40021000 	.word	0x40021000
 80030b0:	08004444 	.word	0x08004444

080030b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030b8:	f7ff ffda 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 80030bc:	4602      	mov	r2, r0
 80030be:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	0adb      	lsrs	r3, r3, #11
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	4904      	ldr	r1, [pc, #16]	; (80030dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80030ca:	5ccb      	ldrb	r3, [r1, r3]
 80030cc:	f003 031f 	and.w	r3, r3, #31
 80030d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40021000 	.word	0x40021000
 80030dc:	08004444 	.word	0x08004444

080030e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030e8:	2300      	movs	r3, #0
 80030ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030ec:	4b2a      	ldr	r3, [pc, #168]	; (8003198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030f8:	f7ff fa02 	bl	8002500 <HAL_PWREx_GetVoltageRange>
 80030fc:	6178      	str	r0, [r7, #20]
 80030fe:	e014      	b.n	800312a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003100:	4b25      	ldr	r3, [pc, #148]	; (8003198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003104:	4a24      	ldr	r2, [pc, #144]	; (8003198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800310a:	6593      	str	r3, [r2, #88]	; 0x58
 800310c:	4b22      	ldr	r3, [pc, #136]	; (8003198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800310e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003118:	f7ff f9f2 	bl	8002500 <HAL_PWREx_GetVoltageRange>
 800311c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800311e:	4b1e      	ldr	r3, [pc, #120]	; (8003198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003122:	4a1d      	ldr	r2, [pc, #116]	; (8003198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003128:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003130:	d10b      	bne.n	800314a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b80      	cmp	r3, #128	; 0x80
 8003136:	d919      	bls.n	800316c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2ba0      	cmp	r3, #160	; 0xa0
 800313c:	d902      	bls.n	8003144 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800313e:	2302      	movs	r3, #2
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	e013      	b.n	800316c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003144:	2301      	movs	r3, #1
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	e010      	b.n	800316c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b80      	cmp	r3, #128	; 0x80
 800314e:	d902      	bls.n	8003156 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003150:	2303      	movs	r3, #3
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	e00a      	b.n	800316c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b80      	cmp	r3, #128	; 0x80
 800315a:	d102      	bne.n	8003162 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800315c:	2302      	movs	r3, #2
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	e004      	b.n	800316c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b70      	cmp	r3, #112	; 0x70
 8003166:	d101      	bne.n	800316c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003168:	2301      	movs	r3, #1
 800316a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800316c:	4b0b      	ldr	r3, [pc, #44]	; (800319c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f023 0207 	bic.w	r2, r3, #7
 8003174:	4909      	ldr	r1, [pc, #36]	; (800319c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800317c:	4b07      	ldr	r3, [pc, #28]	; (800319c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	429a      	cmp	r2, r3
 8003188:	d001      	beq.n	800318e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40021000 	.word	0x40021000
 800319c:	40022000 	.word	0x40022000

080031a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031a8:	2300      	movs	r3, #0
 80031aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031ac:	2300      	movs	r3, #0
 80031ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d041      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031c4:	d02a      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80031c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031ca:	d824      	bhi.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031d0:	d008      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80031d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031d6:	d81e      	bhi.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80031dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031e0:	d010      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031e2:	e018      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031e4:	4b86      	ldr	r3, [pc, #536]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4a85      	ldr	r2, [pc, #532]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031f0:	e015      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3304      	adds	r3, #4
 80031f6:	2100      	movs	r1, #0
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 fabb 	bl	8003774 <RCCEx_PLLSAI1_Config>
 80031fe:	4603      	mov	r3, r0
 8003200:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003202:	e00c      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3320      	adds	r3, #32
 8003208:	2100      	movs	r1, #0
 800320a:	4618      	mov	r0, r3
 800320c:	f000 fba6 	bl	800395c <RCCEx_PLLSAI2_Config>
 8003210:	4603      	mov	r3, r0
 8003212:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003214:	e003      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	74fb      	strb	r3, [r7, #19]
      break;
 800321a:	e000      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800321c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800321e:	7cfb      	ldrb	r3, [r7, #19]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10b      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003224:	4b76      	ldr	r3, [pc, #472]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003232:	4973      	ldr	r1, [pc, #460]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800323a:	e001      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800323c:	7cfb      	ldrb	r3, [r7, #19]
 800323e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d041      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003250:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003254:	d02a      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003256:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800325a:	d824      	bhi.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800325c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003260:	d008      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003262:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003266:	d81e      	bhi.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800326c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003270:	d010      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003272:	e018      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003274:	4b62      	ldr	r3, [pc, #392]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4a61      	ldr	r2, [pc, #388]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003280:	e015      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3304      	adds	r3, #4
 8003286:	2100      	movs	r1, #0
 8003288:	4618      	mov	r0, r3
 800328a:	f000 fa73 	bl	8003774 <RCCEx_PLLSAI1_Config>
 800328e:	4603      	mov	r3, r0
 8003290:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003292:	e00c      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3320      	adds	r3, #32
 8003298:	2100      	movs	r1, #0
 800329a:	4618      	mov	r0, r3
 800329c:	f000 fb5e 	bl	800395c <RCCEx_PLLSAI2_Config>
 80032a0:	4603      	mov	r3, r0
 80032a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032a4:	e003      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	74fb      	strb	r3, [r7, #19]
      break;
 80032aa:	e000      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80032ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ae:	7cfb      	ldrb	r3, [r7, #19]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10b      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032b4:	4b52      	ldr	r3, [pc, #328]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032c2:	494f      	ldr	r1, [pc, #316]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032ca:	e001      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032cc:	7cfb      	ldrb	r3, [r7, #19]
 80032ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 80a0 	beq.w	800341e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032de:	2300      	movs	r3, #0
 80032e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032e2:	4b47      	ldr	r3, [pc, #284]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80032f2:	2300      	movs	r3, #0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00d      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032f8:	4b41      	ldr	r3, [pc, #260]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fc:	4a40      	ldr	r2, [pc, #256]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003302:	6593      	str	r3, [r2, #88]	; 0x58
 8003304:	4b3e      	ldr	r3, [pc, #248]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003310:	2301      	movs	r3, #1
 8003312:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003314:	4b3b      	ldr	r3, [pc, #236]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a3a      	ldr	r2, [pc, #232]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800331a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800331e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003320:	f7fd fe10 	bl	8000f44 <HAL_GetTick>
 8003324:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003326:	e009      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003328:	f7fd fe0c 	bl	8000f44 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d902      	bls.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	74fb      	strb	r3, [r7, #19]
        break;
 800333a:	e005      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800333c:	4b31      	ldr	r3, [pc, #196]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0ef      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003348:	7cfb      	ldrb	r3, [r7, #19]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d15c      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800334e:	4b2c      	ldr	r3, [pc, #176]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003354:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003358:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01f      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	429a      	cmp	r2, r3
 800336a:	d019      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800336c:	4b24      	ldr	r3, [pc, #144]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003376:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003378:	4b21      	ldr	r3, [pc, #132]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800337a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337e:	4a20      	ldr	r2, [pc, #128]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003388:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800338a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338e:	4a1c      	ldr	r2, [pc, #112]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003398:	4a19      	ldr	r2, [pc, #100]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d016      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033aa:	f7fd fdcb 	bl	8000f44 <HAL_GetTick>
 80033ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033b0:	e00b      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b2:	f7fd fdc7 	bl	8000f44 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d902      	bls.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	74fb      	strb	r3, [r7, #19]
            break;
 80033c8:	e006      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ca:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0ec      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80033d8:	7cfb      	ldrb	r3, [r7, #19]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10c      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033de:	4b08      	ldr	r3, [pc, #32]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ee:	4904      	ldr	r1, [pc, #16]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80033f6:	e009      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033f8:	7cfb      	ldrb	r3, [r7, #19]
 80033fa:	74bb      	strb	r3, [r7, #18]
 80033fc:	e006      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80033fe:	bf00      	nop
 8003400:	40021000 	.word	0x40021000
 8003404:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003408:	7cfb      	ldrb	r3, [r7, #19]
 800340a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800340c:	7c7b      	ldrb	r3, [r7, #17]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d105      	bne.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003412:	4b9e      	ldr	r3, [pc, #632]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003416:	4a9d      	ldr	r2, [pc, #628]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800342a:	4b98      	ldr	r3, [pc, #608]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003430:	f023 0203 	bic.w	r2, r3, #3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003438:	4994      	ldr	r1, [pc, #592]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800344c:	4b8f      	ldr	r3, [pc, #572]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003452:	f023 020c 	bic.w	r2, r3, #12
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345a:	498c      	ldr	r1, [pc, #560]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800346e:	4b87      	ldr	r3, [pc, #540]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003474:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	4983      	ldr	r1, [pc, #524]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003490:	4b7e      	ldr	r3, [pc, #504]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003496:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	497b      	ldr	r1, [pc, #492]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0310 	and.w	r3, r3, #16
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034b2:	4b76      	ldr	r3, [pc, #472]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c0:	4972      	ldr	r1, [pc, #456]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034d4:	4b6d      	ldr	r3, [pc, #436]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e2:	496a      	ldr	r1, [pc, #424]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034f6:	4b65      	ldr	r3, [pc, #404]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003504:	4961      	ldr	r1, [pc, #388]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003518:	4b5c      	ldr	r3, [pc, #368]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003526:	4959      	ldr	r1, [pc, #356]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800353a:	4b54      	ldr	r3, [pc, #336]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003540:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003548:	4950      	ldr	r1, [pc, #320]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800355c:	4b4b      	ldr	r3, [pc, #300]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003562:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356a:	4948      	ldr	r1, [pc, #288]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800357e:	4b43      	ldr	r3, [pc, #268]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003584:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358c:	493f      	ldr	r1, [pc, #252]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d028      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035a0:	4b3a      	ldr	r3, [pc, #232]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ae:	4937      	ldr	r1, [pc, #220]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035be:	d106      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035c0:	4b32      	ldr	r3, [pc, #200]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4a31      	ldr	r2, [pc, #196]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ca:	60d3      	str	r3, [r2, #12]
 80035cc:	e011      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035d6:	d10c      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3304      	adds	r3, #4
 80035dc:	2101      	movs	r1, #1
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 f8c8 	bl	8003774 <RCCEx_PLLSAI1_Config>
 80035e4:	4603      	mov	r3, r0
 80035e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80035e8:	7cfb      	ldrb	r3, [r7, #19]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80035ee:	7cfb      	ldrb	r3, [r7, #19]
 80035f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d028      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035fe:	4b23      	ldr	r3, [pc, #140]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003604:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360c:	491f      	ldr	r1, [pc, #124]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800361c:	d106      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800361e:	4b1b      	ldr	r3, [pc, #108]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	4a1a      	ldr	r2, [pc, #104]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003628:	60d3      	str	r3, [r2, #12]
 800362a:	e011      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003630:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003634:	d10c      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3304      	adds	r3, #4
 800363a:	2101      	movs	r1, #1
 800363c:	4618      	mov	r0, r3
 800363e:	f000 f899 	bl	8003774 <RCCEx_PLLSAI1_Config>
 8003642:	4603      	mov	r3, r0
 8003644:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003646:	7cfb      	ldrb	r3, [r7, #19]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800364c:	7cfb      	ldrb	r3, [r7, #19]
 800364e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d02b      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800365c:	4b0b      	ldr	r3, [pc, #44]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003662:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800366a:	4908      	ldr	r1, [pc, #32]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003676:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800367a:	d109      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800367c:	4b03      	ldr	r3, [pc, #12]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	4a02      	ldr	r2, [pc, #8]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003686:	60d3      	str	r3, [r2, #12]
 8003688:	e014      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800368a:	bf00      	nop
 800368c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003694:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003698:	d10c      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	3304      	adds	r3, #4
 800369e:	2101      	movs	r1, #1
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 f867 	bl	8003774 <RCCEx_PLLSAI1_Config>
 80036a6:	4603      	mov	r3, r0
 80036a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036aa:	7cfb      	ldrb	r3, [r7, #19]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80036b0:	7cfb      	ldrb	r3, [r7, #19]
 80036b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d02f      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036c0:	4b2b      	ldr	r3, [pc, #172]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ce:	4928      	ldr	r1, [pc, #160]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036de:	d10d      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3304      	adds	r3, #4
 80036e4:	2102      	movs	r1, #2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 f844 	bl	8003774 <RCCEx_PLLSAI1_Config>
 80036ec:	4603      	mov	r3, r0
 80036ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036f0:	7cfb      	ldrb	r3, [r7, #19]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d014      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036f6:	7cfb      	ldrb	r3, [r7, #19]
 80036f8:	74bb      	strb	r3, [r7, #18]
 80036fa:	e011      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003700:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003704:	d10c      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	3320      	adds	r3, #32
 800370a:	2102      	movs	r1, #2
 800370c:	4618      	mov	r0, r3
 800370e:	f000 f925 	bl	800395c <RCCEx_PLLSAI2_Config>
 8003712:	4603      	mov	r3, r0
 8003714:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003716:	7cfb      	ldrb	r3, [r7, #19]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800371c:	7cfb      	ldrb	r3, [r7, #19]
 800371e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00a      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800372c:	4b10      	ldr	r3, [pc, #64]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003732:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800373a:	490d      	ldr	r1, [pc, #52]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00b      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800374e:	4b08      	ldr	r3, [pc, #32]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003754:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800375e:	4904      	ldr	r1, [pc, #16]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003766:	7cbb      	ldrb	r3, [r7, #18]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40021000 	.word	0x40021000

08003774 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003782:	4b75      	ldr	r3, [pc, #468]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d018      	beq.n	80037c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800378e:	4b72      	ldr	r3, [pc, #456]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f003 0203 	and.w	r2, r3, #3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d10d      	bne.n	80037ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
       ||
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037a6:	4b6c      	ldr	r3, [pc, #432]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	091b      	lsrs	r3, r3, #4
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
       ||
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d047      	beq.n	800384a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	73fb      	strb	r3, [r7, #15]
 80037be:	e044      	b.n	800384a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b03      	cmp	r3, #3
 80037c6:	d018      	beq.n	80037fa <RCCEx_PLLSAI1_Config+0x86>
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d825      	bhi.n	8003818 <RCCEx_PLLSAI1_Config+0xa4>
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d002      	beq.n	80037d6 <RCCEx_PLLSAI1_Config+0x62>
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d009      	beq.n	80037e8 <RCCEx_PLLSAI1_Config+0x74>
 80037d4:	e020      	b.n	8003818 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037d6:	4b60      	ldr	r3, [pc, #384]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d11d      	bne.n	800381e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037e6:	e01a      	b.n	800381e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037e8:	4b5b      	ldr	r3, [pc, #364]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d116      	bne.n	8003822 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037f8:	e013      	b.n	8003822 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037fa:	4b57      	ldr	r3, [pc, #348]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10f      	bne.n	8003826 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003806:	4b54      	ldr	r3, [pc, #336]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d109      	bne.n	8003826 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003816:	e006      	b.n	8003826 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	73fb      	strb	r3, [r7, #15]
      break;
 800381c:	e004      	b.n	8003828 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800381e:	bf00      	nop
 8003820:	e002      	b.n	8003828 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003822:	bf00      	nop
 8003824:	e000      	b.n	8003828 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003826:	bf00      	nop
    }

    if(status == HAL_OK)
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10d      	bne.n	800384a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800382e:	4b4a      	ldr	r3, [pc, #296]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6819      	ldr	r1, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	3b01      	subs	r3, #1
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	430b      	orrs	r3, r1
 8003844:	4944      	ldr	r1, [pc, #272]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003846:	4313      	orrs	r3, r2
 8003848:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800384a:	7bfb      	ldrb	r3, [r7, #15]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d17d      	bne.n	800394c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003850:	4b41      	ldr	r3, [pc, #260]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a40      	ldr	r2, [pc, #256]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003856:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800385a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800385c:	f7fd fb72 	bl	8000f44 <HAL_GetTick>
 8003860:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003862:	e009      	b.n	8003878 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003864:	f7fd fb6e 	bl	8000f44 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d902      	bls.n	8003878 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	73fb      	strb	r3, [r7, #15]
        break;
 8003876:	e005      	b.n	8003884 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003878:	4b37      	ldr	r3, [pc, #220]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e4>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1ef      	bne.n	8003864 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d160      	bne.n	800394c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d111      	bne.n	80038b4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003890:	4b31      	ldr	r3, [pc, #196]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6892      	ldr	r2, [r2, #8]
 80038a0:	0211      	lsls	r1, r2, #8
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	68d2      	ldr	r2, [r2, #12]
 80038a6:	0912      	lsrs	r2, r2, #4
 80038a8:	0452      	lsls	r2, r2, #17
 80038aa:	430a      	orrs	r2, r1
 80038ac:	492a      	ldr	r1, [pc, #168]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	610b      	str	r3, [r1, #16]
 80038b2:	e027      	b.n	8003904 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d112      	bne.n	80038e0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038ba:	4b27      	ldr	r3, [pc, #156]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80038c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6892      	ldr	r2, [r2, #8]
 80038ca:	0211      	lsls	r1, r2, #8
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6912      	ldr	r2, [r2, #16]
 80038d0:	0852      	lsrs	r2, r2, #1
 80038d2:	3a01      	subs	r2, #1
 80038d4:	0552      	lsls	r2, r2, #21
 80038d6:	430a      	orrs	r2, r1
 80038d8:	491f      	ldr	r1, [pc, #124]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	610b      	str	r3, [r1, #16]
 80038de:	e011      	b.n	8003904 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038e0:	4b1d      	ldr	r3, [pc, #116]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6892      	ldr	r2, [r2, #8]
 80038f0:	0211      	lsls	r1, r2, #8
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6952      	ldr	r2, [r2, #20]
 80038f6:	0852      	lsrs	r2, r2, #1
 80038f8:	3a01      	subs	r2, #1
 80038fa:	0652      	lsls	r2, r2, #25
 80038fc:	430a      	orrs	r2, r1
 80038fe:	4916      	ldr	r1, [pc, #88]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003900:	4313      	orrs	r3, r2
 8003902:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003904:	4b14      	ldr	r3, [pc, #80]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a13      	ldr	r2, [pc, #76]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e4>)
 800390a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800390e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003910:	f7fd fb18 	bl	8000f44 <HAL_GetTick>
 8003914:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003916:	e009      	b.n	800392c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003918:	f7fd fb14 	bl	8000f44 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d902      	bls.n	800392c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	73fb      	strb	r3, [r7, #15]
          break;
 800392a:	e005      	b.n	8003938 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800392c:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e4>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0ef      	beq.n	8003918 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800393e:	4b06      	ldr	r3, [pc, #24]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003940:	691a      	ldr	r2, [r3, #16]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	4904      	ldr	r1, [pc, #16]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003948:	4313      	orrs	r3, r2
 800394a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800394c:	7bfb      	ldrb	r3, [r7, #15]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40021000 	.word	0x40021000

0800395c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800396a:	4b6a      	ldr	r3, [pc, #424]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d018      	beq.n	80039a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003976:	4b67      	ldr	r3, [pc, #412]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f003 0203 	and.w	r2, r3, #3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d10d      	bne.n	80039a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
       ||
 800398a:	2b00      	cmp	r3, #0
 800398c:	d009      	beq.n	80039a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800398e:	4b61      	ldr	r3, [pc, #388]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	091b      	lsrs	r3, r3, #4
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
       ||
 800399e:	429a      	cmp	r2, r3
 80039a0:	d047      	beq.n	8003a32 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	73fb      	strb	r3, [r7, #15]
 80039a6:	e044      	b.n	8003a32 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b03      	cmp	r3, #3
 80039ae:	d018      	beq.n	80039e2 <RCCEx_PLLSAI2_Config+0x86>
 80039b0:	2b03      	cmp	r3, #3
 80039b2:	d825      	bhi.n	8003a00 <RCCEx_PLLSAI2_Config+0xa4>
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d002      	beq.n	80039be <RCCEx_PLLSAI2_Config+0x62>
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d009      	beq.n	80039d0 <RCCEx_PLLSAI2_Config+0x74>
 80039bc:	e020      	b.n	8003a00 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039be:	4b55      	ldr	r3, [pc, #340]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d11d      	bne.n	8003a06 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ce:	e01a      	b.n	8003a06 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039d0:	4b50      	ldr	r3, [pc, #320]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d116      	bne.n	8003a0a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039e0:	e013      	b.n	8003a0a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039e2:	4b4c      	ldr	r3, [pc, #304]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10f      	bne.n	8003a0e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039ee:	4b49      	ldr	r3, [pc, #292]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d109      	bne.n	8003a0e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039fe:	e006      	b.n	8003a0e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
      break;
 8003a04:	e004      	b.n	8003a10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a06:	bf00      	nop
 8003a08:	e002      	b.n	8003a10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a0a:	bf00      	nop
 8003a0c:	e000      	b.n	8003a10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10d      	bne.n	8003a32 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a16:	4b3f      	ldr	r3, [pc, #252]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6819      	ldr	r1, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	430b      	orrs	r3, r1
 8003a2c:	4939      	ldr	r1, [pc, #228]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d167      	bne.n	8003b08 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a38:	4b36      	ldr	r3, [pc, #216]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a35      	ldr	r2, [pc, #212]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a44:	f7fd fa7e 	bl	8000f44 <HAL_GetTick>
 8003a48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a4a:	e009      	b.n	8003a60 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a4c:	f7fd fa7a 	bl	8000f44 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d902      	bls.n	8003a60 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	73fb      	strb	r3, [r7, #15]
        break;
 8003a5e:	e005      	b.n	8003a6c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a60:	4b2c      	ldr	r3, [pc, #176]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1ef      	bne.n	8003a4c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d14a      	bne.n	8003b08 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d111      	bne.n	8003a9c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a78:	4b26      	ldr	r3, [pc, #152]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6892      	ldr	r2, [r2, #8]
 8003a88:	0211      	lsls	r1, r2, #8
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	68d2      	ldr	r2, [r2, #12]
 8003a8e:	0912      	lsrs	r2, r2, #4
 8003a90:	0452      	lsls	r2, r2, #17
 8003a92:	430a      	orrs	r2, r1
 8003a94:	491f      	ldr	r1, [pc, #124]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	614b      	str	r3, [r1, #20]
 8003a9a:	e011      	b.n	8003ac0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a9c:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003aa4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6892      	ldr	r2, [r2, #8]
 8003aac:	0211      	lsls	r1, r2, #8
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6912      	ldr	r2, [r2, #16]
 8003ab2:	0852      	lsrs	r2, r2, #1
 8003ab4:	3a01      	subs	r2, #1
 8003ab6:	0652      	lsls	r2, r2, #25
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	4916      	ldr	r1, [pc, #88]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ac0:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a13      	ldr	r2, [pc, #76]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003acc:	f7fd fa3a 	bl	8000f44 <HAL_GetTick>
 8003ad0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ad2:	e009      	b.n	8003ae8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ad4:	f7fd fa36 	bl	8000f44 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d902      	bls.n	8003ae8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	73fb      	strb	r3, [r7, #15]
          break;
 8003ae6:	e005      	b.n	8003af4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ae8:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0ef      	beq.n	8003ad4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d106      	bne.n	8003b08 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003afa:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003afc:	695a      	ldr	r2, [r3, #20]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	4904      	ldr	r1, [pc, #16]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40021000 	.word	0x40021000

08003b18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e040      	b.n	8003bac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d106      	bne.n	8003b40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7fd f8b6 	bl	8000cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2224      	movs	r2, #36	; 0x24
 8003b44:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0201 	bic.w	r2, r2, #1
 8003b54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f82c 	bl	8003bb4 <UART_SetConfig>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e022      	b.n	8003bac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 faaa 	bl	80040c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 fb31 	bl	800420c <UART_CheckIdleState>
 8003baa:	4603      	mov	r3, r0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bb4:	b5b0      	push	{r4, r5, r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	4bad      	ldr	r3, [pc, #692]	; (8003e94 <UART_SetConfig+0x2e0>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6812      	ldr	r2, [r2, #0]
 8003be6:	69f9      	ldr	r1, [r7, #28]
 8003be8:	430b      	orrs	r3, r1
 8003bea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4aa2      	ldr	r2, [pc, #648]	; (8003e98 <UART_SetConfig+0x2e4>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d004      	beq.n	8003c1c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69fa      	ldr	r2, [r7, #28]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a99      	ldr	r2, [pc, #612]	; (8003e9c <UART_SetConfig+0x2e8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d121      	bne.n	8003c7e <UART_SetConfig+0xca>
 8003c3a:	4b99      	ldr	r3, [pc, #612]	; (8003ea0 <UART_SetConfig+0x2ec>)
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c40:	f003 0303 	and.w	r3, r3, #3
 8003c44:	2b03      	cmp	r3, #3
 8003c46:	d817      	bhi.n	8003c78 <UART_SetConfig+0xc4>
 8003c48:	a201      	add	r2, pc, #4	; (adr r2, 8003c50 <UART_SetConfig+0x9c>)
 8003c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4e:	bf00      	nop
 8003c50:	08003c61 	.word	0x08003c61
 8003c54:	08003c6d 	.word	0x08003c6d
 8003c58:	08003c67 	.word	0x08003c67
 8003c5c:	08003c73 	.word	0x08003c73
 8003c60:	2301      	movs	r3, #1
 8003c62:	76fb      	strb	r3, [r7, #27]
 8003c64:	e0e7      	b.n	8003e36 <UART_SetConfig+0x282>
 8003c66:	2302      	movs	r3, #2
 8003c68:	76fb      	strb	r3, [r7, #27]
 8003c6a:	e0e4      	b.n	8003e36 <UART_SetConfig+0x282>
 8003c6c:	2304      	movs	r3, #4
 8003c6e:	76fb      	strb	r3, [r7, #27]
 8003c70:	e0e1      	b.n	8003e36 <UART_SetConfig+0x282>
 8003c72:	2308      	movs	r3, #8
 8003c74:	76fb      	strb	r3, [r7, #27]
 8003c76:	e0de      	b.n	8003e36 <UART_SetConfig+0x282>
 8003c78:	2310      	movs	r3, #16
 8003c7a:	76fb      	strb	r3, [r7, #27]
 8003c7c:	e0db      	b.n	8003e36 <UART_SetConfig+0x282>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a88      	ldr	r2, [pc, #544]	; (8003ea4 <UART_SetConfig+0x2f0>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d132      	bne.n	8003cee <UART_SetConfig+0x13a>
 8003c88:	4b85      	ldr	r3, [pc, #532]	; (8003ea0 <UART_SetConfig+0x2ec>)
 8003c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8e:	f003 030c 	and.w	r3, r3, #12
 8003c92:	2b0c      	cmp	r3, #12
 8003c94:	d828      	bhi.n	8003ce8 <UART_SetConfig+0x134>
 8003c96:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <UART_SetConfig+0xe8>)
 8003c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9c:	08003cd1 	.word	0x08003cd1
 8003ca0:	08003ce9 	.word	0x08003ce9
 8003ca4:	08003ce9 	.word	0x08003ce9
 8003ca8:	08003ce9 	.word	0x08003ce9
 8003cac:	08003cdd 	.word	0x08003cdd
 8003cb0:	08003ce9 	.word	0x08003ce9
 8003cb4:	08003ce9 	.word	0x08003ce9
 8003cb8:	08003ce9 	.word	0x08003ce9
 8003cbc:	08003cd7 	.word	0x08003cd7
 8003cc0:	08003ce9 	.word	0x08003ce9
 8003cc4:	08003ce9 	.word	0x08003ce9
 8003cc8:	08003ce9 	.word	0x08003ce9
 8003ccc:	08003ce3 	.word	0x08003ce3
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	76fb      	strb	r3, [r7, #27]
 8003cd4:	e0af      	b.n	8003e36 <UART_SetConfig+0x282>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	76fb      	strb	r3, [r7, #27]
 8003cda:	e0ac      	b.n	8003e36 <UART_SetConfig+0x282>
 8003cdc:	2304      	movs	r3, #4
 8003cde:	76fb      	strb	r3, [r7, #27]
 8003ce0:	e0a9      	b.n	8003e36 <UART_SetConfig+0x282>
 8003ce2:	2308      	movs	r3, #8
 8003ce4:	76fb      	strb	r3, [r7, #27]
 8003ce6:	e0a6      	b.n	8003e36 <UART_SetConfig+0x282>
 8003ce8:	2310      	movs	r3, #16
 8003cea:	76fb      	strb	r3, [r7, #27]
 8003cec:	e0a3      	b.n	8003e36 <UART_SetConfig+0x282>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a6d      	ldr	r2, [pc, #436]	; (8003ea8 <UART_SetConfig+0x2f4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d120      	bne.n	8003d3a <UART_SetConfig+0x186>
 8003cf8:	4b69      	ldr	r3, [pc, #420]	; (8003ea0 <UART_SetConfig+0x2ec>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d02:	2b30      	cmp	r3, #48	; 0x30
 8003d04:	d013      	beq.n	8003d2e <UART_SetConfig+0x17a>
 8003d06:	2b30      	cmp	r3, #48	; 0x30
 8003d08:	d814      	bhi.n	8003d34 <UART_SetConfig+0x180>
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d009      	beq.n	8003d22 <UART_SetConfig+0x16e>
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	d810      	bhi.n	8003d34 <UART_SetConfig+0x180>
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <UART_SetConfig+0x168>
 8003d16:	2b10      	cmp	r3, #16
 8003d18:	d006      	beq.n	8003d28 <UART_SetConfig+0x174>
 8003d1a:	e00b      	b.n	8003d34 <UART_SetConfig+0x180>
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	76fb      	strb	r3, [r7, #27]
 8003d20:	e089      	b.n	8003e36 <UART_SetConfig+0x282>
 8003d22:	2302      	movs	r3, #2
 8003d24:	76fb      	strb	r3, [r7, #27]
 8003d26:	e086      	b.n	8003e36 <UART_SetConfig+0x282>
 8003d28:	2304      	movs	r3, #4
 8003d2a:	76fb      	strb	r3, [r7, #27]
 8003d2c:	e083      	b.n	8003e36 <UART_SetConfig+0x282>
 8003d2e:	2308      	movs	r3, #8
 8003d30:	76fb      	strb	r3, [r7, #27]
 8003d32:	e080      	b.n	8003e36 <UART_SetConfig+0x282>
 8003d34:	2310      	movs	r3, #16
 8003d36:	76fb      	strb	r3, [r7, #27]
 8003d38:	e07d      	b.n	8003e36 <UART_SetConfig+0x282>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a5b      	ldr	r2, [pc, #364]	; (8003eac <UART_SetConfig+0x2f8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d120      	bne.n	8003d86 <UART_SetConfig+0x1d2>
 8003d44:	4b56      	ldr	r3, [pc, #344]	; (8003ea0 <UART_SetConfig+0x2ec>)
 8003d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d4e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d50:	d013      	beq.n	8003d7a <UART_SetConfig+0x1c6>
 8003d52:	2bc0      	cmp	r3, #192	; 0xc0
 8003d54:	d814      	bhi.n	8003d80 <UART_SetConfig+0x1cc>
 8003d56:	2b80      	cmp	r3, #128	; 0x80
 8003d58:	d009      	beq.n	8003d6e <UART_SetConfig+0x1ba>
 8003d5a:	2b80      	cmp	r3, #128	; 0x80
 8003d5c:	d810      	bhi.n	8003d80 <UART_SetConfig+0x1cc>
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <UART_SetConfig+0x1b4>
 8003d62:	2b40      	cmp	r3, #64	; 0x40
 8003d64:	d006      	beq.n	8003d74 <UART_SetConfig+0x1c0>
 8003d66:	e00b      	b.n	8003d80 <UART_SetConfig+0x1cc>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	76fb      	strb	r3, [r7, #27]
 8003d6c:	e063      	b.n	8003e36 <UART_SetConfig+0x282>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	76fb      	strb	r3, [r7, #27]
 8003d72:	e060      	b.n	8003e36 <UART_SetConfig+0x282>
 8003d74:	2304      	movs	r3, #4
 8003d76:	76fb      	strb	r3, [r7, #27]
 8003d78:	e05d      	b.n	8003e36 <UART_SetConfig+0x282>
 8003d7a:	2308      	movs	r3, #8
 8003d7c:	76fb      	strb	r3, [r7, #27]
 8003d7e:	e05a      	b.n	8003e36 <UART_SetConfig+0x282>
 8003d80:	2310      	movs	r3, #16
 8003d82:	76fb      	strb	r3, [r7, #27]
 8003d84:	e057      	b.n	8003e36 <UART_SetConfig+0x282>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a49      	ldr	r2, [pc, #292]	; (8003eb0 <UART_SetConfig+0x2fc>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d125      	bne.n	8003ddc <UART_SetConfig+0x228>
 8003d90:	4b43      	ldr	r3, [pc, #268]	; (8003ea0 <UART_SetConfig+0x2ec>)
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d9e:	d017      	beq.n	8003dd0 <UART_SetConfig+0x21c>
 8003da0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003da4:	d817      	bhi.n	8003dd6 <UART_SetConfig+0x222>
 8003da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003daa:	d00b      	beq.n	8003dc4 <UART_SetConfig+0x210>
 8003dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003db0:	d811      	bhi.n	8003dd6 <UART_SetConfig+0x222>
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <UART_SetConfig+0x20a>
 8003db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dba:	d006      	beq.n	8003dca <UART_SetConfig+0x216>
 8003dbc:	e00b      	b.n	8003dd6 <UART_SetConfig+0x222>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	76fb      	strb	r3, [r7, #27]
 8003dc2:	e038      	b.n	8003e36 <UART_SetConfig+0x282>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	76fb      	strb	r3, [r7, #27]
 8003dc8:	e035      	b.n	8003e36 <UART_SetConfig+0x282>
 8003dca:	2304      	movs	r3, #4
 8003dcc:	76fb      	strb	r3, [r7, #27]
 8003dce:	e032      	b.n	8003e36 <UART_SetConfig+0x282>
 8003dd0:	2308      	movs	r3, #8
 8003dd2:	76fb      	strb	r3, [r7, #27]
 8003dd4:	e02f      	b.n	8003e36 <UART_SetConfig+0x282>
 8003dd6:	2310      	movs	r3, #16
 8003dd8:	76fb      	strb	r3, [r7, #27]
 8003dda:	e02c      	b.n	8003e36 <UART_SetConfig+0x282>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a2d      	ldr	r2, [pc, #180]	; (8003e98 <UART_SetConfig+0x2e4>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d125      	bne.n	8003e32 <UART_SetConfig+0x27e>
 8003de6:	4b2e      	ldr	r3, [pc, #184]	; (8003ea0 <UART_SetConfig+0x2ec>)
 8003de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003df0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003df4:	d017      	beq.n	8003e26 <UART_SetConfig+0x272>
 8003df6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dfa:	d817      	bhi.n	8003e2c <UART_SetConfig+0x278>
 8003dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e00:	d00b      	beq.n	8003e1a <UART_SetConfig+0x266>
 8003e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e06:	d811      	bhi.n	8003e2c <UART_SetConfig+0x278>
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <UART_SetConfig+0x260>
 8003e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e10:	d006      	beq.n	8003e20 <UART_SetConfig+0x26c>
 8003e12:	e00b      	b.n	8003e2c <UART_SetConfig+0x278>
 8003e14:	2300      	movs	r3, #0
 8003e16:	76fb      	strb	r3, [r7, #27]
 8003e18:	e00d      	b.n	8003e36 <UART_SetConfig+0x282>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	76fb      	strb	r3, [r7, #27]
 8003e1e:	e00a      	b.n	8003e36 <UART_SetConfig+0x282>
 8003e20:	2304      	movs	r3, #4
 8003e22:	76fb      	strb	r3, [r7, #27]
 8003e24:	e007      	b.n	8003e36 <UART_SetConfig+0x282>
 8003e26:	2308      	movs	r3, #8
 8003e28:	76fb      	strb	r3, [r7, #27]
 8003e2a:	e004      	b.n	8003e36 <UART_SetConfig+0x282>
 8003e2c:	2310      	movs	r3, #16
 8003e2e:	76fb      	strb	r3, [r7, #27]
 8003e30:	e001      	b.n	8003e36 <UART_SetConfig+0x282>
 8003e32:	2310      	movs	r3, #16
 8003e34:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a17      	ldr	r2, [pc, #92]	; (8003e98 <UART_SetConfig+0x2e4>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	f040 8087 	bne.w	8003f50 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e42:	7efb      	ldrb	r3, [r7, #27]
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d837      	bhi.n	8003eb8 <UART_SetConfig+0x304>
 8003e48:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <UART_SetConfig+0x29c>)
 8003e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4e:	bf00      	nop
 8003e50:	08003e75 	.word	0x08003e75
 8003e54:	08003eb9 	.word	0x08003eb9
 8003e58:	08003e7d 	.word	0x08003e7d
 8003e5c:	08003eb9 	.word	0x08003eb9
 8003e60:	08003e83 	.word	0x08003e83
 8003e64:	08003eb9 	.word	0x08003eb9
 8003e68:	08003eb9 	.word	0x08003eb9
 8003e6c:	08003eb9 	.word	0x08003eb9
 8003e70:	08003e8b 	.word	0x08003e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e74:	f7ff f908 	bl	8003088 <HAL_RCC_GetPCLK1Freq>
 8003e78:	6178      	str	r0, [r7, #20]
        break;
 8003e7a:	e022      	b.n	8003ec2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e7c:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <UART_SetConfig+0x300>)
 8003e7e:	617b      	str	r3, [r7, #20]
        break;
 8003e80:	e01f      	b.n	8003ec2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e82:	f7ff f869 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 8003e86:	6178      	str	r0, [r7, #20]
        break;
 8003e88:	e01b      	b.n	8003ec2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e8e:	617b      	str	r3, [r7, #20]
        break;
 8003e90:	e017      	b.n	8003ec2 <UART_SetConfig+0x30e>
 8003e92:	bf00      	nop
 8003e94:	efff69f3 	.word	0xefff69f3
 8003e98:	40008000 	.word	0x40008000
 8003e9c:	40013800 	.word	0x40013800
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	40004400 	.word	0x40004400
 8003ea8:	40004800 	.word	0x40004800
 8003eac:	40004c00 	.word	0x40004c00
 8003eb0:	40005000 	.word	0x40005000
 8003eb4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	76bb      	strb	r3, [r7, #26]
        break;
 8003ec0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 80f1 	beq.w	80040ac <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	4413      	add	r3, r2
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d305      	bcc.n	8003ee6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d902      	bls.n	8003eec <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	76bb      	strb	r3, [r7, #26]
 8003eea:	e0df      	b.n	80040ac <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f04f 0100 	mov.w	r1, #0
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	020b      	lsls	r3, r1, #8
 8003efe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f02:	0202      	lsls	r2, r0, #8
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	6849      	ldr	r1, [r1, #4]
 8003f08:	0849      	lsrs	r1, r1, #1
 8003f0a:	4608      	mov	r0, r1
 8003f0c:	f04f 0100 	mov.w	r1, #0
 8003f10:	1814      	adds	r4, r2, r0
 8003f12:	eb43 0501 	adc.w	r5, r3, r1
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	4620      	mov	r0, r4
 8003f22:	4629      	mov	r1, r5
 8003f24:	f7fc f958 	bl	80001d8 <__aeabi_uldivmod>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f36:	d308      	bcc.n	8003f4a <UART_SetConfig+0x396>
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f3e:	d204      	bcs.n	8003f4a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	60da      	str	r2, [r3, #12]
 8003f48:	e0b0      	b.n	80040ac <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	76bb      	strb	r3, [r7, #26]
 8003f4e:	e0ad      	b.n	80040ac <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f58:	d15c      	bne.n	8004014 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003f5a:	7efb      	ldrb	r3, [r7, #27]
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d828      	bhi.n	8003fb2 <UART_SetConfig+0x3fe>
 8003f60:	a201      	add	r2, pc, #4	; (adr r2, 8003f68 <UART_SetConfig+0x3b4>)
 8003f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f66:	bf00      	nop
 8003f68:	08003f8d 	.word	0x08003f8d
 8003f6c:	08003f95 	.word	0x08003f95
 8003f70:	08003f9d 	.word	0x08003f9d
 8003f74:	08003fb3 	.word	0x08003fb3
 8003f78:	08003fa3 	.word	0x08003fa3
 8003f7c:	08003fb3 	.word	0x08003fb3
 8003f80:	08003fb3 	.word	0x08003fb3
 8003f84:	08003fb3 	.word	0x08003fb3
 8003f88:	08003fab 	.word	0x08003fab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f8c:	f7ff f87c 	bl	8003088 <HAL_RCC_GetPCLK1Freq>
 8003f90:	6178      	str	r0, [r7, #20]
        break;
 8003f92:	e013      	b.n	8003fbc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f94:	f7ff f88e 	bl	80030b4 <HAL_RCC_GetPCLK2Freq>
 8003f98:	6178      	str	r0, [r7, #20]
        break;
 8003f9a:	e00f      	b.n	8003fbc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f9c:	4b49      	ldr	r3, [pc, #292]	; (80040c4 <UART_SetConfig+0x510>)
 8003f9e:	617b      	str	r3, [r7, #20]
        break;
 8003fa0:	e00c      	b.n	8003fbc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fa2:	f7fe ffd9 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 8003fa6:	6178      	str	r0, [r7, #20]
        break;
 8003fa8:	e008      	b.n	8003fbc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fae:	617b      	str	r3, [r7, #20]
        break;
 8003fb0:	e004      	b.n	8003fbc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	76bb      	strb	r3, [r7, #26]
        break;
 8003fba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d074      	beq.n	80040ac <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	005a      	lsls	r2, r3, #1
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	085b      	lsrs	r3, r3, #1
 8003fcc:	441a      	add	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	2b0f      	cmp	r3, #15
 8003fde:	d916      	bls.n	800400e <UART_SetConfig+0x45a>
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe6:	d212      	bcs.n	800400e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	f023 030f 	bic.w	r3, r3, #15
 8003ff0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	085b      	lsrs	r3, r3, #1
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	89fb      	ldrh	r3, [r7, #14]
 8004000:	4313      	orrs	r3, r2
 8004002:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	89fa      	ldrh	r2, [r7, #14]
 800400a:	60da      	str	r2, [r3, #12]
 800400c:	e04e      	b.n	80040ac <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	76bb      	strb	r3, [r7, #26]
 8004012:	e04b      	b.n	80040ac <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004014:	7efb      	ldrb	r3, [r7, #27]
 8004016:	2b08      	cmp	r3, #8
 8004018:	d827      	bhi.n	800406a <UART_SetConfig+0x4b6>
 800401a:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <UART_SetConfig+0x46c>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	08004045 	.word	0x08004045
 8004024:	0800404d 	.word	0x0800404d
 8004028:	08004055 	.word	0x08004055
 800402c:	0800406b 	.word	0x0800406b
 8004030:	0800405b 	.word	0x0800405b
 8004034:	0800406b 	.word	0x0800406b
 8004038:	0800406b 	.word	0x0800406b
 800403c:	0800406b 	.word	0x0800406b
 8004040:	08004063 	.word	0x08004063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004044:	f7ff f820 	bl	8003088 <HAL_RCC_GetPCLK1Freq>
 8004048:	6178      	str	r0, [r7, #20]
        break;
 800404a:	e013      	b.n	8004074 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800404c:	f7ff f832 	bl	80030b4 <HAL_RCC_GetPCLK2Freq>
 8004050:	6178      	str	r0, [r7, #20]
        break;
 8004052:	e00f      	b.n	8004074 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004054:	4b1b      	ldr	r3, [pc, #108]	; (80040c4 <UART_SetConfig+0x510>)
 8004056:	617b      	str	r3, [r7, #20]
        break;
 8004058:	e00c      	b.n	8004074 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800405a:	f7fe ff7d 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 800405e:	6178      	str	r0, [r7, #20]
        break;
 8004060:	e008      	b.n	8004074 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004066:	617b      	str	r3, [r7, #20]
        break;
 8004068:	e004      	b.n	8004074 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	76bb      	strb	r3, [r7, #26]
        break;
 8004072:	bf00      	nop
    }

    if (pclk != 0U)
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d018      	beq.n	80040ac <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	085a      	lsrs	r2, r3, #1
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	441a      	add	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	fbb2 f3f3 	udiv	r3, r2, r3
 800408c:	b29b      	uxth	r3, r3
 800408e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	2b0f      	cmp	r3, #15
 8004094:	d908      	bls.n	80040a8 <UART_SetConfig+0x4f4>
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800409c:	d204      	bcs.n	80040a8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	60da      	str	r2, [r3, #12]
 80040a6:	e001      	b.n	80040ac <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80040b8:	7ebb      	ldrb	r3, [r7, #26]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3720      	adds	r7, #32
 80040be:	46bd      	mov	sp, r7
 80040c0:	bdb0      	pop	{r4, r5, r7, pc}
 80040c2:	bf00      	nop
 80040c4:	00f42400 	.word	0x00f42400

080040c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	f003 0310 	and.w	r3, r3, #16
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	f003 0320 	and.w	r3, r3, #32
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d01a      	beq.n	80041de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041c6:	d10a      	bne.n	80041de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	605a      	str	r2, [r3, #4]
  }
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af02      	add	r7, sp, #8
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800421c:	f7fc fe92 	bl	8000f44 <HAL_GetTick>
 8004220:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b08      	cmp	r3, #8
 800422e:	d10e      	bne.n	800424e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f82d 	bl	800429e <UART_WaitOnFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e023      	b.n	8004296 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b04      	cmp	r3, #4
 800425a:	d10e      	bne.n	800427a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800425c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f817 	bl	800429e <UART_WaitOnFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e00d      	b.n	8004296 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2220      	movs	r2, #32
 800427e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2220      	movs	r2, #32
 8004284:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	603b      	str	r3, [r7, #0]
 80042aa:	4613      	mov	r3, r2
 80042ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ae:	e05e      	b.n	800436e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042b6:	d05a      	beq.n	800436e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b8:	f7fc fe44 	bl	8000f44 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d302      	bcc.n	80042ce <UART_WaitOnFlagUntilTimeout+0x30>
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d11b      	bne.n	8004306 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042dc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0201 	bic.w	r2, r2, #1
 80042ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2220      	movs	r2, #32
 80042f2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2220      	movs	r2, #32
 80042f8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e043      	b.n	800438e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d02c      	beq.n	800436e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800431e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004322:	d124      	bne.n	800436e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800432c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800433c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0201 	bic.w	r2, r2, #1
 800434c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2220      	movs	r2, #32
 8004352:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2220      	movs	r2, #32
 800435e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e00f      	b.n	800438e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	69da      	ldr	r2, [r3, #28]
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	4013      	ands	r3, r2
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	429a      	cmp	r2, r3
 800437c:	bf0c      	ite	eq
 800437e:	2301      	moveq	r3, #1
 8004380:	2300      	movne	r3, #0
 8004382:	b2db      	uxtb	r3, r3
 8004384:	461a      	mov	r2, r3
 8004386:	79fb      	ldrb	r3, [r7, #7]
 8004388:	429a      	cmp	r2, r3
 800438a:	d091      	beq.n	80042b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <__libc_init_array>:
 8004398:	b570      	push	{r4, r5, r6, lr}
 800439a:	4d0d      	ldr	r5, [pc, #52]	; (80043d0 <__libc_init_array+0x38>)
 800439c:	4c0d      	ldr	r4, [pc, #52]	; (80043d4 <__libc_init_array+0x3c>)
 800439e:	1b64      	subs	r4, r4, r5
 80043a0:	10a4      	asrs	r4, r4, #2
 80043a2:	2600      	movs	r6, #0
 80043a4:	42a6      	cmp	r6, r4
 80043a6:	d109      	bne.n	80043bc <__libc_init_array+0x24>
 80043a8:	4d0b      	ldr	r5, [pc, #44]	; (80043d8 <__libc_init_array+0x40>)
 80043aa:	4c0c      	ldr	r4, [pc, #48]	; (80043dc <__libc_init_array+0x44>)
 80043ac:	f000 f820 	bl	80043f0 <_init>
 80043b0:	1b64      	subs	r4, r4, r5
 80043b2:	10a4      	asrs	r4, r4, #2
 80043b4:	2600      	movs	r6, #0
 80043b6:	42a6      	cmp	r6, r4
 80043b8:	d105      	bne.n	80043c6 <__libc_init_array+0x2e>
 80043ba:	bd70      	pop	{r4, r5, r6, pc}
 80043bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c0:	4798      	blx	r3
 80043c2:	3601      	adds	r6, #1
 80043c4:	e7ee      	b.n	80043a4 <__libc_init_array+0xc>
 80043c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ca:	4798      	blx	r3
 80043cc:	3601      	adds	r6, #1
 80043ce:	e7f2      	b.n	80043b6 <__libc_init_array+0x1e>
 80043d0:	08004484 	.word	0x08004484
 80043d4:	08004484 	.word	0x08004484
 80043d8:	08004484 	.word	0x08004484
 80043dc:	08004488 	.word	0x08004488

080043e0 <memset>:
 80043e0:	4402      	add	r2, r0
 80043e2:	4603      	mov	r3, r0
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d100      	bne.n	80043ea <memset+0xa>
 80043e8:	4770      	bx	lr
 80043ea:	f803 1b01 	strb.w	r1, [r3], #1
 80043ee:	e7f9      	b.n	80043e4 <memset+0x4>

080043f0 <_init>:
 80043f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f2:	bf00      	nop
 80043f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043f6:	bc08      	pop	{r3}
 80043f8:	469e      	mov	lr, r3
 80043fa:	4770      	bx	lr

080043fc <_fini>:
 80043fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fe:	bf00      	nop
 8004400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004402:	bc08      	pop	{r3}
 8004404:	469e      	mov	lr, r3
 8004406:	4770      	bx	lr
