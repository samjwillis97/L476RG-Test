
L476RG-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005934  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005ac4  08005ac4  00015ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ba4  08005ba4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005ba4  08005ba4  00015ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bac  08005bac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bac  08005bac  00015bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bb0  08005bb0  00015bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000070  08005c24  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08005c24  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b96  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002915  00000000  00000000  00036c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  00039550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001218  00000000  00000000  0003a860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029855  00000000  00000000  0003ba78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001431e  00000000  00000000  000652cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107a88  00000000  00000000  000795eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00181073  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055c0  00000000  00000000  001810c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005aac 	.word	0x08005aac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005aac 	.word	0x08005aac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HomeMenu>:
//		****************
//	1   str_1               3
//	2             pu16_1    4
//		****************
//
void HomeMenu() {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	// Every Menu Must Have, once pointers make this a function
	reset_vars();
 800057c:	f000 f9de 	bl	800093c <reset_vars>
	new_menu = true;
 8000580:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <HomeMenu+0x40>)
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]
	pPreviousMenu = pCurrentMenu;
 8000586:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <HomeMenu+0x44>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HomeMenu+0x48>)
 800058c:	6013      	str	r3, [r2, #0]

	// Setting Current State
	pCurrentMenu = HomeMenu;
 800058e:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <HomeMenu+0x44>)
 8000590:	4a0c      	ldr	r2, [pc, #48]	; (80005c4 <HomeMenu+0x4c>)
 8000592:	601a      	str	r2, [r3, #0]
	menu_type = 0;
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <HomeMenu+0x50>)
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]

	// Setting Required Pointers
	pu16_1 = &counter;
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <HomeMenu+0x54>)
 800059c:	4a0c      	ldr	r2, [pc, #48]	; (80005d0 <HomeMenu+0x58>)
 800059e:	601a      	str	r2, [r3, #0]

	// Functions
	pfnc_1 = CounterSettings;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <HomeMenu+0x5c>)
 80005a2:	4a0d      	ldr	r2, [pc, #52]	; (80005d8 <HomeMenu+0x60>)
 80005a4:	601a      	str	r2, [r3, #0]

	// Setting Required Strings
	strcpy(str_1, "Counter:");
 80005a6:	4a0d      	ldr	r2, [pc, #52]	; (80005dc <HomeMenu+0x64>)
 80005a8:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <HomeMenu+0x68>)
 80005aa:	cb03      	ldmia	r3!, {r0, r1}
 80005ac:	6010      	str	r0, [r2, #0]
 80005ae:	6051      	str	r1, [r2, #4]
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	7213      	strb	r3, [r2, #8]
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	2000008c 	.word	0x2000008c
 80005bc:	200000ac 	.word	0x200000ac
 80005c0:	200000a0 	.word	0x200000a0
 80005c4:	08000579 	.word	0x08000579
 80005c8:	200000e5 	.word	0x200000e5
 80005cc:	200000a8 	.word	0x200000a8
 80005d0:	2000008e 	.word	0x2000008e
 80005d4:	200000f4 	.word	0x200000f4
 80005d8:	080005e5 	.word	0x080005e5
 80005dc:	200000e8 	.word	0x200000e8
 80005e0:	08005ac4 	.word	0x08005ac4

080005e4 <CounterSettings>:
//		****************
//	1   str_1      str_3    3
//	2   str_2      str_4    4
//		****************
//
void CounterSettings() {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	// Every Menu Must Have, once pointers make this a function
	reset_vars();
 80005e8:	f000 f9a8 	bl	800093c <reset_vars>
	new_menu = true;
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <CounterSettings+0x60>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	701a      	strb	r2, [r3, #0]
	pPreviousMenu = pCurrentMenu;
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <CounterSettings+0x64>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a15      	ldr	r2, [pc, #84]	; (800064c <CounterSettings+0x68>)
 80005f8:	6013      	str	r3, [r2, #0]

	// Setting Current State
	pCurrentMenu = CounterSettings;
 80005fa:	4b13      	ldr	r3, [pc, #76]	; (8000648 <CounterSettings+0x64>)
 80005fc:	4a14      	ldr	r2, [pc, #80]	; (8000650 <CounterSettings+0x6c>)
 80005fe:	601a      	str	r2, [r3, #0]
	menu_type = 1;
 8000600:	4b14      	ldr	r3, [pc, #80]	; (8000654 <CounterSettings+0x70>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]

	// Setting Required Pointers
	pfnc_2 = ResetCounter;
 8000606:	4b14      	ldr	r3, [pc, #80]	; (8000658 <CounterSettings+0x74>)
 8000608:	4a14      	ldr	r2, [pc, #80]	; (800065c <CounterSettings+0x78>)
 800060a:	601a      	str	r2, [r3, #0]

	// Setting Required Strings
	strcpy(str_1, "Counter");
 800060c:	4a14      	ldr	r2, [pc, #80]	; (8000660 <CounterSettings+0x7c>)
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <CounterSettings+0x80>)
 8000610:	cb03      	ldmia	r3!, {r0, r1}
 8000612:	6010      	str	r0, [r2, #0]
 8000614:	6051      	str	r1, [r2, #4]
	strcpy(str_2, "Reset");
 8000616:	4b14      	ldr	r3, [pc, #80]	; (8000668 <CounterSettings+0x84>)
 8000618:	4a14      	ldr	r2, [pc, #80]	; (800066c <CounterSettings+0x88>)
 800061a:	6810      	ldr	r0, [r2, #0]
 800061c:	6018      	str	r0, [r3, #0]
 800061e:	8892      	ldrh	r2, [r2, #4]
 8000620:	809a      	strh	r2, [r3, #4]
	strcpy(str_3, "Next");
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <CounterSettings+0x8c>)
 8000624:	4a13      	ldr	r2, [pc, #76]	; (8000674 <CounterSettings+0x90>)
 8000626:	6810      	ldr	r0, [r2, #0]
 8000628:	6018      	str	r0, [r3, #0]
 800062a:	7912      	ldrb	r2, [r2, #4]
 800062c:	711a      	strb	r2, [r3, #4]
	strcpy(str_4, "Modify");
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <CounterSettings+0x94>)
 8000630:	4a12      	ldr	r2, [pc, #72]	; (800067c <CounterSettings+0x98>)
 8000632:	6810      	ldr	r0, [r2, #0]
 8000634:	6018      	str	r0, [r3, #0]
 8000636:	8891      	ldrh	r1, [r2, #4]
 8000638:	7992      	ldrb	r2, [r2, #6]
 800063a:	8099      	strh	r1, [r3, #4]
 800063c:	719a      	strb	r2, [r3, #6]
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	2000008c 	.word	0x2000008c
 8000648:	200000ac 	.word	0x200000ac
 800064c:	200000a0 	.word	0x200000a0
 8000650:	080005e5 	.word	0x080005e5
 8000654:	200000e5 	.word	0x200000e5
 8000658:	2000009c 	.word	0x2000009c
 800065c:	08000681 	.word	0x08000681
 8000660:	200000e8 	.word	0x200000e8
 8000664:	08005ad0 	.word	0x08005ad0
 8000668:	200000f8 	.word	0x200000f8
 800066c:	08005ad8 	.word	0x08005ad8
 8000670:	200000dc 	.word	0x200000dc
 8000674:	08005ae0 	.word	0x08005ae0
 8000678:	20000104 	.word	0x20000104
 800067c:	08005ae8 	.word	0x08005ae8

08000680 <ResetCounter>:
//	2   Yes           No    4
//		****************
//
// 	Both Buttons 3 and 4, return to pfnc_1
//
void ResetCounter() {
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	// Every Menu Must Have, once pointers make this a function
	reset_vars();
 8000684:	f000 f95a 	bl	800093c <reset_vars>
	new_menu = true;
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <ResetCounter+0x34>)
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
	pPreviousMenu = pCurrentMenu;
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <ResetCounter+0x38>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a0a      	ldr	r2, [pc, #40]	; (80006bc <ResetCounter+0x3c>)
 8000694:	6013      	str	r3, [r2, #0]

	// Setting Current State
	pCurrentMenu = ResetCounter;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <ResetCounter+0x38>)
 8000698:	4a09      	ldr	r2, [pc, #36]	; (80006c0 <ResetCounter+0x40>)
 800069a:	601a      	str	r2, [r3, #0]
	menu_type = 2;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <ResetCounter+0x44>)
 800069e:	2202      	movs	r2, #2
 80006a0:	701a      	strb	r2, [r3, #0]

	// Setting Required Pointers
	pfnc_1 = CounterSettings;
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <ResetCounter+0x48>)
 80006a4:	4a09      	ldr	r2, [pc, #36]	; (80006cc <ResetCounter+0x4c>)
 80006a6:	601a      	str	r2, [r3, #0]

	pu16_1 = &counter;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <ResetCounter+0x50>)
 80006aa:	4a0a      	ldr	r2, [pc, #40]	; (80006d4 <ResetCounter+0x54>)
 80006ac:	601a      	str	r2, [r3, #0]

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	2000008c 	.word	0x2000008c
 80006b8:	200000ac 	.word	0x200000ac
 80006bc:	200000a0 	.word	0x200000a0
 80006c0:	08000681 	.word	0x08000681
 80006c4:	200000e5 	.word	0x200000e5
 80006c8:	200000f4 	.word	0x200000f4
 80006cc:	080005e5 	.word	0x080005e5
 80006d0:	200000a8 	.word	0x200000a8
 80006d4:	2000008e 	.word	0x2000008e

080006d8 <Display_init>:

/************************************** Function definitions **************************************/
DisplayProcTypeDef Display_init(
		uint8_t *btn_flag,
		Lcd_HandleTypeDef *lcd)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
	DisplayProcTypeDef display;

	// Pointer to BTN Flag
	display.btn_flag = btn_flag;
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	613b      	str	r3, [r7, #16]

	// Pointer to LCD
	display.lcd = lcd;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	617b      	str	r3, [r7, #20]

	// Initialize as Home Screen
	HomeMenu();
 80006ec:	f7ff ff44 	bl	8000578 <HomeMenu>

	return display;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	461a      	mov	r2, r3
 80006f4:	f107 0310 	add.w	r3, r7, #16
 80006f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006fc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000700:	68f8      	ldr	r0, [r7, #12]
 8000702:	3718      	adds	r7, #24
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <Display_update>:

void Display_update(DisplayProcTypeDef *display) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

	// Button Checker - Make Better, add timeout to return home
	if (*display->btn_flag != 0) {
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d044      	beq.n	80007a4 <Display_update+0x9c>
		switch (menu_type) {
 800071a:	4b65      	ldr	r3, [pc, #404]	; (80008b0 <Display_update+0x1a8>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b02      	cmp	r3, #2
 8000720:	d020      	beq.n	8000764 <Display_update+0x5c>
 8000722:	2b02      	cmp	r3, #2
 8000724:	dc33      	bgt.n	800078e <Display_update+0x86>
 8000726:	2b00      	cmp	r3, #0
 8000728:	d002      	beq.n	8000730 <Display_update+0x28>
 800072a:	2b01      	cmp	r3, #1
 800072c:	d009      	beq.n	8000742 <Display_update+0x3a>
					pfnc_1();
				}

				break;
			default:
				break;
 800072e:	e02e      	b.n	800078e <Display_update+0x86>
				if (*display->btn_flag == 1) {
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d12b      	bne.n	8000792 <Display_update+0x8a>
					pfnc_1();		// Change to POINTER
 800073a:	4b5e      	ldr	r3, [pc, #376]	; (80008b4 <Display_update+0x1ac>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4798      	blx	r3
				break;
 8000740:	e027      	b.n	8000792 <Display_update+0x8a>
				if (*display->btn_flag == 1) {
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d102      	bne.n	8000752 <Display_update+0x4a>
					pPreviousMenu();		// Change to POINTER (PREVIOUS MENU)
 800074c:	4b5a      	ldr	r3, [pc, #360]	; (80008b8 <Display_update+0x1b0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4798      	blx	r3
				if (*display->btn_flag == 2) {
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b02      	cmp	r3, #2
 800075a:	d11c      	bne.n	8000796 <Display_update+0x8e>
					pfnc_2();	// Change to POINTER
 800075c:	4b57      	ldr	r3, [pc, #348]	; (80008bc <Display_update+0x1b4>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4798      	blx	r3
				break;
 8000762:	e018      	b.n	8000796 <Display_update+0x8e>
				if (*display->btn_flag == 4) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b04      	cmp	r3, #4
 800076c:	d102      	bne.n	8000774 <Display_update+0x6c>
					pPreviousMenu(); // Change to Pointer (PREVIOUS MENU)
 800076e:	4b52      	ldr	r3, [pc, #328]	; (80008b8 <Display_update+0x1b0>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4798      	blx	r3
				if (*display->btn_flag == 2) {
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b02      	cmp	r3, #2
 800077c:	d10d      	bne.n	800079a <Display_update+0x92>
					*pu16_1 = 0; // Do This Better, Callback? Sub Routine or something?
 800077e:	4b50      	ldr	r3, [pc, #320]	; (80008c0 <Display_update+0x1b8>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2200      	movs	r2, #0
 8000784:	801a      	strh	r2, [r3, #0]
					pfnc_1();
 8000786:	4b4b      	ldr	r3, [pc, #300]	; (80008b4 <Display_update+0x1ac>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4798      	blx	r3
				break;
 800078c:	e005      	b.n	800079a <Display_update+0x92>
				break;
 800078e:	bf00      	nop
 8000790:	e004      	b.n	800079c <Display_update+0x94>
				break;
 8000792:	bf00      	nop
 8000794:	e002      	b.n	800079c <Display_update+0x94>
				break;
 8000796:	bf00      	nop
 8000798:	e000      	b.n	800079c <Display_update+0x94>
				break;
 800079a:	bf00      	nop
		}
		*display->btn_flag = 0;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
	}


	// Update Display (New Menu)
	if (new_menu == true){
 80007a4:	4b47      	ldr	r3, [pc, #284]	; (80008c4 <Display_update+0x1bc>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d166      	bne.n	800087a <Display_update+0x172>
		// Update Display
		Lcd_clear(display->lcd);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 fa69 	bl	8000c88 <Lcd_clear>
		switch (menu_type) {
 80007b6:	4b3e      	ldr	r3, [pc, #248]	; (80008b0 <Display_update+0x1a8>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d03d      	beq.n	800083a <Display_update+0x132>
 80007be:	2b02      	cmp	r3, #2
 80007c0:	dc57      	bgt.n	8000872 <Display_update+0x16a>
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d002      	beq.n	80007cc <Display_update+0xc4>
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d00e      	beq.n	80007e8 <Display_update+0xe0>
				Lcd_string_right_aligned(display->lcd, "No", 1, 15);

				break;
			default:
				// do nothing
				break;
 80007ca:	e052      	b.n	8000872 <Display_update+0x16a>
				Lcd_cursor(display->lcd, 0, 0);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 fa3d 	bl	8000c54 <Lcd_cursor>
				Lcd_string(display->lcd, str_1);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	493a      	ldr	r1, [pc, #232]	; (80008c8 <Display_update+0x1c0>)
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 f9d1 	bl	8000b88 <Lcd_string>
				break;
 80007e6:	e045      	b.n	8000874 <Display_update+0x16c>
				Lcd_cursor(display->lcd, 0, 0);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	2200      	movs	r2, #0
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 fa2f 	bl	8000c54 <Lcd_cursor>
				Lcd_string(display->lcd, str_1);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	4933      	ldr	r1, [pc, #204]	; (80008c8 <Display_update+0x1c0>)
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 f9c3 	bl	8000b88 <Lcd_string>
				Lcd_cursor(display->lcd, 1, 0);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	2200      	movs	r2, #0
 8000808:	2101      	movs	r1, #1
 800080a:	4618      	mov	r0, r3
 800080c:	f000 fa22 	bl	8000c54 <Lcd_cursor>
				Lcd_string(display->lcd, str_2);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	492d      	ldr	r1, [pc, #180]	; (80008cc <Display_update+0x1c4>)
 8000816:	4618      	mov	r0, r3
 8000818:	f000 f9b6 	bl	8000b88 <Lcd_string>
				Lcd_string_right_aligned(display->lcd, str_3, 0, 15);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6858      	ldr	r0, [r3, #4]
 8000820:	230f      	movs	r3, #15
 8000822:	2200      	movs	r2, #0
 8000824:	492a      	ldr	r1, [pc, #168]	; (80008d0 <Display_update+0x1c8>)
 8000826:	f000 f9f1 	bl	8000c0c <Lcd_string_right_aligned>
				Lcd_string_right_aligned(display->lcd, str_4, 1, 15);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6858      	ldr	r0, [r3, #4]
 800082e:	230f      	movs	r3, #15
 8000830:	2201      	movs	r2, #1
 8000832:	4928      	ldr	r1, [pc, #160]	; (80008d4 <Display_update+0x1cc>)
 8000834:	f000 f9ea 	bl	8000c0c <Lcd_string_right_aligned>
				break;
 8000838:	e01c      	b.n	8000874 <Display_update+0x16c>
				Lcd_string_centered(display->lcd, "Are You Sure?", 0);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	2200      	movs	r2, #0
 8000840:	4925      	ldr	r1, [pc, #148]	; (80008d8 <Display_update+0x1d0>)
 8000842:	4618      	mov	r0, r3
 8000844:	f000 f9bf 	bl	8000bc6 <Lcd_string_centered>
				Lcd_cursor(display->lcd, 1, 0);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	2200      	movs	r2, #0
 800084e:	2101      	movs	r1, #1
 8000850:	4618      	mov	r0, r3
 8000852:	f000 f9ff 	bl	8000c54 <Lcd_cursor>
				Lcd_string(display->lcd, "Yes");
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	4920      	ldr	r1, [pc, #128]	; (80008dc <Display_update+0x1d4>)
 800085c:	4618      	mov	r0, r3
 800085e:	f000 f993 	bl	8000b88 <Lcd_string>
				Lcd_string_right_aligned(display->lcd, "No", 1, 15);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6858      	ldr	r0, [r3, #4]
 8000866:	230f      	movs	r3, #15
 8000868:	2201      	movs	r2, #1
 800086a:	491d      	ldr	r1, [pc, #116]	; (80008e0 <Display_update+0x1d8>)
 800086c:	f000 f9ce 	bl	8000c0c <Lcd_string_right_aligned>
				break;
 8000870:	e000      	b.n	8000874 <Display_update+0x16c>
				break;
 8000872:	bf00      	nop
		}
		// set new_menu false once handled
		new_menu = false;
 8000874:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <Display_update+0x1bc>)
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
	}


	// Update Display (Continuous)
	if (has_var_changed() == true){
 800087a:	f000 f833 	bl	80008e4 <has_var_changed>
 800087e:	4603      	mov	r3, r0
 8000880:	2b01      	cmp	r3, #1
 8000882:	d10d      	bne.n	80008a0 <Display_update+0x198>
		// Update Display
		switch (menu_type) {
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <Display_update+0x1a8>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d10b      	bne.n	80008a4 <Display_update+0x19c>
			case 0:
				Lcd_u16_right_aligned(display->lcd, *pu16_1, 1, 15);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6858      	ldr	r0, [r3, #4]
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <Display_update+0x1b8>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	8819      	ldrh	r1, [r3, #0]
 8000896:	230f      	movs	r3, #15
 8000898:	2201      	movs	r2, #1
 800089a:	f000 f919 	bl	8000ad0 <Lcd_u16_right_aligned>
				break;
 800089e:	e002      	b.n	80008a6 <Display_update+0x19e>
			default:
				// do nothing
				break;
		}
	}
 80008a0:	bf00      	nop
 80008a2:	e000      	b.n	80008a6 <Display_update+0x19e>
				break;
 80008a4:	bf00      	nop

}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200000e5 	.word	0x200000e5
 80008b4:	200000f4 	.word	0x200000f4
 80008b8:	200000a0 	.word	0x200000a0
 80008bc:	2000009c 	.word	0x2000009c
 80008c0:	200000a8 	.word	0x200000a8
 80008c4:	2000008c 	.word	0x2000008c
 80008c8:	200000e8 	.word	0x200000e8
 80008cc:	200000f8 	.word	0x200000f8
 80008d0:	200000dc 	.word	0x200000dc
 80008d4:	20000104 	.word	0x20000104
 80008d8:	08005af0 	.word	0x08005af0
 80008dc:	08005b00 	.word	0x08005b00
 80008e0:	08005b04 	.word	0x08005b04

080008e4 <has_var_changed>:


/************************************** Static function definition **************************************/

bool has_var_changed() {
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
	if (*pu8_1 != u8_1_prev) {
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <has_var_changed+0x48>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	781a      	ldrb	r2, [r3, #0]
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <has_var_changed+0x4c>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d006      	beq.n	8000904 <has_var_changed+0x20>
		u8_1_prev = *pu8_1;
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <has_var_changed+0x48>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	781a      	ldrb	r2, [r3, #0]
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <has_var_changed+0x4c>)
 80008fe:	701a      	strb	r2, [r3, #0]
		return true;
 8000900:	2301      	movs	r3, #1
 8000902:	e00e      	b.n	8000922 <has_var_changed+0x3e>
	}
	if (*pu16_1 != u16_1_prev) {
 8000904:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <has_var_changed+0x50>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	881a      	ldrh	r2, [r3, #0]
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <has_var_changed+0x54>)
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	429a      	cmp	r2, r3
 8000910:	d006      	beq.n	8000920 <has_var_changed+0x3c>
		u16_1_prev = *pu16_1;
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <has_var_changed+0x50>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	881a      	ldrh	r2, [r3, #0]
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <has_var_changed+0x54>)
 800091a:	801a      	strh	r2, [r3, #0]
		return true;
 800091c:	2301      	movs	r3, #1
 800091e:	e000      	b.n	8000922 <has_var_changed+0x3e>
	}
	return false;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	200000a4 	.word	0x200000a4
 8000930:	200000e6 	.word	0x200000e6
 8000934:	200000a8 	.word	0x200000a8
 8000938:	200000b0 	.word	0x200000b0

0800093c <reset_vars>:

void reset_vars() {
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
	// Func Pointers
	pfnc_1 = NULL;
 8000940:	4b0e      	ldr	r3, [pc, #56]	; (800097c <reset_vars+0x40>)
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
	pfnc_2 = NULL;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <reset_vars+0x44>)
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]

	// U8 Pointers
	pu8_1 = NULL;
 800094c:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <reset_vars+0x48>)
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]

	// U16 Pointers
	pu16_1 = NULL;
 8000952:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <reset_vars+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]

	// Strings
	strcpy(str_1, "");
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <reset_vars+0x50>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
	strcpy(str_2, "");
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <reset_vars+0x54>)
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
	strcpy(str_3, "");
 8000964:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <reset_vars+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
	strcpy(str_4, "");
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <reset_vars+0x5c>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]

}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	200000f4 	.word	0x200000f4
 8000980:	2000009c 	.word	0x2000009c
 8000984:	200000a4 	.word	0x200000a4
 8000988:	200000a8 	.word	0x200000a8
 800098c:	200000e8 	.word	0x200000e8
 8000990:	200000f8 	.word	0x200000f8
 8000994:	200000dc 	.word	0x200000dc
 8000998:	20000104 	.word	0x20000104

0800099c <Lcd_create>:
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin,
		Lcd_ModeTypeDef mode,
		bool cursor,
		bool blink)
{
 800099c:	b5b0      	push	{r4, r5, r7, lr}
 800099e:	b08c      	sub	sp, #48	; 0x30
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
 80009a8:	603b      	str	r3, [r7, #0]

	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80009aa:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80009ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	lcd.en_pin = en_pin;
 80009b2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80009b6:	853b      	strh	r3, [r7, #40]	; 0x28
	lcd.en_port = en_port;
 80009b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24

	lcd.rs_pin = rs_pin;
 80009bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80009c0:	843b      	strh	r3, [r7, #32]
	lcd.rs_port = rs_port;
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	61fb      	str	r3, [r7, #28]

	lcd.data_pin = pin;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	61bb      	str	r3, [r7, #24]
	lcd.data_port = port;
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	617b      	str	r3, [r7, #20]

	lcd.cursor = cursor;
 80009ce:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80009d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	lcd.blink = blink;
 80009d6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80009da:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	Lcd_init(&lcd);		// Some sort of pointer to the lcd type def just init
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 f80e 	bl	8000a04 <Lcd_init>

	return lcd;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	461d      	mov	r5, r3
 80009ec:	f107 0414 	add.w	r4, r7, #20
 80009f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009f4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80009f8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	3730      	adds	r7, #48	; 0x30
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bdb0      	pop	{r4, r5, r7, pc}

08000a04 <Lcd_init>:

/**
 * Init 16 x 2 LCD without cursor
 */
void Lcd_init(Lcd_HandleTypeDef *lcd) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	if (lcd->mode == LCD_4_BIT_MODE)	// gets mode from the struct that lcd points to
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	7d9b      	ldrb	r3, [r3, #22]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d121      	bne.n	8000a58 <Lcd_init+0x54>
	{
		HAL_Delay(50);
 8000a14:	2032      	movs	r0, #50	; 0x32
 8000a16:	f000 fecf 	bl	80017b8 <HAL_Delay>
		lcd_write_nib_command(lcd, 0x30);		// Func Set
 8000a1a:	2130      	movs	r1, #48	; 0x30
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f000 f9db 	bl	8000dd8 <lcd_write_nib_command>
		HAL_Delay(5);
 8000a22:	2005      	movs	r0, #5
 8000a24:	f000 fec8 	bl	80017b8 <HAL_Delay>
		lcd_write_nib_command(lcd, 0x30);		// Func Set
 8000a28:	2130      	movs	r1, #48	; 0x30
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f000 f9d4 	bl	8000dd8 <lcd_write_nib_command>
		HAL_Delay(1);
 8000a30:	2001      	movs	r0, #1
 8000a32:	f000 fec1 	bl	80017b8 <HAL_Delay>
		lcd_write_nib_command(lcd, 0x30);		// Func Set
 8000a36:	2130      	movs	r1, #48	; 0x30
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f000 f9cd 	bl	8000dd8 <lcd_write_nib_command>

		lcd_write_nib_command(lcd, FUNCTION_SET);			// Func Set 4-Bit
 8000a3e:	2120      	movs	r1, #32
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f000 f9c9 	bl	8000dd8 <lcd_write_nib_command>
		lcd_write_command(lcd, FUNCTION_SET | OPT_N);	// Func Set 4-Bit Mode, 2 Lines
 8000a46:	2128      	movs	r1, #40	; 0x28
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f000 f929 	bl	8000ca0 <lcd_write_command>

		lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL);	// Display OFF
 8000a4e:	2108      	movs	r1, #8
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f000 f925 	bl	8000ca0 <lcd_write_command>
 8000a56:	e003      	b.n	8000a60 <Lcd_init+0x5c>
	}
	else {
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N); // ?
 8000a58:	2138      	movs	r1, #56	; 0x38
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f000 f920 	bl	8000ca0 <lcd_write_command>
	}

	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear Display
 8000a60:	2101      	movs	r1, #1
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f000 f91c 	bl	8000ca0 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment Cursor?
 8000a68:	2106      	movs	r1, #6
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f000 f918 	bl	8000ca0 <lcd_write_command>

	// Checking for Cursor and Blink, could change and use a variable
	if ((lcd->blink == true) && (lcd->cursor == true)) {
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	7e1b      	ldrb	r3, [r3, #24]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d108      	bne.n	8000a8a <Lcd_init+0x86>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	7ddb      	ldrb	r3, [r3, #23]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d104      	bne.n	8000a8a <Lcd_init+0x86>
		lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_C | OPT_B);
 8000a80:	210f      	movs	r1, #15
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f000 f90c 	bl	8000ca0 <lcd_write_command>
 8000a88:	e01e      	b.n	8000ac8 <Lcd_init+0xc4>
	}
	else if ((lcd->blink == true) && (lcd->cursor == false)) {
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	7e1b      	ldrb	r3, [r3, #24]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d108      	bne.n	8000aa4 <Lcd_init+0xa0>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	7ddb      	ldrb	r3, [r3, #23]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d104      	bne.n	8000aa4 <Lcd_init+0xa0>
		lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_B);
 8000a9a:	210d      	movs	r1, #13
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f000 f8ff 	bl	8000ca0 <lcd_write_command>
 8000aa2:	e011      	b.n	8000ac8 <Lcd_init+0xc4>
	}
	else if ((lcd->blink == false) && (lcd->cursor == true)) {
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	7e1b      	ldrb	r3, [r3, #24]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d108      	bne.n	8000abe <Lcd_init+0xba>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	7ddb      	ldrb	r3, [r3, #23]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d104      	bne.n	8000abe <Lcd_init+0xba>
		lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_C);
 8000ab4:	210e      	movs	r1, #14
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f000 f8f2 	bl	8000ca0 <lcd_write_command>
 8000abc:	e004      	b.n	8000ac8 <Lcd_init+0xc4>
	}
	else {
		lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);
 8000abe:	210c      	movs	r1, #12
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f000 f8ed 	bl	8000ca0 <lcd_write_command>
	}
}
 8000ac6:	bf00      	nop
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <Lcd_u16_right_aligned>:

	Lcd_cursor(lcd, row, (col - 2));
	Lcd_string(lcd, buffer);
}

void Lcd_u16_right_aligned(Lcd_HandleTypeDef *lcd, uint16_t number, uint8_t row, uint8_t col) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	4608      	mov	r0, r1
 8000ada:	4611      	mov	r1, r2
 8000adc:	461a      	mov	r2, r3
 8000ade:	4603      	mov	r3, r0
 8000ae0:	807b      	strh	r3, [r7, #2]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	707b      	strb	r3, [r7, #1]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	703b      	strb	r3, [r7, #0]
	char buffer[6];
	char input[7];
	uint8_t i;

	uint8_t len = snprintf(NULL, 0, "%d", number);
 8000aea:	887b      	ldrh	r3, [r7, #2]
 8000aec:	4a25      	ldr	r2, [pc, #148]	; (8000b84 <Lcd_u16_right_aligned+0xb4>)
 8000aee:	2100      	movs	r1, #0
 8000af0:	2000      	movs	r0, #0
 8000af2:	f004 fb79 	bl	80051e8 <sniprintf>
 8000af6:	4603      	mov	r3, r0
 8000af8:	75bb      	strb	r3, [r7, #22]

	for (i = 0; i < (5 - len); i++) {
 8000afa:	2300      	movs	r3, #0
 8000afc:	75fb      	strb	r3, [r7, #23]
 8000afe:	e009      	b.n	8000b14 <Lcd_u16_right_aligned+0x44>
		input[i] = 32;	// space
 8000b00:	7dfb      	ldrb	r3, [r7, #23]
 8000b02:	f107 0218 	add.w	r2, r7, #24
 8000b06:	4413      	add	r3, r2
 8000b08:	2220      	movs	r2, #32
 8000b0a:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < (5 - len); i++) {
 8000b0e:	7dfb      	ldrb	r3, [r7, #23]
 8000b10:	3301      	adds	r3, #1
 8000b12:	75fb      	strb	r3, [r7, #23]
 8000b14:	7dfa      	ldrb	r2, [r7, #23]
 8000b16:	7dbb      	ldrb	r3, [r7, #22]
 8000b18:	f1c3 0305 	rsb	r3, r3, #5
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	dbef      	blt.n	8000b00 <Lcd_u16_right_aligned+0x30>
	}
	input[i] = 37;	// percentage
 8000b20:	7dfb      	ldrb	r3, [r7, #23]
 8000b22:	f107 0218 	add.w	r2, r7, #24
 8000b26:	4413      	add	r3, r2
 8000b28:	2225      	movs	r2, #37	; 0x25
 8000b2a:	f803 2c10 	strb.w	r2, [r3, #-16]
	input[i+1] = 100;	// d
 8000b2e:	7dfb      	ldrb	r3, [r7, #23]
 8000b30:	3301      	adds	r3, #1
 8000b32:	f107 0218 	add.w	r2, r7, #24
 8000b36:	4413      	add	r3, r2
 8000b38:	2264      	movs	r2, #100	; 0x64
 8000b3a:	f803 2c10 	strb.w	r2, [r3, #-16]
	input[i+2] = '\0';	// end of string
 8000b3e:	7dfb      	ldrb	r3, [r7, #23]
 8000b40:	3302      	adds	r3, #2
 8000b42:	f107 0218 	add.w	r2, r7, #24
 8000b46:	4413      	add	r3, r2
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f803 2c10 	strb.w	r2, [r3, #-16]

	sprintf(buffer, input, number);
 8000b4e:	887a      	ldrh	r2, [r7, #2]
 8000b50:	f107 0108 	add.w	r1, r7, #8
 8000b54:	f107 0310 	add.w	r3, r7, #16
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f004 fb79 	bl	8005250 <siprintf>

	Lcd_cursor(lcd, row, (col - 4));
 8000b5e:	783b      	ldrb	r3, [r7, #0]
 8000b60:	3b04      	subs	r3, #4
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	787b      	ldrb	r3, [r7, #1]
 8000b66:	4619      	mov	r1, r3
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f000 f873 	bl	8000c54 <Lcd_cursor>
	Lcd_string(lcd, buffer);
 8000b6e:	f107 0310 	add.w	r3, r7, #16
 8000b72:	4619      	mov	r1, r3
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f000 f807 	bl	8000b88 <Lcd_string>
}
 8000b7a:	bf00      	nop
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	08005b08 	.word	0x08005b08

08000b88 <Lcd_string>:

/**
 * Write String in current cursor position
 */
void Lcd_string(Lcd_HandleTypeDef *lcd, char *string) {
 8000b88:	b590      	push	{r4, r7, lr}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++) {
 8000b92:	2300      	movs	r3, #0
 8000b94:	73fb      	strb	r3, [r7, #15]
 8000b96:	e00a      	b.n	8000bae <Lcd_string+0x26>
		lcd_write_data(lcd, string[i]);
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f000 f8aa 	bl	8000cfc <lcd_write_data>
	for (uint8_t i = 0; i < strlen(string); i++) {
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	3301      	adds	r3, #1
 8000bac:	73fb      	strb	r3, [r7, #15]
 8000bae:	7bfc      	ldrb	r4, [r7, #15]
 8000bb0:	6838      	ldr	r0, [r7, #0]
 8000bb2:	f7ff fb0d 	bl	80001d0 <strlen>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	429c      	cmp	r4, r3
 8000bba:	d3ed      	bcc.n	8000b98 <Lcd_string+0x10>
	}
}
 8000bbc:	bf00      	nop
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd90      	pop	{r4, r7, pc}

08000bc6 <Lcd_string_centered>:

void Lcd_string_centered (Lcd_HandleTypeDef *lcd, char *string, uint8_t row) {
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b086      	sub	sp, #24
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	60f8      	str	r0, [r7, #12]
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	71fb      	strb	r3, [r7, #7]
	uint8_t len = strlen(string) - 1;
 8000bd4:	68b8      	ldr	r0, [r7, #8]
 8000bd6:	f7ff fafb 	bl	80001d0 <strlen>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	3b01      	subs	r3, #1
 8000be0:	75fb      	strb	r3, [r7, #23]
	uint8_t left_spacing = (15 - len) / 2;
 8000be2:	7dfb      	ldrb	r3, [r7, #23]
 8000be4:	f1c3 030f 	rsb	r3, r3, #15
 8000be8:	0fda      	lsrs	r2, r3, #31
 8000bea:	4413      	add	r3, r2
 8000bec:	105b      	asrs	r3, r3, #1
 8000bee:	75bb      	strb	r3, [r7, #22]
	Lcd_cursor(lcd, row, left_spacing);
 8000bf0:	7dba      	ldrb	r2, [r7, #22]
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	68f8      	ldr	r0, [r7, #12]
 8000bf8:	f000 f82c 	bl	8000c54 <Lcd_cursor>
	Lcd_string(lcd, string);
 8000bfc:	68b9      	ldr	r1, [r7, #8]
 8000bfe:	68f8      	ldr	r0, [r7, #12]
 8000c00:	f7ff ffc2 	bl	8000b88 <Lcd_string>
}
 8000c04:	bf00      	nop
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <Lcd_string_right_aligned>:

void Lcd_string_right_aligned (Lcd_HandleTypeDef *lcd, char *string, uint8_t row, uint8_t col) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	4611      	mov	r1, r2
 8000c18:	461a      	mov	r2, r3
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	71fb      	strb	r3, [r7, #7]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	71bb      	strb	r3, [r7, #6]
	uint8_t len = strlen(string) - 1;
 8000c22:	68b8      	ldr	r0, [r7, #8]
 8000c24:	f7ff fad4 	bl	80001d0 <strlen>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	75fb      	strb	r3, [r7, #23]
	Lcd_cursor(lcd, row, (col - len));
 8000c30:	79ba      	ldrb	r2, [r7, #6]
 8000c32:	7dfb      	ldrb	r3, [r7, #23]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	68f8      	ldr	r0, [r7, #12]
 8000c3e:	f000 f809 	bl	8000c54 <Lcd_cursor>
	Lcd_string(lcd, string);
 8000c42:	68b9      	ldr	r1, [r7, #8]
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f7ff ff9f 	bl	8000b88 <Lcd_string>
}
 8000c4a:	bf00      	nop
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <Lcd_cursor>:
/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef *lcd, uint8_t row, uint8_t col) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	70fb      	strb	r3, [r7, #3]
 8000c60:	4613      	mov	r3, r2
 8000c62:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000c64:	78fb      	ldrb	r3, [r7, #3]
 8000c66:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <Lcd_cursor+0x30>)
 8000c68:	5cd2      	ldrb	r2, [r2, r3]
 8000c6a:	78bb      	ldrb	r3, [r7, #2]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	3b80      	subs	r3, #128	; 0x80
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	4619      	mov	r1, r3
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f000 f812 	bl	8000ca0 <lcd_write_command>
	#endif
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	08005b24 	.word	0x08005b24

08000c88 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef *lcd) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000c90:	2101      	movs	r1, #1
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f000 f804 	bl	8000ca0 <lcd_write_command>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <lcd_write_command>:

/************************************** Static function definition **************************************/
/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef *lcd, uint8_t command) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);	// Write to Command Register
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6898      	ldr	r0, [r3, #8]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	899b      	ldrh	r3, [r3, #12]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f002 f806 	bl	8002cc8 <HAL_GPIO_WritePin>

	if (lcd->mode == LCD_4_BIT_MODE) {
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	7d9b      	ldrb	r3, [r3, #22]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d111      	bne.n	8000ce8 <lcd_write_command+0x48>
		// Writing Command in two seperate nibs due to 4 Bit Mode
		lcd_write(lcd, (command >> 4), LCD_NIB);	// Send 4 MSB
 8000cc4:	78fb      	ldrb	r3, [r7, #3]
 8000cc6:	091b      	lsrs	r3, r3, #4
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	2204      	movs	r2, #4
 8000ccc:	4619      	mov	r1, r3
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f000 f842 	bl	8000d58 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);	// Send 4 LSB
 8000cd4:	78fb      	ldrb	r3, [r7, #3]
 8000cd6:	f003 030f 	and.w	r3, r3, #15
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2204      	movs	r2, #4
 8000cde:	4619      	mov	r1, r3
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f000 f839 	bl	8000d58 <lcd_write>
	}
	else {
		// Write Command in one go with 8 bit
		lcd_write(lcd, command, LCD_BYTE);
	}
}
 8000ce6:	e005      	b.n	8000cf4 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000ce8:	78fb      	ldrb	r3, [r7, #3]
 8000cea:	2208      	movs	r2, #8
 8000cec:	4619      	mov	r1, r3
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f000 f832 	bl	8000d58 <lcd_write>
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef *lcd, uint8_t data) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	460b      	mov	r3, r1
 8000d06:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6898      	ldr	r0, [r3, #8]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	899b      	ldrh	r3, [r3, #12]
 8000d10:	2201      	movs	r2, #1
 8000d12:	4619      	mov	r1, r3
 8000d14:	f001 ffd8 	bl	8002cc8 <HAL_GPIO_WritePin>

	// Writing Command in two seperate nibs due to 4 Bit Mode
	if(lcd->mode == LCD_4_BIT_MODE) {
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	7d9b      	ldrb	r3, [r3, #22]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d111      	bne.n	8000d44 <lcd_write_data+0x48>
		lcd_write(lcd, data >> 4, LCD_NIB);		// Send 4 MSB
 8000d20:	78fb      	ldrb	r3, [r7, #3]
 8000d22:	091b      	lsrs	r3, r3, #4
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2204      	movs	r2, #4
 8000d28:	4619      	mov	r1, r3
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f000 f814 	bl	8000d58 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);	// Send 4 LSB
 8000d30:	78fb      	ldrb	r3, [r7, #3]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2204      	movs	r2, #4
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f000 f80b 	bl	8000d58 <lcd_write>
	}
	else {
		// Write Command in one go with 8 bit
		lcd_write(lcd, data, LCD_BYTE);
	}
}
 8000d42:	e005      	b.n	8000d50 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000d44:	78fb      	ldrb	r3, [r7, #3]
 8000d46:	2208      	movs	r2, #8
 8000d48:	4619      	mov	r1, r3
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f000 f804 	bl	8000d58 <lcd_write>
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <lcd_write>:


/**
 * Set len bits on the bus toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef *lcd, uint8_t data, uint8_t len) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	70fb      	strb	r3, [r7, #3]
 8000d64:	4613      	mov	r3, r2
 8000d66:	70bb      	strb	r3, [r7, #2]
	for (uint8_t i = 0; i < len; i++) {
 8000d68:	2300      	movs	r3, #0
 8000d6a:	73fb      	strb	r3, [r7, #15]
 8000d6c:	e019      	b.n	8000da2 <lcd_write+0x4a>
		// Right shifts data, then gets the least significant bit to write
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	4413      	add	r3, r2
 8000d78:	6818      	ldr	r0, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	4413      	add	r3, r2
 8000d84:	8819      	ldrh	r1, [r3, #0]
 8000d86:	78fa      	ldrb	r2, [r7, #3]
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	fa42 f303 	asr.w	r3, r2, r3
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	461a      	mov	r2, r3
 8000d98:	f001 ff96 	bl	8002cc8 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < len; i++) {
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	73fb      	strb	r3, [r7, #15]
 8000da2:	7bfa      	ldrb	r2, [r7, #15]
 8000da4:	78bb      	ldrb	r3, [r7, #2]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d3e1      	bcc.n	8000d6e <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6918      	ldr	r0, [r3, #16]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	8a9b      	ldrh	r3, [r3, #20]
 8000db2:	2201      	movs	r2, #1
 8000db4:	4619      	mov	r1, r3
 8000db6:	f001 ff87 	bl	8002cc8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f000 fcfc 	bl	80017b8 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6918      	ldr	r0, [r3, #16]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	8a9b      	ldrh	r3, [r3, #20]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f001 ff7c 	bl	8002cc8 <HAL_GPIO_WritePin>
}
 8000dd0:	bf00      	nop
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <lcd_write_nib_command>:

/**
 * Writes a single 4-bit (NIB) command using the MSB of the uint
 */
void lcd_write_nib_command(Lcd_HandleTypeDef *lcd, uint8_t command) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);	// Write to Command Register
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6898      	ldr	r0, [r3, #8]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	899b      	ldrh	r3, [r3, #12]
 8000dec:	2200      	movs	r2, #0
 8000dee:	4619      	mov	r1, r3
 8000df0:	f001 ff6a 	bl	8002cc8 <HAL_GPIO_WritePin>

	if (lcd->mode == LCD_4_BIT_MODE) {
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	7d9b      	ldrb	r3, [r3, #22]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d107      	bne.n	8000e0c <lcd_write_nib_command+0x34>
		// Writing Command in two seperate nibs due to 4 Bit Mode
		lcd_write(lcd, (command >> 4), LCD_NIB);	// Send 4 MSB
 8000dfc:	78fb      	ldrb	r3, [r7, #3]
 8000dfe:	091b      	lsrs	r3, r3, #4
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2204      	movs	r2, #4
 8000e04:	4619      	mov	r1, r3
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ffa6 	bl	8000d58 <lcd_write>
	}
	else {
		// Do Nothing
	}
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e14:	b590      	push	{r4, r7, lr}
 8000e16:	b097      	sub	sp, #92	; 0x5c
 8000e18:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1a:	f000 fc51 	bl	80016c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e1e:	f000 f84b 	bl	8000eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e22:	f000 f99f 	bl	8001164 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e26:	f000 f96d 	bl	8001104 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000e2a:	f000 f8cd 	bl	8000fc8 <MX_ADC1_Init>
  MX_TIM17_Init();
 8000e2e:	f000 f941 	bl	80010b4 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  // Start Timer
  HAL_TIM_Base_Start_IT(&htim17);
 8000e32:	481c      	ldr	r0, [pc, #112]	; (8000ea4 <main+0x90>)
 8000e34:	f003 faf6 	bl	8004424 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2120      	movs	r1, #32
 8000e3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e40:	f001 ff42 	bl	8002cc8 <HAL_GPIO_WritePin>

  // Init LCD
  Lcd_PortType ports[] = {
 8000e44:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <main+0x94>)
 8000e46:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000e4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  GPIOB, GPIOB, GPIOB, GPIOB
  };

  Lcd_PinType pins[] = {
 8000e50:	4a16      	ldr	r2, [pc, #88]	; (8000eac <main+0x98>)
 8000e52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e5a:	e883 0003 	stmia.w	r3, {r0, r1}
		  D4_Pin, D5_Pin, D6_Pin, D7_Pin
  };

  Lcd_HandleTypeDef lcd = Lcd_create(
 8000e5e:	f107 000c 	add.w	r0, r7, #12
 8000e62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e66:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	9305      	str	r3, [sp, #20]
 8000e6e:	2300      	movs	r3, #0
 8000e70:	9304      	str	r3, [sp, #16]
 8000e72:	2300      	movs	r3, #0
 8000e74:	9303      	str	r3, [sp, #12]
 8000e76:	2380      	movs	r3, #128	; 0x80
 8000e78:	9302      	str	r3, [sp, #8]
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <main+0x9c>)
 8000e7c:	9301      	str	r3, [sp, #4]
 8000e7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e88:	f7ff fd88 	bl	800099c <Lcd_create>
		  false,
		  false
		  );

  // Init Display Module
  DisplayProcTypeDef display = Display_init(&btn_flag, &lcd);
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	f107 020c 	add.w	r2, r7, #12
 8000e92:	4908      	ldr	r1, [pc, #32]	; (8000eb4 <main+0xa0>)
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fc1f 	bl	80006d8 <Display_init>
//		  }
//
//		  btn_flag = 0;
//	  }

	  Display_update(&display);
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fc33 	bl	8000708 <Display_update>
 8000ea2:	e7fa      	b.n	8000e9a <main+0x86>
 8000ea4:	20000110 	.word	0x20000110
 8000ea8:	08005b0c 	.word	0x08005b0c
 8000eac:	08005b1c 	.word	0x08005b1c
 8000eb0:	48000800 	.word	0x48000800
 8000eb4:	2000008d 	.word	0x2000008d

08000eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b0b8      	sub	sp, #224	; 0xe0
 8000ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ebe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ec2:	2244      	movs	r2, #68	; 0x44
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f004 f986 	bl	80051d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ecc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000edc:	463b      	mov	r3, r7
 8000ede:	2288      	movs	r2, #136	; 0x88
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f004 f978 	bl	80051d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef6:	2310      	movs	r3, #16
 8000ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efc:	2302      	movs	r3, #2
 8000efe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f02:	2302      	movs	r3, #2
 8000f04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f0e:	230a      	movs	r3, #10
 8000f10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f14:	2307      	movs	r3, #7
 8000f16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f20:	2302      	movs	r3, #2
 8000f22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f26:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 ff7a 	bl	8002e24 <HAL_RCC_OscConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f36:	f000 fa19 	bl	800136c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3a:	230f      	movs	r3, #15
 8000f3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f40:	2303      	movs	r3, #3
 8000f42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f58:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f002 fb46 	bl	80035f0 <HAL_RCC_ClockConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000f6a:	f000 f9ff 	bl	800136c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000f6e:	f244 0302 	movw	r3, #16386	; 0x4002
 8000f72:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000f78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f7c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000f82:	2301      	movs	r3, #1
 8000f84:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000f86:	2308      	movs	r3, #8
 8000f88:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000f92:	2302      	movs	r3, #2
 8000f94:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000f96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f9a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f002 fd2c 	bl	80039fc <HAL_RCCEx_PeriphCLKConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000faa:	f000 f9df 	bl	800136c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fae:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fb2:	f001 fee1 	bl	8002d78 <HAL_PWREx_ControlVoltageScaling>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000fbc:	f000 f9d6 	bl	800136c <Error_Handler>
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	37e0      	adds	r7, #224	; 0xe0
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
 8000fe8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fea:	4b2f      	ldr	r3, [pc, #188]	; (80010a8 <MX_ADC1_Init+0xe0>)
 8000fec:	4a2f      	ldr	r2, [pc, #188]	; (80010ac <MX_ADC1_Init+0xe4>)
 8000fee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ff0:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <MX_ADC1_Init+0xe0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ff6:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <MX_ADC1_Init+0xe0>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ffc:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <MX_ADC1_Init+0xe0>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001002:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <MX_ADC1_Init+0xe0>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001008:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <MX_ADC1_Init+0xe0>)
 800100a:	2204      	movs	r2, #4
 800100c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800100e:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <MX_ADC1_Init+0xe0>)
 8001010:	2200      	movs	r2, #0
 8001012:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001014:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <MX_ADC1_Init+0xe0>)
 8001016:	2200      	movs	r2, #0
 8001018:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800101a:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <MX_ADC1_Init+0xe0>)
 800101c:	2201      	movs	r2, #1
 800101e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001020:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <MX_ADC1_Init+0xe0>)
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001028:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <MX_ADC1_Init+0xe0>)
 800102a:	2200      	movs	r2, #0
 800102c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800102e:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <MX_ADC1_Init+0xe0>)
 8001030:	2200      	movs	r2, #0
 8001032:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001034:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <MX_ADC1_Init+0xe0>)
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800103c:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <MX_ADC1_Init+0xe0>)
 800103e:	2200      	movs	r2, #0
 8001040:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <MX_ADC1_Init+0xe0>)
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800104a:	4817      	ldr	r0, [pc, #92]	; (80010a8 <MX_ADC1_Init+0xe0>)
 800104c:	f000 fd64 	bl	8001b18 <HAL_ADC_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001056:	f000 f989 	bl	800136c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	4619      	mov	r1, r3
 8001064:	4810      	ldr	r0, [pc, #64]	; (80010a8 <MX_ADC1_Init+0xe0>)
 8001066:	f001 fac3 	bl	80025f0 <HAL_ADCEx_MultiModeConfigChannel>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001070:	f000 f97c 	bl	800136c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <MX_ADC1_Init+0xe8>)
 8001076:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001078:	2306      	movs	r3, #6
 800107a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001080:	237f      	movs	r3, #127	; 0x7f
 8001082:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001084:	2304      	movs	r3, #4
 8001086:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_ADC1_Init+0xe0>)
 8001092:	f000 fe97 	bl	8001dc4 <HAL_ADC_ConfigChannel>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800109c:	f000 f966 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	3728      	adds	r7, #40	; 0x28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2000015c 	.word	0x2000015c
 80010ac:	50040000 	.word	0x50040000
 80010b0:	14f00020 	.word	0x14f00020

080010b4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80010b8:	4b10      	ldr	r3, [pc, #64]	; (80010fc <MX_TIM17_Init+0x48>)
 80010ba:	4a11      	ldr	r2, [pc, #68]	; (8001100 <MX_TIM17_Init+0x4c>)
 80010bc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8000;
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_TIM17_Init+0x48>)
 80010c0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80010c4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <MX_TIM17_Init+0x48>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <MX_TIM17_Init+0x48>)
 80010ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010d2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_TIM17_Init+0x48>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <MX_TIM17_Init+0x48>)
 80010dc:	2200      	movs	r2, #0
 80010de:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_TIM17_Init+0x48>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_TIM17_Init+0x48>)
 80010e8:	f003 f944 	bl	8004374 <HAL_TIM_Base_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80010f2:	f000 f93b 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000110 	.word	0x20000110
 8001100:	40014800 	.word	0x40014800

08001104 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001108:	4b14      	ldr	r3, [pc, #80]	; (800115c <MX_USART2_UART_Init+0x58>)
 800110a:	4a15      	ldr	r2, [pc, #84]	; (8001160 <MX_USART2_UART_Init+0x5c>)
 800110c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800110e:	4b13      	ldr	r3, [pc, #76]	; (800115c <MX_USART2_UART_Init+0x58>)
 8001110:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001114:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_USART2_UART_Init+0x58>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800111c:	4b0f      	ldr	r3, [pc, #60]	; (800115c <MX_USART2_UART_Init+0x58>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <MX_USART2_UART_Init+0x58>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <MX_USART2_UART_Init+0x58>)
 800112a:	220c      	movs	r2, #12
 800112c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <MX_USART2_UART_Init+0x58>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <MX_USART2_UART_Init+0x58>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <MX_USART2_UART_Init+0x58>)
 800113c:	2200      	movs	r2, #0
 800113e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <MX_USART2_UART_Init+0x58>)
 8001142:	2200      	movs	r2, #0
 8001144:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_USART2_UART_Init+0x58>)
 8001148:	f003 fbdc 	bl	8004904 <HAL_UART_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001152:	f000 f90b 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200001c4 	.word	0x200001c4
 8001160:	40004400 	.word	0x40004400

08001164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117a:	4b55      	ldr	r3, [pc, #340]	; (80012d0 <MX_GPIO_Init+0x16c>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	4a54      	ldr	r2, [pc, #336]	; (80012d0 <MX_GPIO_Init+0x16c>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001186:	4b52      	ldr	r3, [pc, #328]	; (80012d0 <MX_GPIO_Init+0x16c>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001192:	4b4f      	ldr	r3, [pc, #316]	; (80012d0 <MX_GPIO_Init+0x16c>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	4a4e      	ldr	r2, [pc, #312]	; (80012d0 <MX_GPIO_Init+0x16c>)
 8001198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800119c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119e:	4b4c      	ldr	r3, [pc, #304]	; (80012d0 <MX_GPIO_Init+0x16c>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	4b49      	ldr	r3, [pc, #292]	; (80012d0 <MX_GPIO_Init+0x16c>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	4a48      	ldr	r2, [pc, #288]	; (80012d0 <MX_GPIO_Init+0x16c>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b6:	4b46      	ldr	r3, [pc, #280]	; (80012d0 <MX_GPIO_Init+0x16c>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	4b43      	ldr	r3, [pc, #268]	; (80012d0 <MX_GPIO_Init+0x16c>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	4a42      	ldr	r2, [pc, #264]	; (80012d0 <MX_GPIO_Init+0x16c>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ce:	4b40      	ldr	r3, [pc, #256]	; (80012d0 <MX_GPIO_Init+0x16c>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 7108 	mov.w	r1, #544	; 0x220
 80011e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e4:	f001 fd70 	bl	8002cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	f240 4132 	movw	r1, #1074	; 0x432
 80011ee:	4839      	ldr	r0, [pc, #228]	; (80012d4 <MX_GPIO_Init+0x170>)
 80011f0:	f001 fd6a 	bl	8002cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_Enable_GPIO_Port, LCD_Enable_Pin, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2180      	movs	r1, #128	; 0x80
 80011f8:	4837      	ldr	r0, [pc, #220]	; (80012d8 <MX_GPIO_Init+0x174>)
 80011fa:	f001 fd65 	bl	8002cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001204:	4b35      	ldr	r3, [pc, #212]	; (80012dc <MX_GPIO_Init+0x178>)
 8001206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	4831      	ldr	r0, [pc, #196]	; (80012d8 <MX_GPIO_Init+0x174>)
 8001214:	f001 fbae 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LCD_RS_Pin;
 8001218:	f44f 7308 	mov.w	r3, #544	; 0x220
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	2301      	movs	r3, #1
 8001220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4619      	mov	r1, r3
 8001230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001234:	f001 fb9e 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D5_Pin|D4_Pin;
 8001238:	f240 4332 	movw	r3, #1074	; 0x432
 800123c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123e:	2301      	movs	r3, #1
 8001240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	4820      	ldr	r0, [pc, #128]	; (80012d4 <MX_GPIO_Init+0x170>)
 8001252:	f001 fb8f 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_Enable_Pin */
  GPIO_InitStruct.Pin = LCD_Enable_Pin;
 8001256:	2380      	movs	r3, #128	; 0x80
 8001258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125a:	2301      	movs	r3, #1
 800125c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_Enable_GPIO_Port, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	481a      	ldr	r0, [pc, #104]	; (80012d8 <MX_GPIO_Init+0x174>)
 800126e:	f001 fb81 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8001272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001278:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <MX_GPIO_Init+0x17c>)
 800127a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128a:	f001 fb73 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 800128e:	2340      	movs	r3, #64	; 0x40
 8001290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <MX_GPIO_Init+0x17c>)
 8001294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	480c      	ldr	r0, [pc, #48]	; (80012d4 <MX_GPIO_Init+0x170>)
 80012a2:	f001 fb67 	bl	8002974 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	2017      	movs	r0, #23
 80012ac:	f001 fb2b 	bl	8002906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012b0:	2017      	movs	r0, #23
 80012b2:	f001 fb44 	bl	800293e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	2028      	movs	r0, #40	; 0x28
 80012bc:	f001 fb23 	bl	8002906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012c0:	2028      	movs	r0, #40	; 0x28
 80012c2:	f001 fb3c 	bl	800293e <HAL_NVIC_EnableIRQ>

}
 80012c6:	bf00      	nop
 80012c8:	3728      	adds	r7, #40	; 0x28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000
 80012d4:	48000400 	.word	0x48000400
 80012d8:	48000800 	.word	0x48000800
 80012dc:	10210000 	.word	0x10210000
 80012e0:	10110000 	.word	0x10110000

080012e4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	80fb      	strh	r3, [r7, #6]
	if ((HAL_GetTick() - last_btn_press) > 100){
 80012ee:	f000 fa57 	bl	80017a0 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_GPIO_EXTI_Callback+0x50>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d916      	bls.n	800132c <HAL_GPIO_EXTI_Callback+0x48>
		if (GPIO_Pin == BTN1_Pin) {
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001304:	d107      	bne.n	8001316 <HAL_GPIO_EXTI_Callback+0x32>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001306:	2120      	movs	r1, #32
 8001308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130c:	f001 fcf4 	bl	8002cf8 <HAL_GPIO_TogglePin>
			btn_flag = 1;
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_GPIO_EXTI_Callback+0x54>)
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
		}
		if (GPIO_Pin == BTN2_Pin) {
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	2b40      	cmp	r3, #64	; 0x40
 800131a:	d102      	bne.n	8001322 <HAL_GPIO_EXTI_Callback+0x3e>
			btn_flag = 2;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_GPIO_EXTI_Callback+0x54>)
 800131e:	2202      	movs	r2, #2
 8001320:	701a      	strb	r2, [r3, #0]
		}
		last_btn_press = HAL_GetTick();
 8001322:	f000 fa3d 	bl	80017a0 <HAL_GetTick>
 8001326:	4603      	mov	r3, r0
 8001328:	4a02      	ldr	r2, [pc, #8]	; (8001334 <HAL_GPIO_EXTI_Callback+0x50>)
 800132a:	6013      	str	r3, [r2, #0]
	}
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200001c0 	.word	0x200001c0
 8001338:	2000008d 	.word	0x2000008d

0800133c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	if (htim == &htim17) {
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a07      	ldr	r2, [pc, #28]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d105      	bne.n	8001358 <HAL_TIM_PeriodElapsedCallback+0x1c>
//		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		counter += 1;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	3301      	adds	r3, #1
 8001352:	b29a      	uxth	r2, r3
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001356:	801a      	strh	r2, [r3, #0]
	}
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	20000110 	.word	0x20000110
 8001368:	2000008e 	.word	0x2000008e

0800136c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001370:	b672      	cpsid	i
}
 8001372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001374:	e7fe      	b.n	8001374 <Error_Handler+0x8>
	...

08001378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_MspInit+0x44>)
 8001380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001382:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <HAL_MspInit+0x44>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6613      	str	r3, [r2, #96]	; 0x60
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <HAL_MspInit+0x44>)
 800138c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_MspInit+0x44>)
 8001398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139a:	4a08      	ldr	r2, [pc, #32]	; (80013bc <HAL_MspInit+0x44>)
 800139c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a0:	6593      	str	r3, [r2, #88]	; 0x58
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_MspInit+0x44>)
 80013a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40021000 	.word	0x40021000

080013c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a15      	ldr	r2, [pc, #84]	; (8001434 <HAL_ADC_MspInit+0x74>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d124      	bne.n	800142c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_ADC_MspInit+0x78>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	4a14      	ldr	r2, [pc, #80]	; (8001438 <HAL_ADC_MspInit+0x78>)
 80013e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_ADC_MspInit+0x78>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <HAL_ADC_MspInit+0x78>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <HAL_ADC_MspInit+0x78>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <HAL_ADC_MspInit+0x78>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001412:	2301      	movs	r3, #1
 8001414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001416:	230b      	movs	r3, #11
 8001418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4619      	mov	r1, r3
 8001424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001428:	f001 faa4 	bl	8002974 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800142c:	bf00      	nop
 800142e:	3728      	adds	r7, #40	; 0x28
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	50040000 	.word	0x50040000
 8001438:	40021000 	.word	0x40021000

0800143c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <HAL_TIM_Base_MspInit+0x44>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d113      	bne.n	8001476 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800144e:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <HAL_TIM_Base_MspInit+0x48>)
 8001450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001452:	4a0c      	ldr	r2, [pc, #48]	; (8001484 <HAL_TIM_Base_MspInit+0x48>)
 8001454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001458:	6613      	str	r3, [r2, #96]	; 0x60
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <HAL_TIM_Base_MspInit+0x48>)
 800145c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800145e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	201a      	movs	r0, #26
 800146c:	f001 fa4b 	bl	8002906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001470:	201a      	movs	r0, #26
 8001472:	f001 fa64 	bl	800293e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40014800 	.word	0x40014800
 8001484:	40021000 	.word	0x40021000

08001488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a17      	ldr	r2, [pc, #92]	; (8001504 <HAL_UART_MspInit+0x7c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d128      	bne.n	80014fc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <HAL_UART_MspInit+0x80>)
 80014ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ae:	4a16      	ldr	r2, [pc, #88]	; (8001508 <HAL_UART_MspInit+0x80>)
 80014b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b4:	6593      	str	r3, [r2, #88]	; 0x58
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <HAL_UART_MspInit+0x80>)
 80014b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <HAL_UART_MspInit+0x80>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	4a10      	ldr	r2, [pc, #64]	; (8001508 <HAL_UART_MspInit+0x80>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <HAL_UART_MspInit+0x80>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014da:	230c      	movs	r3, #12
 80014dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014de:	2302      	movs	r3, #2
 80014e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e6:	2303      	movs	r3, #3
 80014e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ea:	2307      	movs	r3, #7
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f8:	f001 fa3c 	bl	8002974 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014fc:	bf00      	nop
 80014fe:	3728      	adds	r7, #40	; 0x28
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40004400 	.word	0x40004400
 8001508:	40021000 	.word	0x40021000

0800150c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <NMI_Handler+0x4>

08001512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */


  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <HardFault_Handler+0x4>

08001518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <MemManage_Handler+0x4>

0800151e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <BusFault_Handler+0x4>

08001524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <UsageFault_Handler+0x4>

0800152a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001558:	f000 f90e 	bl	8001778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}

08001560 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001564:	2040      	movs	r0, #64	; 0x40
 8001566:	f001 fbe1 	bl	8002d2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001574:	4802      	ldr	r0, [pc, #8]	; (8001580 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001576:	f002 ffc5 	bl	8004504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000110 	.word	0x20000110

08001584 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001588:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800158c:	f001 fbce 	bl	8002d2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001590:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001594:	f001 fbca 	bl	8002d2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a4:	4a14      	ldr	r2, [pc, #80]	; (80015f8 <_sbrk+0x5c>)
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <_sbrk+0x60>)
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <_sbrk+0x64>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	; (8001604 <_sbrk+0x68>)
 80015bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d207      	bcs.n	80015dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015cc:	f003 fdda 	bl	8005184 <__errno>
 80015d0:	4603      	mov	r3, r0
 80015d2:	220c      	movs	r2, #12
 80015d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015da:	e009      	b.n	80015f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <_sbrk+0x64>)
 80015ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20018000 	.word	0x20018000
 80015fc:	00000400 	.word	0x00000400
 8001600:	20000090 	.word	0x20000090
 8001604:	20000260 	.word	0x20000260

08001608 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800160c:	4b15      	ldr	r3, [pc, #84]	; (8001664 <SystemInit+0x5c>)
 800160e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001612:	4a14      	ldr	r2, [pc, #80]	; (8001664 <SystemInit+0x5c>)
 8001614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <SystemInit+0x60>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a11      	ldr	r2, [pc, #68]	; (8001668 <SystemInit+0x60>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <SystemInit+0x60>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <SystemInit+0x60>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a0d      	ldr	r2, [pc, #52]	; (8001668 <SystemInit+0x60>)
 8001634:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001638:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800163c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <SystemInit+0x60>)
 8001640:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001644:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <SystemInit+0x60>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a07      	ldr	r2, [pc, #28]	; (8001668 <SystemInit+0x60>)
 800164c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001650:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001652:	4b05      	ldr	r3, [pc, #20]	; (8001668 <SystemInit+0x60>)
 8001654:	2200      	movs	r2, #0
 8001656:	619a      	str	r2, [r3, #24]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000ed00 	.word	0xe000ed00
 8001668:	40021000 	.word	0x40021000

0800166c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800166c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001670:	f7ff ffca 	bl	8001608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001674:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001676:	e003      	b.n	8001680 <LoopCopyDataInit>

08001678 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800167a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800167c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800167e:	3104      	adds	r1, #4

08001680 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001680:	480a      	ldr	r0, [pc, #40]	; (80016ac <LoopForever+0xa>)
	ldr	r3, =_edata
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001684:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001686:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001688:	d3f6      	bcc.n	8001678 <CopyDataInit>
	ldr	r2, =_sbss
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800168c:	e002      	b.n	8001694 <LoopFillZerobss>

0800168e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800168e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001690:	f842 3b04 	str.w	r3, [r2], #4

08001694 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <LoopForever+0x16>)
	cmp	r2, r3
 8001696:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001698:	d3f9      	bcc.n	800168e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800169a:	f003 fd79 	bl	8005190 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800169e:	f7ff fbb9 	bl	8000e14 <main>

080016a2 <LoopForever>:

LoopForever:
    b LoopForever
 80016a2:	e7fe      	b.n	80016a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016a4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80016a8:	08005bb4 	.word	0x08005bb4
	ldr	r0, =_sdata
 80016ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80016b0:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80016b4:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80016b8:	2000025c 	.word	0x2000025c

080016bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016bc:	e7fe      	b.n	80016bc <ADC1_2_IRQHandler>
	...

080016c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <HAL_Init+0x3c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <HAL_Init+0x3c>)
 80016d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d6:	2003      	movs	r0, #3
 80016d8:	f001 f90a 	bl	80028f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016dc:	2000      	movs	r0, #0
 80016de:	f000 f80f 	bl	8001700 <HAL_InitTick>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d002      	beq.n	80016ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	71fb      	strb	r3, [r7, #7]
 80016ec:	e001      	b.n	80016f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016ee:	f7ff fe43 	bl	8001378 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016f2:	79fb      	ldrb	r3, [r7, #7]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40022000 	.word	0x40022000

08001700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800170c:	4b17      	ldr	r3, [pc, #92]	; (800176c <HAL_InitTick+0x6c>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d023      	beq.n	800175c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001714:	4b16      	ldr	r3, [pc, #88]	; (8001770 <HAL_InitTick+0x70>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b14      	ldr	r3, [pc, #80]	; (800176c <HAL_InitTick+0x6c>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001722:	fbb3 f3f1 	udiv	r3, r3, r1
 8001726:	fbb2 f3f3 	udiv	r3, r2, r3
 800172a:	4618      	mov	r0, r3
 800172c:	f001 f915 	bl	800295a <HAL_SYSTICK_Config>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10f      	bne.n	8001756 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b0f      	cmp	r3, #15
 800173a:	d809      	bhi.n	8001750 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800173c:	2200      	movs	r2, #0
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001744:	f001 f8df 	bl	8002906 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001748:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <HAL_InitTick+0x74>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	e007      	b.n	8001760 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	73fb      	strb	r3, [r7, #15]
 8001754:	e004      	b.n	8001760 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	73fb      	strb	r3, [r7, #15]
 800175a:	e001      	b.n	8001760 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001760:	7bfb      	ldrb	r3, [r7, #15]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000008 	.word	0x20000008
 8001770:	20000000 	.word	0x20000000
 8001774:	20000004 	.word	0x20000004

08001778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_IncTick+0x20>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_IncTick+0x24>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4413      	add	r3, r2
 8001788:	4a04      	ldr	r2, [pc, #16]	; (800179c <HAL_IncTick+0x24>)
 800178a:	6013      	str	r3, [r2, #0]
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	20000008 	.word	0x20000008
 800179c:	20000248 	.word	0x20000248

080017a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return uwTick;
 80017a4:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <HAL_GetTick+0x14>)
 80017a6:	681b      	ldr	r3, [r3, #0]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000248 	.word	0x20000248

080017b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c0:	f7ff ffee 	bl	80017a0 <HAL_GetTick>
 80017c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017d0:	d005      	beq.n	80017de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <HAL_Delay+0x44>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4413      	add	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017de:	bf00      	nop
 80017e0:	f7ff ffde 	bl	80017a0 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d8f7      	bhi.n	80017e0 <HAL_Delay+0x28>
  {
  }
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000008 	.word	0x20000008

08001800 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	609a      	str	r2, [r3, #8]
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	609a      	str	r2, [r3, #8]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3360      	adds	r3, #96	; 0x60
 800187a:	461a      	mov	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <LL_ADC_SetOffset+0x44>)
 800188a:	4013      	ands	r3, r2
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	4313      	orrs	r3, r2
 8001898:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018a0:	bf00      	nop
 80018a2:	371c      	adds	r7, #28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	03fff000 	.word	0x03fff000

080018b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3360      	adds	r3, #96	; 0x60
 80018be:	461a      	mov	r2, r3
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018dc:	b480      	push	{r7}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	3360      	adds	r3, #96	; 0x60
 80018ec:	461a      	mov	r2, r3
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	431a      	orrs	r2, r3
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001906:	bf00      	nop
 8001908:	371c      	adds	r7, #28
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001912:	b480      	push	{r7}
 8001914:	b087      	sub	sp, #28
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	3330      	adds	r3, #48	; 0x30
 8001922:	461a      	mov	r2, r3
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	0a1b      	lsrs	r3, r3, #8
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	4413      	add	r3, r2
 8001930:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	f003 031f 	and.w	r3, r3, #31
 800193c:	211f      	movs	r1, #31
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	401a      	ands	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	0e9b      	lsrs	r3, r3, #26
 800194a:	f003 011f 	and.w	r1, r3, #31
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	f003 031f 	and.w	r3, r3, #31
 8001954:	fa01 f303 	lsl.w	r3, r1, r3
 8001958:	431a      	orrs	r2, r3
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800195e:	bf00      	nop
 8001960:	371c      	adds	r7, #28
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800196a:	b480      	push	{r7}
 800196c:	b087      	sub	sp, #28
 800196e:	af00      	add	r7, sp, #0
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	3314      	adds	r3, #20
 800197a:	461a      	mov	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	0e5b      	lsrs	r3, r3, #25
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	4413      	add	r3, r2
 8001988:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	0d1b      	lsrs	r3, r3, #20
 8001992:	f003 031f 	and.w	r3, r3, #31
 8001996:	2107      	movs	r1, #7
 8001998:	fa01 f303 	lsl.w	r3, r1, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	401a      	ands	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	0d1b      	lsrs	r3, r3, #20
 80019a4:	f003 031f 	and.w	r3, r3, #31
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	431a      	orrs	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019b4:	bf00      	nop
 80019b6:	371c      	adds	r7, #28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d8:	43db      	mvns	r3, r3
 80019da:	401a      	ands	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f003 0318 	and.w	r3, r3, #24
 80019e2:	4908      	ldr	r1, [pc, #32]	; (8001a04 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019e4:	40d9      	lsrs	r1, r3
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	400b      	ands	r3, r1
 80019ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ee:	431a      	orrs	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80019f6:	bf00      	nop
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	0007ffff 	.word	0x0007ffff

08001a08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6093      	str	r3, [r2, #8]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a40:	d101      	bne.n	8001a46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a90:	d101      	bne.n	8001a96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <LL_ADC_IsEnabled+0x18>
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e000      	b.n	8001abe <LL_ADC_IsEnabled+0x1a>
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d101      	bne.n	8001ae2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d101      	bne.n	8001b08 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b04:	2301      	movs	r3, #1
 8001b06:	e000      	b.n	8001b0a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
	...

08001b18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b18:	b590      	push	{r4, r7, lr}
 8001b1a:	b089      	sub	sp, #36	; 0x24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e136      	b.n	8001da0 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d109      	bne.n	8001b54 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff fc3d 	bl	80013c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ff67 	bl	8001a2c <LL_ADC_IsDeepPowerDownEnabled>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d004      	beq.n	8001b6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff4d 	bl	8001a08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff ff82 	bl	8001a7c <LL_ADC_IsInternalRegulatorEnabled>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d115      	bne.n	8001baa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff ff66 	bl	8001a54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b88:	4b87      	ldr	r3, [pc, #540]	; (8001da8 <HAL_ADC_Init+0x290>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	099b      	lsrs	r3, r3, #6
 8001b8e:	4a87      	ldr	r2, [pc, #540]	; (8001dac <HAL_ADC_Init+0x294>)
 8001b90:	fba2 2303 	umull	r2, r3, r2, r3
 8001b94:	099b      	lsrs	r3, r3, #6
 8001b96:	3301      	adds	r3, #1
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b9c:	e002      	b.n	8001ba4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f9      	bne.n	8001b9e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff ff64 	bl	8001a7c <LL_ADC_IsInternalRegulatorEnabled>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10d      	bne.n	8001bd6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bbe:	f043 0210 	orr.w	r2, r3, #16
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bca:	f043 0201 	orr.w	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff ff75 	bl	8001aca <LL_ADC_REG_IsConversionOngoing>
 8001be0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be6:	f003 0310 	and.w	r3, r3, #16
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f040 80cf 	bne.w	8001d8e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f040 80cb 	bne.w	8001d8e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c00:	f043 0202 	orr.w	r2, r3, #2
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff49 	bl	8001aa4 <LL_ADC_IsEnabled>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d115      	bne.n	8001c44 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c18:	4865      	ldr	r0, [pc, #404]	; (8001db0 <HAL_ADC_Init+0x298>)
 8001c1a:	f7ff ff43 	bl	8001aa4 <LL_ADC_IsEnabled>
 8001c1e:	4604      	mov	r4, r0
 8001c20:	4864      	ldr	r0, [pc, #400]	; (8001db4 <HAL_ADC_Init+0x29c>)
 8001c22:	f7ff ff3f 	bl	8001aa4 <LL_ADC_IsEnabled>
 8001c26:	4603      	mov	r3, r0
 8001c28:	431c      	orrs	r4, r3
 8001c2a:	4863      	ldr	r0, [pc, #396]	; (8001db8 <HAL_ADC_Init+0x2a0>)
 8001c2c:	f7ff ff3a 	bl	8001aa4 <LL_ADC_IsEnabled>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4323      	orrs	r3, r4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d105      	bne.n	8001c44 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	485f      	ldr	r0, [pc, #380]	; (8001dbc <HAL_ADC_Init+0x2a4>)
 8001c40:	f7ff fdde 	bl	8001800 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	7e5b      	ldrb	r3, [r3, #25]
 8001c48:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c4e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001c54:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001c5a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c62:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d106      	bne.n	8001c80 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	3b01      	subs	r3, #1
 8001c78:	045b      	lsls	r3, r3, #17
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d009      	beq.n	8001c9c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c94:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <HAL_ADC_Init+0x2a8>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6812      	ldr	r2, [r2, #0]
 8001caa:	69b9      	ldr	r1, [r7, #24]
 8001cac:	430b      	orrs	r3, r1
 8001cae:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff08 	bl	8001aca <LL_ADC_REG_IsConversionOngoing>
 8001cba:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff15 	bl	8001af0 <LL_ADC_INJ_IsConversionOngoing>
 8001cc6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d13d      	bne.n	8001d4a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d13a      	bne.n	8001d4a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cd8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ce0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cf0:	f023 0302 	bic.w	r3, r3, #2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	69b9      	ldr	r1, [r7, #24]
 8001cfa:	430b      	orrs	r3, r1
 8001cfc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d118      	bne.n	8001d3a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d12:	f023 0304 	bic.w	r3, r3, #4
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d1e:	4311      	orrs	r1, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d24:	4311      	orrs	r1, r2
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	611a      	str	r2, [r3, #16]
 8001d38:	e007      	b.n	8001d4a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0201 	bic.w	r2, r2, #1
 8001d48:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d10c      	bne.n	8001d6c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	f023 010f 	bic.w	r1, r3, #15
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	1e5a      	subs	r2, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	631a      	str	r2, [r3, #48]	; 0x30
 8001d6a:	e007      	b.n	8001d7c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 020f 	bic.w	r2, r2, #15
 8001d7a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d80:	f023 0303 	bic.w	r3, r3, #3
 8001d84:	f043 0201 	orr.w	r2, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	655a      	str	r2, [r3, #84]	; 0x54
 8001d8c:	e007      	b.n	8001d9e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d92:	f043 0210 	orr.w	r2, r3, #16
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3724      	adds	r7, #36	; 0x24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd90      	pop	{r4, r7, pc}
 8001da8:	20000000 	.word	0x20000000
 8001dac:	053e2d63 	.word	0x053e2d63
 8001db0:	50040000 	.word	0x50040000
 8001db4:	50040100 	.word	0x50040100
 8001db8:	50040200 	.word	0x50040200
 8001dbc:	50040300 	.word	0x50040300
 8001dc0:	fff0c007 	.word	0xfff0c007

08001dc4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b0b6      	sub	sp, #216	; 0xd8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x22>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e3c7      	b.n	8002576 <HAL_ADC_ConfigChannel+0x7b2>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fe69 	bl	8001aca <LL_ADC_REG_IsConversionOngoing>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f040 83a8 	bne.w	8002550 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b05      	cmp	r3, #5
 8001e06:	d824      	bhi.n	8001e52 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	3b02      	subs	r3, #2
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d81b      	bhi.n	8001e4a <HAL_ADC_ConfigChannel+0x86>
 8001e12:	a201      	add	r2, pc, #4	; (adr r2, 8001e18 <HAL_ADC_ConfigChannel+0x54>)
 8001e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e18:	08001e29 	.word	0x08001e29
 8001e1c:	08001e31 	.word	0x08001e31
 8001e20:	08001e39 	.word	0x08001e39
 8001e24:	08001e41 	.word	0x08001e41
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	220c      	movs	r2, #12
 8001e2c:	605a      	str	r2, [r3, #4]
          break;
 8001e2e:	e011      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	2212      	movs	r2, #18
 8001e34:	605a      	str	r2, [r3, #4]
          break;
 8001e36:	e00d      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	2218      	movs	r2, #24
 8001e3c:	605a      	str	r2, [r3, #4]
          break;
 8001e3e:	e009      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e46:	605a      	str	r2, [r3, #4]
          break;
 8001e48:	e004      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	2206      	movs	r2, #6
 8001e4e:	605a      	str	r2, [r3, #4]
          break;
 8001e50:	e000      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001e52:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6818      	ldr	r0, [r3, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	6859      	ldr	r1, [r3, #4]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	461a      	mov	r2, r3
 8001e62:	f7ff fd56 	bl	8001912 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fe2d 	bl	8001aca <LL_ADC_REG_IsConversionOngoing>
 8001e70:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fe39 	bl	8001af0 <LL_ADC_INJ_IsConversionOngoing>
 8001e7e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e82:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f040 81a6 	bne.w	80021d8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f040 81a1 	bne.w	80021d8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6818      	ldr	r0, [r3, #0]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	6819      	ldr	r1, [r3, #0]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	f7ff fd61 	bl	800196a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	695a      	ldr	r2, [r3, #20]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	08db      	lsrs	r3, r3, #3
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d00a      	beq.n	8001ee0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	6919      	ldr	r1, [r3, #16]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001eda:	f7ff fcc5 	bl	8001868 <LL_ADC_SetOffset>
 8001ede:	e17b      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fce2 	bl	80018b0 <LL_ADC_GetOffsetChannel>
 8001eec:	4603      	mov	r3, r0
 8001eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10a      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x148>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2100      	movs	r1, #0
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff fcd7 	bl	80018b0 <LL_ADC_GetOffsetChannel>
 8001f02:	4603      	mov	r3, r0
 8001f04:	0e9b      	lsrs	r3, r3, #26
 8001f06:	f003 021f 	and.w	r2, r3, #31
 8001f0a:	e01e      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x186>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fccc 	bl	80018b0 <LL_ADC_GetOffsetChannel>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f22:	fa93 f3a3 	rbit	r3, r3
 8001f26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001f3a:	2320      	movs	r3, #32
 8001f3c:	e004      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001f3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f42:	fab3 f383 	clz	r3, r3
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d105      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x19e>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	0e9b      	lsrs	r3, r3, #26
 8001f5c:	f003 031f 	and.w	r3, r3, #31
 8001f60:	e018      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x1d0>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001f76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001f7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001f86:	2320      	movs	r3, #32
 8001f88:	e004      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001f8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f8e:	fab3 f383 	clz	r3, r3
 8001f92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d106      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff fc9b 	bl	80018dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2101      	movs	r1, #1
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fc7f 	bl	80018b0 <LL_ADC_GetOffsetChannel>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10a      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x20e>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fc74 	bl	80018b0 <LL_ADC_GetOffsetChannel>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	0e9b      	lsrs	r3, r3, #26
 8001fcc:	f003 021f 	and.w	r2, r3, #31
 8001fd0:	e01e      	b.n	8002010 <HAL_ADC_ConfigChannel+0x24c>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fc69 	bl	80018b0 <LL_ADC_GetOffsetChannel>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001fe8:	fa93 f3a3 	rbit	r3, r3
 8001fec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001ff0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ff4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001ff8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002000:	2320      	movs	r3, #32
 8002002:	e004      	b.n	800200e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002004:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002008:	fab3 f383 	clz	r3, r3
 800200c:	b2db      	uxtb	r3, r3
 800200e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002018:	2b00      	cmp	r3, #0
 800201a:	d105      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x264>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	0e9b      	lsrs	r3, r3, #26
 8002022:	f003 031f 	and.w	r3, r3, #31
 8002026:	e018      	b.n	800205a <HAL_ADC_ConfigChannel+0x296>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002034:	fa93 f3a3 	rbit	r3, r3
 8002038:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800203c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002040:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002044:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800204c:	2320      	movs	r3, #32
 800204e:	e004      	b.n	800205a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002050:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800205a:	429a      	cmp	r2, r3
 800205c:	d106      	bne.n	800206c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2200      	movs	r2, #0
 8002064:	2101      	movs	r1, #1
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fc38 	bl	80018dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2102      	movs	r1, #2
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fc1c 	bl	80018b0 <LL_ADC_GetOffsetChannel>
 8002078:	4603      	mov	r3, r0
 800207a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10a      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x2d4>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2102      	movs	r1, #2
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fc11 	bl	80018b0 <LL_ADC_GetOffsetChannel>
 800208e:	4603      	mov	r3, r0
 8002090:	0e9b      	lsrs	r3, r3, #26
 8002092:	f003 021f 	and.w	r2, r3, #31
 8002096:	e01e      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x312>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2102      	movs	r1, #2
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fc06 	bl	80018b0 <LL_ADC_GetOffsetChannel>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020ae:	fa93 f3a3 	rbit	r3, r3
 80020b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80020b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80020be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80020c6:	2320      	movs	r3, #32
 80020c8:	e004      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80020ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020ce:	fab3 f383 	clz	r3, r3
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d105      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x32a>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	0e9b      	lsrs	r3, r3, #26
 80020e8:	f003 031f 	and.w	r3, r3, #31
 80020ec:	e016      	b.n	800211c <HAL_ADC_ConfigChannel+0x358>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002100:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002102:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002106:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800210e:	2320      	movs	r3, #32
 8002110:	e004      	b.n	800211c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002112:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002116:	fab3 f383 	clz	r3, r3
 800211a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800211c:	429a      	cmp	r2, r3
 800211e:	d106      	bne.n	800212e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2200      	movs	r2, #0
 8002126:	2102      	movs	r1, #2
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff fbd7 	bl	80018dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2103      	movs	r1, #3
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff fbbb 	bl	80018b0 <LL_ADC_GetOffsetChannel>
 800213a:	4603      	mov	r3, r0
 800213c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10a      	bne.n	800215a <HAL_ADC_ConfigChannel+0x396>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2103      	movs	r1, #3
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fbb0 	bl	80018b0 <LL_ADC_GetOffsetChannel>
 8002150:	4603      	mov	r3, r0
 8002152:	0e9b      	lsrs	r3, r3, #26
 8002154:	f003 021f 	and.w	r2, r3, #31
 8002158:	e017      	b.n	800218a <HAL_ADC_ConfigChannel+0x3c6>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2103      	movs	r1, #3
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fba5 	bl	80018b0 <LL_ADC_GetOffsetChannel>
 8002166:	4603      	mov	r3, r0
 8002168:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800216c:	fa93 f3a3 	rbit	r3, r3
 8002170:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002172:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002174:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002176:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800217c:	2320      	movs	r3, #32
 800217e:	e003      	b.n	8002188 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002180:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002192:	2b00      	cmp	r3, #0
 8002194:	d105      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x3de>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	0e9b      	lsrs	r3, r3, #26
 800219c:	f003 031f 	and.w	r3, r3, #31
 80021a0:	e011      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x402>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021aa:	fa93 f3a3 	rbit	r3, r3
 80021ae:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80021b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80021b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80021ba:	2320      	movs	r3, #32
 80021bc:	e003      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80021be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021c0:	fab3 f383 	clz	r3, r3
 80021c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d106      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2200      	movs	r2, #0
 80021d0:	2103      	movs	r1, #3
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fb82 	bl	80018dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff fc61 	bl	8001aa4 <LL_ADC_IsEnabled>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f040 813f 	bne.w	8002468 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	6819      	ldr	r1, [r3, #0]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	461a      	mov	r2, r3
 80021f8:	f7ff fbe2 	bl	80019c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a8e      	ldr	r2, [pc, #568]	; (800243c <HAL_ADC_ConfigChannel+0x678>)
 8002202:	4293      	cmp	r3, r2
 8002204:	f040 8130 	bne.w	8002468 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10b      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x46c>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	0e9b      	lsrs	r3, r3, #26
 800221e:	3301      	adds	r3, #1
 8002220:	f003 031f 	and.w	r3, r3, #31
 8002224:	2b09      	cmp	r3, #9
 8002226:	bf94      	ite	ls
 8002228:	2301      	movls	r3, #1
 800222a:	2300      	movhi	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	e019      	b.n	8002264 <HAL_ADC_ConfigChannel+0x4a0>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002238:	fa93 f3a3 	rbit	r3, r3
 800223c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800223e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002240:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002242:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002248:	2320      	movs	r3, #32
 800224a:	e003      	b.n	8002254 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800224c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800224e:	fab3 f383 	clz	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	3301      	adds	r3, #1
 8002256:	f003 031f 	and.w	r3, r3, #31
 800225a:	2b09      	cmp	r3, #9
 800225c:	bf94      	ite	ls
 800225e:	2301      	movls	r3, #1
 8002260:	2300      	movhi	r3, #0
 8002262:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002264:	2b00      	cmp	r3, #0
 8002266:	d079      	beq.n	800235c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002270:	2b00      	cmp	r3, #0
 8002272:	d107      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x4c0>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	0e9b      	lsrs	r3, r3, #26
 800227a:	3301      	adds	r3, #1
 800227c:	069b      	lsls	r3, r3, #26
 800227e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002282:	e015      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x4ec>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800228c:	fa93 f3a3 	rbit	r3, r3
 8002290:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002294:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800229c:	2320      	movs	r3, #32
 800229e:	e003      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80022a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022a2:	fab3 f383 	clz	r3, r3
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	3301      	adds	r3, #1
 80022aa:	069b      	lsls	r3, r3, #26
 80022ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d109      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x50c>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	0e9b      	lsrs	r3, r3, #26
 80022c2:	3301      	adds	r3, #1
 80022c4:	f003 031f 	and.w	r3, r3, #31
 80022c8:	2101      	movs	r1, #1
 80022ca:	fa01 f303 	lsl.w	r3, r1, r3
 80022ce:	e017      	b.n	8002300 <HAL_ADC_ConfigChannel+0x53c>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80022de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80022e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80022e8:	2320      	movs	r3, #32
 80022ea:	e003      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80022ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	3301      	adds	r3, #1
 80022f6:	f003 031f 	and.w	r3, r3, #31
 80022fa:	2101      	movs	r1, #1
 80022fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002300:	ea42 0103 	orr.w	r1, r2, r3
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10a      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x562>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	0e9b      	lsrs	r3, r3, #26
 8002316:	3301      	adds	r3, #1
 8002318:	f003 021f 	and.w	r2, r3, #31
 800231c:	4613      	mov	r3, r2
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	4413      	add	r3, r2
 8002322:	051b      	lsls	r3, r3, #20
 8002324:	e018      	b.n	8002358 <HAL_ADC_ConfigChannel+0x594>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002336:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800233e:	2320      	movs	r3, #32
 8002340:	e003      	b.n	800234a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002344:	fab3 f383 	clz	r3, r3
 8002348:	b2db      	uxtb	r3, r3
 800234a:	3301      	adds	r3, #1
 800234c:	f003 021f 	and.w	r2, r3, #31
 8002350:	4613      	mov	r3, r2
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4413      	add	r3, r2
 8002356:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002358:	430b      	orrs	r3, r1
 800235a:	e080      	b.n	800245e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002364:	2b00      	cmp	r3, #0
 8002366:	d107      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x5b4>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	0e9b      	lsrs	r3, r3, #26
 800236e:	3301      	adds	r3, #1
 8002370:	069b      	lsls	r3, r3, #26
 8002372:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002376:	e015      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x5e0>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002380:	fa93 f3a3 	rbit	r3, r3
 8002384:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002388:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800238a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002390:	2320      	movs	r3, #32
 8002392:	e003      	b.n	800239c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002396:	fab3 f383 	clz	r3, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	3301      	adds	r3, #1
 800239e:	069b      	lsls	r3, r3, #26
 80023a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d109      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x600>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	0e9b      	lsrs	r3, r3, #26
 80023b6:	3301      	adds	r3, #1
 80023b8:	f003 031f 	and.w	r3, r3, #31
 80023bc:	2101      	movs	r1, #1
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	e017      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x630>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	61fb      	str	r3, [r7, #28]
  return result;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80023dc:	2320      	movs	r3, #32
 80023de:	e003      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	3301      	adds	r3, #1
 80023ea:	f003 031f 	and.w	r3, r3, #31
 80023ee:	2101      	movs	r1, #1
 80023f0:	fa01 f303 	lsl.w	r3, r1, r3
 80023f4:	ea42 0103 	orr.w	r1, r2, r3
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10d      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x65c>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	0e9b      	lsrs	r3, r3, #26
 800240a:	3301      	adds	r3, #1
 800240c:	f003 021f 	and.w	r2, r3, #31
 8002410:	4613      	mov	r3, r2
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	4413      	add	r3, r2
 8002416:	3b1e      	subs	r3, #30
 8002418:	051b      	lsls	r3, r3, #20
 800241a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800241e:	e01d      	b.n	800245c <HAL_ADC_ConfigChannel+0x698>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	613b      	str	r3, [r7, #16]
  return result;
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d103      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002438:	2320      	movs	r3, #32
 800243a:	e005      	b.n	8002448 <HAL_ADC_ConfigChannel+0x684>
 800243c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	3301      	adds	r3, #1
 800244a:	f003 021f 	and.w	r2, r3, #31
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	3b1e      	subs	r3, #30
 8002456:	051b      	lsls	r3, r3, #20
 8002458:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800245c:	430b      	orrs	r3, r1
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	6892      	ldr	r2, [r2, #8]
 8002462:	4619      	mov	r1, r3
 8002464:	f7ff fa81 	bl	800196a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b44      	ldr	r3, [pc, #272]	; (8002580 <HAL_ADC_ConfigChannel+0x7bc>)
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d07a      	beq.n	800256a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002474:	4843      	ldr	r0, [pc, #268]	; (8002584 <HAL_ADC_ConfigChannel+0x7c0>)
 8002476:	f7ff f9e9 	bl	800184c <LL_ADC_GetCommonPathInternalCh>
 800247a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a41      	ldr	r2, [pc, #260]	; (8002588 <HAL_ADC_ConfigChannel+0x7c4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d12c      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002488:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800248c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d126      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a3c      	ldr	r2, [pc, #240]	; (800258c <HAL_ADC_ConfigChannel+0x7c8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d004      	beq.n	80024a8 <HAL_ADC_ConfigChannel+0x6e4>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a3b      	ldr	r2, [pc, #236]	; (8002590 <HAL_ADC_ConfigChannel+0x7cc>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d15d      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024b0:	4619      	mov	r1, r3
 80024b2:	4834      	ldr	r0, [pc, #208]	; (8002584 <HAL_ADC_ConfigChannel+0x7c0>)
 80024b4:	f7ff f9b7 	bl	8001826 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024b8:	4b36      	ldr	r3, [pc, #216]	; (8002594 <HAL_ADC_ConfigChannel+0x7d0>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	099b      	lsrs	r3, r3, #6
 80024be:	4a36      	ldr	r2, [pc, #216]	; (8002598 <HAL_ADC_ConfigChannel+0x7d4>)
 80024c0:	fba2 2303 	umull	r2, r3, r2, r3
 80024c4:	099b      	lsrs	r3, r3, #6
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	4613      	mov	r3, r2
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024d2:	e002      	b.n	80024da <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f9      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024e0:	e040      	b.n	8002564 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a2d      	ldr	r2, [pc, #180]	; (800259c <HAL_ADC_ConfigChannel+0x7d8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d118      	bne.n	800251e <HAL_ADC_ConfigChannel+0x75a>
 80024ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d112      	bne.n	800251e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a23      	ldr	r2, [pc, #140]	; (800258c <HAL_ADC_ConfigChannel+0x7c8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d004      	beq.n	800250c <HAL_ADC_ConfigChannel+0x748>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a22      	ldr	r2, [pc, #136]	; (8002590 <HAL_ADC_ConfigChannel+0x7cc>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d12d      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800250c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002510:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002514:	4619      	mov	r1, r3
 8002516:	481b      	ldr	r0, [pc, #108]	; (8002584 <HAL_ADC_ConfigChannel+0x7c0>)
 8002518:	f7ff f985 	bl	8001826 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800251c:	e024      	b.n	8002568 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1f      	ldr	r2, [pc, #124]	; (80025a0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d120      	bne.n	800256a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002528:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800252c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d11a      	bne.n	800256a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a14      	ldr	r2, [pc, #80]	; (800258c <HAL_ADC_ConfigChannel+0x7c8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d115      	bne.n	800256a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800253e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002542:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002546:	4619      	mov	r1, r3
 8002548:	480e      	ldr	r0, [pc, #56]	; (8002584 <HAL_ADC_ConfigChannel+0x7c0>)
 800254a:	f7ff f96c 	bl	8001826 <LL_ADC_SetCommonPathInternalCh>
 800254e:	e00c      	b.n	800256a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002554:	f043 0220 	orr.w	r2, r3, #32
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002562:	e002      	b.n	800256a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002564:	bf00      	nop
 8002566:	e000      	b.n	800256a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002568:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002572:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002576:	4618      	mov	r0, r3
 8002578:	37d8      	adds	r7, #216	; 0xd8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	80080000 	.word	0x80080000
 8002584:	50040300 	.word	0x50040300
 8002588:	c7520000 	.word	0xc7520000
 800258c:	50040000 	.word	0x50040000
 8002590:	50040200 	.word	0x50040200
 8002594:	20000000 	.word	0x20000000
 8002598:	053e2d63 	.word	0x053e2d63
 800259c:	cb840000 	.word	0xcb840000
 80025a0:	80000001 	.word	0x80000001

080025a4 <LL_ADC_IsEnabled>:
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d101      	bne.n	80025bc <LL_ADC_IsEnabled+0x18>
 80025b8:	2301      	movs	r3, #1
 80025ba:	e000      	b.n	80025be <LL_ADC_IsEnabled+0x1a>
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <LL_ADC_REG_IsConversionOngoing>:
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d101      	bne.n	80025e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025de:	2301      	movs	r3, #1
 80025e0:	e000      	b.n	80025e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80025f0:	b590      	push	{r4, r7, lr}
 80025f2:	b09f      	sub	sp, #124	; 0x7c
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800260a:	2302      	movs	r3, #2
 800260c:	e093      	b.n	8002736 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002616:	2300      	movs	r3, #0
 8002618:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800261a:	2300      	movs	r3, #0
 800261c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a47      	ldr	r2, [pc, #284]	; (8002740 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d102      	bne.n	800262e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002628:	4b46      	ldr	r3, [pc, #280]	; (8002744 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	e001      	b.n	8002632 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800262e:	2300      	movs	r3, #0
 8002630:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10b      	bne.n	8002650 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263c:	f043 0220 	orr.w	r2, r3, #32
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e072      	b.n	8002736 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff ffb9 	bl	80025ca <LL_ADC_REG_IsConversionOngoing>
 8002658:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff ffb3 	bl	80025ca <LL_ADC_REG_IsConversionOngoing>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d154      	bne.n	8002714 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800266a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800266c:	2b00      	cmp	r3, #0
 800266e:	d151      	bne.n	8002714 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002670:	4b35      	ldr	r3, [pc, #212]	; (8002748 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002672:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d02c      	beq.n	80026d6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800267c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	6859      	ldr	r1, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800268e:	035b      	lsls	r3, r3, #13
 8002690:	430b      	orrs	r3, r1
 8002692:	431a      	orrs	r2, r3
 8002694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002696:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002698:	4829      	ldr	r0, [pc, #164]	; (8002740 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800269a:	f7ff ff83 	bl	80025a4 <LL_ADC_IsEnabled>
 800269e:	4604      	mov	r4, r0
 80026a0:	4828      	ldr	r0, [pc, #160]	; (8002744 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80026a2:	f7ff ff7f 	bl	80025a4 <LL_ADC_IsEnabled>
 80026a6:	4603      	mov	r3, r0
 80026a8:	431c      	orrs	r4, r3
 80026aa:	4828      	ldr	r0, [pc, #160]	; (800274c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80026ac:	f7ff ff7a 	bl	80025a4 <LL_ADC_IsEnabled>
 80026b0:	4603      	mov	r3, r0
 80026b2:	4323      	orrs	r3, r4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d137      	bne.n	8002728 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80026b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80026c0:	f023 030f 	bic.w	r3, r3, #15
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	6811      	ldr	r1, [r2, #0]
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	6892      	ldr	r2, [r2, #8]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	431a      	orrs	r2, r3
 80026d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026d4:	e028      	b.n	8002728 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80026d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026e2:	4817      	ldr	r0, [pc, #92]	; (8002740 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80026e4:	f7ff ff5e 	bl	80025a4 <LL_ADC_IsEnabled>
 80026e8:	4604      	mov	r4, r0
 80026ea:	4816      	ldr	r0, [pc, #88]	; (8002744 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80026ec:	f7ff ff5a 	bl	80025a4 <LL_ADC_IsEnabled>
 80026f0:	4603      	mov	r3, r0
 80026f2:	431c      	orrs	r4, r3
 80026f4:	4815      	ldr	r0, [pc, #84]	; (800274c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80026f6:	f7ff ff55 	bl	80025a4 <LL_ADC_IsEnabled>
 80026fa:	4603      	mov	r3, r0
 80026fc:	4323      	orrs	r3, r4
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d112      	bne.n	8002728 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800270a:	f023 030f 	bic.w	r3, r3, #15
 800270e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002710:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002712:	e009      	b.n	8002728 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002718:	f043 0220 	orr.w	r2, r3, #32
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002726:	e000      	b.n	800272a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002728:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002732:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002736:	4618      	mov	r0, r3
 8002738:	377c      	adds	r7, #124	; 0x7c
 800273a:	46bd      	mov	sp, r7
 800273c:	bd90      	pop	{r4, r7, pc}
 800273e:	bf00      	nop
 8002740:	50040000 	.word	0x50040000
 8002744:	50040100 	.word	0x50040100
 8002748:	50040300 	.word	0x50040300
 800274c:	50040200 	.word	0x50040200

08002750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <__NVIC_SetPriorityGrouping+0x44>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800276c:	4013      	ands	r3, r2
 800276e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002778:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800277c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002782:	4a04      	ldr	r2, [pc, #16]	; (8002794 <__NVIC_SetPriorityGrouping+0x44>)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	60d3      	str	r3, [r2, #12]
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800279c:	4b04      	ldr	r3, [pc, #16]	; (80027b0 <__NVIC_GetPriorityGrouping+0x18>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	0a1b      	lsrs	r3, r3, #8
 80027a2:	f003 0307 	and.w	r3, r3, #7
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	db0b      	blt.n	80027de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	f003 021f 	and.w	r2, r3, #31
 80027cc:	4907      	ldr	r1, [pc, #28]	; (80027ec <__NVIC_EnableIRQ+0x38>)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	2001      	movs	r0, #1
 80027d6:	fa00 f202 	lsl.w	r2, r0, r2
 80027da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	e000e100 	.word	0xe000e100

080027f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	6039      	str	r1, [r7, #0]
 80027fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002800:	2b00      	cmp	r3, #0
 8002802:	db0a      	blt.n	800281a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	b2da      	uxtb	r2, r3
 8002808:	490c      	ldr	r1, [pc, #48]	; (800283c <__NVIC_SetPriority+0x4c>)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	0112      	lsls	r2, r2, #4
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	440b      	add	r3, r1
 8002814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002818:	e00a      	b.n	8002830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4908      	ldr	r1, [pc, #32]	; (8002840 <__NVIC_SetPriority+0x50>)
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	3b04      	subs	r3, #4
 8002828:	0112      	lsls	r2, r2, #4
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	440b      	add	r3, r1
 800282e:	761a      	strb	r2, [r3, #24]
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000e100 	.word	0xe000e100
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002844:	b480      	push	{r7}
 8002846:	b089      	sub	sp, #36	; 0x24
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f1c3 0307 	rsb	r3, r3, #7
 800285e:	2b04      	cmp	r3, #4
 8002860:	bf28      	it	cs
 8002862:	2304      	movcs	r3, #4
 8002864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	3304      	adds	r3, #4
 800286a:	2b06      	cmp	r3, #6
 800286c:	d902      	bls.n	8002874 <NVIC_EncodePriority+0x30>
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3b03      	subs	r3, #3
 8002872:	e000      	b.n	8002876 <NVIC_EncodePriority+0x32>
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43da      	mvns	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	401a      	ands	r2, r3
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800288c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	fa01 f303 	lsl.w	r3, r1, r3
 8002896:	43d9      	mvns	r1, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800289c:	4313      	orrs	r3, r2
         );
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3724      	adds	r7, #36	; 0x24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028bc:	d301      	bcc.n	80028c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028be:	2301      	movs	r3, #1
 80028c0:	e00f      	b.n	80028e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028c2:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <SysTick_Config+0x40>)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ca:	210f      	movs	r1, #15
 80028cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028d0:	f7ff ff8e 	bl	80027f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <SysTick_Config+0x40>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028da:	4b04      	ldr	r3, [pc, #16]	; (80028ec <SysTick_Config+0x40>)
 80028dc:	2207      	movs	r2, #7
 80028de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	e000e010 	.word	0xe000e010

080028f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff ff29 	bl	8002750 <__NVIC_SetPriorityGrouping>
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b086      	sub	sp, #24
 800290a:	af00      	add	r7, sp, #0
 800290c:	4603      	mov	r3, r0
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
 8002912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002918:	f7ff ff3e 	bl	8002798 <__NVIC_GetPriorityGrouping>
 800291c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	6978      	ldr	r0, [r7, #20]
 8002924:	f7ff ff8e 	bl	8002844 <NVIC_EncodePriority>
 8002928:	4602      	mov	r2, r0
 800292a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800292e:	4611      	mov	r1, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff5d 	bl	80027f0 <__NVIC_SetPriority>
}
 8002936:	bf00      	nop
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	4603      	mov	r3, r0
 8002946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff ff31 	bl	80027b4 <__NVIC_EnableIRQ>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff ffa2 	bl	80028ac <SysTick_Config>
 8002968:	4603      	mov	r3, r0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002982:	e17f      	b.n	8002c84 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	2101      	movs	r1, #1
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	fa01 f303 	lsl.w	r3, r1, r3
 8002990:	4013      	ands	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 8171 	beq.w	8002c7e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d00b      	beq.n	80029bc <HAL_GPIO_Init+0x48>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d007      	beq.n	80029bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029b0:	2b11      	cmp	r3, #17
 80029b2:	d003      	beq.n	80029bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2b12      	cmp	r3, #18
 80029ba:	d130      	bne.n	8002a1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	2203      	movs	r2, #3
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4013      	ands	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029f2:	2201      	movs	r2, #1
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43db      	mvns	r3, r3
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4013      	ands	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	091b      	lsrs	r3, r3, #4
 8002a08:	f003 0201 	and.w	r2, r3, #1
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	d118      	bne.n	8002a5c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a30:	2201      	movs	r2, #1
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	08db      	lsrs	r3, r3, #3
 8002a46:	f003 0201 	and.w	r2, r3, #1
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	2203      	movs	r2, #3
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d003      	beq.n	8002a9c <HAL_GPIO_Init+0x128>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b12      	cmp	r3, #18
 8002a9a:	d123      	bne.n	8002ae4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	08da      	lsrs	r2, r3, #3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3208      	adds	r2, #8
 8002aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	220f      	movs	r2, #15
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4013      	ands	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	08da      	lsrs	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3208      	adds	r2, #8
 8002ade:	6939      	ldr	r1, [r7, #16]
 8002ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	2203      	movs	r2, #3
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4013      	ands	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 0203 	and.w	r2, r3, #3
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 80ac 	beq.w	8002c7e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b26:	4b5f      	ldr	r3, [pc, #380]	; (8002ca4 <HAL_GPIO_Init+0x330>)
 8002b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2a:	4a5e      	ldr	r2, [pc, #376]	; (8002ca4 <HAL_GPIO_Init+0x330>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	6613      	str	r3, [r2, #96]	; 0x60
 8002b32:	4b5c      	ldr	r3, [pc, #368]	; (8002ca4 <HAL_GPIO_Init+0x330>)
 8002b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	60bb      	str	r3, [r7, #8]
 8002b3c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b3e:	4a5a      	ldr	r2, [pc, #360]	; (8002ca8 <HAL_GPIO_Init+0x334>)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	089b      	lsrs	r3, r3, #2
 8002b44:	3302      	adds	r3, #2
 8002b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	220f      	movs	r2, #15
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b68:	d025      	beq.n	8002bb6 <HAL_GPIO_Init+0x242>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4f      	ldr	r2, [pc, #316]	; (8002cac <HAL_GPIO_Init+0x338>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d01f      	beq.n	8002bb2 <HAL_GPIO_Init+0x23e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4e      	ldr	r2, [pc, #312]	; (8002cb0 <HAL_GPIO_Init+0x33c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d019      	beq.n	8002bae <HAL_GPIO_Init+0x23a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a4d      	ldr	r2, [pc, #308]	; (8002cb4 <HAL_GPIO_Init+0x340>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d013      	beq.n	8002baa <HAL_GPIO_Init+0x236>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4c      	ldr	r2, [pc, #304]	; (8002cb8 <HAL_GPIO_Init+0x344>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00d      	beq.n	8002ba6 <HAL_GPIO_Init+0x232>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a4b      	ldr	r2, [pc, #300]	; (8002cbc <HAL_GPIO_Init+0x348>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d007      	beq.n	8002ba2 <HAL_GPIO_Init+0x22e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a4a      	ldr	r2, [pc, #296]	; (8002cc0 <HAL_GPIO_Init+0x34c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d101      	bne.n	8002b9e <HAL_GPIO_Init+0x22a>
 8002b9a:	2306      	movs	r3, #6
 8002b9c:	e00c      	b.n	8002bb8 <HAL_GPIO_Init+0x244>
 8002b9e:	2307      	movs	r3, #7
 8002ba0:	e00a      	b.n	8002bb8 <HAL_GPIO_Init+0x244>
 8002ba2:	2305      	movs	r3, #5
 8002ba4:	e008      	b.n	8002bb8 <HAL_GPIO_Init+0x244>
 8002ba6:	2304      	movs	r3, #4
 8002ba8:	e006      	b.n	8002bb8 <HAL_GPIO_Init+0x244>
 8002baa:	2303      	movs	r3, #3
 8002bac:	e004      	b.n	8002bb8 <HAL_GPIO_Init+0x244>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e002      	b.n	8002bb8 <HAL_GPIO_Init+0x244>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <HAL_GPIO_Init+0x244>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	f002 0203 	and.w	r2, r2, #3
 8002bbe:	0092      	lsls	r2, r2, #2
 8002bc0:	4093      	lsls	r3, r2
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bc8:	4937      	ldr	r1, [pc, #220]	; (8002ca8 <HAL_GPIO_Init+0x334>)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	3302      	adds	r3, #2
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002bd6:	4b3b      	ldr	r3, [pc, #236]	; (8002cc4 <HAL_GPIO_Init+0x350>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4013      	ands	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bfa:	4a32      	ldr	r2, [pc, #200]	; (8002cc4 <HAL_GPIO_Init+0x350>)
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002c00:	4b30      	ldr	r3, [pc, #192]	; (8002cc4 <HAL_GPIO_Init+0x350>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c24:	4a27      	ldr	r2, [pc, #156]	; (8002cc4 <HAL_GPIO_Init+0x350>)
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c2a:	4b26      	ldr	r3, [pc, #152]	; (8002cc4 <HAL_GPIO_Init+0x350>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4013      	ands	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c4e:	4a1d      	ldr	r2, [pc, #116]	; (8002cc4 <HAL_GPIO_Init+0x350>)
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c54:	4b1b      	ldr	r3, [pc, #108]	; (8002cc4 <HAL_GPIO_Init+0x350>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4013      	ands	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c78:	4a12      	ldr	r2, [pc, #72]	; (8002cc4 <HAL_GPIO_Init+0x350>)
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	3301      	adds	r3, #1
 8002c82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f47f ae78 	bne.w	8002984 <HAL_GPIO_Init+0x10>
  }
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
 8002c98:	371c      	adds	r7, #28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40010000 	.word	0x40010000
 8002cac:	48000400 	.word	0x48000400
 8002cb0:	48000800 	.word	0x48000800
 8002cb4:	48000c00 	.word	0x48000c00
 8002cb8:	48001000 	.word	0x48001000
 8002cbc:	48001400 	.word	0x48001400
 8002cc0:	48001800 	.word	0x48001800
 8002cc4:	40010400 	.word	0x40010400

08002cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	807b      	strh	r3, [r7, #2]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cd8:	787b      	ldrb	r3, [r7, #1]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cde:	887a      	ldrh	r2, [r7, #2]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ce4:	e002      	b.n	8002cec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ce6:	887a      	ldrh	r2, [r7, #2]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d0a:	887a      	ldrh	r2, [r7, #2]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	041a      	lsls	r2, r3, #16
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	43d9      	mvns	r1, r3
 8002d16:	887b      	ldrh	r3, [r7, #2]
 8002d18:	400b      	ands	r3, r1
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	619a      	str	r2, [r3, #24]
}
 8002d20:	bf00      	nop
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d36:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d38:	695a      	ldr	r2, [r3, #20]
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d006      	beq.n	8002d50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d42:	4a05      	ldr	r2, [pc, #20]	; (8002d58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d48:	88fb      	ldrh	r3, [r7, #6]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe faca 	bl	80012e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d50:	bf00      	nop
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40010400 	.word	0x40010400

08002d5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d60:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40007000 	.word	0x40007000

08002d78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d86:	d130      	bne.n	8002dea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d88:	4b23      	ldr	r3, [pc, #140]	; (8002e18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d94:	d038      	beq.n	8002e08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d96:	4b20      	ldr	r3, [pc, #128]	; (8002e18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d9e:	4a1e      	ldr	r2, [pc, #120]	; (8002e18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002da0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002da4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002da6:	4b1d      	ldr	r3, [pc, #116]	; (8002e1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2232      	movs	r2, #50	; 0x32
 8002dac:	fb02 f303 	mul.w	r3, r2, r3
 8002db0:	4a1b      	ldr	r2, [pc, #108]	; (8002e20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	0c9b      	lsrs	r3, r3, #18
 8002db8:	3301      	adds	r3, #1
 8002dba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dbc:	e002      	b.n	8002dc4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dc4:	4b14      	ldr	r3, [pc, #80]	; (8002e18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd0:	d102      	bne.n	8002dd8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1f2      	bne.n	8002dbe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dd8:	4b0f      	ldr	r3, [pc, #60]	; (8002e18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002de4:	d110      	bne.n	8002e08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e00f      	b.n	8002e0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dea:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df6:	d007      	beq.n	8002e08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002df8:	4b07      	ldr	r3, [pc, #28]	; (8002e18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e00:	4a05      	ldr	r2, [pc, #20]	; (8002e18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40007000 	.word	0x40007000
 8002e1c:	20000000 	.word	0x20000000
 8002e20:	431bde83 	.word	0x431bde83

08002e24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e3d4      	b.n	80035e0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e36:	4ba1      	ldr	r3, [pc, #644]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
 8002e3e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e40:	4b9e      	ldr	r3, [pc, #632]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0310 	and.w	r3, r3, #16
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 80e4 	beq.w	8003020 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d007      	beq.n	8002e6e <HAL_RCC_OscConfig+0x4a>
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	2b0c      	cmp	r3, #12
 8002e62:	f040 808b 	bne.w	8002f7c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	f040 8087 	bne.w	8002f7c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e6e:	4b93      	ldr	r3, [pc, #588]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d005      	beq.n	8002e86 <HAL_RCC_OscConfig+0x62>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e3ac      	b.n	80035e0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1a      	ldr	r2, [r3, #32]
 8002e8a:	4b8c      	ldr	r3, [pc, #560]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d004      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x7c>
 8002e96:	4b89      	ldr	r3, [pc, #548]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e9e:	e005      	b.n	8002eac <HAL_RCC_OscConfig+0x88>
 8002ea0:	4b86      	ldr	r3, [pc, #536]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ea6:	091b      	lsrs	r3, r3, #4
 8002ea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d223      	bcs.n	8002ef8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fd41 	bl	800393c <RCC_SetFlashLatencyFromMSIRange>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e38d      	b.n	80035e0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ec4:	4b7d      	ldr	r3, [pc, #500]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a7c      	ldr	r2, [pc, #496]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002eca:	f043 0308 	orr.w	r3, r3, #8
 8002ece:	6013      	str	r3, [r2, #0]
 8002ed0:	4b7a      	ldr	r3, [pc, #488]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	4977      	ldr	r1, [pc, #476]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ee2:	4b76      	ldr	r3, [pc, #472]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	021b      	lsls	r3, r3, #8
 8002ef0:	4972      	ldr	r1, [pc, #456]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	604b      	str	r3, [r1, #4]
 8002ef6:	e025      	b.n	8002f44 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ef8:	4b70      	ldr	r3, [pc, #448]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a6f      	ldr	r2, [pc, #444]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002efe:	f043 0308 	orr.w	r3, r3, #8
 8002f02:	6013      	str	r3, [r2, #0]
 8002f04:	4b6d      	ldr	r3, [pc, #436]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	496a      	ldr	r1, [pc, #424]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f16:	4b69      	ldr	r3, [pc, #420]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	021b      	lsls	r3, r3, #8
 8002f24:	4965      	ldr	r1, [pc, #404]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d109      	bne.n	8002f44 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 fd01 	bl	800393c <RCC_SetFlashLatencyFromMSIRange>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e34d      	b.n	80035e0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f44:	f000 fc36 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	4b5c      	ldr	r3, [pc, #368]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	091b      	lsrs	r3, r3, #4
 8002f50:	f003 030f 	and.w	r3, r3, #15
 8002f54:	495a      	ldr	r1, [pc, #360]	; (80030c0 <HAL_RCC_OscConfig+0x29c>)
 8002f56:	5ccb      	ldrb	r3, [r1, r3]
 8002f58:	f003 031f 	and.w	r3, r3, #31
 8002f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f60:	4a58      	ldr	r2, [pc, #352]	; (80030c4 <HAL_RCC_OscConfig+0x2a0>)
 8002f62:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f64:	4b58      	ldr	r3, [pc, #352]	; (80030c8 <HAL_RCC_OscConfig+0x2a4>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fe fbc9 	bl	8001700 <HAL_InitTick>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d052      	beq.n	800301e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
 8002f7a:	e331      	b.n	80035e0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d032      	beq.n	8002fea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f84:	4b4d      	ldr	r3, [pc, #308]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a4c      	ldr	r2, [pc, #304]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f90:	f7fe fc06 	bl	80017a0 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f98:	f7fe fc02 	bl	80017a0 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e31a      	b.n	80035e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002faa:	4b44      	ldr	r3, [pc, #272]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f0      	beq.n	8002f98 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fb6:	4b41      	ldr	r3, [pc, #260]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a40      	ldr	r2, [pc, #256]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002fbc:	f043 0308 	orr.w	r3, r3, #8
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	4b3e      	ldr	r3, [pc, #248]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	493b      	ldr	r1, [pc, #236]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fd4:	4b39      	ldr	r3, [pc, #228]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	021b      	lsls	r3, r3, #8
 8002fe2:	4936      	ldr	r1, [pc, #216]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]
 8002fe8:	e01a      	b.n	8003020 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fea:	4b34      	ldr	r3, [pc, #208]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a33      	ldr	r2, [pc, #204]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8002ff0:	f023 0301 	bic.w	r3, r3, #1
 8002ff4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ff6:	f7fe fbd3 	bl	80017a0 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ffe:	f7fe fbcf 	bl	80017a0 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e2e7      	b.n	80035e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003010:	4b2a      	ldr	r3, [pc, #168]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1f0      	bne.n	8002ffe <HAL_RCC_OscConfig+0x1da>
 800301c:	e000      	b.n	8003020 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800301e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d074      	beq.n	8003116 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	2b08      	cmp	r3, #8
 8003030:	d005      	beq.n	800303e <HAL_RCC_OscConfig+0x21a>
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	2b0c      	cmp	r3, #12
 8003036:	d10e      	bne.n	8003056 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2b03      	cmp	r3, #3
 800303c:	d10b      	bne.n	8003056 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800303e:	4b1f      	ldr	r3, [pc, #124]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d064      	beq.n	8003114 <HAL_RCC_OscConfig+0x2f0>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d160      	bne.n	8003114 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e2c4      	b.n	80035e0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800305e:	d106      	bne.n	800306e <HAL_RCC_OscConfig+0x24a>
 8003060:	4b16      	ldr	r3, [pc, #88]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a15      	ldr	r2, [pc, #84]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8003066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800306a:	6013      	str	r3, [r2, #0]
 800306c:	e01d      	b.n	80030aa <HAL_RCC_OscConfig+0x286>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003076:	d10c      	bne.n	8003092 <HAL_RCC_OscConfig+0x26e>
 8003078:	4b10      	ldr	r3, [pc, #64]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a0f      	ldr	r2, [pc, #60]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 800307e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	4b0d      	ldr	r3, [pc, #52]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a0c      	ldr	r2, [pc, #48]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 800308a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	e00b      	b.n	80030aa <HAL_RCC_OscConfig+0x286>
 8003092:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a09      	ldr	r2, [pc, #36]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 8003098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	4b07      	ldr	r3, [pc, #28]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a06      	ldr	r2, [pc, #24]	; (80030bc <HAL_RCC_OscConfig+0x298>)
 80030a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d01c      	beq.n	80030ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b2:	f7fe fb75 	bl	80017a0 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030b8:	e011      	b.n	80030de <HAL_RCC_OscConfig+0x2ba>
 80030ba:	bf00      	nop
 80030bc:	40021000 	.word	0x40021000
 80030c0:	08005b28 	.word	0x08005b28
 80030c4:	20000000 	.word	0x20000000
 80030c8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030cc:	f7fe fb68 	bl	80017a0 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	; 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e280      	b.n	80035e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030de:	4baf      	ldr	r3, [pc, #700]	; (800339c <HAL_RCC_OscConfig+0x578>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0x2a8>
 80030ea:	e014      	b.n	8003116 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ec:	f7fe fb58 	bl	80017a0 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f4:	f7fe fb54 	bl	80017a0 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	; 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e26c      	b.n	80035e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003106:	4ba5      	ldr	r3, [pc, #660]	; (800339c <HAL_RCC_OscConfig+0x578>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x2d0>
 8003112:	e000      	b.n	8003116 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d060      	beq.n	80031e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	2b04      	cmp	r3, #4
 8003126:	d005      	beq.n	8003134 <HAL_RCC_OscConfig+0x310>
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	2b0c      	cmp	r3, #12
 800312c:	d119      	bne.n	8003162 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2b02      	cmp	r3, #2
 8003132:	d116      	bne.n	8003162 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003134:	4b99      	ldr	r3, [pc, #612]	; (800339c <HAL_RCC_OscConfig+0x578>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_RCC_OscConfig+0x328>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e249      	b.n	80035e0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314c:	4b93      	ldr	r3, [pc, #588]	; (800339c <HAL_RCC_OscConfig+0x578>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	061b      	lsls	r3, r3, #24
 800315a:	4990      	ldr	r1, [pc, #576]	; (800339c <HAL_RCC_OscConfig+0x578>)
 800315c:	4313      	orrs	r3, r2
 800315e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003160:	e040      	b.n	80031e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d023      	beq.n	80031b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800316a:	4b8c      	ldr	r3, [pc, #560]	; (800339c <HAL_RCC_OscConfig+0x578>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a8b      	ldr	r2, [pc, #556]	; (800339c <HAL_RCC_OscConfig+0x578>)
 8003170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003176:	f7fe fb13 	bl	80017a0 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800317e:	f7fe fb0f 	bl	80017a0 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e227      	b.n	80035e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003190:	4b82      	ldr	r3, [pc, #520]	; (800339c <HAL_RCC_OscConfig+0x578>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319c:	4b7f      	ldr	r3, [pc, #508]	; (800339c <HAL_RCC_OscConfig+0x578>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	061b      	lsls	r3, r3, #24
 80031aa:	497c      	ldr	r1, [pc, #496]	; (800339c <HAL_RCC_OscConfig+0x578>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	604b      	str	r3, [r1, #4]
 80031b0:	e018      	b.n	80031e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031b2:	4b7a      	ldr	r3, [pc, #488]	; (800339c <HAL_RCC_OscConfig+0x578>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a79      	ldr	r2, [pc, #484]	; (800339c <HAL_RCC_OscConfig+0x578>)
 80031b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031be:	f7fe faef 	bl	80017a0 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c6:	f7fe faeb 	bl	80017a0 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e203      	b.n	80035e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031d8:	4b70      	ldr	r3, [pc, #448]	; (800339c <HAL_RCC_OscConfig+0x578>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f0      	bne.n	80031c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d03c      	beq.n	800326a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d01c      	beq.n	8003232 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031f8:	4b68      	ldr	r3, [pc, #416]	; (800339c <HAL_RCC_OscConfig+0x578>)
 80031fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031fe:	4a67      	ldr	r2, [pc, #412]	; (800339c <HAL_RCC_OscConfig+0x578>)
 8003200:	f043 0301 	orr.w	r3, r3, #1
 8003204:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003208:	f7fe faca 	bl	80017a0 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003210:	f7fe fac6 	bl	80017a0 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e1de      	b.n	80035e0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003222:	4b5e      	ldr	r3, [pc, #376]	; (800339c <HAL_RCC_OscConfig+0x578>)
 8003224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0ef      	beq.n	8003210 <HAL_RCC_OscConfig+0x3ec>
 8003230:	e01b      	b.n	800326a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003232:	4b5a      	ldr	r3, [pc, #360]	; (800339c <HAL_RCC_OscConfig+0x578>)
 8003234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003238:	4a58      	ldr	r2, [pc, #352]	; (800339c <HAL_RCC_OscConfig+0x578>)
 800323a:	f023 0301 	bic.w	r3, r3, #1
 800323e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003242:	f7fe faad 	bl	80017a0 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800324a:	f7fe faa9 	bl	80017a0 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e1c1      	b.n	80035e0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800325c:	4b4f      	ldr	r3, [pc, #316]	; (800339c <HAL_RCC_OscConfig+0x578>)
 800325e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1ef      	bne.n	800324a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 80a6 	beq.w	80033c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003278:	2300      	movs	r3, #0
 800327a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800327c:	4b47      	ldr	r3, [pc, #284]	; (800339c <HAL_RCC_OscConfig+0x578>)
 800327e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10d      	bne.n	80032a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003288:	4b44      	ldr	r3, [pc, #272]	; (800339c <HAL_RCC_OscConfig+0x578>)
 800328a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328c:	4a43      	ldr	r2, [pc, #268]	; (800339c <HAL_RCC_OscConfig+0x578>)
 800328e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003292:	6593      	str	r3, [r2, #88]	; 0x58
 8003294:	4b41      	ldr	r3, [pc, #260]	; (800339c <HAL_RCC_OscConfig+0x578>)
 8003296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032a0:	2301      	movs	r3, #1
 80032a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032a4:	4b3e      	ldr	r3, [pc, #248]	; (80033a0 <HAL_RCC_OscConfig+0x57c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d118      	bne.n	80032e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032b0:	4b3b      	ldr	r3, [pc, #236]	; (80033a0 <HAL_RCC_OscConfig+0x57c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a3a      	ldr	r2, [pc, #232]	; (80033a0 <HAL_RCC_OscConfig+0x57c>)
 80032b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032bc:	f7fe fa70 	bl	80017a0 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c4:	f7fe fa6c 	bl	80017a0 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e184      	b.n	80035e0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032d6:	4b32      	ldr	r3, [pc, #200]	; (80033a0 <HAL_RCC_OscConfig+0x57c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d108      	bne.n	80032fc <HAL_RCC_OscConfig+0x4d8>
 80032ea:	4b2c      	ldr	r3, [pc, #176]	; (800339c <HAL_RCC_OscConfig+0x578>)
 80032ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f0:	4a2a      	ldr	r2, [pc, #168]	; (800339c <HAL_RCC_OscConfig+0x578>)
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032fa:	e024      	b.n	8003346 <HAL_RCC_OscConfig+0x522>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b05      	cmp	r3, #5
 8003302:	d110      	bne.n	8003326 <HAL_RCC_OscConfig+0x502>
 8003304:	4b25      	ldr	r3, [pc, #148]	; (800339c <HAL_RCC_OscConfig+0x578>)
 8003306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330a:	4a24      	ldr	r2, [pc, #144]	; (800339c <HAL_RCC_OscConfig+0x578>)
 800330c:	f043 0304 	orr.w	r3, r3, #4
 8003310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003314:	4b21      	ldr	r3, [pc, #132]	; (800339c <HAL_RCC_OscConfig+0x578>)
 8003316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331a:	4a20      	ldr	r2, [pc, #128]	; (800339c <HAL_RCC_OscConfig+0x578>)
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003324:	e00f      	b.n	8003346 <HAL_RCC_OscConfig+0x522>
 8003326:	4b1d      	ldr	r3, [pc, #116]	; (800339c <HAL_RCC_OscConfig+0x578>)
 8003328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332c:	4a1b      	ldr	r2, [pc, #108]	; (800339c <HAL_RCC_OscConfig+0x578>)
 800332e:	f023 0301 	bic.w	r3, r3, #1
 8003332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003336:	4b19      	ldr	r3, [pc, #100]	; (800339c <HAL_RCC_OscConfig+0x578>)
 8003338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333c:	4a17      	ldr	r2, [pc, #92]	; (800339c <HAL_RCC_OscConfig+0x578>)
 800333e:	f023 0304 	bic.w	r3, r3, #4
 8003342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d016      	beq.n	800337c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334e:	f7fe fa27 	bl	80017a0 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003354:	e00a      	b.n	800336c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003356:	f7fe fa23 	bl	80017a0 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	f241 3288 	movw	r2, #5000	; 0x1388
 8003364:	4293      	cmp	r3, r2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e139      	b.n	80035e0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCC_OscConfig+0x578>)
 800336e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0ed      	beq.n	8003356 <HAL_RCC_OscConfig+0x532>
 800337a:	e01a      	b.n	80033b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337c:	f7fe fa10 	bl	80017a0 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003382:	e00f      	b.n	80033a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003384:	f7fe fa0c 	bl	80017a0 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003392:	4293      	cmp	r3, r2
 8003394:	d906      	bls.n	80033a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e122      	b.n	80035e0 <HAL_RCC_OscConfig+0x7bc>
 800339a:	bf00      	nop
 800339c:	40021000 	.word	0x40021000
 80033a0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033a4:	4b90      	ldr	r3, [pc, #576]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1e8      	bne.n	8003384 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033b2:	7ffb      	ldrb	r3, [r7, #31]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d105      	bne.n	80033c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b8:	4b8b      	ldr	r3, [pc, #556]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 80033ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033bc:	4a8a      	ldr	r2, [pc, #552]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 80033be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033c2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 8108 	beq.w	80035de <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	f040 80d0 	bne.w	8003578 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033d8:	4b83      	ldr	r3, [pc, #524]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f003 0203 	and.w	r2, r3, #3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d130      	bne.n	800344e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	3b01      	subs	r3, #1
 80033f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d127      	bne.n	800344e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003408:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800340a:	429a      	cmp	r2, r3
 800340c:	d11f      	bne.n	800344e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003418:	2a07      	cmp	r2, #7
 800341a:	bf14      	ite	ne
 800341c:	2201      	movne	r2, #1
 800341e:	2200      	moveq	r2, #0
 8003420:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003422:	4293      	cmp	r3, r2
 8003424:	d113      	bne.n	800344e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003430:	085b      	lsrs	r3, r3, #1
 8003432:	3b01      	subs	r3, #1
 8003434:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003436:	429a      	cmp	r2, r3
 8003438:	d109      	bne.n	800344e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	085b      	lsrs	r3, r3, #1
 8003446:	3b01      	subs	r3, #1
 8003448:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800344a:	429a      	cmp	r2, r3
 800344c:	d06e      	beq.n	800352c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	2b0c      	cmp	r3, #12
 8003452:	d069      	beq.n	8003528 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003454:	4b64      	ldr	r3, [pc, #400]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d105      	bne.n	800346c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003460:	4b61      	ldr	r3, [pc, #388]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0b7      	b.n	80035e0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003470:	4b5d      	ldr	r3, [pc, #372]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a5c      	ldr	r2, [pc, #368]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 8003476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800347a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800347c:	f7fe f990 	bl	80017a0 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003484:	f7fe f98c 	bl	80017a0 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e0a4      	b.n	80035e0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003496:	4b54      	ldr	r3, [pc, #336]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034a2:	4b51      	ldr	r3, [pc, #324]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	4b51      	ldr	r3, [pc, #324]	; (80035ec <HAL_RCC_OscConfig+0x7c8>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80034b2:	3a01      	subs	r2, #1
 80034b4:	0112      	lsls	r2, r2, #4
 80034b6:	4311      	orrs	r1, r2
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034bc:	0212      	lsls	r2, r2, #8
 80034be:	4311      	orrs	r1, r2
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034c4:	0852      	lsrs	r2, r2, #1
 80034c6:	3a01      	subs	r2, #1
 80034c8:	0552      	lsls	r2, r2, #21
 80034ca:	4311      	orrs	r1, r2
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034d0:	0852      	lsrs	r2, r2, #1
 80034d2:	3a01      	subs	r2, #1
 80034d4:	0652      	lsls	r2, r2, #25
 80034d6:	4311      	orrs	r1, r2
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034dc:	0912      	lsrs	r2, r2, #4
 80034de:	0452      	lsls	r2, r2, #17
 80034e0:	430a      	orrs	r2, r1
 80034e2:	4941      	ldr	r1, [pc, #260]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034e8:	4b3f      	ldr	r3, [pc, #252]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a3e      	ldr	r2, [pc, #248]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 80034ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034f4:	4b3c      	ldr	r3, [pc, #240]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4a3b      	ldr	r2, [pc, #236]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 80034fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003500:	f7fe f94e 	bl	80017a0 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003508:	f7fe f94a 	bl	80017a0 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e062      	b.n	80035e0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800351a:	4b33      	ldr	r3, [pc, #204]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003526:	e05a      	b.n	80035de <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e059      	b.n	80035e0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800352c:	4b2e      	ldr	r3, [pc, #184]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d152      	bne.n	80035de <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003538:	4b2b      	ldr	r3, [pc, #172]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a2a      	ldr	r2, [pc, #168]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 800353e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003542:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003544:	4b28      	ldr	r3, [pc, #160]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4a27      	ldr	r2, [pc, #156]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 800354a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800354e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003550:	f7fe f926 	bl	80017a0 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003558:	f7fe f922 	bl	80017a0 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e03a      	b.n	80035e0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800356a:	4b1f      	ldr	r3, [pc, #124]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f0      	beq.n	8003558 <HAL_RCC_OscConfig+0x734>
 8003576:	e032      	b.n	80035de <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	2b0c      	cmp	r3, #12
 800357c:	d02d      	beq.n	80035da <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357e:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a19      	ldr	r2, [pc, #100]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 8003584:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003588:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800358a:	4b17      	ldr	r3, [pc, #92]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d105      	bne.n	80035a2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003596:	4b14      	ldr	r3, [pc, #80]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	4a13      	ldr	r2, [pc, #76]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 800359c:	f023 0303 	bic.w	r3, r3, #3
 80035a0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80035a2:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	4a10      	ldr	r2, [pc, #64]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 80035a8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80035ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b2:	f7fe f8f5 	bl	80017a0 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ba:	f7fe f8f1 	bl	80017a0 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e009      	b.n	80035e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035cc:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <HAL_RCC_OscConfig+0x7c4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1f0      	bne.n	80035ba <HAL_RCC_OscConfig+0x796>
 80035d8:	e001      	b.n	80035de <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3720      	adds	r7, #32
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40021000 	.word	0x40021000
 80035ec:	f99d808c 	.word	0xf99d808c

080035f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0c8      	b.n	8003796 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003604:	4b66      	ldr	r3, [pc, #408]	; (80037a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d910      	bls.n	8003634 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003612:	4b63      	ldr	r3, [pc, #396]	; (80037a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f023 0207 	bic.w	r2, r3, #7
 800361a:	4961      	ldr	r1, [pc, #388]	; (80037a0 <HAL_RCC_ClockConfig+0x1b0>)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	4313      	orrs	r3, r2
 8003620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003622:	4b5f      	ldr	r3, [pc, #380]	; (80037a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d001      	beq.n	8003634 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e0b0      	b.n	8003796 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d04c      	beq.n	80036da <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b03      	cmp	r3, #3
 8003646:	d107      	bne.n	8003658 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003648:	4b56      	ldr	r3, [pc, #344]	; (80037a4 <HAL_RCC_ClockConfig+0x1b4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d121      	bne.n	8003698 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e09e      	b.n	8003796 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d107      	bne.n	8003670 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003660:	4b50      	ldr	r3, [pc, #320]	; (80037a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d115      	bne.n	8003698 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e092      	b.n	8003796 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d107      	bne.n	8003688 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003678:	4b4a      	ldr	r3, [pc, #296]	; (80037a4 <HAL_RCC_ClockConfig+0x1b4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d109      	bne.n	8003698 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e086      	b.n	8003796 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003688:	4b46      	ldr	r3, [pc, #280]	; (80037a4 <HAL_RCC_ClockConfig+0x1b4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e07e      	b.n	8003796 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003698:	4b42      	ldr	r3, [pc, #264]	; (80037a4 <HAL_RCC_ClockConfig+0x1b4>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f023 0203 	bic.w	r2, r3, #3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	493f      	ldr	r1, [pc, #252]	; (80037a4 <HAL_RCC_ClockConfig+0x1b4>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036aa:	f7fe f879 	bl	80017a0 <HAL_GetTick>
 80036ae:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b0:	e00a      	b.n	80036c8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b2:	f7fe f875 	bl	80017a0 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e066      	b.n	8003796 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c8:	4b36      	ldr	r3, [pc, #216]	; (80037a4 <HAL_RCC_ClockConfig+0x1b4>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 020c 	and.w	r2, r3, #12
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d1eb      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d008      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e6:	4b2f      	ldr	r3, [pc, #188]	; (80037a4 <HAL_RCC_ClockConfig+0x1b4>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	492c      	ldr	r1, [pc, #176]	; (80037a4 <HAL_RCC_ClockConfig+0x1b4>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036f8:	4b29      	ldr	r3, [pc, #164]	; (80037a0 <HAL_RCC_ClockConfig+0x1b0>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d210      	bcs.n	8003728 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003706:	4b26      	ldr	r3, [pc, #152]	; (80037a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f023 0207 	bic.w	r2, r3, #7
 800370e:	4924      	ldr	r1, [pc, #144]	; (80037a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	4313      	orrs	r3, r2
 8003714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003716:	4b22      	ldr	r3, [pc, #136]	; (80037a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d001      	beq.n	8003728 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e036      	b.n	8003796 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003734:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	4918      	ldr	r1, [pc, #96]	; (80037a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003742:	4313      	orrs	r3, r2
 8003744:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d009      	beq.n	8003766 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003752:	4b14      	ldr	r3, [pc, #80]	; (80037a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4910      	ldr	r1, [pc, #64]	; (80037a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003762:	4313      	orrs	r3, r2
 8003764:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003766:	f000 f825 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 800376a:	4602      	mov	r2, r0
 800376c:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <HAL_RCC_ClockConfig+0x1b4>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	490c      	ldr	r1, [pc, #48]	; (80037a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003778:	5ccb      	ldrb	r3, [r1, r3]
 800377a:	f003 031f 	and.w	r3, r3, #31
 800377e:	fa22 f303 	lsr.w	r3, r2, r3
 8003782:	4a0a      	ldr	r2, [pc, #40]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003786:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f7fd ffb8 	bl	8001700 <HAL_InitTick>
 8003790:	4603      	mov	r3, r0
 8003792:	72fb      	strb	r3, [r7, #11]

  return status;
 8003794:	7afb      	ldrb	r3, [r7, #11]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40022000 	.word	0x40022000
 80037a4:	40021000 	.word	0x40021000
 80037a8:	08005b28 	.word	0x08005b28
 80037ac:	20000000 	.word	0x20000000
 80037b0:	20000004 	.word	0x20000004

080037b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b089      	sub	sp, #36	; 0x24
 80037b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	2300      	movs	r3, #0
 80037c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037c2:	4b3e      	ldr	r3, [pc, #248]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 030c 	and.w	r3, r3, #12
 80037ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037cc:	4b3b      	ldr	r3, [pc, #236]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0303 	and.w	r3, r3, #3
 80037d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_RCC_GetSysClockFreq+0x34>
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	2b0c      	cmp	r3, #12
 80037e0:	d121      	bne.n	8003826 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d11e      	bne.n	8003826 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037e8:	4b34      	ldr	r3, [pc, #208]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d107      	bne.n	8003804 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037f4:	4b31      	ldr	r3, [pc, #196]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 80037f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037fa:	0a1b      	lsrs	r3, r3, #8
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	61fb      	str	r3, [r7, #28]
 8003802:	e005      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003804:	4b2d      	ldr	r3, [pc, #180]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	091b      	lsrs	r3, r3, #4
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003810:	4a2b      	ldr	r2, [pc, #172]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003818:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10d      	bne.n	800383c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003824:	e00a      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2b04      	cmp	r3, #4
 800382a:	d102      	bne.n	8003832 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800382c:	4b25      	ldr	r3, [pc, #148]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800382e:	61bb      	str	r3, [r7, #24]
 8003830:	e004      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	2b08      	cmp	r3, #8
 8003836:	d101      	bne.n	800383c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003838:	4b23      	ldr	r3, [pc, #140]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800383a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	2b0c      	cmp	r3, #12
 8003840:	d134      	bne.n	80038ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003842:	4b1e      	ldr	r3, [pc, #120]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b02      	cmp	r3, #2
 8003850:	d003      	beq.n	800385a <HAL_RCC_GetSysClockFreq+0xa6>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b03      	cmp	r3, #3
 8003856:	d003      	beq.n	8003860 <HAL_RCC_GetSysClockFreq+0xac>
 8003858:	e005      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800385a:	4b1a      	ldr	r3, [pc, #104]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800385c:	617b      	str	r3, [r7, #20]
      break;
 800385e:	e005      	b.n	800386c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003860:	4b19      	ldr	r3, [pc, #100]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003862:	617b      	str	r3, [r7, #20]
      break;
 8003864:	e002      	b.n	800386c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	617b      	str	r3, [r7, #20]
      break;
 800386a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800386c:	4b13      	ldr	r3, [pc, #76]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	091b      	lsrs	r3, r3, #4
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	3301      	adds	r3, #1
 8003878:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800387a:	4b10      	ldr	r3, [pc, #64]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	0a1b      	lsrs	r3, r3, #8
 8003880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	fb02 f203 	mul.w	r2, r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003890:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003892:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	0e5b      	lsrs	r3, r3, #25
 8003898:	f003 0303 	and.w	r3, r3, #3
 800389c:	3301      	adds	r3, #1
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038ac:	69bb      	ldr	r3, [r7, #24]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3724      	adds	r7, #36	; 0x24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40021000 	.word	0x40021000
 80038c0:	08005b40 	.word	0x08005b40
 80038c4:	00f42400 	.word	0x00f42400
 80038c8:	007a1200 	.word	0x007a1200

080038cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038d0:	4b03      	ldr	r3, [pc, #12]	; (80038e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038d2:	681b      	ldr	r3, [r3, #0]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	20000000 	.word	0x20000000

080038e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038e8:	f7ff fff0 	bl	80038cc <HAL_RCC_GetHCLKFreq>
 80038ec:	4602      	mov	r2, r0
 80038ee:	4b06      	ldr	r3, [pc, #24]	; (8003908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	0a1b      	lsrs	r3, r3, #8
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	4904      	ldr	r1, [pc, #16]	; (800390c <HAL_RCC_GetPCLK1Freq+0x28>)
 80038fa:	5ccb      	ldrb	r3, [r1, r3]
 80038fc:	f003 031f 	and.w	r3, r3, #31
 8003900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003904:	4618      	mov	r0, r3
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40021000 	.word	0x40021000
 800390c:	08005b38 	.word	0x08005b38

08003910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003914:	f7ff ffda 	bl	80038cc <HAL_RCC_GetHCLKFreq>
 8003918:	4602      	mov	r2, r0
 800391a:	4b06      	ldr	r3, [pc, #24]	; (8003934 <HAL_RCC_GetPCLK2Freq+0x24>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	0adb      	lsrs	r3, r3, #11
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	4904      	ldr	r1, [pc, #16]	; (8003938 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003926:	5ccb      	ldrb	r3, [r1, r3]
 8003928:	f003 031f 	and.w	r3, r3, #31
 800392c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003930:	4618      	mov	r0, r3
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40021000 	.word	0x40021000
 8003938:	08005b38 	.word	0x08005b38

0800393c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003944:	2300      	movs	r3, #0
 8003946:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003948:	4b2a      	ldr	r3, [pc, #168]	; (80039f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800394a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003954:	f7ff fa02 	bl	8002d5c <HAL_PWREx_GetVoltageRange>
 8003958:	6178      	str	r0, [r7, #20]
 800395a:	e014      	b.n	8003986 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800395c:	4b25      	ldr	r3, [pc, #148]	; (80039f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800395e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003960:	4a24      	ldr	r2, [pc, #144]	; (80039f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003966:	6593      	str	r3, [r2, #88]	; 0x58
 8003968:	4b22      	ldr	r3, [pc, #136]	; (80039f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800396a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003974:	f7ff f9f2 	bl	8002d5c <HAL_PWREx_GetVoltageRange>
 8003978:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800397a:	4b1e      	ldr	r3, [pc, #120]	; (80039f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800397c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397e:	4a1d      	ldr	r2, [pc, #116]	; (80039f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003984:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800398c:	d10b      	bne.n	80039a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b80      	cmp	r3, #128	; 0x80
 8003992:	d919      	bls.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2ba0      	cmp	r3, #160	; 0xa0
 8003998:	d902      	bls.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800399a:	2302      	movs	r3, #2
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	e013      	b.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039a0:	2301      	movs	r3, #1
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	e010      	b.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b80      	cmp	r3, #128	; 0x80
 80039aa:	d902      	bls.n	80039b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80039ac:	2303      	movs	r3, #3
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	e00a      	b.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b80      	cmp	r3, #128	; 0x80
 80039b6:	d102      	bne.n	80039be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039b8:	2302      	movs	r3, #2
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	e004      	b.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b70      	cmp	r3, #112	; 0x70
 80039c2:	d101      	bne.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039c4:	2301      	movs	r3, #1
 80039c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f023 0207 	bic.w	r2, r3, #7
 80039d0:	4909      	ldr	r1, [pc, #36]	; (80039f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039d8:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d001      	beq.n	80039ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40022000 	.word	0x40022000

080039fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a04:	2300      	movs	r3, #0
 8003a06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a08:	2300      	movs	r3, #0
 8003a0a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d041      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a20:	d02a      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003a22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a26:	d824      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a2c:	d008      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a32:	d81e      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003a38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a3c:	d010      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a3e:	e018      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a40:	4b86      	ldr	r3, [pc, #536]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4a85      	ldr	r2, [pc, #532]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a4a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a4c:	e015      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3304      	adds	r3, #4
 8003a52:	2100      	movs	r1, #0
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 fabb 	bl	8003fd0 <RCCEx_PLLSAI1_Config>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a5e:	e00c      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3320      	adds	r3, #32
 8003a64:	2100      	movs	r1, #0
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 fba6 	bl	80041b8 <RCCEx_PLLSAI2_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a70:	e003      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	74fb      	strb	r3, [r7, #19]
      break;
 8003a76:	e000      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a7a:	7cfb      	ldrb	r3, [r7, #19]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10b      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a80:	4b76      	ldr	r3, [pc, #472]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a8e:	4973      	ldr	r1, [pc, #460]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a96:	e001      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a98:	7cfb      	ldrb	r3, [r7, #19]
 8003a9a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d041      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ab0:	d02a      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003ab2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ab6:	d824      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ab8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003abc:	d008      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003abe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ac2:	d81e      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003acc:	d010      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ace:	e018      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ad0:	4b62      	ldr	r3, [pc, #392]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	4a61      	ldr	r2, [pc, #388]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ada:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003adc:	e015      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fa73 	bl	8003fd0 <RCCEx_PLLSAI1_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003aee:	e00c      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3320      	adds	r3, #32
 8003af4:	2100      	movs	r1, #0
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 fb5e 	bl	80041b8 <RCCEx_PLLSAI2_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b00:	e003      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	74fb      	strb	r3, [r7, #19]
      break;
 8003b06:	e000      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003b08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b0a:	7cfb      	ldrb	r3, [r7, #19]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10b      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b10:	4b52      	ldr	r3, [pc, #328]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b16:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b1e:	494f      	ldr	r1, [pc, #316]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b26:	e001      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b28:	7cfb      	ldrb	r3, [r7, #19]
 8003b2a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 80a0 	beq.w	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b3e:	4b47      	ldr	r3, [pc, #284]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00d      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b54:	4b41      	ldr	r3, [pc, #260]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b58:	4a40      	ldr	r2, [pc, #256]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b60:	4b3e      	ldr	r3, [pc, #248]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b70:	4b3b      	ldr	r3, [pc, #236]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a3a      	ldr	r2, [pc, #232]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b7c:	f7fd fe10 	bl	80017a0 <HAL_GetTick>
 8003b80:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b82:	e009      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b84:	f7fd fe0c 	bl	80017a0 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d902      	bls.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	74fb      	strb	r3, [r7, #19]
        break;
 8003b96:	e005      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b98:	4b31      	ldr	r3, [pc, #196]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0ef      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003ba4:	7cfb      	ldrb	r3, [r7, #19]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d15c      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003baa:	4b2c      	ldr	r3, [pc, #176]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d01f      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d019      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bc8:	4b24      	ldr	r3, [pc, #144]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bd4:	4b21      	ldr	r3, [pc, #132]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bda:	4a20      	ldr	r2, [pc, #128]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003be4:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bea:	4a1c      	ldr	r2, [pc, #112]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bf4:	4a19      	ldr	r2, [pc, #100]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d016      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c06:	f7fd fdcb 	bl	80017a0 <HAL_GetTick>
 8003c0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c0c:	e00b      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0e:	f7fd fdc7 	bl	80017a0 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d902      	bls.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	74fb      	strb	r3, [r7, #19]
            break;
 8003c24:	e006      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c26:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0ec      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003c34:	7cfb      	ldrb	r3, [r7, #19]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10c      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c3a:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c4a:	4904      	ldr	r1, [pc, #16]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c52:	e009      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c54:	7cfb      	ldrb	r3, [r7, #19]
 8003c56:	74bb      	strb	r3, [r7, #18]
 8003c58:	e006      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003c5a:	bf00      	nop
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c64:	7cfb      	ldrb	r3, [r7, #19]
 8003c66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c68:	7c7b      	ldrb	r3, [r7, #17]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d105      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c6e:	4b9e      	ldr	r3, [pc, #632]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c72:	4a9d      	ldr	r2, [pc, #628]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c86:	4b98      	ldr	r3, [pc, #608]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8c:	f023 0203 	bic.w	r2, r3, #3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	4994      	ldr	r1, [pc, #592]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00a      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ca8:	4b8f      	ldr	r3, [pc, #572]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cae:	f023 020c 	bic.w	r2, r3, #12
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb6:	498c      	ldr	r1, [pc, #560]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cca:	4b87      	ldr	r3, [pc, #540]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	4983      	ldr	r1, [pc, #524]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00a      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cec:	4b7e      	ldr	r3, [pc, #504]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfa:	497b      	ldr	r1, [pc, #492]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0310 	and.w	r3, r3, #16
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d0e:	4b76      	ldr	r3, [pc, #472]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d1c:	4972      	ldr	r1, [pc, #456]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d30:	4b6d      	ldr	r3, [pc, #436]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d3e:	496a      	ldr	r1, [pc, #424]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d52:	4b65      	ldr	r3, [pc, #404]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d60:	4961      	ldr	r1, [pc, #388]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d74:	4b5c      	ldr	r3, [pc, #368]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d82:	4959      	ldr	r1, [pc, #356]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d96:	4b54      	ldr	r3, [pc, #336]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da4:	4950      	ldr	r1, [pc, #320]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003db8:	4b4b      	ldr	r3, [pc, #300]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc6:	4948      	ldr	r1, [pc, #288]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dda:	4b43      	ldr	r3, [pc, #268]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de8:	493f      	ldr	r1, [pc, #252]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d028      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dfc:	4b3a      	ldr	r3, [pc, #232]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e0a:	4937      	ldr	r1, [pc, #220]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e1a:	d106      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e1c:	4b32      	ldr	r3, [pc, #200]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	4a31      	ldr	r2, [pc, #196]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e26:	60d3      	str	r3, [r2, #12]
 8003e28:	e011      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e32:	d10c      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3304      	adds	r3, #4
 8003e38:	2101      	movs	r1, #1
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 f8c8 	bl	8003fd0 <RCCEx_PLLSAI1_Config>
 8003e40:	4603      	mov	r3, r0
 8003e42:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e44:	7cfb      	ldrb	r3, [r7, #19]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003e4a:	7cfb      	ldrb	r3, [r7, #19]
 8003e4c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d028      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e5a:	4b23      	ldr	r3, [pc, #140]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e60:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e68:	491f      	ldr	r1, [pc, #124]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e78:	d106      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	4a1a      	ldr	r2, [pc, #104]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e84:	60d3      	str	r3, [r2, #12]
 8003e86:	e011      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e90:	d10c      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	3304      	adds	r3, #4
 8003e96:	2101      	movs	r1, #1
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 f899 	bl	8003fd0 <RCCEx_PLLSAI1_Config>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ea2:	7cfb      	ldrb	r3, [r7, #19]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003ea8:	7cfb      	ldrb	r3, [r7, #19]
 8003eaa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d02b      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ec6:	4908      	ldr	r1, [pc, #32]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ed6:	d109      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ed8:	4b03      	ldr	r3, [pc, #12]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	4a02      	ldr	r2, [pc, #8]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ede:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ee2:	60d3      	str	r3, [r2, #12]
 8003ee4:	e014      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003ee6:	bf00      	nop
 8003ee8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ef4:	d10c      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3304      	adds	r3, #4
 8003efa:	2101      	movs	r1, #1
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 f867 	bl	8003fd0 <RCCEx_PLLSAI1_Config>
 8003f02:	4603      	mov	r3, r0
 8003f04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f06:	7cfb      	ldrb	r3, [r7, #19]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003f0c:	7cfb      	ldrb	r3, [r7, #19]
 8003f0e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d02f      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f1c:	4b2b      	ldr	r3, [pc, #172]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f2a:	4928      	ldr	r1, [pc, #160]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f3a:	d10d      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	2102      	movs	r1, #2
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 f844 	bl	8003fd0 <RCCEx_PLLSAI1_Config>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f4c:	7cfb      	ldrb	r3, [r7, #19]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d014      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f52:	7cfb      	ldrb	r3, [r7, #19]
 8003f54:	74bb      	strb	r3, [r7, #18]
 8003f56:	e011      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f60:	d10c      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3320      	adds	r3, #32
 8003f66:	2102      	movs	r1, #2
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 f925 	bl	80041b8 <RCCEx_PLLSAI2_Config>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f72:	7cfb      	ldrb	r3, [r7, #19]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f78:	7cfb      	ldrb	r3, [r7, #19]
 8003f7a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f88:	4b10      	ldr	r3, [pc, #64]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f96:	490d      	ldr	r1, [pc, #52]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00b      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003faa:	4b08      	ldr	r3, [pc, #32]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fba:	4904      	ldr	r1, [pc, #16]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003fc2:	7cbb      	ldrb	r3, [r7, #18]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40021000 	.word	0x40021000

08003fd0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003fde:	4b75      	ldr	r3, [pc, #468]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d018      	beq.n	800401c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003fea:	4b72      	ldr	r3, [pc, #456]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f003 0203 	and.w	r2, r3, #3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d10d      	bne.n	8004016 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
       ||
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d009      	beq.n	8004016 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004002:	4b6c      	ldr	r3, [pc, #432]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	091b      	lsrs	r3, r3, #4
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
       ||
 8004012:	429a      	cmp	r2, r3
 8004014:	d047      	beq.n	80040a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	73fb      	strb	r3, [r7, #15]
 800401a:	e044      	b.n	80040a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b03      	cmp	r3, #3
 8004022:	d018      	beq.n	8004056 <RCCEx_PLLSAI1_Config+0x86>
 8004024:	2b03      	cmp	r3, #3
 8004026:	d825      	bhi.n	8004074 <RCCEx_PLLSAI1_Config+0xa4>
 8004028:	2b01      	cmp	r3, #1
 800402a:	d002      	beq.n	8004032 <RCCEx_PLLSAI1_Config+0x62>
 800402c:	2b02      	cmp	r3, #2
 800402e:	d009      	beq.n	8004044 <RCCEx_PLLSAI1_Config+0x74>
 8004030:	e020      	b.n	8004074 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004032:	4b60      	ldr	r3, [pc, #384]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d11d      	bne.n	800407a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004042:	e01a      	b.n	800407a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004044:	4b5b      	ldr	r3, [pc, #364]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404c:	2b00      	cmp	r3, #0
 800404e:	d116      	bne.n	800407e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004054:	e013      	b.n	800407e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004056:	4b57      	ldr	r3, [pc, #348]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10f      	bne.n	8004082 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004062:	4b54      	ldr	r3, [pc, #336]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004072:	e006      	b.n	8004082 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	73fb      	strb	r3, [r7, #15]
      break;
 8004078:	e004      	b.n	8004084 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800407a:	bf00      	nop
 800407c:	e002      	b.n	8004084 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800407e:	bf00      	nop
 8004080:	e000      	b.n	8004084 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004082:	bf00      	nop
    }

    if(status == HAL_OK)
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10d      	bne.n	80040a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800408a:	4b4a      	ldr	r3, [pc, #296]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6819      	ldr	r1, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	3b01      	subs	r3, #1
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	430b      	orrs	r3, r1
 80040a0:	4944      	ldr	r1, [pc, #272]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d17d      	bne.n	80041a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80040ac:	4b41      	ldr	r3, [pc, #260]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a40      	ldr	r2, [pc, #256]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b8:	f7fd fb72 	bl	80017a0 <HAL_GetTick>
 80040bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040be:	e009      	b.n	80040d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040c0:	f7fd fb6e 	bl	80017a0 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d902      	bls.n	80040d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	73fb      	strb	r3, [r7, #15]
        break;
 80040d2:	e005      	b.n	80040e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040d4:	4b37      	ldr	r3, [pc, #220]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1ef      	bne.n	80040c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80040e0:	7bfb      	ldrb	r3, [r7, #15]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d160      	bne.n	80041a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d111      	bne.n	8004110 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040ec:	4b31      	ldr	r3, [pc, #196]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80040f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6892      	ldr	r2, [r2, #8]
 80040fc:	0211      	lsls	r1, r2, #8
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	68d2      	ldr	r2, [r2, #12]
 8004102:	0912      	lsrs	r2, r2, #4
 8004104:	0452      	lsls	r2, r2, #17
 8004106:	430a      	orrs	r2, r1
 8004108:	492a      	ldr	r1, [pc, #168]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800410a:	4313      	orrs	r3, r2
 800410c:	610b      	str	r3, [r1, #16]
 800410e:	e027      	b.n	8004160 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d112      	bne.n	800413c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004116:	4b27      	ldr	r3, [pc, #156]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800411e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6892      	ldr	r2, [r2, #8]
 8004126:	0211      	lsls	r1, r2, #8
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6912      	ldr	r2, [r2, #16]
 800412c:	0852      	lsrs	r2, r2, #1
 800412e:	3a01      	subs	r2, #1
 8004130:	0552      	lsls	r2, r2, #21
 8004132:	430a      	orrs	r2, r1
 8004134:	491f      	ldr	r1, [pc, #124]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004136:	4313      	orrs	r3, r2
 8004138:	610b      	str	r3, [r1, #16]
 800413a:	e011      	b.n	8004160 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800413c:	4b1d      	ldr	r3, [pc, #116]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004144:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6892      	ldr	r2, [r2, #8]
 800414c:	0211      	lsls	r1, r2, #8
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6952      	ldr	r2, [r2, #20]
 8004152:	0852      	lsrs	r2, r2, #1
 8004154:	3a01      	subs	r2, #1
 8004156:	0652      	lsls	r2, r2, #25
 8004158:	430a      	orrs	r2, r1
 800415a:	4916      	ldr	r1, [pc, #88]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800415c:	4313      	orrs	r3, r2
 800415e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004160:	4b14      	ldr	r3, [pc, #80]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a13      	ldr	r2, [pc, #76]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004166:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800416a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416c:	f7fd fb18 	bl	80017a0 <HAL_GetTick>
 8004170:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004172:	e009      	b.n	8004188 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004174:	f7fd fb14 	bl	80017a0 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d902      	bls.n	8004188 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	73fb      	strb	r3, [r7, #15]
          break;
 8004186:	e005      	b.n	8004194 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004188:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0ef      	beq.n	8004174 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004194:	7bfb      	ldrb	r3, [r7, #15]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d106      	bne.n	80041a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800419a:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800419c:	691a      	ldr	r2, [r3, #16]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	4904      	ldr	r1, [pc, #16]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40021000 	.word	0x40021000

080041b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041c6:	4b6a      	ldr	r3, [pc, #424]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d018      	beq.n	8004204 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80041d2:	4b67      	ldr	r3, [pc, #412]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f003 0203 	and.w	r2, r3, #3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d10d      	bne.n	80041fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
       ||
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d009      	beq.n	80041fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80041ea:	4b61      	ldr	r3, [pc, #388]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	091b      	lsrs	r3, r3, #4
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
       ||
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d047      	beq.n	800428e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	73fb      	strb	r3, [r7, #15]
 8004202:	e044      	b.n	800428e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b03      	cmp	r3, #3
 800420a:	d018      	beq.n	800423e <RCCEx_PLLSAI2_Config+0x86>
 800420c:	2b03      	cmp	r3, #3
 800420e:	d825      	bhi.n	800425c <RCCEx_PLLSAI2_Config+0xa4>
 8004210:	2b01      	cmp	r3, #1
 8004212:	d002      	beq.n	800421a <RCCEx_PLLSAI2_Config+0x62>
 8004214:	2b02      	cmp	r3, #2
 8004216:	d009      	beq.n	800422c <RCCEx_PLLSAI2_Config+0x74>
 8004218:	e020      	b.n	800425c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800421a:	4b55      	ldr	r3, [pc, #340]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d11d      	bne.n	8004262 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800422a:	e01a      	b.n	8004262 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800422c:	4b50      	ldr	r3, [pc, #320]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004234:	2b00      	cmp	r3, #0
 8004236:	d116      	bne.n	8004266 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800423c:	e013      	b.n	8004266 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800423e:	4b4c      	ldr	r3, [pc, #304]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10f      	bne.n	800426a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800424a:	4b49      	ldr	r3, [pc, #292]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d109      	bne.n	800426a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800425a:	e006      	b.n	800426a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
      break;
 8004260:	e004      	b.n	800426c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004262:	bf00      	nop
 8004264:	e002      	b.n	800426c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004266:	bf00      	nop
 8004268:	e000      	b.n	800426c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800426a:	bf00      	nop
    }

    if(status == HAL_OK)
 800426c:	7bfb      	ldrb	r3, [r7, #15]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10d      	bne.n	800428e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004272:	4b3f      	ldr	r3, [pc, #252]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6819      	ldr	r1, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	3b01      	subs	r3, #1
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	430b      	orrs	r3, r1
 8004288:	4939      	ldr	r1, [pc, #228]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 800428a:	4313      	orrs	r3, r2
 800428c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800428e:	7bfb      	ldrb	r3, [r7, #15]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d167      	bne.n	8004364 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004294:	4b36      	ldr	r3, [pc, #216]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a35      	ldr	r2, [pc, #212]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 800429a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800429e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042a0:	f7fd fa7e 	bl	80017a0 <HAL_GetTick>
 80042a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042a6:	e009      	b.n	80042bc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042a8:	f7fd fa7a 	bl	80017a0 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d902      	bls.n	80042bc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	73fb      	strb	r3, [r7, #15]
        break;
 80042ba:	e005      	b.n	80042c8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042bc:	4b2c      	ldr	r3, [pc, #176]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1ef      	bne.n	80042a8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d14a      	bne.n	8004364 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d111      	bne.n	80042f8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042d4:	4b26      	ldr	r3, [pc, #152]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80042dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6892      	ldr	r2, [r2, #8]
 80042e4:	0211      	lsls	r1, r2, #8
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	68d2      	ldr	r2, [r2, #12]
 80042ea:	0912      	lsrs	r2, r2, #4
 80042ec:	0452      	lsls	r2, r2, #17
 80042ee:	430a      	orrs	r2, r1
 80042f0:	491f      	ldr	r1, [pc, #124]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	614b      	str	r3, [r1, #20]
 80042f6:	e011      	b.n	800431c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042f8:	4b1d      	ldr	r3, [pc, #116]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004300:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6892      	ldr	r2, [r2, #8]
 8004308:	0211      	lsls	r1, r2, #8
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6912      	ldr	r2, [r2, #16]
 800430e:	0852      	lsrs	r2, r2, #1
 8004310:	3a01      	subs	r2, #1
 8004312:	0652      	lsls	r2, r2, #25
 8004314:	430a      	orrs	r2, r1
 8004316:	4916      	ldr	r1, [pc, #88]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004318:	4313      	orrs	r3, r2
 800431a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800431c:	4b14      	ldr	r3, [pc, #80]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a13      	ldr	r2, [pc, #76]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004326:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004328:	f7fd fa3a 	bl	80017a0 <HAL_GetTick>
 800432c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800432e:	e009      	b.n	8004344 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004330:	f7fd fa36 	bl	80017a0 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d902      	bls.n	8004344 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	73fb      	strb	r3, [r7, #15]
          break;
 8004342:	e005      	b.n	8004350 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004344:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0ef      	beq.n	8004330 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004350:	7bfb      	ldrb	r3, [r7, #15]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d106      	bne.n	8004364 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004356:	4b06      	ldr	r3, [pc, #24]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004358:	695a      	ldr	r2, [r3, #20]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	4904      	ldr	r1, [pc, #16]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004360:	4313      	orrs	r3, r2
 8004362:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004364:	7bfb      	ldrb	r3, [r7, #15]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40021000 	.word	0x40021000

08004374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e049      	b.n	800441a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d106      	bne.n	80043a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7fd f84e 	bl	800143c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3304      	adds	r3, #4
 80043b0:	4619      	mov	r1, r3
 80043b2:	4610      	mov	r0, r2
 80043b4:	f000 f9ee 	bl	8004794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
	...

08004424 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b01      	cmp	r3, #1
 8004436:	d001      	beq.n	800443c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e04f      	b.n	80044dc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a23      	ldr	r2, [pc, #140]	; (80044e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d01d      	beq.n	800449a <HAL_TIM_Base_Start_IT+0x76>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004466:	d018      	beq.n	800449a <HAL_TIM_Base_Start_IT+0x76>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a1f      	ldr	r2, [pc, #124]	; (80044ec <HAL_TIM_Base_Start_IT+0xc8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d013      	beq.n	800449a <HAL_TIM_Base_Start_IT+0x76>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a1e      	ldr	r2, [pc, #120]	; (80044f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00e      	beq.n	800449a <HAL_TIM_Base_Start_IT+0x76>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a1c      	ldr	r2, [pc, #112]	; (80044f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d009      	beq.n	800449a <HAL_TIM_Base_Start_IT+0x76>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a1b      	ldr	r2, [pc, #108]	; (80044f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d004      	beq.n	800449a <HAL_TIM_Base_Start_IT+0x76>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a19      	ldr	r2, [pc, #100]	; (80044fc <HAL_TIM_Base_Start_IT+0xd8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d115      	bne.n	80044c6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	4b17      	ldr	r3, [pc, #92]	; (8004500 <HAL_TIM_Base_Start_IT+0xdc>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2b06      	cmp	r3, #6
 80044aa:	d015      	beq.n	80044d8 <HAL_TIM_Base_Start_IT+0xb4>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b2:	d011      	beq.n	80044d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0201 	orr.w	r2, r2, #1
 80044c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c4:	e008      	b.n	80044d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f042 0201 	orr.w	r2, r2, #1
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	e000      	b.n	80044da <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	40012c00 	.word	0x40012c00
 80044ec:	40000400 	.word	0x40000400
 80044f0:	40000800 	.word	0x40000800
 80044f4:	40000c00 	.word	0x40000c00
 80044f8:	40013400 	.word	0x40013400
 80044fc:	40014000 	.word	0x40014000
 8004500:	00010007 	.word	0x00010007

08004504 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b02      	cmp	r3, #2
 8004518:	d122      	bne.n	8004560 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b02      	cmp	r3, #2
 8004526:	d11b      	bne.n	8004560 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f06f 0202 	mvn.w	r2, #2
 8004530:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f905 	bl	8004756 <HAL_TIM_IC_CaptureCallback>
 800454c:	e005      	b.n	800455a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f8f7 	bl	8004742 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f908 	bl	800476a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	2b04      	cmp	r3, #4
 800456c:	d122      	bne.n	80045b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b04      	cmp	r3, #4
 800457a:	d11b      	bne.n	80045b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f06f 0204 	mvn.w	r2, #4
 8004584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2202      	movs	r2, #2
 800458a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f8db 	bl	8004756 <HAL_TIM_IC_CaptureCallback>
 80045a0:	e005      	b.n	80045ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f8cd 	bl	8004742 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f8de 	bl	800476a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b08      	cmp	r3, #8
 80045c0:	d122      	bne.n	8004608 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d11b      	bne.n	8004608 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f06f 0208 	mvn.w	r2, #8
 80045d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2204      	movs	r2, #4
 80045de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f8b1 	bl	8004756 <HAL_TIM_IC_CaptureCallback>
 80045f4:	e005      	b.n	8004602 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f8a3 	bl	8004742 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f8b4 	bl	800476a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0310 	and.w	r3, r3, #16
 8004612:	2b10      	cmp	r3, #16
 8004614:	d122      	bne.n	800465c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b10      	cmp	r3, #16
 8004622:	d11b      	bne.n	800465c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0210 	mvn.w	r2, #16
 800462c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2208      	movs	r2, #8
 8004632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f887 	bl	8004756 <HAL_TIM_IC_CaptureCallback>
 8004648:	e005      	b.n	8004656 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f879 	bl	8004742 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f88a 	bl	800476a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b01      	cmp	r3, #1
 8004668:	d10e      	bne.n	8004688 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b01      	cmp	r3, #1
 8004676:	d107      	bne.n	8004688 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0201 	mvn.w	r2, #1
 8004680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7fc fe5a 	bl	800133c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004692:	2b80      	cmp	r3, #128	; 0x80
 8004694:	d10e      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a0:	2b80      	cmp	r3, #128	; 0x80
 80046a2:	d107      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f914 	bl	80048dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046c2:	d10e      	bne.n	80046e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ce:	2b80      	cmp	r3, #128	; 0x80
 80046d0:	d107      	bne.n	80046e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f907 	bl	80048f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ec:	2b40      	cmp	r3, #64	; 0x40
 80046ee:	d10e      	bne.n	800470e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fa:	2b40      	cmp	r3, #64	; 0x40
 80046fc:	d107      	bne.n	800470e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f838 	bl	800477e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b20      	cmp	r3, #32
 800471a:	d10e      	bne.n	800473a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f003 0320 	and.w	r3, r3, #32
 8004726:	2b20      	cmp	r3, #32
 8004728:	d107      	bne.n	800473a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f06f 0220 	mvn.w	r2, #32
 8004732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f8c7 	bl	80048c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800473a:	bf00      	nop
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
	...

08004794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a40      	ldr	r2, [pc, #256]	; (80048a8 <TIM_Base_SetConfig+0x114>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d013      	beq.n	80047d4 <TIM_Base_SetConfig+0x40>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b2:	d00f      	beq.n	80047d4 <TIM_Base_SetConfig+0x40>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a3d      	ldr	r2, [pc, #244]	; (80048ac <TIM_Base_SetConfig+0x118>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00b      	beq.n	80047d4 <TIM_Base_SetConfig+0x40>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a3c      	ldr	r2, [pc, #240]	; (80048b0 <TIM_Base_SetConfig+0x11c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d007      	beq.n	80047d4 <TIM_Base_SetConfig+0x40>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a3b      	ldr	r2, [pc, #236]	; (80048b4 <TIM_Base_SetConfig+0x120>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d003      	beq.n	80047d4 <TIM_Base_SetConfig+0x40>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a3a      	ldr	r2, [pc, #232]	; (80048b8 <TIM_Base_SetConfig+0x124>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d108      	bne.n	80047e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a2f      	ldr	r2, [pc, #188]	; (80048a8 <TIM_Base_SetConfig+0x114>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d01f      	beq.n	800482e <TIM_Base_SetConfig+0x9a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f4:	d01b      	beq.n	800482e <TIM_Base_SetConfig+0x9a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a2c      	ldr	r2, [pc, #176]	; (80048ac <TIM_Base_SetConfig+0x118>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d017      	beq.n	800482e <TIM_Base_SetConfig+0x9a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a2b      	ldr	r2, [pc, #172]	; (80048b0 <TIM_Base_SetConfig+0x11c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d013      	beq.n	800482e <TIM_Base_SetConfig+0x9a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a2a      	ldr	r2, [pc, #168]	; (80048b4 <TIM_Base_SetConfig+0x120>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00f      	beq.n	800482e <TIM_Base_SetConfig+0x9a>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a29      	ldr	r2, [pc, #164]	; (80048b8 <TIM_Base_SetConfig+0x124>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00b      	beq.n	800482e <TIM_Base_SetConfig+0x9a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a28      	ldr	r2, [pc, #160]	; (80048bc <TIM_Base_SetConfig+0x128>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d007      	beq.n	800482e <TIM_Base_SetConfig+0x9a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a27      	ldr	r2, [pc, #156]	; (80048c0 <TIM_Base_SetConfig+0x12c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d003      	beq.n	800482e <TIM_Base_SetConfig+0x9a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a26      	ldr	r2, [pc, #152]	; (80048c4 <TIM_Base_SetConfig+0x130>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d108      	bne.n	8004840 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4313      	orrs	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a10      	ldr	r2, [pc, #64]	; (80048a8 <TIM_Base_SetConfig+0x114>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00f      	beq.n	800488c <TIM_Base_SetConfig+0xf8>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a12      	ldr	r2, [pc, #72]	; (80048b8 <TIM_Base_SetConfig+0x124>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00b      	beq.n	800488c <TIM_Base_SetConfig+0xf8>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a11      	ldr	r2, [pc, #68]	; (80048bc <TIM_Base_SetConfig+0x128>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d007      	beq.n	800488c <TIM_Base_SetConfig+0xf8>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a10      	ldr	r2, [pc, #64]	; (80048c0 <TIM_Base_SetConfig+0x12c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_Base_SetConfig+0xf8>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a0f      	ldr	r2, [pc, #60]	; (80048c4 <TIM_Base_SetConfig+0x130>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d103      	bne.n	8004894 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	615a      	str	r2, [r3, #20]
}
 800489a:	bf00      	nop
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	40012c00 	.word	0x40012c00
 80048ac:	40000400 	.word	0x40000400
 80048b0:	40000800 	.word	0x40000800
 80048b4:	40000c00 	.word	0x40000c00
 80048b8:	40013400 	.word	0x40013400
 80048bc:	40014000 	.word	0x40014000
 80048c0:	40014400 	.word	0x40014400
 80048c4:	40014800 	.word	0x40014800

080048c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e040      	b.n	8004998 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7fc fdae 	bl	8001488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2224      	movs	r2, #36	; 0x24
 8004930:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0201 	bic.w	r2, r2, #1
 8004940:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f82c 	bl	80049a0 <UART_SetConfig>
 8004948:	4603      	mov	r3, r0
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e022      	b.n	8004998 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 faaa 	bl	8004eb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800496e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800497e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0201 	orr.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 fb31 	bl	8004ff8 <UART_CheckIdleState>
 8004996:	4603      	mov	r3, r0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049a0:	b5b0      	push	{r4, r5, r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689a      	ldr	r2, [r3, #8]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4bad      	ldr	r3, [pc, #692]	; (8004c80 <UART_SetConfig+0x2e0>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6812      	ldr	r2, [r2, #0]
 80049d2:	69f9      	ldr	r1, [r7, #28]
 80049d4:	430b      	orrs	r3, r1
 80049d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4aa2      	ldr	r2, [pc, #648]	; (8004c84 <UART_SetConfig+0x2e4>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d004      	beq.n	8004a08 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	69fa      	ldr	r2, [r7, #28]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	69fa      	ldr	r2, [r7, #28]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a99      	ldr	r2, [pc, #612]	; (8004c88 <UART_SetConfig+0x2e8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d121      	bne.n	8004a6a <UART_SetConfig+0xca>
 8004a26:	4b99      	ldr	r3, [pc, #612]	; (8004c8c <UART_SetConfig+0x2ec>)
 8004a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2c:	f003 0303 	and.w	r3, r3, #3
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d817      	bhi.n	8004a64 <UART_SetConfig+0xc4>
 8004a34:	a201      	add	r2, pc, #4	; (adr r2, 8004a3c <UART_SetConfig+0x9c>)
 8004a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3a:	bf00      	nop
 8004a3c:	08004a4d 	.word	0x08004a4d
 8004a40:	08004a59 	.word	0x08004a59
 8004a44:	08004a53 	.word	0x08004a53
 8004a48:	08004a5f 	.word	0x08004a5f
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	76fb      	strb	r3, [r7, #27]
 8004a50:	e0e7      	b.n	8004c22 <UART_SetConfig+0x282>
 8004a52:	2302      	movs	r3, #2
 8004a54:	76fb      	strb	r3, [r7, #27]
 8004a56:	e0e4      	b.n	8004c22 <UART_SetConfig+0x282>
 8004a58:	2304      	movs	r3, #4
 8004a5a:	76fb      	strb	r3, [r7, #27]
 8004a5c:	e0e1      	b.n	8004c22 <UART_SetConfig+0x282>
 8004a5e:	2308      	movs	r3, #8
 8004a60:	76fb      	strb	r3, [r7, #27]
 8004a62:	e0de      	b.n	8004c22 <UART_SetConfig+0x282>
 8004a64:	2310      	movs	r3, #16
 8004a66:	76fb      	strb	r3, [r7, #27]
 8004a68:	e0db      	b.n	8004c22 <UART_SetConfig+0x282>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a88      	ldr	r2, [pc, #544]	; (8004c90 <UART_SetConfig+0x2f0>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d132      	bne.n	8004ada <UART_SetConfig+0x13a>
 8004a74:	4b85      	ldr	r3, [pc, #532]	; (8004c8c <UART_SetConfig+0x2ec>)
 8004a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7a:	f003 030c 	and.w	r3, r3, #12
 8004a7e:	2b0c      	cmp	r3, #12
 8004a80:	d828      	bhi.n	8004ad4 <UART_SetConfig+0x134>
 8004a82:	a201      	add	r2, pc, #4	; (adr r2, 8004a88 <UART_SetConfig+0xe8>)
 8004a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a88:	08004abd 	.word	0x08004abd
 8004a8c:	08004ad5 	.word	0x08004ad5
 8004a90:	08004ad5 	.word	0x08004ad5
 8004a94:	08004ad5 	.word	0x08004ad5
 8004a98:	08004ac9 	.word	0x08004ac9
 8004a9c:	08004ad5 	.word	0x08004ad5
 8004aa0:	08004ad5 	.word	0x08004ad5
 8004aa4:	08004ad5 	.word	0x08004ad5
 8004aa8:	08004ac3 	.word	0x08004ac3
 8004aac:	08004ad5 	.word	0x08004ad5
 8004ab0:	08004ad5 	.word	0x08004ad5
 8004ab4:	08004ad5 	.word	0x08004ad5
 8004ab8:	08004acf 	.word	0x08004acf
 8004abc:	2300      	movs	r3, #0
 8004abe:	76fb      	strb	r3, [r7, #27]
 8004ac0:	e0af      	b.n	8004c22 <UART_SetConfig+0x282>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	76fb      	strb	r3, [r7, #27]
 8004ac6:	e0ac      	b.n	8004c22 <UART_SetConfig+0x282>
 8004ac8:	2304      	movs	r3, #4
 8004aca:	76fb      	strb	r3, [r7, #27]
 8004acc:	e0a9      	b.n	8004c22 <UART_SetConfig+0x282>
 8004ace:	2308      	movs	r3, #8
 8004ad0:	76fb      	strb	r3, [r7, #27]
 8004ad2:	e0a6      	b.n	8004c22 <UART_SetConfig+0x282>
 8004ad4:	2310      	movs	r3, #16
 8004ad6:	76fb      	strb	r3, [r7, #27]
 8004ad8:	e0a3      	b.n	8004c22 <UART_SetConfig+0x282>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a6d      	ldr	r2, [pc, #436]	; (8004c94 <UART_SetConfig+0x2f4>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d120      	bne.n	8004b26 <UART_SetConfig+0x186>
 8004ae4:	4b69      	ldr	r3, [pc, #420]	; (8004c8c <UART_SetConfig+0x2ec>)
 8004ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004aee:	2b30      	cmp	r3, #48	; 0x30
 8004af0:	d013      	beq.n	8004b1a <UART_SetConfig+0x17a>
 8004af2:	2b30      	cmp	r3, #48	; 0x30
 8004af4:	d814      	bhi.n	8004b20 <UART_SetConfig+0x180>
 8004af6:	2b20      	cmp	r3, #32
 8004af8:	d009      	beq.n	8004b0e <UART_SetConfig+0x16e>
 8004afa:	2b20      	cmp	r3, #32
 8004afc:	d810      	bhi.n	8004b20 <UART_SetConfig+0x180>
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <UART_SetConfig+0x168>
 8004b02:	2b10      	cmp	r3, #16
 8004b04:	d006      	beq.n	8004b14 <UART_SetConfig+0x174>
 8004b06:	e00b      	b.n	8004b20 <UART_SetConfig+0x180>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	76fb      	strb	r3, [r7, #27]
 8004b0c:	e089      	b.n	8004c22 <UART_SetConfig+0x282>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	76fb      	strb	r3, [r7, #27]
 8004b12:	e086      	b.n	8004c22 <UART_SetConfig+0x282>
 8004b14:	2304      	movs	r3, #4
 8004b16:	76fb      	strb	r3, [r7, #27]
 8004b18:	e083      	b.n	8004c22 <UART_SetConfig+0x282>
 8004b1a:	2308      	movs	r3, #8
 8004b1c:	76fb      	strb	r3, [r7, #27]
 8004b1e:	e080      	b.n	8004c22 <UART_SetConfig+0x282>
 8004b20:	2310      	movs	r3, #16
 8004b22:	76fb      	strb	r3, [r7, #27]
 8004b24:	e07d      	b.n	8004c22 <UART_SetConfig+0x282>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a5b      	ldr	r2, [pc, #364]	; (8004c98 <UART_SetConfig+0x2f8>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d120      	bne.n	8004b72 <UART_SetConfig+0x1d2>
 8004b30:	4b56      	ldr	r3, [pc, #344]	; (8004c8c <UART_SetConfig+0x2ec>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b3a:	2bc0      	cmp	r3, #192	; 0xc0
 8004b3c:	d013      	beq.n	8004b66 <UART_SetConfig+0x1c6>
 8004b3e:	2bc0      	cmp	r3, #192	; 0xc0
 8004b40:	d814      	bhi.n	8004b6c <UART_SetConfig+0x1cc>
 8004b42:	2b80      	cmp	r3, #128	; 0x80
 8004b44:	d009      	beq.n	8004b5a <UART_SetConfig+0x1ba>
 8004b46:	2b80      	cmp	r3, #128	; 0x80
 8004b48:	d810      	bhi.n	8004b6c <UART_SetConfig+0x1cc>
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <UART_SetConfig+0x1b4>
 8004b4e:	2b40      	cmp	r3, #64	; 0x40
 8004b50:	d006      	beq.n	8004b60 <UART_SetConfig+0x1c0>
 8004b52:	e00b      	b.n	8004b6c <UART_SetConfig+0x1cc>
 8004b54:	2300      	movs	r3, #0
 8004b56:	76fb      	strb	r3, [r7, #27]
 8004b58:	e063      	b.n	8004c22 <UART_SetConfig+0x282>
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	76fb      	strb	r3, [r7, #27]
 8004b5e:	e060      	b.n	8004c22 <UART_SetConfig+0x282>
 8004b60:	2304      	movs	r3, #4
 8004b62:	76fb      	strb	r3, [r7, #27]
 8004b64:	e05d      	b.n	8004c22 <UART_SetConfig+0x282>
 8004b66:	2308      	movs	r3, #8
 8004b68:	76fb      	strb	r3, [r7, #27]
 8004b6a:	e05a      	b.n	8004c22 <UART_SetConfig+0x282>
 8004b6c:	2310      	movs	r3, #16
 8004b6e:	76fb      	strb	r3, [r7, #27]
 8004b70:	e057      	b.n	8004c22 <UART_SetConfig+0x282>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a49      	ldr	r2, [pc, #292]	; (8004c9c <UART_SetConfig+0x2fc>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d125      	bne.n	8004bc8 <UART_SetConfig+0x228>
 8004b7c:	4b43      	ldr	r3, [pc, #268]	; (8004c8c <UART_SetConfig+0x2ec>)
 8004b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b8a:	d017      	beq.n	8004bbc <UART_SetConfig+0x21c>
 8004b8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b90:	d817      	bhi.n	8004bc2 <UART_SetConfig+0x222>
 8004b92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b96:	d00b      	beq.n	8004bb0 <UART_SetConfig+0x210>
 8004b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b9c:	d811      	bhi.n	8004bc2 <UART_SetConfig+0x222>
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <UART_SetConfig+0x20a>
 8004ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ba6:	d006      	beq.n	8004bb6 <UART_SetConfig+0x216>
 8004ba8:	e00b      	b.n	8004bc2 <UART_SetConfig+0x222>
 8004baa:	2300      	movs	r3, #0
 8004bac:	76fb      	strb	r3, [r7, #27]
 8004bae:	e038      	b.n	8004c22 <UART_SetConfig+0x282>
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	76fb      	strb	r3, [r7, #27]
 8004bb4:	e035      	b.n	8004c22 <UART_SetConfig+0x282>
 8004bb6:	2304      	movs	r3, #4
 8004bb8:	76fb      	strb	r3, [r7, #27]
 8004bba:	e032      	b.n	8004c22 <UART_SetConfig+0x282>
 8004bbc:	2308      	movs	r3, #8
 8004bbe:	76fb      	strb	r3, [r7, #27]
 8004bc0:	e02f      	b.n	8004c22 <UART_SetConfig+0x282>
 8004bc2:	2310      	movs	r3, #16
 8004bc4:	76fb      	strb	r3, [r7, #27]
 8004bc6:	e02c      	b.n	8004c22 <UART_SetConfig+0x282>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a2d      	ldr	r2, [pc, #180]	; (8004c84 <UART_SetConfig+0x2e4>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d125      	bne.n	8004c1e <UART_SetConfig+0x27e>
 8004bd2:	4b2e      	ldr	r3, [pc, #184]	; (8004c8c <UART_SetConfig+0x2ec>)
 8004bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004bdc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004be0:	d017      	beq.n	8004c12 <UART_SetConfig+0x272>
 8004be2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004be6:	d817      	bhi.n	8004c18 <UART_SetConfig+0x278>
 8004be8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bec:	d00b      	beq.n	8004c06 <UART_SetConfig+0x266>
 8004bee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bf2:	d811      	bhi.n	8004c18 <UART_SetConfig+0x278>
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <UART_SetConfig+0x260>
 8004bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bfc:	d006      	beq.n	8004c0c <UART_SetConfig+0x26c>
 8004bfe:	e00b      	b.n	8004c18 <UART_SetConfig+0x278>
 8004c00:	2300      	movs	r3, #0
 8004c02:	76fb      	strb	r3, [r7, #27]
 8004c04:	e00d      	b.n	8004c22 <UART_SetConfig+0x282>
 8004c06:	2302      	movs	r3, #2
 8004c08:	76fb      	strb	r3, [r7, #27]
 8004c0a:	e00a      	b.n	8004c22 <UART_SetConfig+0x282>
 8004c0c:	2304      	movs	r3, #4
 8004c0e:	76fb      	strb	r3, [r7, #27]
 8004c10:	e007      	b.n	8004c22 <UART_SetConfig+0x282>
 8004c12:	2308      	movs	r3, #8
 8004c14:	76fb      	strb	r3, [r7, #27]
 8004c16:	e004      	b.n	8004c22 <UART_SetConfig+0x282>
 8004c18:	2310      	movs	r3, #16
 8004c1a:	76fb      	strb	r3, [r7, #27]
 8004c1c:	e001      	b.n	8004c22 <UART_SetConfig+0x282>
 8004c1e:	2310      	movs	r3, #16
 8004c20:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a17      	ldr	r2, [pc, #92]	; (8004c84 <UART_SetConfig+0x2e4>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	f040 8087 	bne.w	8004d3c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c2e:	7efb      	ldrb	r3, [r7, #27]
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d837      	bhi.n	8004ca4 <UART_SetConfig+0x304>
 8004c34:	a201      	add	r2, pc, #4	; (adr r2, 8004c3c <UART_SetConfig+0x29c>)
 8004c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3a:	bf00      	nop
 8004c3c:	08004c61 	.word	0x08004c61
 8004c40:	08004ca5 	.word	0x08004ca5
 8004c44:	08004c69 	.word	0x08004c69
 8004c48:	08004ca5 	.word	0x08004ca5
 8004c4c:	08004c6f 	.word	0x08004c6f
 8004c50:	08004ca5 	.word	0x08004ca5
 8004c54:	08004ca5 	.word	0x08004ca5
 8004c58:	08004ca5 	.word	0x08004ca5
 8004c5c:	08004c77 	.word	0x08004c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c60:	f7fe fe40 	bl	80038e4 <HAL_RCC_GetPCLK1Freq>
 8004c64:	6178      	str	r0, [r7, #20]
        break;
 8004c66:	e022      	b.n	8004cae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c68:	4b0d      	ldr	r3, [pc, #52]	; (8004ca0 <UART_SetConfig+0x300>)
 8004c6a:	617b      	str	r3, [r7, #20]
        break;
 8004c6c:	e01f      	b.n	8004cae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c6e:	f7fe fda1 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8004c72:	6178      	str	r0, [r7, #20]
        break;
 8004c74:	e01b      	b.n	8004cae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c7a:	617b      	str	r3, [r7, #20]
        break;
 8004c7c:	e017      	b.n	8004cae <UART_SetConfig+0x30e>
 8004c7e:	bf00      	nop
 8004c80:	efff69f3 	.word	0xefff69f3
 8004c84:	40008000 	.word	0x40008000
 8004c88:	40013800 	.word	0x40013800
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	40004400 	.word	0x40004400
 8004c94:	40004800 	.word	0x40004800
 8004c98:	40004c00 	.word	0x40004c00
 8004c9c:	40005000 	.word	0x40005000
 8004ca0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	76bb      	strb	r3, [r7, #26]
        break;
 8004cac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 80f1 	beq.w	8004e98 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	4413      	add	r3, r2
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d305      	bcc.n	8004cd2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d902      	bls.n	8004cd8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	76bb      	strb	r3, [r7, #26]
 8004cd6:	e0df      	b.n	8004e98 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f04f 0100 	mov.w	r1, #0
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	f04f 0300 	mov.w	r3, #0
 8004ce8:	020b      	lsls	r3, r1, #8
 8004cea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004cee:	0202      	lsls	r2, r0, #8
 8004cf0:	6879      	ldr	r1, [r7, #4]
 8004cf2:	6849      	ldr	r1, [r1, #4]
 8004cf4:	0849      	lsrs	r1, r1, #1
 8004cf6:	4608      	mov	r0, r1
 8004cf8:	f04f 0100 	mov.w	r1, #0
 8004cfc:	1814      	adds	r4, r2, r0
 8004cfe:	eb43 0501 	adc.w	r5, r3, r1
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	461a      	mov	r2, r3
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	4629      	mov	r1, r5
 8004d10:	f7fb fab6 	bl	8000280 <__aeabi_uldivmod>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	4613      	mov	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d22:	d308      	bcc.n	8004d36 <UART_SetConfig+0x396>
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d2a:	d204      	bcs.n	8004d36 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	60da      	str	r2, [r3, #12]
 8004d34:	e0b0      	b.n	8004e98 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	76bb      	strb	r3, [r7, #26]
 8004d3a:	e0ad      	b.n	8004e98 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d44:	d15c      	bne.n	8004e00 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004d46:	7efb      	ldrb	r3, [r7, #27]
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d828      	bhi.n	8004d9e <UART_SetConfig+0x3fe>
 8004d4c:	a201      	add	r2, pc, #4	; (adr r2, 8004d54 <UART_SetConfig+0x3b4>)
 8004d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d52:	bf00      	nop
 8004d54:	08004d79 	.word	0x08004d79
 8004d58:	08004d81 	.word	0x08004d81
 8004d5c:	08004d89 	.word	0x08004d89
 8004d60:	08004d9f 	.word	0x08004d9f
 8004d64:	08004d8f 	.word	0x08004d8f
 8004d68:	08004d9f 	.word	0x08004d9f
 8004d6c:	08004d9f 	.word	0x08004d9f
 8004d70:	08004d9f 	.word	0x08004d9f
 8004d74:	08004d97 	.word	0x08004d97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d78:	f7fe fdb4 	bl	80038e4 <HAL_RCC_GetPCLK1Freq>
 8004d7c:	6178      	str	r0, [r7, #20]
        break;
 8004d7e:	e013      	b.n	8004da8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d80:	f7fe fdc6 	bl	8003910 <HAL_RCC_GetPCLK2Freq>
 8004d84:	6178      	str	r0, [r7, #20]
        break;
 8004d86:	e00f      	b.n	8004da8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d88:	4b49      	ldr	r3, [pc, #292]	; (8004eb0 <UART_SetConfig+0x510>)
 8004d8a:	617b      	str	r3, [r7, #20]
        break;
 8004d8c:	e00c      	b.n	8004da8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d8e:	f7fe fd11 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8004d92:	6178      	str	r0, [r7, #20]
        break;
 8004d94:	e008      	b.n	8004da8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d9a:	617b      	str	r3, [r7, #20]
        break;
 8004d9c:	e004      	b.n	8004da8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	76bb      	strb	r3, [r7, #26]
        break;
 8004da6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d074      	beq.n	8004e98 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	005a      	lsls	r2, r3, #1
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	085b      	lsrs	r3, r3, #1
 8004db8:	441a      	add	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	2b0f      	cmp	r3, #15
 8004dca:	d916      	bls.n	8004dfa <UART_SetConfig+0x45a>
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd2:	d212      	bcs.n	8004dfa <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	f023 030f 	bic.w	r3, r3, #15
 8004ddc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	085b      	lsrs	r3, r3, #1
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	89fb      	ldrh	r3, [r7, #14]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	89fa      	ldrh	r2, [r7, #14]
 8004df6:	60da      	str	r2, [r3, #12]
 8004df8:	e04e      	b.n	8004e98 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	76bb      	strb	r3, [r7, #26]
 8004dfe:	e04b      	b.n	8004e98 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e00:	7efb      	ldrb	r3, [r7, #27]
 8004e02:	2b08      	cmp	r3, #8
 8004e04:	d827      	bhi.n	8004e56 <UART_SetConfig+0x4b6>
 8004e06:	a201      	add	r2, pc, #4	; (adr r2, 8004e0c <UART_SetConfig+0x46c>)
 8004e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0c:	08004e31 	.word	0x08004e31
 8004e10:	08004e39 	.word	0x08004e39
 8004e14:	08004e41 	.word	0x08004e41
 8004e18:	08004e57 	.word	0x08004e57
 8004e1c:	08004e47 	.word	0x08004e47
 8004e20:	08004e57 	.word	0x08004e57
 8004e24:	08004e57 	.word	0x08004e57
 8004e28:	08004e57 	.word	0x08004e57
 8004e2c:	08004e4f 	.word	0x08004e4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e30:	f7fe fd58 	bl	80038e4 <HAL_RCC_GetPCLK1Freq>
 8004e34:	6178      	str	r0, [r7, #20]
        break;
 8004e36:	e013      	b.n	8004e60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e38:	f7fe fd6a 	bl	8003910 <HAL_RCC_GetPCLK2Freq>
 8004e3c:	6178      	str	r0, [r7, #20]
        break;
 8004e3e:	e00f      	b.n	8004e60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e40:	4b1b      	ldr	r3, [pc, #108]	; (8004eb0 <UART_SetConfig+0x510>)
 8004e42:	617b      	str	r3, [r7, #20]
        break;
 8004e44:	e00c      	b.n	8004e60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e46:	f7fe fcb5 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8004e4a:	6178      	str	r0, [r7, #20]
        break;
 8004e4c:	e008      	b.n	8004e60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e52:	617b      	str	r3, [r7, #20]
        break;
 8004e54:	e004      	b.n	8004e60 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	76bb      	strb	r3, [r7, #26]
        break;
 8004e5e:	bf00      	nop
    }

    if (pclk != 0U)
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d018      	beq.n	8004e98 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	085a      	lsrs	r2, r3, #1
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	441a      	add	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	2b0f      	cmp	r3, #15
 8004e80:	d908      	bls.n	8004e94 <UART_SetConfig+0x4f4>
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e88:	d204      	bcs.n	8004e94 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	60da      	str	r2, [r3, #12]
 8004e92:	e001      	b.n	8004e98 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ea4:	7ebb      	ldrb	r3, [r7, #26]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3720      	adds	r7, #32
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bdb0      	pop	{r4, r5, r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	00f42400 	.word	0x00f42400

08004eb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00a      	beq.n	8004ede <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00a      	beq.n	8004f00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00a      	beq.n	8004f22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00a      	beq.n	8004f44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	f003 0310 	and.w	r3, r3, #16
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00a      	beq.n	8004f66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d01a      	beq.n	8004fca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fb2:	d10a      	bne.n	8004fca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	605a      	str	r2, [r3, #4]
  }
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af02      	add	r7, sp, #8
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005008:	f7fc fbca 	bl	80017a0 <HAL_GetTick>
 800500c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0308 	and.w	r3, r3, #8
 8005018:	2b08      	cmp	r3, #8
 800501a:	d10e      	bne.n	800503a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800501c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f82d 	bl	800508a <UART_WaitOnFlagUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e023      	b.n	8005082 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b04      	cmp	r3, #4
 8005046:	d10e      	bne.n	8005066 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005048:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f817 	bl	800508a <UART_WaitOnFlagUntilTimeout>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e00d      	b.n	8005082 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2220      	movs	r2, #32
 800506a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2220      	movs	r2, #32
 8005070:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b084      	sub	sp, #16
 800508e:	af00      	add	r7, sp, #0
 8005090:	60f8      	str	r0, [r7, #12]
 8005092:	60b9      	str	r1, [r7, #8]
 8005094:	603b      	str	r3, [r7, #0]
 8005096:	4613      	mov	r3, r2
 8005098:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800509a:	e05e      	b.n	800515a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050a2:	d05a      	beq.n	800515a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050a4:	f7fc fb7c 	bl	80017a0 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d302      	bcc.n	80050ba <UART_WaitOnFlagUntilTimeout+0x30>
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d11b      	bne.n	80050f2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050c8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0201 	bic.w	r2, r2, #1
 80050d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2220      	movs	r2, #32
 80050de:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2220      	movs	r2, #32
 80050e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e043      	b.n	800517a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d02c      	beq.n	800515a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800510a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800510e:	d124      	bne.n	800515a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005118:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005128:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0201 	bic.w	r2, r2, #1
 8005138:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2220      	movs	r2, #32
 800513e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2220      	movs	r2, #32
 8005144:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2220      	movs	r2, #32
 800514a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e00f      	b.n	800517a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69da      	ldr	r2, [r3, #28]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4013      	ands	r3, r2
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	429a      	cmp	r2, r3
 8005168:	bf0c      	ite	eq
 800516a:	2301      	moveq	r3, #1
 800516c:	2300      	movne	r3, #0
 800516e:	b2db      	uxtb	r3, r3
 8005170:	461a      	mov	r2, r3
 8005172:	79fb      	ldrb	r3, [r7, #7]
 8005174:	429a      	cmp	r2, r3
 8005176:	d091      	beq.n	800509c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
	...

08005184 <__errno>:
 8005184:	4b01      	ldr	r3, [pc, #4]	; (800518c <__errno+0x8>)
 8005186:	6818      	ldr	r0, [r3, #0]
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	2000000c 	.word	0x2000000c

08005190 <__libc_init_array>:
 8005190:	b570      	push	{r4, r5, r6, lr}
 8005192:	4d0d      	ldr	r5, [pc, #52]	; (80051c8 <__libc_init_array+0x38>)
 8005194:	4c0d      	ldr	r4, [pc, #52]	; (80051cc <__libc_init_array+0x3c>)
 8005196:	1b64      	subs	r4, r4, r5
 8005198:	10a4      	asrs	r4, r4, #2
 800519a:	2600      	movs	r6, #0
 800519c:	42a6      	cmp	r6, r4
 800519e:	d109      	bne.n	80051b4 <__libc_init_array+0x24>
 80051a0:	4d0b      	ldr	r5, [pc, #44]	; (80051d0 <__libc_init_array+0x40>)
 80051a2:	4c0c      	ldr	r4, [pc, #48]	; (80051d4 <__libc_init_array+0x44>)
 80051a4:	f000 fc82 	bl	8005aac <_init>
 80051a8:	1b64      	subs	r4, r4, r5
 80051aa:	10a4      	asrs	r4, r4, #2
 80051ac:	2600      	movs	r6, #0
 80051ae:	42a6      	cmp	r6, r4
 80051b0:	d105      	bne.n	80051be <__libc_init_array+0x2e>
 80051b2:	bd70      	pop	{r4, r5, r6, pc}
 80051b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051b8:	4798      	blx	r3
 80051ba:	3601      	adds	r6, #1
 80051bc:	e7ee      	b.n	800519c <__libc_init_array+0xc>
 80051be:	f855 3b04 	ldr.w	r3, [r5], #4
 80051c2:	4798      	blx	r3
 80051c4:	3601      	adds	r6, #1
 80051c6:	e7f2      	b.n	80051ae <__libc_init_array+0x1e>
 80051c8:	08005bac 	.word	0x08005bac
 80051cc:	08005bac 	.word	0x08005bac
 80051d0:	08005bac 	.word	0x08005bac
 80051d4:	08005bb0 	.word	0x08005bb0

080051d8 <memset>:
 80051d8:	4402      	add	r2, r0
 80051da:	4603      	mov	r3, r0
 80051dc:	4293      	cmp	r3, r2
 80051de:	d100      	bne.n	80051e2 <memset+0xa>
 80051e0:	4770      	bx	lr
 80051e2:	f803 1b01 	strb.w	r1, [r3], #1
 80051e6:	e7f9      	b.n	80051dc <memset+0x4>

080051e8 <sniprintf>:
 80051e8:	b40c      	push	{r2, r3}
 80051ea:	b530      	push	{r4, r5, lr}
 80051ec:	4b17      	ldr	r3, [pc, #92]	; (800524c <sniprintf+0x64>)
 80051ee:	1e0c      	subs	r4, r1, #0
 80051f0:	681d      	ldr	r5, [r3, #0]
 80051f2:	b09d      	sub	sp, #116	; 0x74
 80051f4:	da08      	bge.n	8005208 <sniprintf+0x20>
 80051f6:	238b      	movs	r3, #139	; 0x8b
 80051f8:	602b      	str	r3, [r5, #0]
 80051fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051fe:	b01d      	add	sp, #116	; 0x74
 8005200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005204:	b002      	add	sp, #8
 8005206:	4770      	bx	lr
 8005208:	f44f 7302 	mov.w	r3, #520	; 0x208
 800520c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005210:	bf14      	ite	ne
 8005212:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005216:	4623      	moveq	r3, r4
 8005218:	9304      	str	r3, [sp, #16]
 800521a:	9307      	str	r3, [sp, #28]
 800521c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005220:	9002      	str	r0, [sp, #8]
 8005222:	9006      	str	r0, [sp, #24]
 8005224:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005228:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800522a:	ab21      	add	r3, sp, #132	; 0x84
 800522c:	a902      	add	r1, sp, #8
 800522e:	4628      	mov	r0, r5
 8005230:	9301      	str	r3, [sp, #4]
 8005232:	f000 f889 	bl	8005348 <_svfiprintf_r>
 8005236:	1c43      	adds	r3, r0, #1
 8005238:	bfbc      	itt	lt
 800523a:	238b      	movlt	r3, #139	; 0x8b
 800523c:	602b      	strlt	r3, [r5, #0]
 800523e:	2c00      	cmp	r4, #0
 8005240:	d0dd      	beq.n	80051fe <sniprintf+0x16>
 8005242:	9b02      	ldr	r3, [sp, #8]
 8005244:	2200      	movs	r2, #0
 8005246:	701a      	strb	r2, [r3, #0]
 8005248:	e7d9      	b.n	80051fe <sniprintf+0x16>
 800524a:	bf00      	nop
 800524c:	2000000c 	.word	0x2000000c

08005250 <siprintf>:
 8005250:	b40e      	push	{r1, r2, r3}
 8005252:	b500      	push	{lr}
 8005254:	b09c      	sub	sp, #112	; 0x70
 8005256:	ab1d      	add	r3, sp, #116	; 0x74
 8005258:	9002      	str	r0, [sp, #8]
 800525a:	9006      	str	r0, [sp, #24]
 800525c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005260:	4809      	ldr	r0, [pc, #36]	; (8005288 <siprintf+0x38>)
 8005262:	9107      	str	r1, [sp, #28]
 8005264:	9104      	str	r1, [sp, #16]
 8005266:	4909      	ldr	r1, [pc, #36]	; (800528c <siprintf+0x3c>)
 8005268:	f853 2b04 	ldr.w	r2, [r3], #4
 800526c:	9105      	str	r1, [sp, #20]
 800526e:	6800      	ldr	r0, [r0, #0]
 8005270:	9301      	str	r3, [sp, #4]
 8005272:	a902      	add	r1, sp, #8
 8005274:	f000 f868 	bl	8005348 <_svfiprintf_r>
 8005278:	9b02      	ldr	r3, [sp, #8]
 800527a:	2200      	movs	r2, #0
 800527c:	701a      	strb	r2, [r3, #0]
 800527e:	b01c      	add	sp, #112	; 0x70
 8005280:	f85d eb04 	ldr.w	lr, [sp], #4
 8005284:	b003      	add	sp, #12
 8005286:	4770      	bx	lr
 8005288:	2000000c 	.word	0x2000000c
 800528c:	ffff0208 	.word	0xffff0208

08005290 <__ssputs_r>:
 8005290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005294:	688e      	ldr	r6, [r1, #8]
 8005296:	429e      	cmp	r6, r3
 8005298:	4682      	mov	sl, r0
 800529a:	460c      	mov	r4, r1
 800529c:	4690      	mov	r8, r2
 800529e:	461f      	mov	r7, r3
 80052a0:	d838      	bhi.n	8005314 <__ssputs_r+0x84>
 80052a2:	898a      	ldrh	r2, [r1, #12]
 80052a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80052a8:	d032      	beq.n	8005310 <__ssputs_r+0x80>
 80052aa:	6825      	ldr	r5, [r4, #0]
 80052ac:	6909      	ldr	r1, [r1, #16]
 80052ae:	eba5 0901 	sub.w	r9, r5, r1
 80052b2:	6965      	ldr	r5, [r4, #20]
 80052b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052bc:	3301      	adds	r3, #1
 80052be:	444b      	add	r3, r9
 80052c0:	106d      	asrs	r5, r5, #1
 80052c2:	429d      	cmp	r5, r3
 80052c4:	bf38      	it	cc
 80052c6:	461d      	movcc	r5, r3
 80052c8:	0553      	lsls	r3, r2, #21
 80052ca:	d531      	bpl.n	8005330 <__ssputs_r+0xa0>
 80052cc:	4629      	mov	r1, r5
 80052ce:	f000 fb47 	bl	8005960 <_malloc_r>
 80052d2:	4606      	mov	r6, r0
 80052d4:	b950      	cbnz	r0, 80052ec <__ssputs_r+0x5c>
 80052d6:	230c      	movs	r3, #12
 80052d8:	f8ca 3000 	str.w	r3, [sl]
 80052dc:	89a3      	ldrh	r3, [r4, #12]
 80052de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052e2:	81a3      	strh	r3, [r4, #12]
 80052e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ec:	6921      	ldr	r1, [r4, #16]
 80052ee:	464a      	mov	r2, r9
 80052f0:	f000 fabe 	bl	8005870 <memcpy>
 80052f4:	89a3      	ldrh	r3, [r4, #12]
 80052f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052fe:	81a3      	strh	r3, [r4, #12]
 8005300:	6126      	str	r6, [r4, #16]
 8005302:	6165      	str	r5, [r4, #20]
 8005304:	444e      	add	r6, r9
 8005306:	eba5 0509 	sub.w	r5, r5, r9
 800530a:	6026      	str	r6, [r4, #0]
 800530c:	60a5      	str	r5, [r4, #8]
 800530e:	463e      	mov	r6, r7
 8005310:	42be      	cmp	r6, r7
 8005312:	d900      	bls.n	8005316 <__ssputs_r+0x86>
 8005314:	463e      	mov	r6, r7
 8005316:	4632      	mov	r2, r6
 8005318:	6820      	ldr	r0, [r4, #0]
 800531a:	4641      	mov	r1, r8
 800531c:	f000 fab6 	bl	800588c <memmove>
 8005320:	68a3      	ldr	r3, [r4, #8]
 8005322:	6822      	ldr	r2, [r4, #0]
 8005324:	1b9b      	subs	r3, r3, r6
 8005326:	4432      	add	r2, r6
 8005328:	60a3      	str	r3, [r4, #8]
 800532a:	6022      	str	r2, [r4, #0]
 800532c:	2000      	movs	r0, #0
 800532e:	e7db      	b.n	80052e8 <__ssputs_r+0x58>
 8005330:	462a      	mov	r2, r5
 8005332:	f000 fb6f 	bl	8005a14 <_realloc_r>
 8005336:	4606      	mov	r6, r0
 8005338:	2800      	cmp	r0, #0
 800533a:	d1e1      	bne.n	8005300 <__ssputs_r+0x70>
 800533c:	6921      	ldr	r1, [r4, #16]
 800533e:	4650      	mov	r0, sl
 8005340:	f000 fabe 	bl	80058c0 <_free_r>
 8005344:	e7c7      	b.n	80052d6 <__ssputs_r+0x46>
	...

08005348 <_svfiprintf_r>:
 8005348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534c:	4698      	mov	r8, r3
 800534e:	898b      	ldrh	r3, [r1, #12]
 8005350:	061b      	lsls	r3, r3, #24
 8005352:	b09d      	sub	sp, #116	; 0x74
 8005354:	4607      	mov	r7, r0
 8005356:	460d      	mov	r5, r1
 8005358:	4614      	mov	r4, r2
 800535a:	d50e      	bpl.n	800537a <_svfiprintf_r+0x32>
 800535c:	690b      	ldr	r3, [r1, #16]
 800535e:	b963      	cbnz	r3, 800537a <_svfiprintf_r+0x32>
 8005360:	2140      	movs	r1, #64	; 0x40
 8005362:	f000 fafd 	bl	8005960 <_malloc_r>
 8005366:	6028      	str	r0, [r5, #0]
 8005368:	6128      	str	r0, [r5, #16]
 800536a:	b920      	cbnz	r0, 8005376 <_svfiprintf_r+0x2e>
 800536c:	230c      	movs	r3, #12
 800536e:	603b      	str	r3, [r7, #0]
 8005370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005374:	e0d1      	b.n	800551a <_svfiprintf_r+0x1d2>
 8005376:	2340      	movs	r3, #64	; 0x40
 8005378:	616b      	str	r3, [r5, #20]
 800537a:	2300      	movs	r3, #0
 800537c:	9309      	str	r3, [sp, #36]	; 0x24
 800537e:	2320      	movs	r3, #32
 8005380:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005384:	f8cd 800c 	str.w	r8, [sp, #12]
 8005388:	2330      	movs	r3, #48	; 0x30
 800538a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005534 <_svfiprintf_r+0x1ec>
 800538e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005392:	f04f 0901 	mov.w	r9, #1
 8005396:	4623      	mov	r3, r4
 8005398:	469a      	mov	sl, r3
 800539a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800539e:	b10a      	cbz	r2, 80053a4 <_svfiprintf_r+0x5c>
 80053a0:	2a25      	cmp	r2, #37	; 0x25
 80053a2:	d1f9      	bne.n	8005398 <_svfiprintf_r+0x50>
 80053a4:	ebba 0b04 	subs.w	fp, sl, r4
 80053a8:	d00b      	beq.n	80053c2 <_svfiprintf_r+0x7a>
 80053aa:	465b      	mov	r3, fp
 80053ac:	4622      	mov	r2, r4
 80053ae:	4629      	mov	r1, r5
 80053b0:	4638      	mov	r0, r7
 80053b2:	f7ff ff6d 	bl	8005290 <__ssputs_r>
 80053b6:	3001      	adds	r0, #1
 80053b8:	f000 80aa 	beq.w	8005510 <_svfiprintf_r+0x1c8>
 80053bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053be:	445a      	add	r2, fp
 80053c0:	9209      	str	r2, [sp, #36]	; 0x24
 80053c2:	f89a 3000 	ldrb.w	r3, [sl]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f000 80a2 	beq.w	8005510 <_svfiprintf_r+0x1c8>
 80053cc:	2300      	movs	r3, #0
 80053ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053d6:	f10a 0a01 	add.w	sl, sl, #1
 80053da:	9304      	str	r3, [sp, #16]
 80053dc:	9307      	str	r3, [sp, #28]
 80053de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053e2:	931a      	str	r3, [sp, #104]	; 0x68
 80053e4:	4654      	mov	r4, sl
 80053e6:	2205      	movs	r2, #5
 80053e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053ec:	4851      	ldr	r0, [pc, #324]	; (8005534 <_svfiprintf_r+0x1ec>)
 80053ee:	f7fa fef7 	bl	80001e0 <memchr>
 80053f2:	9a04      	ldr	r2, [sp, #16]
 80053f4:	b9d8      	cbnz	r0, 800542e <_svfiprintf_r+0xe6>
 80053f6:	06d0      	lsls	r0, r2, #27
 80053f8:	bf44      	itt	mi
 80053fa:	2320      	movmi	r3, #32
 80053fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005400:	0711      	lsls	r1, r2, #28
 8005402:	bf44      	itt	mi
 8005404:	232b      	movmi	r3, #43	; 0x2b
 8005406:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800540a:	f89a 3000 	ldrb.w	r3, [sl]
 800540e:	2b2a      	cmp	r3, #42	; 0x2a
 8005410:	d015      	beq.n	800543e <_svfiprintf_r+0xf6>
 8005412:	9a07      	ldr	r2, [sp, #28]
 8005414:	4654      	mov	r4, sl
 8005416:	2000      	movs	r0, #0
 8005418:	f04f 0c0a 	mov.w	ip, #10
 800541c:	4621      	mov	r1, r4
 800541e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005422:	3b30      	subs	r3, #48	; 0x30
 8005424:	2b09      	cmp	r3, #9
 8005426:	d94e      	bls.n	80054c6 <_svfiprintf_r+0x17e>
 8005428:	b1b0      	cbz	r0, 8005458 <_svfiprintf_r+0x110>
 800542a:	9207      	str	r2, [sp, #28]
 800542c:	e014      	b.n	8005458 <_svfiprintf_r+0x110>
 800542e:	eba0 0308 	sub.w	r3, r0, r8
 8005432:	fa09 f303 	lsl.w	r3, r9, r3
 8005436:	4313      	orrs	r3, r2
 8005438:	9304      	str	r3, [sp, #16]
 800543a:	46a2      	mov	sl, r4
 800543c:	e7d2      	b.n	80053e4 <_svfiprintf_r+0x9c>
 800543e:	9b03      	ldr	r3, [sp, #12]
 8005440:	1d19      	adds	r1, r3, #4
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	9103      	str	r1, [sp, #12]
 8005446:	2b00      	cmp	r3, #0
 8005448:	bfbb      	ittet	lt
 800544a:	425b      	neglt	r3, r3
 800544c:	f042 0202 	orrlt.w	r2, r2, #2
 8005450:	9307      	strge	r3, [sp, #28]
 8005452:	9307      	strlt	r3, [sp, #28]
 8005454:	bfb8      	it	lt
 8005456:	9204      	strlt	r2, [sp, #16]
 8005458:	7823      	ldrb	r3, [r4, #0]
 800545a:	2b2e      	cmp	r3, #46	; 0x2e
 800545c:	d10c      	bne.n	8005478 <_svfiprintf_r+0x130>
 800545e:	7863      	ldrb	r3, [r4, #1]
 8005460:	2b2a      	cmp	r3, #42	; 0x2a
 8005462:	d135      	bne.n	80054d0 <_svfiprintf_r+0x188>
 8005464:	9b03      	ldr	r3, [sp, #12]
 8005466:	1d1a      	adds	r2, r3, #4
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	9203      	str	r2, [sp, #12]
 800546c:	2b00      	cmp	r3, #0
 800546e:	bfb8      	it	lt
 8005470:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005474:	3402      	adds	r4, #2
 8005476:	9305      	str	r3, [sp, #20]
 8005478:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005544 <_svfiprintf_r+0x1fc>
 800547c:	7821      	ldrb	r1, [r4, #0]
 800547e:	2203      	movs	r2, #3
 8005480:	4650      	mov	r0, sl
 8005482:	f7fa fead 	bl	80001e0 <memchr>
 8005486:	b140      	cbz	r0, 800549a <_svfiprintf_r+0x152>
 8005488:	2340      	movs	r3, #64	; 0x40
 800548a:	eba0 000a 	sub.w	r0, r0, sl
 800548e:	fa03 f000 	lsl.w	r0, r3, r0
 8005492:	9b04      	ldr	r3, [sp, #16]
 8005494:	4303      	orrs	r3, r0
 8005496:	3401      	adds	r4, #1
 8005498:	9304      	str	r3, [sp, #16]
 800549a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800549e:	4826      	ldr	r0, [pc, #152]	; (8005538 <_svfiprintf_r+0x1f0>)
 80054a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054a4:	2206      	movs	r2, #6
 80054a6:	f7fa fe9b 	bl	80001e0 <memchr>
 80054aa:	2800      	cmp	r0, #0
 80054ac:	d038      	beq.n	8005520 <_svfiprintf_r+0x1d8>
 80054ae:	4b23      	ldr	r3, [pc, #140]	; (800553c <_svfiprintf_r+0x1f4>)
 80054b0:	bb1b      	cbnz	r3, 80054fa <_svfiprintf_r+0x1b2>
 80054b2:	9b03      	ldr	r3, [sp, #12]
 80054b4:	3307      	adds	r3, #7
 80054b6:	f023 0307 	bic.w	r3, r3, #7
 80054ba:	3308      	adds	r3, #8
 80054bc:	9303      	str	r3, [sp, #12]
 80054be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054c0:	4433      	add	r3, r6
 80054c2:	9309      	str	r3, [sp, #36]	; 0x24
 80054c4:	e767      	b.n	8005396 <_svfiprintf_r+0x4e>
 80054c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80054ca:	460c      	mov	r4, r1
 80054cc:	2001      	movs	r0, #1
 80054ce:	e7a5      	b.n	800541c <_svfiprintf_r+0xd4>
 80054d0:	2300      	movs	r3, #0
 80054d2:	3401      	adds	r4, #1
 80054d4:	9305      	str	r3, [sp, #20]
 80054d6:	4619      	mov	r1, r3
 80054d8:	f04f 0c0a 	mov.w	ip, #10
 80054dc:	4620      	mov	r0, r4
 80054de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054e2:	3a30      	subs	r2, #48	; 0x30
 80054e4:	2a09      	cmp	r2, #9
 80054e6:	d903      	bls.n	80054f0 <_svfiprintf_r+0x1a8>
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0c5      	beq.n	8005478 <_svfiprintf_r+0x130>
 80054ec:	9105      	str	r1, [sp, #20]
 80054ee:	e7c3      	b.n	8005478 <_svfiprintf_r+0x130>
 80054f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80054f4:	4604      	mov	r4, r0
 80054f6:	2301      	movs	r3, #1
 80054f8:	e7f0      	b.n	80054dc <_svfiprintf_r+0x194>
 80054fa:	ab03      	add	r3, sp, #12
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	462a      	mov	r2, r5
 8005500:	4b0f      	ldr	r3, [pc, #60]	; (8005540 <_svfiprintf_r+0x1f8>)
 8005502:	a904      	add	r1, sp, #16
 8005504:	4638      	mov	r0, r7
 8005506:	f3af 8000 	nop.w
 800550a:	1c42      	adds	r2, r0, #1
 800550c:	4606      	mov	r6, r0
 800550e:	d1d6      	bne.n	80054be <_svfiprintf_r+0x176>
 8005510:	89ab      	ldrh	r3, [r5, #12]
 8005512:	065b      	lsls	r3, r3, #25
 8005514:	f53f af2c 	bmi.w	8005370 <_svfiprintf_r+0x28>
 8005518:	9809      	ldr	r0, [sp, #36]	; 0x24
 800551a:	b01d      	add	sp, #116	; 0x74
 800551c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005520:	ab03      	add	r3, sp, #12
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	462a      	mov	r2, r5
 8005526:	4b06      	ldr	r3, [pc, #24]	; (8005540 <_svfiprintf_r+0x1f8>)
 8005528:	a904      	add	r1, sp, #16
 800552a:	4638      	mov	r0, r7
 800552c:	f000 f87a 	bl	8005624 <_printf_i>
 8005530:	e7eb      	b.n	800550a <_svfiprintf_r+0x1c2>
 8005532:	bf00      	nop
 8005534:	08005b70 	.word	0x08005b70
 8005538:	08005b7a 	.word	0x08005b7a
 800553c:	00000000 	.word	0x00000000
 8005540:	08005291 	.word	0x08005291
 8005544:	08005b76 	.word	0x08005b76

08005548 <_printf_common>:
 8005548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800554c:	4616      	mov	r6, r2
 800554e:	4699      	mov	r9, r3
 8005550:	688a      	ldr	r2, [r1, #8]
 8005552:	690b      	ldr	r3, [r1, #16]
 8005554:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005558:	4293      	cmp	r3, r2
 800555a:	bfb8      	it	lt
 800555c:	4613      	movlt	r3, r2
 800555e:	6033      	str	r3, [r6, #0]
 8005560:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005564:	4607      	mov	r7, r0
 8005566:	460c      	mov	r4, r1
 8005568:	b10a      	cbz	r2, 800556e <_printf_common+0x26>
 800556a:	3301      	adds	r3, #1
 800556c:	6033      	str	r3, [r6, #0]
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	0699      	lsls	r1, r3, #26
 8005572:	bf42      	ittt	mi
 8005574:	6833      	ldrmi	r3, [r6, #0]
 8005576:	3302      	addmi	r3, #2
 8005578:	6033      	strmi	r3, [r6, #0]
 800557a:	6825      	ldr	r5, [r4, #0]
 800557c:	f015 0506 	ands.w	r5, r5, #6
 8005580:	d106      	bne.n	8005590 <_printf_common+0x48>
 8005582:	f104 0a19 	add.w	sl, r4, #25
 8005586:	68e3      	ldr	r3, [r4, #12]
 8005588:	6832      	ldr	r2, [r6, #0]
 800558a:	1a9b      	subs	r3, r3, r2
 800558c:	42ab      	cmp	r3, r5
 800558e:	dc26      	bgt.n	80055de <_printf_common+0x96>
 8005590:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005594:	1e13      	subs	r3, r2, #0
 8005596:	6822      	ldr	r2, [r4, #0]
 8005598:	bf18      	it	ne
 800559a:	2301      	movne	r3, #1
 800559c:	0692      	lsls	r2, r2, #26
 800559e:	d42b      	bmi.n	80055f8 <_printf_common+0xb0>
 80055a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055a4:	4649      	mov	r1, r9
 80055a6:	4638      	mov	r0, r7
 80055a8:	47c0      	blx	r8
 80055aa:	3001      	adds	r0, #1
 80055ac:	d01e      	beq.n	80055ec <_printf_common+0xa4>
 80055ae:	6823      	ldr	r3, [r4, #0]
 80055b0:	68e5      	ldr	r5, [r4, #12]
 80055b2:	6832      	ldr	r2, [r6, #0]
 80055b4:	f003 0306 	and.w	r3, r3, #6
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	bf08      	it	eq
 80055bc:	1aad      	subeq	r5, r5, r2
 80055be:	68a3      	ldr	r3, [r4, #8]
 80055c0:	6922      	ldr	r2, [r4, #16]
 80055c2:	bf0c      	ite	eq
 80055c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055c8:	2500      	movne	r5, #0
 80055ca:	4293      	cmp	r3, r2
 80055cc:	bfc4      	itt	gt
 80055ce:	1a9b      	subgt	r3, r3, r2
 80055d0:	18ed      	addgt	r5, r5, r3
 80055d2:	2600      	movs	r6, #0
 80055d4:	341a      	adds	r4, #26
 80055d6:	42b5      	cmp	r5, r6
 80055d8:	d11a      	bne.n	8005610 <_printf_common+0xc8>
 80055da:	2000      	movs	r0, #0
 80055dc:	e008      	b.n	80055f0 <_printf_common+0xa8>
 80055de:	2301      	movs	r3, #1
 80055e0:	4652      	mov	r2, sl
 80055e2:	4649      	mov	r1, r9
 80055e4:	4638      	mov	r0, r7
 80055e6:	47c0      	blx	r8
 80055e8:	3001      	adds	r0, #1
 80055ea:	d103      	bne.n	80055f4 <_printf_common+0xac>
 80055ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f4:	3501      	adds	r5, #1
 80055f6:	e7c6      	b.n	8005586 <_printf_common+0x3e>
 80055f8:	18e1      	adds	r1, r4, r3
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	2030      	movs	r0, #48	; 0x30
 80055fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005602:	4422      	add	r2, r4
 8005604:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005608:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800560c:	3302      	adds	r3, #2
 800560e:	e7c7      	b.n	80055a0 <_printf_common+0x58>
 8005610:	2301      	movs	r3, #1
 8005612:	4622      	mov	r2, r4
 8005614:	4649      	mov	r1, r9
 8005616:	4638      	mov	r0, r7
 8005618:	47c0      	blx	r8
 800561a:	3001      	adds	r0, #1
 800561c:	d0e6      	beq.n	80055ec <_printf_common+0xa4>
 800561e:	3601      	adds	r6, #1
 8005620:	e7d9      	b.n	80055d6 <_printf_common+0x8e>
	...

08005624 <_printf_i>:
 8005624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005628:	460c      	mov	r4, r1
 800562a:	4691      	mov	r9, r2
 800562c:	7e27      	ldrb	r7, [r4, #24]
 800562e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005630:	2f78      	cmp	r7, #120	; 0x78
 8005632:	4680      	mov	r8, r0
 8005634:	469a      	mov	sl, r3
 8005636:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800563a:	d807      	bhi.n	800564c <_printf_i+0x28>
 800563c:	2f62      	cmp	r7, #98	; 0x62
 800563e:	d80a      	bhi.n	8005656 <_printf_i+0x32>
 8005640:	2f00      	cmp	r7, #0
 8005642:	f000 80d8 	beq.w	80057f6 <_printf_i+0x1d2>
 8005646:	2f58      	cmp	r7, #88	; 0x58
 8005648:	f000 80a3 	beq.w	8005792 <_printf_i+0x16e>
 800564c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005650:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005654:	e03a      	b.n	80056cc <_printf_i+0xa8>
 8005656:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800565a:	2b15      	cmp	r3, #21
 800565c:	d8f6      	bhi.n	800564c <_printf_i+0x28>
 800565e:	a001      	add	r0, pc, #4	; (adr r0, 8005664 <_printf_i+0x40>)
 8005660:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005664:	080056bd 	.word	0x080056bd
 8005668:	080056d1 	.word	0x080056d1
 800566c:	0800564d 	.word	0x0800564d
 8005670:	0800564d 	.word	0x0800564d
 8005674:	0800564d 	.word	0x0800564d
 8005678:	0800564d 	.word	0x0800564d
 800567c:	080056d1 	.word	0x080056d1
 8005680:	0800564d 	.word	0x0800564d
 8005684:	0800564d 	.word	0x0800564d
 8005688:	0800564d 	.word	0x0800564d
 800568c:	0800564d 	.word	0x0800564d
 8005690:	080057dd 	.word	0x080057dd
 8005694:	08005701 	.word	0x08005701
 8005698:	080057bf 	.word	0x080057bf
 800569c:	0800564d 	.word	0x0800564d
 80056a0:	0800564d 	.word	0x0800564d
 80056a4:	080057ff 	.word	0x080057ff
 80056a8:	0800564d 	.word	0x0800564d
 80056ac:	08005701 	.word	0x08005701
 80056b0:	0800564d 	.word	0x0800564d
 80056b4:	0800564d 	.word	0x0800564d
 80056b8:	080057c7 	.word	0x080057c7
 80056bc:	680b      	ldr	r3, [r1, #0]
 80056be:	1d1a      	adds	r2, r3, #4
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	600a      	str	r2, [r1, #0]
 80056c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80056c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056cc:	2301      	movs	r3, #1
 80056ce:	e0a3      	b.n	8005818 <_printf_i+0x1f4>
 80056d0:	6825      	ldr	r5, [r4, #0]
 80056d2:	6808      	ldr	r0, [r1, #0]
 80056d4:	062e      	lsls	r6, r5, #24
 80056d6:	f100 0304 	add.w	r3, r0, #4
 80056da:	d50a      	bpl.n	80056f2 <_printf_i+0xce>
 80056dc:	6805      	ldr	r5, [r0, #0]
 80056de:	600b      	str	r3, [r1, #0]
 80056e0:	2d00      	cmp	r5, #0
 80056e2:	da03      	bge.n	80056ec <_printf_i+0xc8>
 80056e4:	232d      	movs	r3, #45	; 0x2d
 80056e6:	426d      	negs	r5, r5
 80056e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056ec:	485e      	ldr	r0, [pc, #376]	; (8005868 <_printf_i+0x244>)
 80056ee:	230a      	movs	r3, #10
 80056f0:	e019      	b.n	8005726 <_printf_i+0x102>
 80056f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80056f6:	6805      	ldr	r5, [r0, #0]
 80056f8:	600b      	str	r3, [r1, #0]
 80056fa:	bf18      	it	ne
 80056fc:	b22d      	sxthne	r5, r5
 80056fe:	e7ef      	b.n	80056e0 <_printf_i+0xbc>
 8005700:	680b      	ldr	r3, [r1, #0]
 8005702:	6825      	ldr	r5, [r4, #0]
 8005704:	1d18      	adds	r0, r3, #4
 8005706:	6008      	str	r0, [r1, #0]
 8005708:	0628      	lsls	r0, r5, #24
 800570a:	d501      	bpl.n	8005710 <_printf_i+0xec>
 800570c:	681d      	ldr	r5, [r3, #0]
 800570e:	e002      	b.n	8005716 <_printf_i+0xf2>
 8005710:	0669      	lsls	r1, r5, #25
 8005712:	d5fb      	bpl.n	800570c <_printf_i+0xe8>
 8005714:	881d      	ldrh	r5, [r3, #0]
 8005716:	4854      	ldr	r0, [pc, #336]	; (8005868 <_printf_i+0x244>)
 8005718:	2f6f      	cmp	r7, #111	; 0x6f
 800571a:	bf0c      	ite	eq
 800571c:	2308      	moveq	r3, #8
 800571e:	230a      	movne	r3, #10
 8005720:	2100      	movs	r1, #0
 8005722:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005726:	6866      	ldr	r6, [r4, #4]
 8005728:	60a6      	str	r6, [r4, #8]
 800572a:	2e00      	cmp	r6, #0
 800572c:	bfa2      	ittt	ge
 800572e:	6821      	ldrge	r1, [r4, #0]
 8005730:	f021 0104 	bicge.w	r1, r1, #4
 8005734:	6021      	strge	r1, [r4, #0]
 8005736:	b90d      	cbnz	r5, 800573c <_printf_i+0x118>
 8005738:	2e00      	cmp	r6, #0
 800573a:	d04d      	beq.n	80057d8 <_printf_i+0x1b4>
 800573c:	4616      	mov	r6, r2
 800573e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005742:	fb03 5711 	mls	r7, r3, r1, r5
 8005746:	5dc7      	ldrb	r7, [r0, r7]
 8005748:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800574c:	462f      	mov	r7, r5
 800574e:	42bb      	cmp	r3, r7
 8005750:	460d      	mov	r5, r1
 8005752:	d9f4      	bls.n	800573e <_printf_i+0x11a>
 8005754:	2b08      	cmp	r3, #8
 8005756:	d10b      	bne.n	8005770 <_printf_i+0x14c>
 8005758:	6823      	ldr	r3, [r4, #0]
 800575a:	07df      	lsls	r7, r3, #31
 800575c:	d508      	bpl.n	8005770 <_printf_i+0x14c>
 800575e:	6923      	ldr	r3, [r4, #16]
 8005760:	6861      	ldr	r1, [r4, #4]
 8005762:	4299      	cmp	r1, r3
 8005764:	bfde      	ittt	le
 8005766:	2330      	movle	r3, #48	; 0x30
 8005768:	f806 3c01 	strble.w	r3, [r6, #-1]
 800576c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005770:	1b92      	subs	r2, r2, r6
 8005772:	6122      	str	r2, [r4, #16]
 8005774:	f8cd a000 	str.w	sl, [sp]
 8005778:	464b      	mov	r3, r9
 800577a:	aa03      	add	r2, sp, #12
 800577c:	4621      	mov	r1, r4
 800577e:	4640      	mov	r0, r8
 8005780:	f7ff fee2 	bl	8005548 <_printf_common>
 8005784:	3001      	adds	r0, #1
 8005786:	d14c      	bne.n	8005822 <_printf_i+0x1fe>
 8005788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800578c:	b004      	add	sp, #16
 800578e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005792:	4835      	ldr	r0, [pc, #212]	; (8005868 <_printf_i+0x244>)
 8005794:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	680e      	ldr	r6, [r1, #0]
 800579c:	061f      	lsls	r7, r3, #24
 800579e:	f856 5b04 	ldr.w	r5, [r6], #4
 80057a2:	600e      	str	r6, [r1, #0]
 80057a4:	d514      	bpl.n	80057d0 <_printf_i+0x1ac>
 80057a6:	07d9      	lsls	r1, r3, #31
 80057a8:	bf44      	itt	mi
 80057aa:	f043 0320 	orrmi.w	r3, r3, #32
 80057ae:	6023      	strmi	r3, [r4, #0]
 80057b0:	b91d      	cbnz	r5, 80057ba <_printf_i+0x196>
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	f023 0320 	bic.w	r3, r3, #32
 80057b8:	6023      	str	r3, [r4, #0]
 80057ba:	2310      	movs	r3, #16
 80057bc:	e7b0      	b.n	8005720 <_printf_i+0xfc>
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	f043 0320 	orr.w	r3, r3, #32
 80057c4:	6023      	str	r3, [r4, #0]
 80057c6:	2378      	movs	r3, #120	; 0x78
 80057c8:	4828      	ldr	r0, [pc, #160]	; (800586c <_printf_i+0x248>)
 80057ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057ce:	e7e3      	b.n	8005798 <_printf_i+0x174>
 80057d0:	065e      	lsls	r6, r3, #25
 80057d2:	bf48      	it	mi
 80057d4:	b2ad      	uxthmi	r5, r5
 80057d6:	e7e6      	b.n	80057a6 <_printf_i+0x182>
 80057d8:	4616      	mov	r6, r2
 80057da:	e7bb      	b.n	8005754 <_printf_i+0x130>
 80057dc:	680b      	ldr	r3, [r1, #0]
 80057de:	6826      	ldr	r6, [r4, #0]
 80057e0:	6960      	ldr	r0, [r4, #20]
 80057e2:	1d1d      	adds	r5, r3, #4
 80057e4:	600d      	str	r5, [r1, #0]
 80057e6:	0635      	lsls	r5, r6, #24
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	d501      	bpl.n	80057f0 <_printf_i+0x1cc>
 80057ec:	6018      	str	r0, [r3, #0]
 80057ee:	e002      	b.n	80057f6 <_printf_i+0x1d2>
 80057f0:	0671      	lsls	r1, r6, #25
 80057f2:	d5fb      	bpl.n	80057ec <_printf_i+0x1c8>
 80057f4:	8018      	strh	r0, [r3, #0]
 80057f6:	2300      	movs	r3, #0
 80057f8:	6123      	str	r3, [r4, #16]
 80057fa:	4616      	mov	r6, r2
 80057fc:	e7ba      	b.n	8005774 <_printf_i+0x150>
 80057fe:	680b      	ldr	r3, [r1, #0]
 8005800:	1d1a      	adds	r2, r3, #4
 8005802:	600a      	str	r2, [r1, #0]
 8005804:	681e      	ldr	r6, [r3, #0]
 8005806:	6862      	ldr	r2, [r4, #4]
 8005808:	2100      	movs	r1, #0
 800580a:	4630      	mov	r0, r6
 800580c:	f7fa fce8 	bl	80001e0 <memchr>
 8005810:	b108      	cbz	r0, 8005816 <_printf_i+0x1f2>
 8005812:	1b80      	subs	r0, r0, r6
 8005814:	6060      	str	r0, [r4, #4]
 8005816:	6863      	ldr	r3, [r4, #4]
 8005818:	6123      	str	r3, [r4, #16]
 800581a:	2300      	movs	r3, #0
 800581c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005820:	e7a8      	b.n	8005774 <_printf_i+0x150>
 8005822:	6923      	ldr	r3, [r4, #16]
 8005824:	4632      	mov	r2, r6
 8005826:	4649      	mov	r1, r9
 8005828:	4640      	mov	r0, r8
 800582a:	47d0      	blx	sl
 800582c:	3001      	adds	r0, #1
 800582e:	d0ab      	beq.n	8005788 <_printf_i+0x164>
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	079b      	lsls	r3, r3, #30
 8005834:	d413      	bmi.n	800585e <_printf_i+0x23a>
 8005836:	68e0      	ldr	r0, [r4, #12]
 8005838:	9b03      	ldr	r3, [sp, #12]
 800583a:	4298      	cmp	r0, r3
 800583c:	bfb8      	it	lt
 800583e:	4618      	movlt	r0, r3
 8005840:	e7a4      	b.n	800578c <_printf_i+0x168>
 8005842:	2301      	movs	r3, #1
 8005844:	4632      	mov	r2, r6
 8005846:	4649      	mov	r1, r9
 8005848:	4640      	mov	r0, r8
 800584a:	47d0      	blx	sl
 800584c:	3001      	adds	r0, #1
 800584e:	d09b      	beq.n	8005788 <_printf_i+0x164>
 8005850:	3501      	adds	r5, #1
 8005852:	68e3      	ldr	r3, [r4, #12]
 8005854:	9903      	ldr	r1, [sp, #12]
 8005856:	1a5b      	subs	r3, r3, r1
 8005858:	42ab      	cmp	r3, r5
 800585a:	dcf2      	bgt.n	8005842 <_printf_i+0x21e>
 800585c:	e7eb      	b.n	8005836 <_printf_i+0x212>
 800585e:	2500      	movs	r5, #0
 8005860:	f104 0619 	add.w	r6, r4, #25
 8005864:	e7f5      	b.n	8005852 <_printf_i+0x22e>
 8005866:	bf00      	nop
 8005868:	08005b81 	.word	0x08005b81
 800586c:	08005b92 	.word	0x08005b92

08005870 <memcpy>:
 8005870:	440a      	add	r2, r1
 8005872:	4291      	cmp	r1, r2
 8005874:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005878:	d100      	bne.n	800587c <memcpy+0xc>
 800587a:	4770      	bx	lr
 800587c:	b510      	push	{r4, lr}
 800587e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005882:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005886:	4291      	cmp	r1, r2
 8005888:	d1f9      	bne.n	800587e <memcpy+0xe>
 800588a:	bd10      	pop	{r4, pc}

0800588c <memmove>:
 800588c:	4288      	cmp	r0, r1
 800588e:	b510      	push	{r4, lr}
 8005890:	eb01 0402 	add.w	r4, r1, r2
 8005894:	d902      	bls.n	800589c <memmove+0x10>
 8005896:	4284      	cmp	r4, r0
 8005898:	4623      	mov	r3, r4
 800589a:	d807      	bhi.n	80058ac <memmove+0x20>
 800589c:	1e43      	subs	r3, r0, #1
 800589e:	42a1      	cmp	r1, r4
 80058a0:	d008      	beq.n	80058b4 <memmove+0x28>
 80058a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058aa:	e7f8      	b.n	800589e <memmove+0x12>
 80058ac:	4402      	add	r2, r0
 80058ae:	4601      	mov	r1, r0
 80058b0:	428a      	cmp	r2, r1
 80058b2:	d100      	bne.n	80058b6 <memmove+0x2a>
 80058b4:	bd10      	pop	{r4, pc}
 80058b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058be:	e7f7      	b.n	80058b0 <memmove+0x24>

080058c0 <_free_r>:
 80058c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058c2:	2900      	cmp	r1, #0
 80058c4:	d048      	beq.n	8005958 <_free_r+0x98>
 80058c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058ca:	9001      	str	r0, [sp, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f1a1 0404 	sub.w	r4, r1, #4
 80058d2:	bfb8      	it	lt
 80058d4:	18e4      	addlt	r4, r4, r3
 80058d6:	f000 f8d3 	bl	8005a80 <__malloc_lock>
 80058da:	4a20      	ldr	r2, [pc, #128]	; (800595c <_free_r+0x9c>)
 80058dc:	9801      	ldr	r0, [sp, #4]
 80058de:	6813      	ldr	r3, [r2, #0]
 80058e0:	4615      	mov	r5, r2
 80058e2:	b933      	cbnz	r3, 80058f2 <_free_r+0x32>
 80058e4:	6063      	str	r3, [r4, #4]
 80058e6:	6014      	str	r4, [r2, #0]
 80058e8:	b003      	add	sp, #12
 80058ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058ee:	f000 b8cd 	b.w	8005a8c <__malloc_unlock>
 80058f2:	42a3      	cmp	r3, r4
 80058f4:	d90b      	bls.n	800590e <_free_r+0x4e>
 80058f6:	6821      	ldr	r1, [r4, #0]
 80058f8:	1862      	adds	r2, r4, r1
 80058fa:	4293      	cmp	r3, r2
 80058fc:	bf04      	itt	eq
 80058fe:	681a      	ldreq	r2, [r3, #0]
 8005900:	685b      	ldreq	r3, [r3, #4]
 8005902:	6063      	str	r3, [r4, #4]
 8005904:	bf04      	itt	eq
 8005906:	1852      	addeq	r2, r2, r1
 8005908:	6022      	streq	r2, [r4, #0]
 800590a:	602c      	str	r4, [r5, #0]
 800590c:	e7ec      	b.n	80058e8 <_free_r+0x28>
 800590e:	461a      	mov	r2, r3
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	b10b      	cbz	r3, 8005918 <_free_r+0x58>
 8005914:	42a3      	cmp	r3, r4
 8005916:	d9fa      	bls.n	800590e <_free_r+0x4e>
 8005918:	6811      	ldr	r1, [r2, #0]
 800591a:	1855      	adds	r5, r2, r1
 800591c:	42a5      	cmp	r5, r4
 800591e:	d10b      	bne.n	8005938 <_free_r+0x78>
 8005920:	6824      	ldr	r4, [r4, #0]
 8005922:	4421      	add	r1, r4
 8005924:	1854      	adds	r4, r2, r1
 8005926:	42a3      	cmp	r3, r4
 8005928:	6011      	str	r1, [r2, #0]
 800592a:	d1dd      	bne.n	80058e8 <_free_r+0x28>
 800592c:	681c      	ldr	r4, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	6053      	str	r3, [r2, #4]
 8005932:	4421      	add	r1, r4
 8005934:	6011      	str	r1, [r2, #0]
 8005936:	e7d7      	b.n	80058e8 <_free_r+0x28>
 8005938:	d902      	bls.n	8005940 <_free_r+0x80>
 800593a:	230c      	movs	r3, #12
 800593c:	6003      	str	r3, [r0, #0]
 800593e:	e7d3      	b.n	80058e8 <_free_r+0x28>
 8005940:	6825      	ldr	r5, [r4, #0]
 8005942:	1961      	adds	r1, r4, r5
 8005944:	428b      	cmp	r3, r1
 8005946:	bf04      	itt	eq
 8005948:	6819      	ldreq	r1, [r3, #0]
 800594a:	685b      	ldreq	r3, [r3, #4]
 800594c:	6063      	str	r3, [r4, #4]
 800594e:	bf04      	itt	eq
 8005950:	1949      	addeq	r1, r1, r5
 8005952:	6021      	streq	r1, [r4, #0]
 8005954:	6054      	str	r4, [r2, #4]
 8005956:	e7c7      	b.n	80058e8 <_free_r+0x28>
 8005958:	b003      	add	sp, #12
 800595a:	bd30      	pop	{r4, r5, pc}
 800595c:	20000094 	.word	0x20000094

08005960 <_malloc_r>:
 8005960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005962:	1ccd      	adds	r5, r1, #3
 8005964:	f025 0503 	bic.w	r5, r5, #3
 8005968:	3508      	adds	r5, #8
 800596a:	2d0c      	cmp	r5, #12
 800596c:	bf38      	it	cc
 800596e:	250c      	movcc	r5, #12
 8005970:	2d00      	cmp	r5, #0
 8005972:	4606      	mov	r6, r0
 8005974:	db01      	blt.n	800597a <_malloc_r+0x1a>
 8005976:	42a9      	cmp	r1, r5
 8005978:	d903      	bls.n	8005982 <_malloc_r+0x22>
 800597a:	230c      	movs	r3, #12
 800597c:	6033      	str	r3, [r6, #0]
 800597e:	2000      	movs	r0, #0
 8005980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005982:	f000 f87d 	bl	8005a80 <__malloc_lock>
 8005986:	4921      	ldr	r1, [pc, #132]	; (8005a0c <_malloc_r+0xac>)
 8005988:	680a      	ldr	r2, [r1, #0]
 800598a:	4614      	mov	r4, r2
 800598c:	b99c      	cbnz	r4, 80059b6 <_malloc_r+0x56>
 800598e:	4f20      	ldr	r7, [pc, #128]	; (8005a10 <_malloc_r+0xb0>)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	b923      	cbnz	r3, 800599e <_malloc_r+0x3e>
 8005994:	4621      	mov	r1, r4
 8005996:	4630      	mov	r0, r6
 8005998:	f000 f862 	bl	8005a60 <_sbrk_r>
 800599c:	6038      	str	r0, [r7, #0]
 800599e:	4629      	mov	r1, r5
 80059a0:	4630      	mov	r0, r6
 80059a2:	f000 f85d 	bl	8005a60 <_sbrk_r>
 80059a6:	1c43      	adds	r3, r0, #1
 80059a8:	d123      	bne.n	80059f2 <_malloc_r+0x92>
 80059aa:	230c      	movs	r3, #12
 80059ac:	6033      	str	r3, [r6, #0]
 80059ae:	4630      	mov	r0, r6
 80059b0:	f000 f86c 	bl	8005a8c <__malloc_unlock>
 80059b4:	e7e3      	b.n	800597e <_malloc_r+0x1e>
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	1b5b      	subs	r3, r3, r5
 80059ba:	d417      	bmi.n	80059ec <_malloc_r+0x8c>
 80059bc:	2b0b      	cmp	r3, #11
 80059be:	d903      	bls.n	80059c8 <_malloc_r+0x68>
 80059c0:	6023      	str	r3, [r4, #0]
 80059c2:	441c      	add	r4, r3
 80059c4:	6025      	str	r5, [r4, #0]
 80059c6:	e004      	b.n	80059d2 <_malloc_r+0x72>
 80059c8:	6863      	ldr	r3, [r4, #4]
 80059ca:	42a2      	cmp	r2, r4
 80059cc:	bf0c      	ite	eq
 80059ce:	600b      	streq	r3, [r1, #0]
 80059d0:	6053      	strne	r3, [r2, #4]
 80059d2:	4630      	mov	r0, r6
 80059d4:	f000 f85a 	bl	8005a8c <__malloc_unlock>
 80059d8:	f104 000b 	add.w	r0, r4, #11
 80059dc:	1d23      	adds	r3, r4, #4
 80059de:	f020 0007 	bic.w	r0, r0, #7
 80059e2:	1ac2      	subs	r2, r0, r3
 80059e4:	d0cc      	beq.n	8005980 <_malloc_r+0x20>
 80059e6:	1a1b      	subs	r3, r3, r0
 80059e8:	50a3      	str	r3, [r4, r2]
 80059ea:	e7c9      	b.n	8005980 <_malloc_r+0x20>
 80059ec:	4622      	mov	r2, r4
 80059ee:	6864      	ldr	r4, [r4, #4]
 80059f0:	e7cc      	b.n	800598c <_malloc_r+0x2c>
 80059f2:	1cc4      	adds	r4, r0, #3
 80059f4:	f024 0403 	bic.w	r4, r4, #3
 80059f8:	42a0      	cmp	r0, r4
 80059fa:	d0e3      	beq.n	80059c4 <_malloc_r+0x64>
 80059fc:	1a21      	subs	r1, r4, r0
 80059fe:	4630      	mov	r0, r6
 8005a00:	f000 f82e 	bl	8005a60 <_sbrk_r>
 8005a04:	3001      	adds	r0, #1
 8005a06:	d1dd      	bne.n	80059c4 <_malloc_r+0x64>
 8005a08:	e7cf      	b.n	80059aa <_malloc_r+0x4a>
 8005a0a:	bf00      	nop
 8005a0c:	20000094 	.word	0x20000094
 8005a10:	20000098 	.word	0x20000098

08005a14 <_realloc_r>:
 8005a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a16:	4607      	mov	r7, r0
 8005a18:	4614      	mov	r4, r2
 8005a1a:	460e      	mov	r6, r1
 8005a1c:	b921      	cbnz	r1, 8005a28 <_realloc_r+0x14>
 8005a1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005a22:	4611      	mov	r1, r2
 8005a24:	f7ff bf9c 	b.w	8005960 <_malloc_r>
 8005a28:	b922      	cbnz	r2, 8005a34 <_realloc_r+0x20>
 8005a2a:	f7ff ff49 	bl	80058c0 <_free_r>
 8005a2e:	4625      	mov	r5, r4
 8005a30:	4628      	mov	r0, r5
 8005a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a34:	f000 f830 	bl	8005a98 <_malloc_usable_size_r>
 8005a38:	42a0      	cmp	r0, r4
 8005a3a:	d20f      	bcs.n	8005a5c <_realloc_r+0x48>
 8005a3c:	4621      	mov	r1, r4
 8005a3e:	4638      	mov	r0, r7
 8005a40:	f7ff ff8e 	bl	8005960 <_malloc_r>
 8005a44:	4605      	mov	r5, r0
 8005a46:	2800      	cmp	r0, #0
 8005a48:	d0f2      	beq.n	8005a30 <_realloc_r+0x1c>
 8005a4a:	4631      	mov	r1, r6
 8005a4c:	4622      	mov	r2, r4
 8005a4e:	f7ff ff0f 	bl	8005870 <memcpy>
 8005a52:	4631      	mov	r1, r6
 8005a54:	4638      	mov	r0, r7
 8005a56:	f7ff ff33 	bl	80058c0 <_free_r>
 8005a5a:	e7e9      	b.n	8005a30 <_realloc_r+0x1c>
 8005a5c:	4635      	mov	r5, r6
 8005a5e:	e7e7      	b.n	8005a30 <_realloc_r+0x1c>

08005a60 <_sbrk_r>:
 8005a60:	b538      	push	{r3, r4, r5, lr}
 8005a62:	4d06      	ldr	r5, [pc, #24]	; (8005a7c <_sbrk_r+0x1c>)
 8005a64:	2300      	movs	r3, #0
 8005a66:	4604      	mov	r4, r0
 8005a68:	4608      	mov	r0, r1
 8005a6a:	602b      	str	r3, [r5, #0]
 8005a6c:	f7fb fd96 	bl	800159c <_sbrk>
 8005a70:	1c43      	adds	r3, r0, #1
 8005a72:	d102      	bne.n	8005a7a <_sbrk_r+0x1a>
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	b103      	cbz	r3, 8005a7a <_sbrk_r+0x1a>
 8005a78:	6023      	str	r3, [r4, #0]
 8005a7a:	bd38      	pop	{r3, r4, r5, pc}
 8005a7c:	2000024c 	.word	0x2000024c

08005a80 <__malloc_lock>:
 8005a80:	4801      	ldr	r0, [pc, #4]	; (8005a88 <__malloc_lock+0x8>)
 8005a82:	f000 b811 	b.w	8005aa8 <__retarget_lock_acquire_recursive>
 8005a86:	bf00      	nop
 8005a88:	20000254 	.word	0x20000254

08005a8c <__malloc_unlock>:
 8005a8c:	4801      	ldr	r0, [pc, #4]	; (8005a94 <__malloc_unlock+0x8>)
 8005a8e:	f000 b80c 	b.w	8005aaa <__retarget_lock_release_recursive>
 8005a92:	bf00      	nop
 8005a94:	20000254 	.word	0x20000254

08005a98 <_malloc_usable_size_r>:
 8005a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a9c:	1f18      	subs	r0, r3, #4
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	bfbc      	itt	lt
 8005aa2:	580b      	ldrlt	r3, [r1, r0]
 8005aa4:	18c0      	addlt	r0, r0, r3
 8005aa6:	4770      	bx	lr

08005aa8 <__retarget_lock_acquire_recursive>:
 8005aa8:	4770      	bx	lr

08005aaa <__retarget_lock_release_recursive>:
 8005aaa:	4770      	bx	lr

08005aac <_init>:
 8005aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aae:	bf00      	nop
 8005ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ab2:	bc08      	pop	{r3}
 8005ab4:	469e      	mov	lr, r3
 8005ab6:	4770      	bx	lr

08005ab8 <_fini>:
 8005ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aba:	bf00      	nop
 8005abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005abe:	bc08      	pop	{r3}
 8005ac0:	469e      	mov	lr, r3
 8005ac2:	4770      	bx	lr
