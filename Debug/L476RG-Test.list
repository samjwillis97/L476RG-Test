
L476RG-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005c18  08005c18  00015c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cf8  08005cf8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005cf8  08005cf8  00015cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d00  08005d00  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d00  08005d00  00015d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d04  08005d04  00015d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000074  08005d7c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08005d7c  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c8a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000296f  00000000  00000000  00036d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  000396a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001248  00000000  00000000  0003a9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002984f  00000000  00000000  0003bc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014429  00000000  00000000  00065477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107adb  00000000  00000000  000798a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018137b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000568c  00000000  00000000  001813d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c00 	.word	0x08005c00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005c00 	.word	0x08005c00

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HomeMenu>:
//		****************
//	1   str_1               3
//	2             pu16_1    4
//		****************
//
void HomeMenu() {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	// Every Menu Must Have, once pointers make this a function
	reset_vars();
 800057c:	f000 fa1e 	bl	80009bc <reset_vars>
	new_menu = true;
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <HomeMenu+0x38>)
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]

	// Setting Current State
	pCurrentMenu = HomeMenu;
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <HomeMenu+0x3c>)
 8000588:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <HomeMenu+0x40>)
 800058a:	601a      	str	r2, [r3, #0]
	menu_type = 0;
 800058c:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <HomeMenu+0x44>)
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]

	// Setting Required Pointers
	pu16_1 = &counter;
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HomeMenu+0x48>)
 8000594:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <HomeMenu+0x4c>)
 8000596:	601a      	str	r2, [r3, #0]

	// Functions
	// pfnc_1 always goes to a settings menu
	pfnc_1 = CounterSettings;
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <HomeMenu+0x50>)
 800059a:	4a0c      	ldr	r2, [pc, #48]	; (80005cc <HomeMenu+0x54>)
 800059c:	601a      	str	r2, [r3, #0]

	// Setting Required Strings
	strcpy(str_1, "Counter:");
 800059e:	4a0c      	ldr	r2, [pc, #48]	; (80005d0 <HomeMenu+0x58>)
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <HomeMenu+0x5c>)
 80005a2:	cb03      	ldmia	r3!, {r0, r1}
 80005a4:	6010      	str	r0, [r2, #0]
 80005a6:	6051      	str	r1, [r2, #4]
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	7213      	strb	r3, [r2, #8]
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000090 	.word	0x20000090
 80005b4:	200000b4 	.word	0x200000b4
 80005b8:	08000579 	.word	0x08000579
 80005bc:	200000ed 	.word	0x200000ed
 80005c0:	200000b0 	.word	0x200000b0
 80005c4:	20000092 	.word	0x20000092
 80005c8:	200000fc 	.word	0x200000fc
 80005cc:	080005d9 	.word	0x080005d9
 80005d0:	200000f0 	.word	0x200000f0
 80005d4:	08005c18 	.word	0x08005c18

080005d8 <CounterSettings>:
//		****************
//	1   str_1      str_3    3
//	2   str_2      str_4    4
//		****************
//
void CounterSettings() {
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	// Every Menu Must Have, once pointers make this a function
	reset_vars();
 80005dc:	f000 f9ee 	bl	80009bc <reset_vars>
	new_menu = true;
 80005e0:	4b13      	ldr	r3, [pc, #76]	; (8000630 <CounterSettings+0x58>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	701a      	strb	r2, [r3, #0]

	// Setting Current State
	pCurrentMenu = CounterSettings;
 80005e6:	4b13      	ldr	r3, [pc, #76]	; (8000634 <CounterSettings+0x5c>)
 80005e8:	4a13      	ldr	r2, [pc, #76]	; (8000638 <CounterSettings+0x60>)
 80005ea:	601a      	str	r2, [r3, #0]
	menu_type = 1;
 80005ec:	4b13      	ldr	r3, [pc, #76]	; (800063c <CounterSettings+0x64>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	701a      	strb	r2, [r3, #0]

	// Setting Required Pointers
	// btn 1 will go back
	// pfnc_2 -> 4 always go to another setting screen
	pfnc_2 = ResetCounter;
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <CounterSettings+0x68>)
 80005f4:	4a13      	ldr	r2, [pc, #76]	; (8000644 <CounterSettings+0x6c>)
 80005f6:	601a      	str	r2, [r3, #0]

	// Setting Required Strings
	strcpy(str_1, "Counter");
 80005f8:	4a13      	ldr	r2, [pc, #76]	; (8000648 <CounterSettings+0x70>)
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <CounterSettings+0x74>)
 80005fc:	cb03      	ldmia	r3!, {r0, r1}
 80005fe:	6010      	str	r0, [r2, #0]
 8000600:	6051      	str	r1, [r2, #4]
	strcpy(str_2, "Reset");
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <CounterSettings+0x78>)
 8000604:	4a13      	ldr	r2, [pc, #76]	; (8000654 <CounterSettings+0x7c>)
 8000606:	6810      	ldr	r0, [r2, #0]
 8000608:	6018      	str	r0, [r3, #0]
 800060a:	8892      	ldrh	r2, [r2, #4]
 800060c:	809a      	strh	r2, [r3, #4]
	strcpy(str_3, "Next");
 800060e:	4b12      	ldr	r3, [pc, #72]	; (8000658 <CounterSettings+0x80>)
 8000610:	4a12      	ldr	r2, [pc, #72]	; (800065c <CounterSettings+0x84>)
 8000612:	6810      	ldr	r0, [r2, #0]
 8000614:	6018      	str	r0, [r3, #0]
 8000616:	7912      	ldrb	r2, [r2, #4]
 8000618:	711a      	strb	r2, [r3, #4]
	strcpy(str_4, "Modify");
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <CounterSettings+0x88>)
 800061c:	4a11      	ldr	r2, [pc, #68]	; (8000664 <CounterSettings+0x8c>)
 800061e:	6810      	ldr	r0, [r2, #0]
 8000620:	6018      	str	r0, [r3, #0]
 8000622:	8891      	ldrh	r1, [r2, #4]
 8000624:	7992      	ldrb	r2, [r2, #6]
 8000626:	8099      	strh	r1, [r3, #4]
 8000628:	719a      	strb	r2, [r3, #6]
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000090 	.word	0x20000090
 8000634:	200000b4 	.word	0x200000b4
 8000638:	080005d9 	.word	0x080005d9
 800063c:	200000ed 	.word	0x200000ed
 8000640:	200000a4 	.word	0x200000a4
 8000644:	08000669 	.word	0x08000669
 8000648:	200000f0 	.word	0x200000f0
 800064c:	08005c24 	.word	0x08005c24
 8000650:	20000100 	.word	0x20000100
 8000654:	08005c2c 	.word	0x08005c2c
 8000658:	200000e4 	.word	0x200000e4
 800065c:	08005c34 	.word	0x08005c34
 8000660:	2000010c 	.word	0x2000010c
 8000664:	08005c3c 	.word	0x08005c3c

08000668 <ResetCounter>:
//	2   Yes           No    4
//		****************
//
// 	Both Buttons 3 and 4, return to pfnc_1
//
void ResetCounter() {
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	// Every Menu Must Have, once pointers make this a function
	reset_vars();
 800066c:	f000 f9a6 	bl	80009bc <reset_vars>
	new_menu = true;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <ResetCounter+0x24>)
 8000672:	2201      	movs	r2, #1
 8000674:	701a      	strb	r2, [r3, #0]

	// Setting Current State
	pCurrentMenu = ResetCounter;
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <ResetCounter+0x28>)
 8000678:	4a06      	ldr	r2, [pc, #24]	; (8000694 <ResetCounter+0x2c>)
 800067a:	601a      	str	r2, [r3, #0]
	menu_type = 2;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <ResetCounter+0x30>)
 800067e:	2202      	movs	r2, #2
 8000680:	701a      	strb	r2, [r3, #0]

	// Setting Required Pointers
	// pfnc_1 is run if yes is pressed
	pfnc_1 = reset_counter;
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <ResetCounter+0x34>)
 8000684:	4a06      	ldr	r2, [pc, #24]	; (80006a0 <ResetCounter+0x38>)
 8000686:	601a      	str	r2, [r3, #0]

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000090 	.word	0x20000090
 8000690:	200000b4 	.word	0x200000b4
 8000694:	08000669 	.word	0x08000669
 8000698:	200000ed 	.word	0x200000ed
 800069c:	200000fc 	.word	0x200000fc
 80006a0:	08000a1d 	.word	0x08000a1d

080006a4 <Display_init>:

/************************************** Function definitions **************************************/
DisplayProcTypeDef Display_init(
		uint8_t *btn_flag,
		Lcd_HandleTypeDef *lcd)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
	DisplayProcTypeDef display;

	// Pointer to BTN Flag
	display.btn_flag = btn_flag;
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	613b      	str	r3, [r7, #16]

	// Pointer to LCD
	display.lcd = lcd;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	617b      	str	r3, [r7, #20]

	// Initialize as Home Screen
	pHomeMenu = HomeMenu;
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <Display_init+0x38>)
 80006ba:	4a09      	ldr	r2, [pc, #36]	; (80006e0 <Display_init+0x3c>)
 80006bc:	601a      	str	r2, [r3, #0]
	HomeMenu();
 80006be:	f7ff ff5b 	bl	8000578 <HomeMenu>

	return display;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	461a      	mov	r2, r3
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006ce:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80006d2:	68f8      	ldr	r0, [r7, #12]
 80006d4:	3718      	adds	r7, #24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000118 	.word	0x20000118
 80006e0:	08000579 	.word	0x08000579

080006e4 <Display_update>:

void Display_update(DisplayProcTypeDef *display) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

	// Button Checker - Make Better, add timeout to return home
	if (*display->btn_flag != 0) {
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d06e      	beq.n	80007d4 <Display_update+0xf0>
		last_btn = HAL_GetTick();
 80006f6:	f001 f8fd 	bl	80018f4 <HAL_GetTick>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4a87      	ldr	r2, [pc, #540]	; (800091c <Display_update+0x238>)
 80006fe:	6013      	str	r3, [r2, #0]
		switch (menu_type) {
 8000700:	4b87      	ldr	r3, [pc, #540]	; (8000920 <Display_update+0x23c>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b02      	cmp	r3, #2
 8000706:	d02f      	beq.n	8000768 <Display_update+0x84>
 8000708:	2b02      	cmp	r3, #2
 800070a:	dc58      	bgt.n	80007be <Display_update+0xda>
 800070c:	2b00      	cmp	r3, #0
 800070e:	d002      	beq.n	8000716 <Display_update+0x32>
 8000710:	2b01      	cmp	r3, #1
 8000712:	d00e      	beq.n	8000732 <Display_update+0x4e>
					GoTo();
				}

				break;
			default:
				break;
 8000714:	e053      	b.n	80007be <Display_update+0xda>
				if (*display->btn_flag == 1) {
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d150      	bne.n	80007c2 <Display_update+0xde>
					history_push(pCurrentMenu);
 8000720:	4b80      	ldr	r3, [pc, #512]	; (8000924 <Display_update+0x240>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4618      	mov	r0, r3
 8000726:	f000 f9c5 	bl	8000ab4 <history_push>
					pfnc_1();
 800072a:	4b7f      	ldr	r3, [pc, #508]	; (8000928 <Display_update+0x244>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4798      	blx	r3
				break;
 8000730:	e047      	b.n	80007c2 <Display_update+0xde>
				if (*display->btn_flag == 1) {
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d107      	bne.n	800074c <Display_update+0x68>
					GoTo = history_pop();
 800073c:	f000 f996 	bl	8000a6c <history_pop>
 8000740:	4603      	mov	r3, r0
 8000742:	4a7a      	ldr	r2, [pc, #488]	; (800092c <Display_update+0x248>)
 8000744:	6013      	str	r3, [r2, #0]
					GoTo();
 8000746:	4b79      	ldr	r3, [pc, #484]	; (800092c <Display_update+0x248>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4798      	blx	r3
				if (*display->btn_flag == 2) {
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b02      	cmp	r3, #2
 8000754:	d137      	bne.n	80007c6 <Display_update+0xe2>
					history_push(pCurrentMenu);
 8000756:	4b73      	ldr	r3, [pc, #460]	; (8000924 <Display_update+0x240>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4618      	mov	r0, r3
 800075c:	f000 f9aa 	bl	8000ab4 <history_push>
					pfnc_2();
 8000760:	4b73      	ldr	r3, [pc, #460]	; (8000930 <Display_update+0x24c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4798      	blx	r3
				break;
 8000766:	e02e      	b.n	80007c6 <Display_update+0xe2>
				if (*display->btn_flag == 1) {
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d107      	bne.n	8000782 <Display_update+0x9e>
					GoTo = history_pop();
 8000772:	f000 f97b 	bl	8000a6c <history_pop>
 8000776:	4603      	mov	r3, r0
 8000778:	4a6c      	ldr	r2, [pc, #432]	; (800092c <Display_update+0x248>)
 800077a:	6013      	str	r3, [r2, #0]
					GoTo();
 800077c:	4b6b      	ldr	r3, [pc, #428]	; (800092c <Display_update+0x248>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4798      	blx	r3
				if (*display->btn_flag == 4) {
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b04      	cmp	r3, #4
 800078a:	d107      	bne.n	800079c <Display_update+0xb8>
					GoTo = history_pop();
 800078c:	f000 f96e 	bl	8000a6c <history_pop>
 8000790:	4603      	mov	r3, r0
 8000792:	4a66      	ldr	r2, [pc, #408]	; (800092c <Display_update+0x248>)
 8000794:	6013      	str	r3, [r2, #0]
					GoTo();
 8000796:	4b65      	ldr	r3, [pc, #404]	; (800092c <Display_update+0x248>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4798      	blx	r3
				if (*display->btn_flag == 2) {
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d111      	bne.n	80007ca <Display_update+0xe6>
					pfnc_1(); // Do This Better, Callback? Sub Routine or something?
 80007a6:	4b60      	ldr	r3, [pc, #384]	; (8000928 <Display_update+0x244>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4798      	blx	r3
					GoTo = history_pop();
 80007ac:	f000 f95e 	bl	8000a6c <history_pop>
 80007b0:	4603      	mov	r3, r0
 80007b2:	4a5e      	ldr	r2, [pc, #376]	; (800092c <Display_update+0x248>)
 80007b4:	6013      	str	r3, [r2, #0]
					GoTo();
 80007b6:	4b5d      	ldr	r3, [pc, #372]	; (800092c <Display_update+0x248>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4798      	blx	r3
				break;
 80007bc:	e005      	b.n	80007ca <Display_update+0xe6>
				break;
 80007be:	bf00      	nop
 80007c0:	e004      	b.n	80007cc <Display_update+0xe8>
				break;
 80007c2:	bf00      	nop
 80007c4:	e002      	b.n	80007cc <Display_update+0xe8>
				break;
 80007c6:	bf00      	nop
 80007c8:	e000      	b.n	80007cc <Display_update+0xe8>
				break;
 80007ca:	bf00      	nop
		}
		*display->btn_flag = 0;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
	}


	// Update Display (New Menu)
	if (new_menu == true){
 80007d4:	4b57      	ldr	r3, [pc, #348]	; (8000934 <Display_update+0x250>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d166      	bne.n	80008aa <Display_update+0x1c6>
		// Update Display
		Lcd_clear(display->lcd);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 fafb 	bl	8000ddc <Lcd_clear>
		switch (menu_type) {
 80007e6:	4b4e      	ldr	r3, [pc, #312]	; (8000920 <Display_update+0x23c>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b02      	cmp	r3, #2
 80007ec:	d03d      	beq.n	800086a <Display_update+0x186>
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	dc57      	bgt.n	80008a2 <Display_update+0x1be>
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d002      	beq.n	80007fc <Display_update+0x118>
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d00e      	beq.n	8000818 <Display_update+0x134>
				Lcd_string_right_aligned(display->lcd, "No", 1, 15);

				break;
			default:
				// do nothing
				break;
 80007fa:	e052      	b.n	80008a2 <Display_update+0x1be>
				Lcd_cursor(display->lcd, 0, 0);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f000 facf 	bl	8000da8 <Lcd_cursor>
				Lcd_string(display->lcd, str_1);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	494a      	ldr	r1, [pc, #296]	; (8000938 <Display_update+0x254>)
 8000810:	4618      	mov	r0, r3
 8000812:	f000 fa63 	bl	8000cdc <Lcd_string>
				break;
 8000816:	e045      	b.n	80008a4 <Display_update+0x1c0>
				Lcd_cursor(display->lcd, 0, 0);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	2200      	movs	r2, #0
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f000 fac1 	bl	8000da8 <Lcd_cursor>
				Lcd_string(display->lcd, str_1);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	4943      	ldr	r1, [pc, #268]	; (8000938 <Display_update+0x254>)
 800082c:	4618      	mov	r0, r3
 800082e:	f000 fa55 	bl	8000cdc <Lcd_string>
				Lcd_cursor(display->lcd, 1, 0);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	2200      	movs	r2, #0
 8000838:	2101      	movs	r1, #1
 800083a:	4618      	mov	r0, r3
 800083c:	f000 fab4 	bl	8000da8 <Lcd_cursor>
				Lcd_string(display->lcd, str_2);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	493d      	ldr	r1, [pc, #244]	; (800093c <Display_update+0x258>)
 8000846:	4618      	mov	r0, r3
 8000848:	f000 fa48 	bl	8000cdc <Lcd_string>
				Lcd_string_right_aligned(display->lcd, str_3, 0, 15);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6858      	ldr	r0, [r3, #4]
 8000850:	230f      	movs	r3, #15
 8000852:	2200      	movs	r2, #0
 8000854:	493a      	ldr	r1, [pc, #232]	; (8000940 <Display_update+0x25c>)
 8000856:	f000 fa83 	bl	8000d60 <Lcd_string_right_aligned>
				Lcd_string_right_aligned(display->lcd, str_4, 1, 15);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6858      	ldr	r0, [r3, #4]
 800085e:	230f      	movs	r3, #15
 8000860:	2201      	movs	r2, #1
 8000862:	4938      	ldr	r1, [pc, #224]	; (8000944 <Display_update+0x260>)
 8000864:	f000 fa7c 	bl	8000d60 <Lcd_string_right_aligned>
				break;
 8000868:	e01c      	b.n	80008a4 <Display_update+0x1c0>
				Lcd_string_centered(display->lcd, "Are You Sure?", 0);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	2200      	movs	r2, #0
 8000870:	4935      	ldr	r1, [pc, #212]	; (8000948 <Display_update+0x264>)
 8000872:	4618      	mov	r0, r3
 8000874:	f000 fa51 	bl	8000d1a <Lcd_string_centered>
				Lcd_cursor(display->lcd, 1, 0);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	2200      	movs	r2, #0
 800087e:	2101      	movs	r1, #1
 8000880:	4618      	mov	r0, r3
 8000882:	f000 fa91 	bl	8000da8 <Lcd_cursor>
				Lcd_string(display->lcd, "Yes");
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	4930      	ldr	r1, [pc, #192]	; (800094c <Display_update+0x268>)
 800088c:	4618      	mov	r0, r3
 800088e:	f000 fa25 	bl	8000cdc <Lcd_string>
				Lcd_string_right_aligned(display->lcd, "No", 1, 15);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6858      	ldr	r0, [r3, #4]
 8000896:	230f      	movs	r3, #15
 8000898:	2201      	movs	r2, #1
 800089a:	492d      	ldr	r1, [pc, #180]	; (8000950 <Display_update+0x26c>)
 800089c:	f000 fa60 	bl	8000d60 <Lcd_string_right_aligned>
				break;
 80008a0:	e000      	b.n	80008a4 <Display_update+0x1c0>
				break;
 80008a2:	bf00      	nop
		}
		// set new_menu false once handled
		new_menu = false;
 80008a4:	4b23      	ldr	r3, [pc, #140]	; (8000934 <Display_update+0x250>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
	}


	// Update Display (Continuous)
	if (has_var_changed() == true){
 80008aa:	f000 f85b 	bl	8000964 <has_var_changed>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d10d      	bne.n	80008d0 <Display_update+0x1ec>
		// Update Display
		switch (menu_type) {
 80008b4:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <Display_update+0x23c>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d10b      	bne.n	80008d4 <Display_update+0x1f0>
			case 0:
				Lcd_u16_right_aligned(display->lcd, *pu16_1, 1, 15);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6858      	ldr	r0, [r3, #4]
 80008c0:	4b24      	ldr	r3, [pc, #144]	; (8000954 <Display_update+0x270>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	8819      	ldrh	r1, [r3, #0]
 80008c6:	230f      	movs	r3, #15
 80008c8:	2201      	movs	r2, #1
 80008ca:	f000 f9ab 	bl	8000c24 <Lcd_u16_right_aligned>
				break;
 80008ce:	e002      	b.n	80008d6 <Display_update+0x1f2>
			default:
				// do nothing
				break;
		}
	}
 80008d0:	bf00      	nop
 80008d2:	e000      	b.n	80008d6 <Display_update+0x1f2>
				break;
 80008d4:	bf00      	nop

	if (pCurrentMenu != pHomeMenu) {
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <Display_update+0x240>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <Display_update+0x274>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	429a      	cmp	r2, r3
 80008e0:	d018      	beq.n	8000914 <Display_update+0x230>
		if ((no_btn_timeout) > 0 && ((HAL_GetTick() - last_btn) > (no_btn_timeout * 1000))) {
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <Display_update+0x278>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d014      	beq.n	8000914 <Display_update+0x230>
 80008ea:	f001 f803 	bl	80018f4 <HAL_GetTick>
 80008ee:	4602      	mov	r2, r0
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <Display_update+0x238>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	4a19      	ldr	r2, [pc, #100]	; (800095c <Display_update+0x278>)
 80008f8:	7812      	ldrb	r2, [r2, #0]
 80008fa:	4611      	mov	r1, r2
 80008fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000900:	fb02 f201 	mul.w	r2, r2, r1
 8000904:	4293      	cmp	r3, r2
 8000906:	d905      	bls.n	8000914 <Display_update+0x230>
			// ONLY IF NOT ON HOME SCREEN
			history_top = -1; 	// essentially clears history
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <Display_update+0x27c>)
 800090a:	22ff      	movs	r2, #255	; 0xff
 800090c:	701a      	strb	r2, [r3, #0]
			pHomeMenu();
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <Display_update+0x274>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4798      	blx	r3
		}
	}

}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200000a0 	.word	0x200000a0
 8000920:	200000ed 	.word	0x200000ed
 8000924:	200000b4 	.word	0x200000b4
 8000928:	200000fc 	.word	0x200000fc
 800092c:	200000ac 	.word	0x200000ac
 8000930:	200000a4 	.word	0x200000a4
 8000934:	20000090 	.word	0x20000090
 8000938:	200000f0 	.word	0x200000f0
 800093c:	20000100 	.word	0x20000100
 8000940:	200000e4 	.word	0x200000e4
 8000944:	2000010c 	.word	0x2000010c
 8000948:	08005c44 	.word	0x08005c44
 800094c:	08005c54 	.word	0x08005c54
 8000950:	08005c58 	.word	0x08005c58
 8000954:	200000b0 	.word	0x200000b0
 8000958:	20000118 	.word	0x20000118
 800095c:	20000000 	.word	0x20000000
 8000960:	20000002 	.word	0x20000002

08000964 <has_var_changed>:


/************************************** Static function definition **************************************/

bool has_var_changed() {
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
	if (*pu8_1 != u8_1_prev) {
 8000968:	4b10      	ldr	r3, [pc, #64]	; (80009ac <has_var_changed+0x48>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	781a      	ldrb	r2, [r3, #0]
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <has_var_changed+0x4c>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	429a      	cmp	r2, r3
 8000974:	d006      	beq.n	8000984 <has_var_changed+0x20>
		u8_1_prev = *pu8_1;
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <has_var_changed+0x48>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	781a      	ldrb	r2, [r3, #0]
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <has_var_changed+0x4c>)
 800097e:	701a      	strb	r2, [r3, #0]
		return true;
 8000980:	2301      	movs	r3, #1
 8000982:	e00e      	b.n	80009a2 <has_var_changed+0x3e>
	}
	if (*pu16_1 != u16_1_prev) {
 8000984:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <has_var_changed+0x50>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	881a      	ldrh	r2, [r3, #0]
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <has_var_changed+0x54>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	429a      	cmp	r2, r3
 8000990:	d006      	beq.n	80009a0 <has_var_changed+0x3c>
		u16_1_prev = *pu16_1;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <has_var_changed+0x50>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	881a      	ldrh	r2, [r3, #0]
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <has_var_changed+0x54>)
 800099a:	801a      	strh	r2, [r3, #0]
		return true;
 800099c:	2301      	movs	r3, #1
 800099e:	e000      	b.n	80009a2 <has_var_changed+0x3e>
	}
	return false;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	200000a8 	.word	0x200000a8
 80009b0:	200000ee 	.word	0x200000ee
 80009b4:	200000b0 	.word	0x200000b0
 80009b8:	200000b8 	.word	0x200000b8

080009bc <reset_vars>:

void reset_vars() {
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
	// Func Pointers
	pfnc_1 = NULL;
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <reset_vars+0x40>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
	pfnc_2 = NULL;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <reset_vars+0x44>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]

	// U8 Pointers
	pu8_1 = NULL;
 80009cc:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <reset_vars+0x48>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]

	// U16 Pointers
	pu16_1 = NULL;
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <reset_vars+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]

	// Strings
	strcpy(str_1, "");
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <reset_vars+0x50>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
	strcpy(str_2, "");
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <reset_vars+0x54>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
	strcpy(str_3, "");
 80009e4:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <reset_vars+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
	strcpy(str_4, "");
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <reset_vars+0x5c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]

}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	200000fc 	.word	0x200000fc
 8000a00:	200000a4 	.word	0x200000a4
 8000a04:	200000a8 	.word	0x200000a8
 8000a08:	200000b0 	.word	0x200000b0
 8000a0c:	200000f0 	.word	0x200000f0
 8000a10:	20000100 	.word	0x20000100
 8000a14:	200000e4 	.word	0x200000e4
 8000a18:	2000010c 	.word	0x2000010c

08000a1c <reset_counter>:

void reset_counter () {
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
	counter = 0;
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <reset_counter+0x14>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	801a      	strh	r2, [r3, #0]
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	20000092 	.word	0x20000092

08000a34 <history_isempty>:

// https://www.tutorialspoint.com/data_structures_algorithms/stack_program_in_c.htm

bool history_isempty() {
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
	if (history_top == -1) {
		return true;
	} else {
		return false;
 8000a38:	2300      	movs	r3, #0
	}
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <history_isfull>:


bool history_isfull() {
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
	if (history_top == HISTORY_MAX_SIZE) {
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <history_isfull+0x20>)
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <history_isfull+0x24>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d101      	bne.n	8000a58 <history_isfull+0x14>
		return true;
 8000a54:	2301      	movs	r3, #1
 8000a56:	e000      	b.n	8000a5a <history_isfull+0x16>
	} else {
		return false;
 8000a58:	2300      	movs	r3, #0
	}
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	20000002 	.word	0x20000002
 8000a68:	20000001 	.word	0x20000001

08000a6c <history_pop>:
pfn history_peek() {
   return history[history_top];
}


pfn history_pop() {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
	pfn data;

	if (history_isempty() == false) {
 8000a72:	f7ff ffdf 	bl	8000a34 <history_isempty>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d10e      	bne.n	8000a9a <history_pop+0x2e>
		data = history[history_top];
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <history_pop+0x3c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <history_pop+0x40>)
 8000a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a88:	607b      	str	r3, [r7, #4]
		history_top = history_top - 1;
 8000a8a:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <history_pop+0x3c>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <history_pop+0x3c>)
 8000a94:	701a      	strb	r2, [r3, #0]
		return data;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	e001      	b.n	8000a9e <history_pop+0x32>
	}
	return pHomeMenu;
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <history_pop+0x44>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000002 	.word	0x20000002
 8000aac:	200000bc 	.word	0x200000bc
 8000ab0:	20000118 	.word	0x20000118

08000ab4 <history_push>:


void history_push(pfn fnc) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	if (history_isfull() == false) {
 8000abc:	f7ff ffc2 	bl	8000a44 <history_isfull>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d10c      	bne.n	8000ae0 <history_push+0x2c>
		history_top = history_top + 1;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <history_push+0x34>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	3301      	adds	r3, #1
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <history_push+0x34>)
 8000ad0:	701a      	strb	r2, [r3, #0]
		history[history_top] = fnc;
 8000ad2:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <history_push+0x34>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <history_push+0x38>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000002 	.word	0x20000002
 8000aec:	200000bc 	.word	0x200000bc

08000af0 <Lcd_create>:
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin,
		Lcd_ModeTypeDef mode,
		bool cursor,
		bool blink)
{
 8000af0:	b5b0      	push	{r4, r5, r7, lr}
 8000af2:	b08c      	sub	sp, #48	; 0x30
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
 8000afc:	603b      	str	r3, [r7, #0]

	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000afe:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000b02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	lcd.en_pin = en_pin;
 8000b06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000b0a:	853b      	strh	r3, [r7, #40]	; 0x28
	lcd.en_port = en_port;
 8000b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24

	lcd.rs_pin = rs_pin;
 8000b10:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b14:	843b      	strh	r3, [r7, #32]
	lcd.rs_port = rs_port;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	61fb      	str	r3, [r7, #28]

	lcd.data_pin = pin;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	61bb      	str	r3, [r7, #24]
	lcd.data_port = port;
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	617b      	str	r3, [r7, #20]

	lcd.cursor = cursor;
 8000b22:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	lcd.blink = blink;
 8000b2a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000b2e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	Lcd_init(&lcd);		// Some sort of pointer to the lcd type def just init
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f80e 	bl	8000b58 <Lcd_init>

	return lcd;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	461d      	mov	r5, r3
 8000b40:	f107 0414 	add.w	r4, r7, #20
 8000b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b48:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000b4c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	3730      	adds	r7, #48	; 0x30
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bdb0      	pop	{r4, r5, r7, pc}

08000b58 <Lcd_init>:

/**
 * Init 16 x 2 LCD without cursor
 */
void Lcd_init(Lcd_HandleTypeDef *lcd) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	if (lcd->mode == LCD_4_BIT_MODE)	// gets mode from the struct that lcd points to
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	7d9b      	ldrb	r3, [r3, #22]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d121      	bne.n	8000bac <Lcd_init+0x54>
	{
		HAL_Delay(50);
 8000b68:	2032      	movs	r0, #50	; 0x32
 8000b6a:	f000 fecf 	bl	800190c <HAL_Delay>
		lcd_write_nib_command(lcd, 0x30);		// Func Set
 8000b6e:	2130      	movs	r1, #48	; 0x30
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f000 f9db 	bl	8000f2c <lcd_write_nib_command>
		HAL_Delay(5);
 8000b76:	2005      	movs	r0, #5
 8000b78:	f000 fec8 	bl	800190c <HAL_Delay>
		lcd_write_nib_command(lcd, 0x30);		// Func Set
 8000b7c:	2130      	movs	r1, #48	; 0x30
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f000 f9d4 	bl	8000f2c <lcd_write_nib_command>
		HAL_Delay(1);
 8000b84:	2001      	movs	r0, #1
 8000b86:	f000 fec1 	bl	800190c <HAL_Delay>
		lcd_write_nib_command(lcd, 0x30);		// Func Set
 8000b8a:	2130      	movs	r1, #48	; 0x30
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f000 f9cd 	bl	8000f2c <lcd_write_nib_command>

		lcd_write_nib_command(lcd, FUNCTION_SET);			// Func Set 4-Bit
 8000b92:	2120      	movs	r1, #32
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f000 f9c9 	bl	8000f2c <lcd_write_nib_command>
		lcd_write_command(lcd, FUNCTION_SET | OPT_N);	// Func Set 4-Bit Mode, 2 Lines
 8000b9a:	2128      	movs	r1, #40	; 0x28
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f000 f929 	bl	8000df4 <lcd_write_command>

		lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL);	// Display OFF
 8000ba2:	2108      	movs	r1, #8
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f000 f925 	bl	8000df4 <lcd_write_command>
 8000baa:	e003      	b.n	8000bb4 <Lcd_init+0x5c>
	}
	else {
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N); // ?
 8000bac:	2138      	movs	r1, #56	; 0x38
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f000 f920 	bl	8000df4 <lcd_write_command>
	}

	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear Display
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f000 f91c 	bl	8000df4 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment Cursor?
 8000bbc:	2106      	movs	r1, #6
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f000 f918 	bl	8000df4 <lcd_write_command>

	// Checking for Cursor and Blink, could change and use a variable
	if ((lcd->blink == true) && (lcd->cursor == true)) {
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	7e1b      	ldrb	r3, [r3, #24]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d108      	bne.n	8000bde <Lcd_init+0x86>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	7ddb      	ldrb	r3, [r3, #23]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d104      	bne.n	8000bde <Lcd_init+0x86>
		lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_C | OPT_B);
 8000bd4:	210f      	movs	r1, #15
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f000 f90c 	bl	8000df4 <lcd_write_command>
 8000bdc:	e01e      	b.n	8000c1c <Lcd_init+0xc4>
	}
	else if ((lcd->blink == true) && (lcd->cursor == false)) {
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	7e1b      	ldrb	r3, [r3, #24]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d108      	bne.n	8000bf8 <Lcd_init+0xa0>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	7ddb      	ldrb	r3, [r3, #23]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d104      	bne.n	8000bf8 <Lcd_init+0xa0>
		lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_B);
 8000bee:	210d      	movs	r1, #13
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f000 f8ff 	bl	8000df4 <lcd_write_command>
 8000bf6:	e011      	b.n	8000c1c <Lcd_init+0xc4>
	}
	else if ((lcd->blink == false) && (lcd->cursor == true)) {
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	7e1b      	ldrb	r3, [r3, #24]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d108      	bne.n	8000c12 <Lcd_init+0xba>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	7ddb      	ldrb	r3, [r3, #23]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d104      	bne.n	8000c12 <Lcd_init+0xba>
		lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_C);
 8000c08:	210e      	movs	r1, #14
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f000 f8f2 	bl	8000df4 <lcd_write_command>
 8000c10:	e004      	b.n	8000c1c <Lcd_init+0xc4>
	}
	else {
		lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);
 8000c12:	210c      	movs	r1, #12
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f000 f8ed 	bl	8000df4 <lcd_write_command>
	}
}
 8000c1a:	bf00      	nop
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <Lcd_u16_right_aligned>:

	Lcd_cursor(lcd, row, (col - 2));
	Lcd_string(lcd, buffer);
}

void Lcd_u16_right_aligned(Lcd_HandleTypeDef *lcd, uint16_t number, uint8_t row, uint8_t col) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	4608      	mov	r0, r1
 8000c2e:	4611      	mov	r1, r2
 8000c30:	461a      	mov	r2, r3
 8000c32:	4603      	mov	r3, r0
 8000c34:	807b      	strh	r3, [r7, #2]
 8000c36:	460b      	mov	r3, r1
 8000c38:	707b      	strb	r3, [r7, #1]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	703b      	strb	r3, [r7, #0]
	char buffer[6];
	char input[7];
	uint8_t i;

	uint8_t len = snprintf(NULL, 0, "%d", number);
 8000c3e:	887b      	ldrh	r3, [r7, #2]
 8000c40:	4a25      	ldr	r2, [pc, #148]	; (8000cd8 <Lcd_u16_right_aligned+0xb4>)
 8000c42:	2100      	movs	r1, #0
 8000c44:	2000      	movs	r0, #0
 8000c46:	f004 fb79 	bl	800533c <sniprintf>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	75bb      	strb	r3, [r7, #22]

	for (i = 0; i < (5 - len); i++) {
 8000c4e:	2300      	movs	r3, #0
 8000c50:	75fb      	strb	r3, [r7, #23]
 8000c52:	e009      	b.n	8000c68 <Lcd_u16_right_aligned+0x44>
		input[i] = 32;	// space
 8000c54:	7dfb      	ldrb	r3, [r7, #23]
 8000c56:	f107 0218 	add.w	r2, r7, #24
 8000c5a:	4413      	add	r3, r2
 8000c5c:	2220      	movs	r2, #32
 8000c5e:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < (5 - len); i++) {
 8000c62:	7dfb      	ldrb	r3, [r7, #23]
 8000c64:	3301      	adds	r3, #1
 8000c66:	75fb      	strb	r3, [r7, #23]
 8000c68:	7dfa      	ldrb	r2, [r7, #23]
 8000c6a:	7dbb      	ldrb	r3, [r7, #22]
 8000c6c:	f1c3 0305 	rsb	r3, r3, #5
 8000c70:	429a      	cmp	r2, r3
 8000c72:	dbef      	blt.n	8000c54 <Lcd_u16_right_aligned+0x30>
	}
	input[i] = 37;	// percentage
 8000c74:	7dfb      	ldrb	r3, [r7, #23]
 8000c76:	f107 0218 	add.w	r2, r7, #24
 8000c7a:	4413      	add	r3, r2
 8000c7c:	2225      	movs	r2, #37	; 0x25
 8000c7e:	f803 2c10 	strb.w	r2, [r3, #-16]
	input[i+1] = 100;	// d
 8000c82:	7dfb      	ldrb	r3, [r7, #23]
 8000c84:	3301      	adds	r3, #1
 8000c86:	f107 0218 	add.w	r2, r7, #24
 8000c8a:	4413      	add	r3, r2
 8000c8c:	2264      	movs	r2, #100	; 0x64
 8000c8e:	f803 2c10 	strb.w	r2, [r3, #-16]
	input[i+2] = '\0';	// end of string
 8000c92:	7dfb      	ldrb	r3, [r7, #23]
 8000c94:	3302      	adds	r3, #2
 8000c96:	f107 0218 	add.w	r2, r7, #24
 8000c9a:	4413      	add	r3, r2
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f803 2c10 	strb.w	r2, [r3, #-16]

	sprintf(buffer, input, number);
 8000ca2:	887a      	ldrh	r2, [r7, #2]
 8000ca4:	f107 0108 	add.w	r1, r7, #8
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	4618      	mov	r0, r3
 8000cae:	f004 fb79 	bl	80053a4 <siprintf>

	Lcd_cursor(lcd, row, (col - 4));
 8000cb2:	783b      	ldrb	r3, [r7, #0]
 8000cb4:	3b04      	subs	r3, #4
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	787b      	ldrb	r3, [r7, #1]
 8000cba:	4619      	mov	r1, r3
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f000 f873 	bl	8000da8 <Lcd_cursor>
	Lcd_string(lcd, buffer);
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f000 f807 	bl	8000cdc <Lcd_string>
}
 8000cce:	bf00      	nop
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	08005c5c 	.word	0x08005c5c

08000cdc <Lcd_string>:

/**
 * Write String in current cursor position
 */
void Lcd_string(Lcd_HandleTypeDef *lcd, char *string) {
 8000cdc:	b590      	push	{r4, r7, lr}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++) {
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	73fb      	strb	r3, [r7, #15]
 8000cea:	e00a      	b.n	8000d02 <Lcd_string+0x26>
		lcd_write_data(lcd, string[i]);
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	683a      	ldr	r2, [r7, #0]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f000 f8aa 	bl	8000e50 <lcd_write_data>
	for (uint8_t i = 0; i < strlen(string); i++) {
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	73fb      	strb	r3, [r7, #15]
 8000d02:	7bfc      	ldrb	r4, [r7, #15]
 8000d04:	6838      	ldr	r0, [r7, #0]
 8000d06:	f7ff fa63 	bl	80001d0 <strlen>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	429c      	cmp	r4, r3
 8000d0e:	d3ed      	bcc.n	8000cec <Lcd_string+0x10>
	}
}
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd90      	pop	{r4, r7, pc}

08000d1a <Lcd_string_centered>:

void Lcd_string_centered (Lcd_HandleTypeDef *lcd, char *string, uint8_t row) {
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b086      	sub	sp, #24
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	60f8      	str	r0, [r7, #12]
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	4613      	mov	r3, r2
 8000d26:	71fb      	strb	r3, [r7, #7]
	uint8_t len = strlen(string) - 1;
 8000d28:	68b8      	ldr	r0, [r7, #8]
 8000d2a:	f7ff fa51 	bl	80001d0 <strlen>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	3b01      	subs	r3, #1
 8000d34:	75fb      	strb	r3, [r7, #23]
	uint8_t left_spacing = (15 - len) / 2;
 8000d36:	7dfb      	ldrb	r3, [r7, #23]
 8000d38:	f1c3 030f 	rsb	r3, r3, #15
 8000d3c:	0fda      	lsrs	r2, r3, #31
 8000d3e:	4413      	add	r3, r2
 8000d40:	105b      	asrs	r3, r3, #1
 8000d42:	75bb      	strb	r3, [r7, #22]
	Lcd_cursor(lcd, row, left_spacing);
 8000d44:	7dba      	ldrb	r2, [r7, #22]
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	68f8      	ldr	r0, [r7, #12]
 8000d4c:	f000 f82c 	bl	8000da8 <Lcd_cursor>
	Lcd_string(lcd, string);
 8000d50:	68b9      	ldr	r1, [r7, #8]
 8000d52:	68f8      	ldr	r0, [r7, #12]
 8000d54:	f7ff ffc2 	bl	8000cdc <Lcd_string>
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <Lcd_string_right_aligned>:

void Lcd_string_right_aligned (Lcd_HandleTypeDef *lcd, char *string, uint8_t row, uint8_t col) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	460b      	mov	r3, r1
 8000d70:	71fb      	strb	r3, [r7, #7]
 8000d72:	4613      	mov	r3, r2
 8000d74:	71bb      	strb	r3, [r7, #6]
	uint8_t len = strlen(string) - 1;
 8000d76:	68b8      	ldr	r0, [r7, #8]
 8000d78:	f7ff fa2a 	bl	80001d0 <strlen>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	3b01      	subs	r3, #1
 8000d82:	75fb      	strb	r3, [r7, #23]
	Lcd_cursor(lcd, row, (col - len));
 8000d84:	79ba      	ldrb	r2, [r7, #6]
 8000d86:	7dfb      	ldrb	r3, [r7, #23]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	4619      	mov	r1, r3
 8000d90:	68f8      	ldr	r0, [r7, #12]
 8000d92:	f000 f809 	bl	8000da8 <Lcd_cursor>
	Lcd_string(lcd, string);
 8000d96:	68b9      	ldr	r1, [r7, #8]
 8000d98:	68f8      	ldr	r0, [r7, #12]
 8000d9a:	f7ff ff9f 	bl	8000cdc <Lcd_string>
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <Lcd_cursor>:
/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef *lcd, uint8_t row, uint8_t col) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	70fb      	strb	r3, [r7, #3]
 8000db4:	4613      	mov	r3, r2
 8000db6:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000db8:	78fb      	ldrb	r3, [r7, #3]
 8000dba:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <Lcd_cursor+0x30>)
 8000dbc:	5cd2      	ldrb	r2, [r2, r3]
 8000dbe:	78bb      	ldrb	r3, [r7, #2]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	3b80      	subs	r3, #128	; 0x80
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	4619      	mov	r1, r3
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f000 f812 	bl	8000df4 <lcd_write_command>
	#endif
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	08005c78 	.word	0x08005c78

08000ddc <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef *lcd) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000de4:	2101      	movs	r1, #1
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f000 f804 	bl	8000df4 <lcd_write_command>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <lcd_write_command>:

/************************************** Static function definition **************************************/
/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef *lcd, uint8_t command) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);	// Write to Command Register
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6898      	ldr	r0, [r3, #8]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	899b      	ldrh	r3, [r3, #12]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	f002 f806 	bl	8002e1c <HAL_GPIO_WritePin>

	if (lcd->mode == LCD_4_BIT_MODE) {
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	7d9b      	ldrb	r3, [r3, #22]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d111      	bne.n	8000e3c <lcd_write_command+0x48>
		// Writing Command in two seperate nibs due to 4 Bit Mode
		lcd_write(lcd, (command >> 4), LCD_NIB);	// Send 4 MSB
 8000e18:	78fb      	ldrb	r3, [r7, #3]
 8000e1a:	091b      	lsrs	r3, r3, #4
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2204      	movs	r2, #4
 8000e20:	4619      	mov	r1, r3
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f000 f842 	bl	8000eac <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);	// Send 4 LSB
 8000e28:	78fb      	ldrb	r3, [r7, #3]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2204      	movs	r2, #4
 8000e32:	4619      	mov	r1, r3
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f000 f839 	bl	8000eac <lcd_write>
	}
	else {
		// Write Command in one go with 8 bit
		lcd_write(lcd, command, LCD_BYTE);
	}
}
 8000e3a:	e005      	b.n	8000e48 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000e3c:	78fb      	ldrb	r3, [r7, #3]
 8000e3e:	2208      	movs	r2, #8
 8000e40:	4619      	mov	r1, r3
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f000 f832 	bl	8000eac <lcd_write>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef *lcd, uint8_t data) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6898      	ldr	r0, [r3, #8]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	899b      	ldrh	r3, [r3, #12]
 8000e64:	2201      	movs	r2, #1
 8000e66:	4619      	mov	r1, r3
 8000e68:	f001 ffd8 	bl	8002e1c <HAL_GPIO_WritePin>

	// Writing Command in two seperate nibs due to 4 Bit Mode
	if(lcd->mode == LCD_4_BIT_MODE) {
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	7d9b      	ldrb	r3, [r3, #22]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d111      	bne.n	8000e98 <lcd_write_data+0x48>
		lcd_write(lcd, data >> 4, LCD_NIB);		// Send 4 MSB
 8000e74:	78fb      	ldrb	r3, [r7, #3]
 8000e76:	091b      	lsrs	r3, r3, #4
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2204      	movs	r2, #4
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f000 f814 	bl	8000eac <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);	// Send 4 LSB
 8000e84:	78fb      	ldrb	r3, [r7, #3]
 8000e86:	f003 030f 	and.w	r3, r3, #15
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2204      	movs	r2, #4
 8000e8e:	4619      	mov	r1, r3
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f000 f80b 	bl	8000eac <lcd_write>
	}
	else {
		// Write Command in one go with 8 bit
		lcd_write(lcd, data, LCD_BYTE);
	}
}
 8000e96:	e005      	b.n	8000ea4 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000e98:	78fb      	ldrb	r3, [r7, #3]
 8000e9a:	2208      	movs	r2, #8
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f000 f804 	bl	8000eac <lcd_write>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <lcd_write>:


/**
 * Set len bits on the bus toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef *lcd, uint8_t data, uint8_t len) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	70fb      	strb	r3, [r7, #3]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	70bb      	strb	r3, [r7, #2]
	for (uint8_t i = 0; i < len; i++) {
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	73fb      	strb	r3, [r7, #15]
 8000ec0:	e019      	b.n	8000ef6 <lcd_write+0x4a>
		// Right shifts data, then gets the least significant bit to write
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	6818      	ldr	r0, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685a      	ldr	r2, [r3, #4]
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	4413      	add	r3, r2
 8000ed8:	8819      	ldrh	r1, [r3, #0]
 8000eda:	78fa      	ldrb	r2, [r7, #3]
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	fa42 f303 	asr.w	r3, r2, r3
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	461a      	mov	r2, r3
 8000eec:	f001 ff96 	bl	8002e1c <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < len; i++) {
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	73fb      	strb	r3, [r7, #15]
 8000ef6:	7bfa      	ldrb	r2, [r7, #15]
 8000ef8:	78bb      	ldrb	r3, [r7, #2]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d3e1      	bcc.n	8000ec2 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6918      	ldr	r0, [r3, #16]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	8a9b      	ldrh	r3, [r3, #20]
 8000f06:	2201      	movs	r2, #1
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f001 ff87 	bl	8002e1c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f0e:	2001      	movs	r0, #1
 8000f10:	f000 fcfc 	bl	800190c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6918      	ldr	r0, [r3, #16]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	8a9b      	ldrh	r3, [r3, #20]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f001 ff7c 	bl	8002e1c <HAL_GPIO_WritePin>
}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <lcd_write_nib_command>:

/**
 * Writes a single 4-bit (NIB) command using the MSB of the uint
 */
void lcd_write_nib_command(Lcd_HandleTypeDef *lcd, uint8_t command) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);	// Write to Command Register
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6898      	ldr	r0, [r3, #8]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	899b      	ldrh	r3, [r3, #12]
 8000f40:	2200      	movs	r2, #0
 8000f42:	4619      	mov	r1, r3
 8000f44:	f001 ff6a 	bl	8002e1c <HAL_GPIO_WritePin>

	if (lcd->mode == LCD_4_BIT_MODE) {
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	7d9b      	ldrb	r3, [r3, #22]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d107      	bne.n	8000f60 <lcd_write_nib_command+0x34>
		// Writing Command in two seperate nibs due to 4 Bit Mode
		lcd_write(lcd, (command >> 4), LCD_NIB);	// Send 4 MSB
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	091b      	lsrs	r3, r3, #4
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2204      	movs	r2, #4
 8000f58:	4619      	mov	r1, r3
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ffa6 	bl	8000eac <lcd_write>
	}
	else {
		// Do Nothing
	}
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b097      	sub	sp, #92	; 0x5c
 8000f6c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6e:	f000 fc51 	bl	8001814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f72:	f000 f84b 	bl	800100c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f76:	f000 f99f 	bl	80012b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f7a:	f000 f96d 	bl	8001258 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f7e:	f000 f8cd 	bl	800111c <MX_ADC1_Init>
  MX_TIM17_Init();
 8000f82:	f000 f941 	bl	8001208 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  // Start Timer
  HAL_TIM_Base_Start_IT(&htim17);
 8000f86:	481c      	ldr	r0, [pc, #112]	; (8000ff8 <main+0x90>)
 8000f88:	f003 faf6 	bl	8004578 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2120      	movs	r1, #32
 8000f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f94:	f001 ff42 	bl	8002e1c <HAL_GPIO_WritePin>

  // Init LCD
  Lcd_PortType ports[] = {
 8000f98:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <main+0x94>)
 8000f9a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000f9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  GPIOB, GPIOB, GPIOB, GPIOB
  };

  Lcd_PinType pins[] = {
 8000fa4:	4a16      	ldr	r2, [pc, #88]	; (8001000 <main+0x98>)
 8000fa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000faa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fae:	e883 0003 	stmia.w	r3, {r0, r1}
		  D4_Pin, D5_Pin, D6_Pin, D7_Pin
  };

  Lcd_HandleTypeDef lcd = Lcd_create(
 8000fb2:	f107 000c 	add.w	r0, r7, #12
 8000fb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000fba:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	9305      	str	r3, [sp, #20]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	9304      	str	r3, [sp, #16]
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	9303      	str	r3, [sp, #12]
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	9302      	str	r3, [sp, #8]
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <main+0x9c>)
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fdc:	f7ff fd88 	bl	8000af0 <Lcd_create>
		  false,
		  false
		  );

  // Init Display Module
  DisplayProcTypeDef display = Display_init(&btn_flag, &lcd);
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	f107 020c 	add.w	r2, r7, #12
 8000fe6:	4908      	ldr	r1, [pc, #32]	; (8001008 <main+0xa0>)
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fb5b 	bl	80006a4 <Display_init>
//		  }
//
//		  btn_flag = 0;
//	  }

	  Display_update(&display);
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fb77 	bl	80006e4 <Display_update>
 8000ff6:	e7fa      	b.n	8000fee <main+0x86>
 8000ff8:	2000011c 	.word	0x2000011c
 8000ffc:	08005c60 	.word	0x08005c60
 8001000:	08005c70 	.word	0x08005c70
 8001004:	48000800 	.word	0x48000800
 8001008:	20000091 	.word	0x20000091

0800100c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b0b8      	sub	sp, #224	; 0xe0
 8001010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001012:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001016:	2244      	movs	r2, #68	; 0x44
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f004 f986 	bl	800532c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001020:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001030:	463b      	mov	r3, r7
 8001032:	2288      	movs	r2, #136	; 0x88
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f004 f978 	bl	800532c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800103c:	2302      	movs	r3, #2
 800103e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001042:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001046:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104a:	2310      	movs	r3, #16
 800104c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001050:	2302      	movs	r3, #2
 8001052:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001056:	2302      	movs	r3, #2
 8001058:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800105c:	2301      	movs	r3, #1
 800105e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001062:	230a      	movs	r3, #10
 8001064:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001068:	2307      	movs	r3, #7
 800106a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800106e:	2302      	movs	r3, #2
 8001070:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001074:	2302      	movs	r3, #2
 8001076:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800107e:	4618      	mov	r0, r3
 8001080:	f001 ff7a 	bl	8002f78 <HAL_RCC_OscConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800108a:	f000 fa19 	bl	80014c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108e:	230f      	movs	r3, #15
 8001090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001094:	2303      	movs	r3, #3
 8001096:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010ac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80010b0:	2104      	movs	r1, #4
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 fb46 	bl	8003744 <HAL_RCC_ClockConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80010be:	f000 f9ff 	bl	80014c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80010c2:	f244 0302 	movw	r3, #16386	; 0x4002
 80010c6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010d0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80010d2:	2302      	movs	r3, #2
 80010d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80010da:	2308      	movs	r3, #8
 80010dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010de:	2307      	movs	r3, #7
 80010e0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010e2:	2302      	movs	r3, #2
 80010e4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010e6:	2302      	movs	r3, #2
 80010e8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80010ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010ee:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f0:	463b      	mov	r3, r7
 80010f2:	4618      	mov	r0, r3
 80010f4:	f002 fd2c 	bl	8003b50 <HAL_RCCEx_PeriphCLKConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80010fe:	f000 f9df 	bl	80014c0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001102:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001106:	f001 fee1 	bl	8002ecc <HAL_PWREx_ControlVoltageScaling>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8001110:	f000 f9d6 	bl	80014c0 <Error_Handler>
  }
}
 8001114:	bf00      	nop
 8001116:	37e0      	adds	r7, #224	; 0xe0
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
 800113c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800113e:	4b2f      	ldr	r3, [pc, #188]	; (80011fc <MX_ADC1_Init+0xe0>)
 8001140:	4a2f      	ldr	r2, [pc, #188]	; (8001200 <MX_ADC1_Init+0xe4>)
 8001142:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001144:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <MX_ADC1_Init+0xe0>)
 8001146:	2200      	movs	r2, #0
 8001148:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800114a:	4b2c      	ldr	r3, [pc, #176]	; (80011fc <MX_ADC1_Init+0xe0>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001150:	4b2a      	ldr	r3, [pc, #168]	; (80011fc <MX_ADC1_Init+0xe0>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001156:	4b29      	ldr	r3, [pc, #164]	; (80011fc <MX_ADC1_Init+0xe0>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800115c:	4b27      	ldr	r3, [pc, #156]	; (80011fc <MX_ADC1_Init+0xe0>)
 800115e:	2204      	movs	r2, #4
 8001160:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001162:	4b26      	ldr	r3, [pc, #152]	; (80011fc <MX_ADC1_Init+0xe0>)
 8001164:	2200      	movs	r2, #0
 8001166:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001168:	4b24      	ldr	r3, [pc, #144]	; (80011fc <MX_ADC1_Init+0xe0>)
 800116a:	2200      	movs	r2, #0
 800116c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800116e:	4b23      	ldr	r3, [pc, #140]	; (80011fc <MX_ADC1_Init+0xe0>)
 8001170:	2201      	movs	r2, #1
 8001172:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001174:	4b21      	ldr	r3, [pc, #132]	; (80011fc <MX_ADC1_Init+0xe0>)
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800117c:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <MX_ADC1_Init+0xe0>)
 800117e:	2200      	movs	r2, #0
 8001180:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001182:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <MX_ADC1_Init+0xe0>)
 8001184:	2200      	movs	r2, #0
 8001186:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001188:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <MX_ADC1_Init+0xe0>)
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <MX_ADC1_Init+0xe0>)
 8001192:	2200      	movs	r2, #0
 8001194:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <MX_ADC1_Init+0xe0>)
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800119e:	4817      	ldr	r0, [pc, #92]	; (80011fc <MX_ADC1_Init+0xe0>)
 80011a0:	f000 fd64 	bl	8001c6c <HAL_ADC_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80011aa:	f000 f989 	bl	80014c0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	4619      	mov	r1, r3
 80011b8:	4810      	ldr	r0, [pc, #64]	; (80011fc <MX_ADC1_Init+0xe0>)
 80011ba:	f001 fac3 	bl	8002744 <HAL_ADCEx_MultiModeConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80011c4:	f000 f97c 	bl	80014c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_ADC1_Init+0xe8>)
 80011ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011cc:	2306      	movs	r3, #6
 80011ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011d4:	237f      	movs	r3, #127	; 0x7f
 80011d6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011d8:	2304      	movs	r3, #4
 80011da:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_ADC1_Init+0xe0>)
 80011e6:	f000 fe97 	bl	8001f18 <HAL_ADC_ConfigChannel>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80011f0:	f000 f966 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	3728      	adds	r7, #40	; 0x28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000168 	.word	0x20000168
 8001200:	50040000 	.word	0x50040000
 8001204:	14f00020 	.word	0x14f00020

08001208 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <MX_TIM17_Init+0x48>)
 800120e:	4a11      	ldr	r2, [pc, #68]	; (8001254 <MX_TIM17_Init+0x4c>)
 8001210:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8000;
 8001212:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MX_TIM17_Init+0x48>)
 8001214:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001218:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <MX_TIM17_Init+0x48>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <MX_TIM17_Init+0x48>)
 8001222:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001226:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_TIM17_Init+0x48>)
 800122a:	2200      	movs	r2, #0
 800122c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <MX_TIM17_Init+0x48>)
 8001230:	2200      	movs	r2, #0
 8001232:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_TIM17_Init+0x48>)
 8001236:	2200      	movs	r2, #0
 8001238:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_TIM17_Init+0x48>)
 800123c:	f003 f944 	bl	80044c8 <HAL_TIM_Base_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8001246:	f000 f93b 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	2000011c 	.word	0x2000011c
 8001254:	40014800 	.word	0x40014800

08001258 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 800125e:	4a15      	ldr	r2, [pc, #84]	; (80012b4 <MX_USART2_UART_Init+0x5c>)
 8001260:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001264:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001268:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 800127e:	220c      	movs	r2, #12
 8001280:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001296:	2200      	movs	r2, #0
 8001298:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 800129c:	f003 fbdc 	bl	8004a58 <HAL_UART_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012a6:	f000 f90b 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200001d0 	.word	0x200001d0
 80012b4:	40004400 	.word	0x40004400

080012b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	4b55      	ldr	r3, [pc, #340]	; (8001424 <MX_GPIO_Init+0x16c>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	4a54      	ldr	r2, [pc, #336]	; (8001424 <MX_GPIO_Init+0x16c>)
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012da:	4b52      	ldr	r3, [pc, #328]	; (8001424 <MX_GPIO_Init+0x16c>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012e6:	4b4f      	ldr	r3, [pc, #316]	; (8001424 <MX_GPIO_Init+0x16c>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	4a4e      	ldr	r2, [pc, #312]	; (8001424 <MX_GPIO_Init+0x16c>)
 80012ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f2:	4b4c      	ldr	r3, [pc, #304]	; (8001424 <MX_GPIO_Init+0x16c>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	4b49      	ldr	r3, [pc, #292]	; (8001424 <MX_GPIO_Init+0x16c>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001302:	4a48      	ldr	r2, [pc, #288]	; (8001424 <MX_GPIO_Init+0x16c>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130a:	4b46      	ldr	r3, [pc, #280]	; (8001424 <MX_GPIO_Init+0x16c>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	4b43      	ldr	r3, [pc, #268]	; (8001424 <MX_GPIO_Init+0x16c>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131a:	4a42      	ldr	r2, [pc, #264]	; (8001424 <MX_GPIO_Init+0x16c>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001322:	4b40      	ldr	r3, [pc, #256]	; (8001424 <MX_GPIO_Init+0x16c>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001338:	f001 fd70 	bl	8002e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	f240 4132 	movw	r1, #1074	; 0x432
 8001342:	4839      	ldr	r0, [pc, #228]	; (8001428 <MX_GPIO_Init+0x170>)
 8001344:	f001 fd6a 	bl	8002e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_Enable_GPIO_Port, LCD_Enable_Pin, GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	2180      	movs	r1, #128	; 0x80
 800134c:	4837      	ldr	r0, [pc, #220]	; (800142c <MX_GPIO_Init+0x174>)
 800134e:	f001 fd65 	bl	8002e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001352:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001358:	4b35      	ldr	r3, [pc, #212]	; (8001430 <MX_GPIO_Init+0x178>)
 800135a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	4831      	ldr	r0, [pc, #196]	; (800142c <MX_GPIO_Init+0x174>)
 8001368:	f001 fbae 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LCD_RS_Pin;
 800136c:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001388:	f001 fb9e 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D5_Pin|D4_Pin;
 800138c:	f240 4332 	movw	r3, #1074	; 0x432
 8001390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001392:	2301      	movs	r3, #1
 8001394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	4820      	ldr	r0, [pc, #128]	; (8001428 <MX_GPIO_Init+0x170>)
 80013a6:	f001 fb8f 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_Enable_Pin */
  GPIO_InitStruct.Pin = LCD_Enable_Pin;
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_Enable_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	481a      	ldr	r0, [pc, #104]	; (800142c <MX_GPIO_Init+0x174>)
 80013c2:	f001 fb81 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 80013c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <MX_GPIO_Init+0x17c>)
 80013ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4619      	mov	r1, r3
 80013da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013de:	f001 fb73 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 80013e2:	2340      	movs	r3, #64	; 0x40
 80013e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <MX_GPIO_Init+0x17c>)
 80013e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	480c      	ldr	r0, [pc, #48]	; (8001428 <MX_GPIO_Init+0x170>)
 80013f6:	f001 fb67 	bl	8002ac8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	2017      	movs	r0, #23
 8001400:	f001 fb2b 	bl	8002a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001404:	2017      	movs	r0, #23
 8001406:	f001 fb44 	bl	8002a92 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	2028      	movs	r0, #40	; 0x28
 8001410:	f001 fb23 	bl	8002a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001414:	2028      	movs	r0, #40	; 0x28
 8001416:	f001 fb3c 	bl	8002a92 <HAL_NVIC_EnableIRQ>

}
 800141a:	bf00      	nop
 800141c:	3728      	adds	r7, #40	; 0x28
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	48000400 	.word	0x48000400
 800142c:	48000800 	.word	0x48000800
 8001430:	10210000 	.word	0x10210000
 8001434:	10110000 	.word	0x10110000

08001438 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	80fb      	strh	r3, [r7, #6]
	if ((HAL_GetTick() - last_btn_press) > 100){
 8001442:	f000 fa57 	bl	80018f4 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <HAL_GPIO_EXTI_Callback+0x50>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b64      	cmp	r3, #100	; 0x64
 8001450:	d916      	bls.n	8001480 <HAL_GPIO_EXTI_Callback+0x48>
		if (GPIO_Pin == BTN1_Pin) {
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001458:	d107      	bne.n	800146a <HAL_GPIO_EXTI_Callback+0x32>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800145a:	2120      	movs	r1, #32
 800145c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001460:	f001 fcf4 	bl	8002e4c <HAL_GPIO_TogglePin>
			btn_flag = 1;
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_GPIO_EXTI_Callback+0x54>)
 8001466:	2201      	movs	r2, #1
 8001468:	701a      	strb	r2, [r3, #0]
		}
		if (GPIO_Pin == BTN2_Pin) {
 800146a:	88fb      	ldrh	r3, [r7, #6]
 800146c:	2b40      	cmp	r3, #64	; 0x40
 800146e:	d102      	bne.n	8001476 <HAL_GPIO_EXTI_Callback+0x3e>
			btn_flag = 2;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_GPIO_EXTI_Callback+0x54>)
 8001472:	2202      	movs	r2, #2
 8001474:	701a      	strb	r2, [r3, #0]
		}
		last_btn_press = HAL_GetTick();
 8001476:	f000 fa3d 	bl	80018f4 <HAL_GetTick>
 800147a:	4603      	mov	r3, r0
 800147c:	4a02      	ldr	r2, [pc, #8]	; (8001488 <HAL_GPIO_EXTI_Callback+0x50>)
 800147e:	6013      	str	r3, [r2, #0]
	}
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200001cc 	.word	0x200001cc
 800148c:	20000091 	.word	0x20000091

08001490 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	if (htim == &htim17) {
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d105      	bne.n	80014ac <HAL_TIM_PeriodElapsedCallback+0x1c>
//		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		counter += 1;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	3301      	adds	r3, #1
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80014aa:	801a      	strh	r2, [r3, #0]
	}
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	2000011c 	.word	0x2000011c
 80014bc:	20000092 	.word	0x20000092

080014c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <Error_Handler+0x8>
	...

080014cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <HAL_MspInit+0x44>)
 80014d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d6:	4a0e      	ldr	r2, [pc, #56]	; (8001510 <HAL_MspInit+0x44>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6613      	str	r3, [r2, #96]	; 0x60
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <HAL_MspInit+0x44>)
 80014e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_MspInit+0x44>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ee:	4a08      	ldr	r2, [pc, #32]	; (8001510 <HAL_MspInit+0x44>)
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f4:	6593      	str	r3, [r2, #88]	; 0x58
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_MspInit+0x44>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000

08001514 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a15      	ldr	r2, [pc, #84]	; (8001588 <HAL_ADC_MspInit+0x74>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d124      	bne.n	8001580 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_ADC_MspInit+0x78>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	4a14      	ldr	r2, [pc, #80]	; (800158c <HAL_ADC_MspInit+0x78>)
 800153c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_ADC_MspInit+0x78>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <HAL_ADC_MspInit+0x78>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001552:	4a0e      	ldr	r2, [pc, #56]	; (800158c <HAL_ADC_MspInit+0x78>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <HAL_ADC_MspInit+0x78>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001566:	2301      	movs	r3, #1
 8001568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800156a:	230b      	movs	r3, #11
 800156c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157c:	f001 faa4 	bl	8002ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001580:	bf00      	nop
 8001582:	3728      	adds	r7, #40	; 0x28
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	50040000 	.word	0x50040000
 800158c:	40021000 	.word	0x40021000

08001590 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <HAL_TIM_Base_MspInit+0x44>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d113      	bne.n	80015ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <HAL_TIM_Base_MspInit+0x48>)
 80015a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a6:	4a0c      	ldr	r2, [pc, #48]	; (80015d8 <HAL_TIM_Base_MspInit+0x48>)
 80015a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ac:	6613      	str	r3, [r2, #96]	; 0x60
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_TIM_Base_MspInit+0x48>)
 80015b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	201a      	movs	r0, #26
 80015c0:	f001 fa4b 	bl	8002a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80015c4:	201a      	movs	r0, #26
 80015c6:	f001 fa64 	bl	8002a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40014800 	.word	0x40014800
 80015d8:	40021000 	.word	0x40021000

080015dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a17      	ldr	r2, [pc, #92]	; (8001658 <HAL_UART_MspInit+0x7c>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d128      	bne.n	8001650 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <HAL_UART_MspInit+0x80>)
 8001600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001602:	4a16      	ldr	r2, [pc, #88]	; (800165c <HAL_UART_MspInit+0x80>)
 8001604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001608:	6593      	str	r3, [r2, #88]	; 0x58
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <HAL_UART_MspInit+0x80>)
 800160c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <HAL_UART_MspInit+0x80>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	4a10      	ldr	r2, [pc, #64]	; (800165c <HAL_UART_MspInit+0x80>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <HAL_UART_MspInit+0x80>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800162e:	230c      	movs	r3, #12
 8001630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163a:	2303      	movs	r3, #3
 800163c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800163e:	2307      	movs	r3, #7
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164c:	f001 fa3c 	bl	8002ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001650:	bf00      	nop
 8001652:	3728      	adds	r7, #40	; 0x28
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40004400 	.word	0x40004400
 800165c:	40021000 	.word	0x40021000

08001660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <NMI_Handler+0x4>

08001666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */


  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166a:	e7fe      	b.n	800166a <HardFault_Handler+0x4>

0800166c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <MemManage_Handler+0x4>

08001672 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001676:	e7fe      	b.n	8001676 <BusFault_Handler+0x4>

08001678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800167c:	e7fe      	b.n	800167c <UsageFault_Handler+0x4>

0800167e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ac:	f000 f90e 	bl	80018cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80016b8:	2040      	movs	r0, #64	; 0x40
 80016ba:	f001 fbe1 	bl	8002e80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80016c8:	4802      	ldr	r0, [pc, #8]	; (80016d4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80016ca:	f002 ffc5 	bl	8004658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2000011c 	.word	0x2000011c

080016d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80016dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80016e0:	f001 fbce 	bl	8002e80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80016e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016e8:	f001 fbca 	bl	8002e80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f8:	4a14      	ldr	r2, [pc, #80]	; (800174c <_sbrk+0x5c>)
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <_sbrk+0x60>)
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <_sbrk+0x64>)
 800170e:	4a12      	ldr	r2, [pc, #72]	; (8001758 <_sbrk+0x68>)
 8001710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	429a      	cmp	r2, r3
 800171e:	d207      	bcs.n	8001730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001720:	f003 fdda 	bl	80052d8 <__errno>
 8001724:	4603      	mov	r3, r0
 8001726:	220c      	movs	r2, #12
 8001728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800172e:	e009      	b.n	8001744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <_sbrk+0x64>)
 8001740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20018000 	.word	0x20018000
 8001750:	00000400 	.word	0x00000400
 8001754:	20000094 	.word	0x20000094
 8001758:	20000268 	.word	0x20000268

0800175c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001760:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <SystemInit+0x5c>)
 8001762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001766:	4a14      	ldr	r2, [pc, #80]	; (80017b8 <SystemInit+0x5c>)
 8001768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800176c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <SystemInit+0x60>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a11      	ldr	r2, [pc, #68]	; (80017bc <SystemInit+0x60>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <SystemInit+0x60>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <SystemInit+0x60>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a0d      	ldr	r2, [pc, #52]	; (80017bc <SystemInit+0x60>)
 8001788:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800178c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001790:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <SystemInit+0x60>)
 8001794:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001798:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <SystemInit+0x60>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a07      	ldr	r2, [pc, #28]	; (80017bc <SystemInit+0x60>)
 80017a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80017a6:	4b05      	ldr	r3, [pc, #20]	; (80017bc <SystemInit+0x60>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00
 80017bc:	40021000 	.word	0x40021000

080017c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017c4:	f7ff ffca 	bl	800175c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80017c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80017ca:	e003      	b.n	80017d4 <LoopCopyDataInit>

080017cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80017ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80017d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80017d2:	3104      	adds	r1, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017d4:	480a      	ldr	r0, [pc, #40]	; (8001800 <LoopForever+0xa>)
	ldr	r3, =_edata
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <LoopForever+0xe>)
	adds	r2, r0, r1
 80017d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80017da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80017dc:	d3f6      	bcc.n	80017cc <CopyDataInit>
	ldr	r2, =_sbss
 80017de:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <LoopForever+0x12>)
	b	LoopFillZerobss
 80017e0:	e002      	b.n	80017e8 <LoopFillZerobss>

080017e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80017e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80017e4:	f842 3b04 	str.w	r3, [r2], #4

080017e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <LoopForever+0x16>)
	cmp	r2, r3
 80017ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80017ec:	d3f9      	bcc.n	80017e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ee:	f003 fd79 	bl	80052e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017f2:	f7ff fbb9 	bl	8000f68 <main>

080017f6 <LoopForever>:

LoopForever:
    b LoopForever
 80017f6:	e7fe      	b.n	80017f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017f8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80017fc:	08005d08 	.word	0x08005d08
	ldr	r0, =_sdata
 8001800:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001804:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001808:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 800180c:	20000268 	.word	0x20000268

08001810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001810:	e7fe      	b.n	8001810 <ADC1_2_IRQHandler>
	...

08001814 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800181e:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <HAL_Init+0x3c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <HAL_Init+0x3c>)
 8001824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001828:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800182a:	2003      	movs	r0, #3
 800182c:	f001 f90a 	bl	8002a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001830:	2000      	movs	r0, #0
 8001832:	f000 f80f 	bl	8001854 <HAL_InitTick>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d002      	beq.n	8001842 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	71fb      	strb	r3, [r7, #7]
 8001840:	e001      	b.n	8001846 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001842:	f7ff fe43 	bl	80014cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001846:	79fb      	ldrb	r3, [r7, #7]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40022000 	.word	0x40022000

08001854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800185c:	2300      	movs	r3, #0
 800185e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001860:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <HAL_InitTick+0x6c>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d023      	beq.n	80018b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001868:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <HAL_InitTick+0x70>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <HAL_InitTick+0x6c>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001876:	fbb3 f3f1 	udiv	r3, r3, r1
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f001 f915 	bl	8002aae <HAL_SYSTICK_Config>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10f      	bne.n	80018aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b0f      	cmp	r3, #15
 800188e:	d809      	bhi.n	80018a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001890:	2200      	movs	r2, #0
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001898:	f001 f8df 	bl	8002a5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800189c:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <HAL_InitTick+0x74>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e007      	b.n	80018b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	73fb      	strb	r3, [r7, #15]
 80018a8:	e004      	b.n	80018b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	73fb      	strb	r3, [r7, #15]
 80018ae:	e001      	b.n	80018b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	2000000c 	.word	0x2000000c
 80018c4:	20000004 	.word	0x20000004
 80018c8:	20000008 	.word	0x20000008

080018cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_IncTick+0x20>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_IncTick+0x24>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4413      	add	r3, r2
 80018dc:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <HAL_IncTick+0x24>)
 80018de:	6013      	str	r3, [r2, #0]
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	2000000c 	.word	0x2000000c
 80018f0:	20000254 	.word	0x20000254

080018f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return uwTick;
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <HAL_GetTick+0x14>)
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000254 	.word	0x20000254

0800190c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001914:	f7ff ffee 	bl	80018f4 <HAL_GetTick>
 8001918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001924:	d005      	beq.n	8001932 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001926:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <HAL_Delay+0x44>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001932:	bf00      	nop
 8001934:	f7ff ffde 	bl	80018f4 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	429a      	cmp	r2, r3
 8001942:	d8f7      	bhi.n	8001934 <HAL_Delay+0x28>
  {
  }
}
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	2000000c 	.word	0x2000000c

08001954 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	431a      	orrs	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	609a      	str	r2, [r3, #8]
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	609a      	str	r2, [r3, #8]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019bc:	b480      	push	{r7}
 80019be:	b087      	sub	sp, #28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
 80019c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	3360      	adds	r3, #96	; 0x60
 80019ce:	461a      	mov	r2, r3
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <LL_ADC_SetOffset+0x44>)
 80019de:	4013      	ands	r3, r2
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	4313      	orrs	r3, r2
 80019ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019f4:	bf00      	nop
 80019f6:	371c      	adds	r7, #28
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	03fff000 	.word	0x03fff000

08001a04 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3360      	adds	r3, #96	; 0x60
 8001a12:	461a      	mov	r2, r3
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	3360      	adds	r3, #96	; 0x60
 8001a40:	461a      	mov	r2, r3
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	431a      	orrs	r2, r3
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a5a:	bf00      	nop
 8001a5c:	371c      	adds	r7, #28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b087      	sub	sp, #28
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	60f8      	str	r0, [r7, #12]
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	3330      	adds	r3, #48	; 0x30
 8001a76:	461a      	mov	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	0a1b      	lsrs	r3, r3, #8
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	4413      	add	r3, r2
 8001a84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	f003 031f 	and.w	r3, r3, #31
 8001a90:	211f      	movs	r1, #31
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	401a      	ands	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	0e9b      	lsrs	r3, r3, #26
 8001a9e:	f003 011f 	and.w	r1, r3, #31
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	f003 031f 	and.w	r3, r3, #31
 8001aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aac:	431a      	orrs	r2, r3
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ab2:	bf00      	nop
 8001ab4:	371c      	adds	r7, #28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b087      	sub	sp, #28
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	3314      	adds	r3, #20
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	0e5b      	lsrs	r3, r3, #25
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	4413      	add	r3, r2
 8001adc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	0d1b      	lsrs	r3, r3, #20
 8001ae6:	f003 031f 	and.w	r3, r3, #31
 8001aea:	2107      	movs	r1, #7
 8001aec:	fa01 f303 	lsl.w	r3, r1, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	401a      	ands	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	0d1b      	lsrs	r3, r3, #20
 8001af8:	f003 031f 	and.w	r3, r3, #31
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	fa01 f303 	lsl.w	r3, r1, r3
 8001b02:	431a      	orrs	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b08:	bf00      	nop
 8001b0a:	371c      	adds	r7, #28
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	401a      	ands	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0318 	and.w	r3, r3, #24
 8001b36:	4908      	ldr	r1, [pc, #32]	; (8001b58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b38:	40d9      	lsrs	r1, r3
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	400b      	ands	r3, r1
 8001b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b42:	431a      	orrs	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	0007ffff 	.word	0x0007ffff

08001b5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6093      	str	r3, [r2, #8]
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b94:	d101      	bne.n	8001b9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001bb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bbc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001be4:	d101      	bne.n	8001bea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <LL_ADC_IsEnabled+0x18>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <LL_ADC_IsEnabled+0x1a>
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d101      	bne.n	8001c36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d101      	bne.n	8001c5c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e000      	b.n	8001c5e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c6c:	b590      	push	{r4, r7, lr}
 8001c6e:	b089      	sub	sp, #36	; 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e136      	b.n	8001ef4 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d109      	bne.n	8001ca8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff fc3d 	bl	8001514 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff67 	bl	8001b80 <LL_ADC_IsDeepPowerDownEnabled>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d004      	beq.n	8001cc2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff4d 	bl	8001b5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff ff82 	bl	8001bd0 <LL_ADC_IsInternalRegulatorEnabled>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d115      	bne.n	8001cfe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff ff66 	bl	8001ba8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cdc:	4b87      	ldr	r3, [pc, #540]	; (8001efc <HAL_ADC_Init+0x290>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	099b      	lsrs	r3, r3, #6
 8001ce2:	4a87      	ldr	r2, [pc, #540]	; (8001f00 <HAL_ADC_Init+0x294>)
 8001ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce8:	099b      	lsrs	r3, r3, #6
 8001cea:	3301      	adds	r3, #1
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cf0:	e002      	b.n	8001cf8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f9      	bne.n	8001cf2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff ff64 	bl	8001bd0 <LL_ADC_IsInternalRegulatorEnabled>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10d      	bne.n	8001d2a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d12:	f043 0210 	orr.w	r2, r3, #16
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	f043 0201 	orr.w	r2, r3, #1
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff ff75 	bl	8001c1e <LL_ADC_REG_IsConversionOngoing>
 8001d34:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f040 80cf 	bne.w	8001ee2 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f040 80cb 	bne.w	8001ee2 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d50:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d54:	f043 0202 	orr.w	r2, r3, #2
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff49 	bl	8001bf8 <LL_ADC_IsEnabled>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d115      	bne.n	8001d98 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d6c:	4865      	ldr	r0, [pc, #404]	; (8001f04 <HAL_ADC_Init+0x298>)
 8001d6e:	f7ff ff43 	bl	8001bf8 <LL_ADC_IsEnabled>
 8001d72:	4604      	mov	r4, r0
 8001d74:	4864      	ldr	r0, [pc, #400]	; (8001f08 <HAL_ADC_Init+0x29c>)
 8001d76:	f7ff ff3f 	bl	8001bf8 <LL_ADC_IsEnabled>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	431c      	orrs	r4, r3
 8001d7e:	4863      	ldr	r0, [pc, #396]	; (8001f0c <HAL_ADC_Init+0x2a0>)
 8001d80:	f7ff ff3a 	bl	8001bf8 <LL_ADC_IsEnabled>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4323      	orrs	r3, r4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d105      	bne.n	8001d98 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	4619      	mov	r1, r3
 8001d92:	485f      	ldr	r0, [pc, #380]	; (8001f10 <HAL_ADC_Init+0x2a4>)
 8001d94:	f7ff fdde 	bl	8001954 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	7e5b      	ldrb	r3, [r3, #25]
 8001d9c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001da2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001da8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001dae:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001db6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d106      	bne.n	8001dd4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	045b      	lsls	r3, r3, #17
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d009      	beq.n	8001df0 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	4b47      	ldr	r3, [pc, #284]	; (8001f14 <HAL_ADC_Init+0x2a8>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	69b9      	ldr	r1, [r7, #24]
 8001e00:	430b      	orrs	r3, r1
 8001e02:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff08 	bl	8001c1e <LL_ADC_REG_IsConversionOngoing>
 8001e0e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff15 	bl	8001c44 <LL_ADC_INJ_IsConversionOngoing>
 8001e1a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d13d      	bne.n	8001e9e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d13a      	bne.n	8001e9e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e2c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e34:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e44:	f023 0302 	bic.w	r3, r3, #2
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	69b9      	ldr	r1, [r7, #24]
 8001e4e:	430b      	orrs	r3, r1
 8001e50:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d118      	bne.n	8001e8e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e66:	f023 0304 	bic.w	r3, r3, #4
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e72:	4311      	orrs	r1, r2
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e78:	4311      	orrs	r1, r2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	611a      	str	r2, [r3, #16]
 8001e8c:	e007      	b.n	8001e9e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	691a      	ldr	r2, [r3, #16]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0201 	bic.w	r2, r2, #1
 8001e9c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d10c      	bne.n	8001ec0 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	f023 010f 	bic.w	r1, r3, #15
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	1e5a      	subs	r2, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	631a      	str	r2, [r3, #48]	; 0x30
 8001ebe:	e007      	b.n	8001ed0 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 020f 	bic.w	r2, r2, #15
 8001ece:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed4:	f023 0303 	bic.w	r3, r3, #3
 8001ed8:	f043 0201 	orr.w	r2, r3, #1
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	655a      	str	r2, [r3, #84]	; 0x54
 8001ee0:	e007      	b.n	8001ef2 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee6:	f043 0210 	orr.w	r2, r3, #16
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ef2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3724      	adds	r7, #36	; 0x24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd90      	pop	{r4, r7, pc}
 8001efc:	20000004 	.word	0x20000004
 8001f00:	053e2d63 	.word	0x053e2d63
 8001f04:	50040000 	.word	0x50040000
 8001f08:	50040100 	.word	0x50040100
 8001f0c:	50040200 	.word	0x50040200
 8001f10:	50040300 	.word	0x50040300
 8001f14:	fff0c007 	.word	0xfff0c007

08001f18 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b0b6      	sub	sp, #216	; 0xd8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d101      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x22>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e3c7      	b.n	80026ca <HAL_ADC_ConfigChannel+0x7b2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fe69 	bl	8001c1e <LL_ADC_REG_IsConversionOngoing>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f040 83a8 	bne.w	80026a4 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b05      	cmp	r3, #5
 8001f5a:	d824      	bhi.n	8001fa6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	3b02      	subs	r3, #2
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d81b      	bhi.n	8001f9e <HAL_ADC_ConfigChannel+0x86>
 8001f66:	a201      	add	r2, pc, #4	; (adr r2, 8001f6c <HAL_ADC_ConfigChannel+0x54>)
 8001f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f6c:	08001f7d 	.word	0x08001f7d
 8001f70:	08001f85 	.word	0x08001f85
 8001f74:	08001f8d 	.word	0x08001f8d
 8001f78:	08001f95 	.word	0x08001f95
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	220c      	movs	r2, #12
 8001f80:	605a      	str	r2, [r3, #4]
          break;
 8001f82:	e011      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	2212      	movs	r2, #18
 8001f88:	605a      	str	r2, [r3, #4]
          break;
 8001f8a:	e00d      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	2218      	movs	r2, #24
 8001f90:	605a      	str	r2, [r3, #4]
          break;
 8001f92:	e009      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f9a:	605a      	str	r2, [r3, #4]
          break;
 8001f9c:	e004      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2206      	movs	r2, #6
 8001fa2:	605a      	str	r2, [r3, #4]
          break;
 8001fa4:	e000      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001fa6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	6859      	ldr	r1, [r3, #4]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	f7ff fd56 	bl	8001a66 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fe2d 	bl	8001c1e <LL_ADC_REG_IsConversionOngoing>
 8001fc4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fe39 	bl	8001c44 <LL_ADC_INJ_IsConversionOngoing>
 8001fd2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f040 81a6 	bne.w	800232c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fe0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f040 81a1 	bne.w	800232c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	6819      	ldr	r1, [r3, #0]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f7ff fd61 	bl	8001abe <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	08db      	lsrs	r3, r3, #3
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	2b04      	cmp	r3, #4
 800201c:	d00a      	beq.n	8002034 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	6919      	ldr	r1, [r3, #16]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800202e:	f7ff fcc5 	bl	80019bc <LL_ADC_SetOffset>
 8002032:	e17b      	b.n	800232c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2100      	movs	r1, #0
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fce2 	bl	8001a04 <LL_ADC_GetOffsetChannel>
 8002040:	4603      	mov	r3, r0
 8002042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10a      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x148>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2100      	movs	r1, #0
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fcd7 	bl	8001a04 <LL_ADC_GetOffsetChannel>
 8002056:	4603      	mov	r3, r0
 8002058:	0e9b      	lsrs	r3, r3, #26
 800205a:	f003 021f 	and.w	r2, r3, #31
 800205e:	e01e      	b.n	800209e <HAL_ADC_ConfigChannel+0x186>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fccc 	bl	8001a04 <LL_ADC_GetOffsetChannel>
 800206c:	4603      	mov	r3, r0
 800206e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002076:	fa93 f3a3 	rbit	r3, r3
 800207a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800207e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002082:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002086:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800208e:	2320      	movs	r3, #32
 8002090:	e004      	b.n	800209c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002092:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	b2db      	uxtb	r3, r3
 800209c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d105      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x19e>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	0e9b      	lsrs	r3, r3, #26
 80020b0:	f003 031f 	and.w	r3, r3, #31
 80020b4:	e018      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x1d0>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80020ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80020d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80020da:	2320      	movs	r3, #32
 80020dc:	e004      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80020de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020e2:	fab3 f383 	clz	r3, r3
 80020e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d106      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2200      	movs	r2, #0
 80020f2:	2100      	movs	r1, #0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff fc9b 	bl	8001a30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2101      	movs	r1, #1
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff fc7f 	bl	8001a04 <LL_ADC_GetOffsetChannel>
 8002106:	4603      	mov	r3, r0
 8002108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10a      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x20e>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2101      	movs	r1, #1
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff fc74 	bl	8001a04 <LL_ADC_GetOffsetChannel>
 800211c:	4603      	mov	r3, r0
 800211e:	0e9b      	lsrs	r3, r3, #26
 8002120:	f003 021f 	and.w	r2, r3, #31
 8002124:	e01e      	b.n	8002164 <HAL_ADC_ConfigChannel+0x24c>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2101      	movs	r1, #1
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fc69 	bl	8001a04 <LL_ADC_GetOffsetChannel>
 8002132:	4603      	mov	r3, r0
 8002134:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002138:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800213c:	fa93 f3a3 	rbit	r3, r3
 8002140:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002144:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002148:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800214c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002154:	2320      	movs	r3, #32
 8002156:	e004      	b.n	8002162 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002158:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800215c:	fab3 f383 	clz	r3, r3
 8002160:	b2db      	uxtb	r3, r3
 8002162:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800216c:	2b00      	cmp	r3, #0
 800216e:	d105      	bne.n	800217c <HAL_ADC_ConfigChannel+0x264>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	0e9b      	lsrs	r3, r3, #26
 8002176:	f003 031f 	and.w	r3, r3, #31
 800217a:	e018      	b.n	80021ae <HAL_ADC_ConfigChannel+0x296>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002188:	fa93 f3a3 	rbit	r3, r3
 800218c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002190:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002194:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002198:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80021a0:	2320      	movs	r3, #32
 80021a2:	e004      	b.n	80021ae <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80021a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021a8:	fab3 f383 	clz	r3, r3
 80021ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d106      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2200      	movs	r2, #0
 80021b8:	2101      	movs	r1, #1
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fc38 	bl	8001a30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2102      	movs	r1, #2
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fc1c 	bl	8001a04 <LL_ADC_GetOffsetChannel>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10a      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x2d4>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2102      	movs	r1, #2
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff fc11 	bl	8001a04 <LL_ADC_GetOffsetChannel>
 80021e2:	4603      	mov	r3, r0
 80021e4:	0e9b      	lsrs	r3, r3, #26
 80021e6:	f003 021f 	and.w	r2, r3, #31
 80021ea:	e01e      	b.n	800222a <HAL_ADC_ConfigChannel+0x312>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2102      	movs	r1, #2
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fc06 	bl	8001a04 <LL_ADC_GetOffsetChannel>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002202:	fa93 f3a3 	rbit	r3, r3
 8002206:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800220a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800220e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002212:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800221a:	2320      	movs	r3, #32
 800221c:	e004      	b.n	8002228 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800221e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002232:	2b00      	cmp	r3, #0
 8002234:	d105      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x32a>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	0e9b      	lsrs	r3, r3, #26
 800223c:	f003 031f 	and.w	r3, r3, #31
 8002240:	e016      	b.n	8002270 <HAL_ADC_ConfigChannel+0x358>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002254:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002256:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800225a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002262:	2320      	movs	r3, #32
 8002264:	e004      	b.n	8002270 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002266:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002270:	429a      	cmp	r2, r3
 8002272:	d106      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2200      	movs	r2, #0
 800227a:	2102      	movs	r1, #2
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fbd7 	bl	8001a30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2103      	movs	r1, #3
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fbbb 	bl	8001a04 <LL_ADC_GetOffsetChannel>
 800228e:	4603      	mov	r3, r0
 8002290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10a      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x396>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2103      	movs	r1, #3
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fbb0 	bl	8001a04 <LL_ADC_GetOffsetChannel>
 80022a4:	4603      	mov	r3, r0
 80022a6:	0e9b      	lsrs	r3, r3, #26
 80022a8:	f003 021f 	and.w	r2, r3, #31
 80022ac:	e017      	b.n	80022de <HAL_ADC_ConfigChannel+0x3c6>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2103      	movs	r1, #3
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff fba5 	bl	8001a04 <LL_ADC_GetOffsetChannel>
 80022ba:	4603      	mov	r3, r0
 80022bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022c0:	fa93 f3a3 	rbit	r3, r3
 80022c4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80022c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022c8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80022ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80022d0:	2320      	movs	r3, #32
 80022d2:	e003      	b.n	80022dc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80022d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022d6:	fab3 f383 	clz	r3, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d105      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x3de>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	0e9b      	lsrs	r3, r3, #26
 80022f0:	f003 031f 	and.w	r3, r3, #31
 80022f4:	e011      	b.n	800231a <HAL_ADC_ConfigChannel+0x402>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002304:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002306:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800230e:	2320      	movs	r3, #32
 8002310:	e003      	b.n	800231a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002314:	fab3 f383 	clz	r3, r3
 8002318:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800231a:	429a      	cmp	r2, r3
 800231c:	d106      	bne.n	800232c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2200      	movs	r2, #0
 8002324:	2103      	movs	r1, #3
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fb82 	bl	8001a30 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fc61 	bl	8001bf8 <LL_ADC_IsEnabled>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	f040 813f 	bne.w	80025bc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	6819      	ldr	r1, [r3, #0]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	461a      	mov	r2, r3
 800234c:	f7ff fbe2 	bl	8001b14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	4a8e      	ldr	r2, [pc, #568]	; (8002590 <HAL_ADC_ConfigChannel+0x678>)
 8002356:	4293      	cmp	r3, r2
 8002358:	f040 8130 	bne.w	80025bc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10b      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x46c>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	0e9b      	lsrs	r3, r3, #26
 8002372:	3301      	adds	r3, #1
 8002374:	f003 031f 	and.w	r3, r3, #31
 8002378:	2b09      	cmp	r3, #9
 800237a:	bf94      	ite	ls
 800237c:	2301      	movls	r3, #1
 800237e:	2300      	movhi	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	e019      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x4a0>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800238c:	fa93 f3a3 	rbit	r3, r3
 8002390:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002392:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002394:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800239c:	2320      	movs	r3, #32
 800239e:	e003      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80023a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023a2:	fab3 f383 	clz	r3, r3
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	3301      	adds	r3, #1
 80023aa:	f003 031f 	and.w	r3, r3, #31
 80023ae:	2b09      	cmp	r3, #9
 80023b0:	bf94      	ite	ls
 80023b2:	2301      	movls	r3, #1
 80023b4:	2300      	movhi	r3, #0
 80023b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d079      	beq.n	80024b0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d107      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x4c0>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	0e9b      	lsrs	r3, r3, #26
 80023ce:	3301      	adds	r3, #1
 80023d0:	069b      	lsls	r3, r3, #26
 80023d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023d6:	e015      	b.n	8002404 <HAL_ADC_ConfigChannel+0x4ec>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023e0:	fa93 f3a3 	rbit	r3, r3
 80023e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80023e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80023ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80023f0:	2320      	movs	r3, #32
 80023f2:	e003      	b.n	80023fc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80023f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023f6:	fab3 f383 	clz	r3, r3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	3301      	adds	r3, #1
 80023fe:	069b      	lsls	r3, r3, #26
 8002400:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240c:	2b00      	cmp	r3, #0
 800240e:	d109      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x50c>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	0e9b      	lsrs	r3, r3, #26
 8002416:	3301      	adds	r3, #1
 8002418:	f003 031f 	and.w	r3, r3, #31
 800241c:	2101      	movs	r1, #1
 800241e:	fa01 f303 	lsl.w	r3, r1, r3
 8002422:	e017      	b.n	8002454 <HAL_ADC_ConfigChannel+0x53c>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002434:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800243c:	2320      	movs	r3, #32
 800243e:	e003      	b.n	8002448 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	3301      	adds	r3, #1
 800244a:	f003 031f 	and.w	r3, r3, #31
 800244e:	2101      	movs	r1, #1
 8002450:	fa01 f303 	lsl.w	r3, r1, r3
 8002454:	ea42 0103 	orr.w	r1, r2, r3
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10a      	bne.n	800247a <HAL_ADC_ConfigChannel+0x562>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	0e9b      	lsrs	r3, r3, #26
 800246a:	3301      	adds	r3, #1
 800246c:	f003 021f 	and.w	r2, r3, #31
 8002470:	4613      	mov	r3, r2
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	4413      	add	r3, r2
 8002476:	051b      	lsls	r3, r3, #20
 8002478:	e018      	b.n	80024ac <HAL_ADC_ConfigChannel+0x594>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800248a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800248c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002492:	2320      	movs	r3, #32
 8002494:	e003      	b.n	800249e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002498:	fab3 f383 	clz	r3, r3
 800249c:	b2db      	uxtb	r3, r3
 800249e:	3301      	adds	r3, #1
 80024a0:	f003 021f 	and.w	r2, r3, #31
 80024a4:	4613      	mov	r3, r2
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	4413      	add	r3, r2
 80024aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ac:	430b      	orrs	r3, r1
 80024ae:	e080      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d107      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x5b4>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	0e9b      	lsrs	r3, r3, #26
 80024c2:	3301      	adds	r3, #1
 80024c4:	069b      	lsls	r3, r3, #26
 80024c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ca:	e015      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x5e0>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80024da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024dc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80024de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80024e4:	2320      	movs	r3, #32
 80024e6:	e003      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80024e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ea:	fab3 f383 	clz	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	3301      	adds	r3, #1
 80024f2:	069b      	lsls	r3, r3, #26
 80024f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002500:	2b00      	cmp	r3, #0
 8002502:	d109      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x600>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	0e9b      	lsrs	r3, r3, #26
 800250a:	3301      	adds	r3, #1
 800250c:	f003 031f 	and.w	r3, r3, #31
 8002510:	2101      	movs	r1, #1
 8002512:	fa01 f303 	lsl.w	r3, r1, r3
 8002516:	e017      	b.n	8002548 <HAL_ADC_ConfigChannel+0x630>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	fa93 f3a3 	rbit	r3, r3
 8002524:	61fb      	str	r3, [r7, #28]
  return result;
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002530:	2320      	movs	r3, #32
 8002532:	e003      	b.n	800253c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	3301      	adds	r3, #1
 800253e:	f003 031f 	and.w	r3, r3, #31
 8002542:	2101      	movs	r1, #1
 8002544:	fa01 f303 	lsl.w	r3, r1, r3
 8002548:	ea42 0103 	orr.w	r1, r2, r3
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10d      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x65c>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	0e9b      	lsrs	r3, r3, #26
 800255e:	3301      	adds	r3, #1
 8002560:	f003 021f 	and.w	r2, r3, #31
 8002564:	4613      	mov	r3, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4413      	add	r3, r2
 800256a:	3b1e      	subs	r3, #30
 800256c:	051b      	lsls	r3, r3, #20
 800256e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002572:	e01d      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x698>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	fa93 f3a3 	rbit	r3, r3
 8002580:	613b      	str	r3, [r7, #16]
  return result;
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d103      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800258c:	2320      	movs	r3, #32
 800258e:	e005      	b.n	800259c <HAL_ADC_ConfigChannel+0x684>
 8002590:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	fab3 f383 	clz	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	3301      	adds	r3, #1
 800259e:	f003 021f 	and.w	r2, r3, #31
 80025a2:	4613      	mov	r3, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	3b1e      	subs	r3, #30
 80025aa:	051b      	lsls	r3, r3, #20
 80025ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025b0:	430b      	orrs	r3, r1
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	6892      	ldr	r2, [r2, #8]
 80025b6:	4619      	mov	r1, r3
 80025b8:	f7ff fa81 	bl	8001abe <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4b44      	ldr	r3, [pc, #272]	; (80026d4 <HAL_ADC_ConfigChannel+0x7bc>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d07a      	beq.n	80026be <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025c8:	4843      	ldr	r0, [pc, #268]	; (80026d8 <HAL_ADC_ConfigChannel+0x7c0>)
 80025ca:	f7ff f9e9 	bl	80019a0 <LL_ADC_GetCommonPathInternalCh>
 80025ce:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a41      	ldr	r2, [pc, #260]	; (80026dc <HAL_ADC_ConfigChannel+0x7c4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d12c      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d126      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a3c      	ldr	r2, [pc, #240]	; (80026e0 <HAL_ADC_ConfigChannel+0x7c8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d004      	beq.n	80025fc <HAL_ADC_ConfigChannel+0x6e4>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a3b      	ldr	r2, [pc, #236]	; (80026e4 <HAL_ADC_ConfigChannel+0x7cc>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d15d      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002600:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002604:	4619      	mov	r1, r3
 8002606:	4834      	ldr	r0, [pc, #208]	; (80026d8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002608:	f7ff f9b7 	bl	800197a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800260c:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <HAL_ADC_ConfigChannel+0x7d0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	099b      	lsrs	r3, r3, #6
 8002612:	4a36      	ldr	r2, [pc, #216]	; (80026ec <HAL_ADC_ConfigChannel+0x7d4>)
 8002614:	fba2 2303 	umull	r2, r3, r2, r3
 8002618:	099b      	lsrs	r3, r3, #6
 800261a:	1c5a      	adds	r2, r3, #1
 800261c:	4613      	mov	r3, r2
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002626:	e002      	b.n	800262e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	3b01      	subs	r3, #1
 800262c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f9      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002634:	e040      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a2d      	ldr	r2, [pc, #180]	; (80026f0 <HAL_ADC_ConfigChannel+0x7d8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d118      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x75a>
 8002640:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d112      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a23      	ldr	r2, [pc, #140]	; (80026e0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d004      	beq.n	8002660 <HAL_ADC_ConfigChannel+0x748>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a22      	ldr	r2, [pc, #136]	; (80026e4 <HAL_ADC_ConfigChannel+0x7cc>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d12d      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002660:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002664:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002668:	4619      	mov	r1, r3
 800266a:	481b      	ldr	r0, [pc, #108]	; (80026d8 <HAL_ADC_ConfigChannel+0x7c0>)
 800266c:	f7ff f985 	bl	800197a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002670:	e024      	b.n	80026bc <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a1f      	ldr	r2, [pc, #124]	; (80026f4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d120      	bne.n	80026be <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800267c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002680:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d11a      	bne.n	80026be <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a14      	ldr	r2, [pc, #80]	; (80026e0 <HAL_ADC_ConfigChannel+0x7c8>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d115      	bne.n	80026be <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002692:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002696:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800269a:	4619      	mov	r1, r3
 800269c:	480e      	ldr	r0, [pc, #56]	; (80026d8 <HAL_ADC_ConfigChannel+0x7c0>)
 800269e:	f7ff f96c 	bl	800197a <LL_ADC_SetCommonPathInternalCh>
 80026a2:	e00c      	b.n	80026be <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a8:	f043 0220 	orr.w	r2, r3, #32
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80026b6:	e002      	b.n	80026be <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026b8:	bf00      	nop
 80026ba:	e000      	b.n	80026be <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80026c6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	37d8      	adds	r7, #216	; 0xd8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	80080000 	.word	0x80080000
 80026d8:	50040300 	.word	0x50040300
 80026dc:	c7520000 	.word	0xc7520000
 80026e0:	50040000 	.word	0x50040000
 80026e4:	50040200 	.word	0x50040200
 80026e8:	20000004 	.word	0x20000004
 80026ec:	053e2d63 	.word	0x053e2d63
 80026f0:	cb840000 	.word	0xcb840000
 80026f4:	80000001 	.word	0x80000001

080026f8 <LL_ADC_IsEnabled>:
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <LL_ADC_IsEnabled+0x18>
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <LL_ADC_IsEnabled+0x1a>
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <LL_ADC_REG_IsConversionOngoing>:
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b04      	cmp	r3, #4
 8002730:	d101      	bne.n	8002736 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002744:	b590      	push	{r4, r7, lr}
 8002746:	b09f      	sub	sp, #124	; 0x7c
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800275e:	2302      	movs	r3, #2
 8002760:	e093      	b.n	800288a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800276a:	2300      	movs	r3, #0
 800276c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800276e:	2300      	movs	r3, #0
 8002770:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a47      	ldr	r2, [pc, #284]	; (8002894 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d102      	bne.n	8002782 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800277c:	4b46      	ldr	r3, [pc, #280]	; (8002898 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	e001      	b.n	8002786 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10b      	bne.n	80027a4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002790:	f043 0220 	orr.w	r2, r3, #32
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e072      	b.n	800288a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff ffb9 	bl	800271e <LL_ADC_REG_IsConversionOngoing>
 80027ac:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff ffb3 	bl	800271e <LL_ADC_REG_IsConversionOngoing>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d154      	bne.n	8002868 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80027be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d151      	bne.n	8002868 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80027c4:	4b35      	ldr	r3, [pc, #212]	; (800289c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80027c6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d02c      	beq.n	800282a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80027d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	6859      	ldr	r1, [r3, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027e2:	035b      	lsls	r3, r3, #13
 80027e4:	430b      	orrs	r3, r1
 80027e6:	431a      	orrs	r2, r3
 80027e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027ec:	4829      	ldr	r0, [pc, #164]	; (8002894 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80027ee:	f7ff ff83 	bl	80026f8 <LL_ADC_IsEnabled>
 80027f2:	4604      	mov	r4, r0
 80027f4:	4828      	ldr	r0, [pc, #160]	; (8002898 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80027f6:	f7ff ff7f 	bl	80026f8 <LL_ADC_IsEnabled>
 80027fa:	4603      	mov	r3, r0
 80027fc:	431c      	orrs	r4, r3
 80027fe:	4828      	ldr	r0, [pc, #160]	; (80028a0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002800:	f7ff ff7a 	bl	80026f8 <LL_ADC_IsEnabled>
 8002804:	4603      	mov	r3, r0
 8002806:	4323      	orrs	r3, r4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d137      	bne.n	800287c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800280c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002814:	f023 030f 	bic.w	r3, r3, #15
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	6811      	ldr	r1, [r2, #0]
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	6892      	ldr	r2, [r2, #8]
 8002820:	430a      	orrs	r2, r1
 8002822:	431a      	orrs	r2, r3
 8002824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002826:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002828:	e028      	b.n	800287c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800282a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002834:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002836:	4817      	ldr	r0, [pc, #92]	; (8002894 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002838:	f7ff ff5e 	bl	80026f8 <LL_ADC_IsEnabled>
 800283c:	4604      	mov	r4, r0
 800283e:	4816      	ldr	r0, [pc, #88]	; (8002898 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002840:	f7ff ff5a 	bl	80026f8 <LL_ADC_IsEnabled>
 8002844:	4603      	mov	r3, r0
 8002846:	431c      	orrs	r4, r3
 8002848:	4815      	ldr	r0, [pc, #84]	; (80028a0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800284a:	f7ff ff55 	bl	80026f8 <LL_ADC_IsEnabled>
 800284e:	4603      	mov	r3, r0
 8002850:	4323      	orrs	r3, r4
 8002852:	2b00      	cmp	r3, #0
 8002854:	d112      	bne.n	800287c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800285e:	f023 030f 	bic.w	r3, r3, #15
 8002862:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002864:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002866:	e009      	b.n	800287c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286c:	f043 0220 	orr.w	r2, r3, #32
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800287a:	e000      	b.n	800287e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800287c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002886:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800288a:	4618      	mov	r0, r3
 800288c:	377c      	adds	r7, #124	; 0x7c
 800288e:	46bd      	mov	sp, r7
 8002890:	bd90      	pop	{r4, r7, pc}
 8002892:	bf00      	nop
 8002894:	50040000 	.word	0x50040000
 8002898:	50040100 	.word	0x50040100
 800289c:	50040300 	.word	0x50040300
 80028a0:	50040200 	.word	0x50040200

080028a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028c0:	4013      	ands	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028d6:	4a04      	ldr	r2, [pc, #16]	; (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	60d3      	str	r3, [r2, #12]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f0:	4b04      	ldr	r3, [pc, #16]	; (8002904 <__NVIC_GetPriorityGrouping+0x18>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	f003 0307 	and.w	r3, r3, #7
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	2b00      	cmp	r3, #0
 8002918:	db0b      	blt.n	8002932 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	f003 021f 	and.w	r2, r3, #31
 8002920:	4907      	ldr	r1, [pc, #28]	; (8002940 <__NVIC_EnableIRQ+0x38>)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	2001      	movs	r0, #1
 800292a:	fa00 f202 	lsl.w	r2, r0, r2
 800292e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	e000e100 	.word	0xe000e100

08002944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	6039      	str	r1, [r7, #0]
 800294e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002954:	2b00      	cmp	r3, #0
 8002956:	db0a      	blt.n	800296e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	b2da      	uxtb	r2, r3
 800295c:	490c      	ldr	r1, [pc, #48]	; (8002990 <__NVIC_SetPriority+0x4c>)
 800295e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002962:	0112      	lsls	r2, r2, #4
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	440b      	add	r3, r1
 8002968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800296c:	e00a      	b.n	8002984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4908      	ldr	r1, [pc, #32]	; (8002994 <__NVIC_SetPriority+0x50>)
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	3b04      	subs	r3, #4
 800297c:	0112      	lsls	r2, r2, #4
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	440b      	add	r3, r1
 8002982:	761a      	strb	r2, [r3, #24]
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	e000e100 	.word	0xe000e100
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002998:	b480      	push	{r7}
 800299a:	b089      	sub	sp, #36	; 0x24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f1c3 0307 	rsb	r3, r3, #7
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	bf28      	it	cs
 80029b6:	2304      	movcs	r3, #4
 80029b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	3304      	adds	r3, #4
 80029be:	2b06      	cmp	r3, #6
 80029c0:	d902      	bls.n	80029c8 <NVIC_EncodePriority+0x30>
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3b03      	subs	r3, #3
 80029c6:	e000      	b.n	80029ca <NVIC_EncodePriority+0x32>
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43da      	mvns	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	401a      	ands	r2, r3
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ea:	43d9      	mvns	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f0:	4313      	orrs	r3, r2
         );
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3724      	adds	r7, #36	; 0x24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
	...

08002a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a10:	d301      	bcc.n	8002a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a12:	2301      	movs	r3, #1
 8002a14:	e00f      	b.n	8002a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a16:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <SysTick_Config+0x40>)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a1e:	210f      	movs	r1, #15
 8002a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a24:	f7ff ff8e 	bl	8002944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <SysTick_Config+0x40>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a2e:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <SysTick_Config+0x40>)
 8002a30:	2207      	movs	r2, #7
 8002a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	e000e010 	.word	0xe000e010

08002a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff ff29 	bl	80028a4 <__NVIC_SetPriorityGrouping>
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b086      	sub	sp, #24
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	4603      	mov	r3, r0
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a6c:	f7ff ff3e 	bl	80028ec <__NVIC_GetPriorityGrouping>
 8002a70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	6978      	ldr	r0, [r7, #20]
 8002a78:	f7ff ff8e 	bl	8002998 <NVIC_EncodePriority>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ff5d 	bl	8002944 <__NVIC_SetPriority>
}
 8002a8a:	bf00      	nop
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	4603      	mov	r3, r0
 8002a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff31 	bl	8002908 <__NVIC_EnableIRQ>
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ffa2 	bl	8002a00 <SysTick_Config>
 8002abc:	4603      	mov	r3, r0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b087      	sub	sp, #28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad6:	e17f      	b.n	8002dd8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	2101      	movs	r1, #1
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 8171 	beq.w	8002dd2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d00b      	beq.n	8002b10 <HAL_GPIO_Init+0x48>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d007      	beq.n	8002b10 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b04:	2b11      	cmp	r3, #17
 8002b06:	d003      	beq.n	8002b10 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b12      	cmp	r3, #18
 8002b0e:	d130      	bne.n	8002b72 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4013      	ands	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b46:	2201      	movs	r2, #1
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4013      	ands	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	091b      	lsrs	r3, r3, #4
 8002b5c:	f003 0201 	and.w	r2, r3, #1
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	2b03      	cmp	r3, #3
 8002b7c:	d118      	bne.n	8002bb0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b84:	2201      	movs	r2, #1
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4013      	ands	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	08db      	lsrs	r3, r3, #3
 8002b9a:	f003 0201 	and.w	r2, r3, #1
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	2203      	movs	r2, #3
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d003      	beq.n	8002bf0 <HAL_GPIO_Init+0x128>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b12      	cmp	r3, #18
 8002bee:	d123      	bne.n	8002c38 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	08da      	lsrs	r2, r3, #3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3208      	adds	r2, #8
 8002bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	220f      	movs	r2, #15
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4013      	ands	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	08da      	lsrs	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3208      	adds	r2, #8
 8002c32:	6939      	ldr	r1, [r7, #16]
 8002c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	2203      	movs	r2, #3
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 0203 	and.w	r2, r3, #3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80ac 	beq.w	8002dd2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7a:	4b5f      	ldr	r3, [pc, #380]	; (8002df8 <HAL_GPIO_Init+0x330>)
 8002c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c7e:	4a5e      	ldr	r2, [pc, #376]	; (8002df8 <HAL_GPIO_Init+0x330>)
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	6613      	str	r3, [r2, #96]	; 0x60
 8002c86:	4b5c      	ldr	r3, [pc, #368]	; (8002df8 <HAL_GPIO_Init+0x330>)
 8002c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c92:	4a5a      	ldr	r2, [pc, #360]	; (8002dfc <HAL_GPIO_Init+0x334>)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	089b      	lsrs	r3, r3, #2
 8002c98:	3302      	adds	r3, #2
 8002c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	220f      	movs	r2, #15
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002cbc:	d025      	beq.n	8002d0a <HAL_GPIO_Init+0x242>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a4f      	ldr	r2, [pc, #316]	; (8002e00 <HAL_GPIO_Init+0x338>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d01f      	beq.n	8002d06 <HAL_GPIO_Init+0x23e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a4e      	ldr	r2, [pc, #312]	; (8002e04 <HAL_GPIO_Init+0x33c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d019      	beq.n	8002d02 <HAL_GPIO_Init+0x23a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a4d      	ldr	r2, [pc, #308]	; (8002e08 <HAL_GPIO_Init+0x340>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d013      	beq.n	8002cfe <HAL_GPIO_Init+0x236>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a4c      	ldr	r2, [pc, #304]	; (8002e0c <HAL_GPIO_Init+0x344>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00d      	beq.n	8002cfa <HAL_GPIO_Init+0x232>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a4b      	ldr	r2, [pc, #300]	; (8002e10 <HAL_GPIO_Init+0x348>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d007      	beq.n	8002cf6 <HAL_GPIO_Init+0x22e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a4a      	ldr	r2, [pc, #296]	; (8002e14 <HAL_GPIO_Init+0x34c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_GPIO_Init+0x22a>
 8002cee:	2306      	movs	r3, #6
 8002cf0:	e00c      	b.n	8002d0c <HAL_GPIO_Init+0x244>
 8002cf2:	2307      	movs	r3, #7
 8002cf4:	e00a      	b.n	8002d0c <HAL_GPIO_Init+0x244>
 8002cf6:	2305      	movs	r3, #5
 8002cf8:	e008      	b.n	8002d0c <HAL_GPIO_Init+0x244>
 8002cfa:	2304      	movs	r3, #4
 8002cfc:	e006      	b.n	8002d0c <HAL_GPIO_Init+0x244>
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e004      	b.n	8002d0c <HAL_GPIO_Init+0x244>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e002      	b.n	8002d0c <HAL_GPIO_Init+0x244>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <HAL_GPIO_Init+0x244>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	f002 0203 	and.w	r2, r2, #3
 8002d12:	0092      	lsls	r2, r2, #2
 8002d14:	4093      	lsls	r3, r2
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d1c:	4937      	ldr	r1, [pc, #220]	; (8002dfc <HAL_GPIO_Init+0x334>)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	089b      	lsrs	r3, r3, #2
 8002d22:	3302      	adds	r3, #2
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d2a:	4b3b      	ldr	r3, [pc, #236]	; (8002e18 <HAL_GPIO_Init+0x350>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	43db      	mvns	r3, r3
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4013      	ands	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d4e:	4a32      	ldr	r2, [pc, #200]	; (8002e18 <HAL_GPIO_Init+0x350>)
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002d54:	4b30      	ldr	r3, [pc, #192]	; (8002e18 <HAL_GPIO_Init+0x350>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4013      	ands	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d78:	4a27      	ldr	r2, [pc, #156]	; (8002e18 <HAL_GPIO_Init+0x350>)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d7e:	4b26      	ldr	r3, [pc, #152]	; (8002e18 <HAL_GPIO_Init+0x350>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002da2:	4a1d      	ldr	r2, [pc, #116]	; (8002e18 <HAL_GPIO_Init+0x350>)
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002da8:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <HAL_GPIO_Init+0x350>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	43db      	mvns	r3, r3
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4013      	ands	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002dcc:	4a12      	ldr	r2, [pc, #72]	; (8002e18 <HAL_GPIO_Init+0x350>)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	fa22 f303 	lsr.w	r3, r2, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f47f ae78 	bne.w	8002ad8 <HAL_GPIO_Init+0x10>
  }
}
 8002de8:	bf00      	nop
 8002dea:	bf00      	nop
 8002dec:	371c      	adds	r7, #28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40010000 	.word	0x40010000
 8002e00:	48000400 	.word	0x48000400
 8002e04:	48000800 	.word	0x48000800
 8002e08:	48000c00 	.word	0x48000c00
 8002e0c:	48001000 	.word	0x48001000
 8002e10:	48001400 	.word	0x48001400
 8002e14:	48001800 	.word	0x48001800
 8002e18:	40010400 	.word	0x40010400

08002e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	807b      	strh	r3, [r7, #2]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e2c:	787b      	ldrb	r3, [r7, #1]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e32:	887a      	ldrh	r2, [r7, #2]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e38:	e002      	b.n	8002e40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e3a:	887a      	ldrh	r2, [r7, #2]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e5e:	887a      	ldrh	r2, [r7, #2]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4013      	ands	r3, r2
 8002e64:	041a      	lsls	r2, r3, #16
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	43d9      	mvns	r1, r3
 8002e6a:	887b      	ldrh	r3, [r7, #2]
 8002e6c:	400b      	ands	r3, r1
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	619a      	str	r2, [r3, #24]
}
 8002e74:	bf00      	nop
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e8a:	4b08      	ldr	r3, [pc, #32]	; (8002eac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e8c:	695a      	ldr	r2, [r3, #20]
 8002e8e:	88fb      	ldrh	r3, [r7, #6]
 8002e90:	4013      	ands	r3, r2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d006      	beq.n	8002ea4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e96:	4a05      	ldr	r2, [pc, #20]	; (8002eac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e98:	88fb      	ldrh	r3, [r7, #6]
 8002e9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e9c:	88fb      	ldrh	r3, [r7, #6]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fe faca 	bl	8001438 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ea4:	bf00      	nop
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40010400 	.word	0x40010400

08002eb0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002eb4:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40007000 	.word	0x40007000

08002ecc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eda:	d130      	bne.n	8002f3e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002edc:	4b23      	ldr	r3, [pc, #140]	; (8002f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ee8:	d038      	beq.n	8002f5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eea:	4b20      	ldr	r3, [pc, #128]	; (8002f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ef2:	4a1e      	ldr	r2, [pc, #120]	; (8002f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ef8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002efa:	4b1d      	ldr	r3, [pc, #116]	; (8002f70 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2232      	movs	r2, #50	; 0x32
 8002f00:	fb02 f303 	mul.w	r3, r2, r3
 8002f04:	4a1b      	ldr	r2, [pc, #108]	; (8002f74 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f06:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0a:	0c9b      	lsrs	r3, r3, #18
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f10:	e002      	b.n	8002f18 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	3b01      	subs	r3, #1
 8002f16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f18:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f24:	d102      	bne.n	8002f2c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1f2      	bne.n	8002f12 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f2c:	4b0f      	ldr	r3, [pc, #60]	; (8002f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f38:	d110      	bne.n	8002f5c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e00f      	b.n	8002f5e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f3e:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f4a:	d007      	beq.n	8002f5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f4c:	4b07      	ldr	r3, [pc, #28]	; (8002f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f54:	4a05      	ldr	r2, [pc, #20]	; (8002f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f5a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40007000 	.word	0x40007000
 8002f70:	20000004 	.word	0x20000004
 8002f74:	431bde83 	.word	0x431bde83

08002f78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e3d4      	b.n	8003734 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f8a:	4ba1      	ldr	r3, [pc, #644]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f94:	4b9e      	ldr	r3, [pc, #632]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0310 	and.w	r3, r3, #16
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 80e4 	beq.w	8003174 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d007      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x4a>
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	2b0c      	cmp	r3, #12
 8002fb6:	f040 808b 	bne.w	80030d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	f040 8087 	bne.w	80030d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fc2:	4b93      	ldr	r3, [pc, #588]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d005      	beq.n	8002fda <HAL_RCC_OscConfig+0x62>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e3ac      	b.n	8003734 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1a      	ldr	r2, [r3, #32]
 8002fde:	4b8c      	ldr	r3, [pc, #560]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d004      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x7c>
 8002fea:	4b89      	ldr	r3, [pc, #548]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ff2:	e005      	b.n	8003000 <HAL_RCC_OscConfig+0x88>
 8002ff4:	4b86      	ldr	r3, [pc, #536]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8002ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ffa:	091b      	lsrs	r3, r3, #4
 8002ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003000:	4293      	cmp	r3, r2
 8003002:	d223      	bcs.n	800304c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fd41 	bl	8003a90 <RCC_SetFlashLatencyFromMSIRange>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e38d      	b.n	8003734 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003018:	4b7d      	ldr	r3, [pc, #500]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a7c      	ldr	r2, [pc, #496]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 800301e:	f043 0308 	orr.w	r3, r3, #8
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	4b7a      	ldr	r3, [pc, #488]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	4977      	ldr	r1, [pc, #476]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003032:	4313      	orrs	r3, r2
 8003034:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003036:	4b76      	ldr	r3, [pc, #472]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	021b      	lsls	r3, r3, #8
 8003044:	4972      	ldr	r1, [pc, #456]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003046:	4313      	orrs	r3, r2
 8003048:	604b      	str	r3, [r1, #4]
 800304a:	e025      	b.n	8003098 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800304c:	4b70      	ldr	r3, [pc, #448]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a6f      	ldr	r2, [pc, #444]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003052:	f043 0308 	orr.w	r3, r3, #8
 8003056:	6013      	str	r3, [r2, #0]
 8003058:	4b6d      	ldr	r3, [pc, #436]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	496a      	ldr	r1, [pc, #424]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003066:	4313      	orrs	r3, r2
 8003068:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800306a:	4b69      	ldr	r3, [pc, #420]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	021b      	lsls	r3, r3, #8
 8003078:	4965      	ldr	r1, [pc, #404]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 800307a:	4313      	orrs	r3, r2
 800307c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d109      	bne.n	8003098 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	4618      	mov	r0, r3
 800308a:	f000 fd01 	bl	8003a90 <RCC_SetFlashLatencyFromMSIRange>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e34d      	b.n	8003734 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003098:	f000 fc36 	bl	8003908 <HAL_RCC_GetSysClockFreq>
 800309c:	4602      	mov	r2, r0
 800309e:	4b5c      	ldr	r3, [pc, #368]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	495a      	ldr	r1, [pc, #360]	; (8003214 <HAL_RCC_OscConfig+0x29c>)
 80030aa:	5ccb      	ldrb	r3, [r1, r3]
 80030ac:	f003 031f 	and.w	r3, r3, #31
 80030b0:	fa22 f303 	lsr.w	r3, r2, r3
 80030b4:	4a58      	ldr	r2, [pc, #352]	; (8003218 <HAL_RCC_OscConfig+0x2a0>)
 80030b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030b8:	4b58      	ldr	r3, [pc, #352]	; (800321c <HAL_RCC_OscConfig+0x2a4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fe fbc9 	bl	8001854 <HAL_InitTick>
 80030c2:	4603      	mov	r3, r0
 80030c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030c6:	7bfb      	ldrb	r3, [r7, #15]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d052      	beq.n	8003172 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
 80030ce:	e331      	b.n	8003734 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d032      	beq.n	800313e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030d8:	4b4d      	ldr	r3, [pc, #308]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a4c      	ldr	r2, [pc, #304]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 80030de:	f043 0301 	orr.w	r3, r3, #1
 80030e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030e4:	f7fe fc06 	bl	80018f4 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030ec:	f7fe fc02 	bl	80018f4 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e31a      	b.n	8003734 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030fe:	4b44      	ldr	r3, [pc, #272]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0f0      	beq.n	80030ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800310a:	4b41      	ldr	r3, [pc, #260]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a40      	ldr	r2, [pc, #256]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003110:	f043 0308 	orr.w	r3, r3, #8
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	4b3e      	ldr	r3, [pc, #248]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	493b      	ldr	r1, [pc, #236]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003124:	4313      	orrs	r3, r2
 8003126:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003128:	4b39      	ldr	r3, [pc, #228]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	021b      	lsls	r3, r3, #8
 8003136:	4936      	ldr	r1, [pc, #216]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003138:	4313      	orrs	r3, r2
 800313a:	604b      	str	r3, [r1, #4]
 800313c:	e01a      	b.n	8003174 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800313e:	4b34      	ldr	r3, [pc, #208]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a33      	ldr	r2, [pc, #204]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003144:	f023 0301 	bic.w	r3, r3, #1
 8003148:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800314a:	f7fe fbd3 	bl	80018f4 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003152:	f7fe fbcf 	bl	80018f4 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e2e7      	b.n	8003734 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003164:	4b2a      	ldr	r3, [pc, #168]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1f0      	bne.n	8003152 <HAL_RCC_OscConfig+0x1da>
 8003170:	e000      	b.n	8003174 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003172:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d074      	beq.n	800326a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	2b08      	cmp	r3, #8
 8003184:	d005      	beq.n	8003192 <HAL_RCC_OscConfig+0x21a>
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	2b0c      	cmp	r3, #12
 800318a:	d10e      	bne.n	80031aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	2b03      	cmp	r3, #3
 8003190:	d10b      	bne.n	80031aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003192:	4b1f      	ldr	r3, [pc, #124]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d064      	beq.n	8003268 <HAL_RCC_OscConfig+0x2f0>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d160      	bne.n	8003268 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e2c4      	b.n	8003734 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b2:	d106      	bne.n	80031c2 <HAL_RCC_OscConfig+0x24a>
 80031b4:	4b16      	ldr	r3, [pc, #88]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a15      	ldr	r2, [pc, #84]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 80031ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	e01d      	b.n	80031fe <HAL_RCC_OscConfig+0x286>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031ca:	d10c      	bne.n	80031e6 <HAL_RCC_OscConfig+0x26e>
 80031cc:	4b10      	ldr	r3, [pc, #64]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a0f      	ldr	r2, [pc, #60]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 80031d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a0c      	ldr	r2, [pc, #48]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 80031de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	e00b      	b.n	80031fe <HAL_RCC_OscConfig+0x286>
 80031e6:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a09      	ldr	r2, [pc, #36]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 80031ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	4b07      	ldr	r3, [pc, #28]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a06      	ldr	r2, [pc, #24]	; (8003210 <HAL_RCC_OscConfig+0x298>)
 80031f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d01c      	beq.n	8003240 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003206:	f7fe fb75 	bl	80018f4 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800320c:	e011      	b.n	8003232 <HAL_RCC_OscConfig+0x2ba>
 800320e:	bf00      	nop
 8003210:	40021000 	.word	0x40021000
 8003214:	08005c7c 	.word	0x08005c7c
 8003218:	20000004 	.word	0x20000004
 800321c:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003220:	f7fe fb68 	bl	80018f4 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	; 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e280      	b.n	8003734 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003232:	4baf      	ldr	r3, [pc, #700]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0x2a8>
 800323e:	e014      	b.n	800326a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fe fb58 	bl	80018f4 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003248:	f7fe fb54 	bl	80018f4 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	; 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e26c      	b.n	8003734 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800325a:	4ba5      	ldr	r3, [pc, #660]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x2d0>
 8003266:	e000      	b.n	800326a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d060      	beq.n	8003338 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	2b04      	cmp	r3, #4
 800327a:	d005      	beq.n	8003288 <HAL_RCC_OscConfig+0x310>
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2b0c      	cmp	r3, #12
 8003280:	d119      	bne.n	80032b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2b02      	cmp	r3, #2
 8003286:	d116      	bne.n	80032b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003288:	4b99      	ldr	r3, [pc, #612]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_RCC_OscConfig+0x328>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e249      	b.n	8003734 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a0:	4b93      	ldr	r3, [pc, #588]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	061b      	lsls	r3, r3, #24
 80032ae:	4990      	ldr	r1, [pc, #576]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032b4:	e040      	b.n	8003338 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d023      	beq.n	8003306 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032be:	4b8c      	ldr	r3, [pc, #560]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a8b      	ldr	r2, [pc, #556]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 80032c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ca:	f7fe fb13 	bl	80018f4 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d2:	f7fe fb0f 	bl	80018f4 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e227      	b.n	8003734 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e4:	4b82      	ldr	r3, [pc, #520]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f0:	4b7f      	ldr	r3, [pc, #508]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	061b      	lsls	r3, r3, #24
 80032fe:	497c      	ldr	r1, [pc, #496]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 8003300:	4313      	orrs	r3, r2
 8003302:	604b      	str	r3, [r1, #4]
 8003304:	e018      	b.n	8003338 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003306:	4b7a      	ldr	r3, [pc, #488]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a79      	ldr	r2, [pc, #484]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 800330c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003312:	f7fe faef 	bl	80018f4 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800331a:	f7fe faeb 	bl	80018f4 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e203      	b.n	8003734 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800332c:	4b70      	ldr	r3, [pc, #448]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1f0      	bne.n	800331a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0308 	and.w	r3, r3, #8
 8003340:	2b00      	cmp	r3, #0
 8003342:	d03c      	beq.n	80033be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01c      	beq.n	8003386 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800334c:	4b68      	ldr	r3, [pc, #416]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 800334e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003352:	4a67      	ldr	r2, [pc, #412]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335c:	f7fe faca 	bl	80018f4 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003364:	f7fe fac6 	bl	80018f4 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e1de      	b.n	8003734 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003376:	4b5e      	ldr	r3, [pc, #376]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 8003378:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0ef      	beq.n	8003364 <HAL_RCC_OscConfig+0x3ec>
 8003384:	e01b      	b.n	80033be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003386:	4b5a      	ldr	r3, [pc, #360]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 8003388:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800338c:	4a58      	ldr	r2, [pc, #352]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 800338e:	f023 0301 	bic.w	r3, r3, #1
 8003392:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003396:	f7fe faad 	bl	80018f4 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800339e:	f7fe faa9 	bl	80018f4 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e1c1      	b.n	8003734 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033b0:	4b4f      	ldr	r3, [pc, #316]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 80033b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1ef      	bne.n	800339e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 80a6 	beq.w	8003518 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033cc:	2300      	movs	r3, #0
 80033ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033d0:	4b47      	ldr	r3, [pc, #284]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 80033d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10d      	bne.n	80033f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033dc:	4b44      	ldr	r3, [pc, #272]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 80033de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e0:	4a43      	ldr	r2, [pc, #268]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 80033e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e6:	6593      	str	r3, [r2, #88]	; 0x58
 80033e8:	4b41      	ldr	r3, [pc, #260]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 80033ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033f4:	2301      	movs	r3, #1
 80033f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033f8:	4b3e      	ldr	r3, [pc, #248]	; (80034f4 <HAL_RCC_OscConfig+0x57c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003400:	2b00      	cmp	r3, #0
 8003402:	d118      	bne.n	8003436 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003404:	4b3b      	ldr	r3, [pc, #236]	; (80034f4 <HAL_RCC_OscConfig+0x57c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a3a      	ldr	r2, [pc, #232]	; (80034f4 <HAL_RCC_OscConfig+0x57c>)
 800340a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800340e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003410:	f7fe fa70 	bl	80018f4 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003418:	f7fe fa6c 	bl	80018f4 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e184      	b.n	8003734 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800342a:	4b32      	ldr	r3, [pc, #200]	; (80034f4 <HAL_RCC_OscConfig+0x57c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0f0      	beq.n	8003418 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d108      	bne.n	8003450 <HAL_RCC_OscConfig+0x4d8>
 800343e:	4b2c      	ldr	r3, [pc, #176]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 8003440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003444:	4a2a      	ldr	r2, [pc, #168]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800344e:	e024      	b.n	800349a <HAL_RCC_OscConfig+0x522>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b05      	cmp	r3, #5
 8003456:	d110      	bne.n	800347a <HAL_RCC_OscConfig+0x502>
 8003458:	4b25      	ldr	r3, [pc, #148]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345e:	4a24      	ldr	r2, [pc, #144]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 8003460:	f043 0304 	orr.w	r3, r3, #4
 8003464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003468:	4b21      	ldr	r3, [pc, #132]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 800346a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346e:	4a20      	ldr	r2, [pc, #128]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003478:	e00f      	b.n	800349a <HAL_RCC_OscConfig+0x522>
 800347a:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 800347c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003480:	4a1b      	ldr	r2, [pc, #108]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 8003482:	f023 0301 	bic.w	r3, r3, #1
 8003486:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800348a:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 800348c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003490:	4a17      	ldr	r2, [pc, #92]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 8003492:	f023 0304 	bic.w	r3, r3, #4
 8003496:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d016      	beq.n	80034d0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a2:	f7fe fa27 	bl	80018f4 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a8:	e00a      	b.n	80034c0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034aa:	f7fe fa23 	bl	80018f4 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e139      	b.n	8003734 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <HAL_RCC_OscConfig+0x578>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0ed      	beq.n	80034aa <HAL_RCC_OscConfig+0x532>
 80034ce:	e01a      	b.n	8003506 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d0:	f7fe fa10 	bl	80018f4 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034d6:	e00f      	b.n	80034f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d8:	f7fe fa0c 	bl	80018f4 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d906      	bls.n	80034f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e122      	b.n	8003734 <HAL_RCC_OscConfig+0x7bc>
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034f8:	4b90      	ldr	r3, [pc, #576]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 80034fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1e8      	bne.n	80034d8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003506:	7ffb      	ldrb	r3, [r7, #31]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d105      	bne.n	8003518 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800350c:	4b8b      	ldr	r3, [pc, #556]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 800350e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003510:	4a8a      	ldr	r2, [pc, #552]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 8003512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003516:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 8108 	beq.w	8003732 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	2b02      	cmp	r3, #2
 8003528:	f040 80d0 	bne.w	80036cc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800352c:	4b83      	ldr	r3, [pc, #524]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f003 0203 	and.w	r2, r3, #3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353c:	429a      	cmp	r2, r3
 800353e:	d130      	bne.n	80035a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	3b01      	subs	r3, #1
 800354c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800354e:	429a      	cmp	r2, r3
 8003550:	d127      	bne.n	80035a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800355e:	429a      	cmp	r2, r3
 8003560:	d11f      	bne.n	80035a2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800356c:	2a07      	cmp	r2, #7
 800356e:	bf14      	ite	ne
 8003570:	2201      	movne	r2, #1
 8003572:	2200      	moveq	r2, #0
 8003574:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003576:	4293      	cmp	r3, r2
 8003578:	d113      	bne.n	80035a2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003584:	085b      	lsrs	r3, r3, #1
 8003586:	3b01      	subs	r3, #1
 8003588:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800358a:	429a      	cmp	r2, r3
 800358c:	d109      	bne.n	80035a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	085b      	lsrs	r3, r3, #1
 800359a:	3b01      	subs	r3, #1
 800359c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800359e:	429a      	cmp	r2, r3
 80035a0:	d06e      	beq.n	8003680 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	2b0c      	cmp	r3, #12
 80035a6:	d069      	beq.n	800367c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035a8:	4b64      	ldr	r3, [pc, #400]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d105      	bne.n	80035c0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80035b4:	4b61      	ldr	r3, [pc, #388]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0b7      	b.n	8003734 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035c4:	4b5d      	ldr	r3, [pc, #372]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a5c      	ldr	r2, [pc, #368]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 80035ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035d0:	f7fe f990 	bl	80018f4 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d8:	f7fe f98c 	bl	80018f4 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e0a4      	b.n	8003734 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ea:	4b54      	ldr	r3, [pc, #336]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f0      	bne.n	80035d8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035f6:	4b51      	ldr	r3, [pc, #324]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	4b51      	ldr	r3, [pc, #324]	; (8003740 <HAL_RCC_OscConfig+0x7c8>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003606:	3a01      	subs	r2, #1
 8003608:	0112      	lsls	r2, r2, #4
 800360a:	4311      	orrs	r1, r2
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003610:	0212      	lsls	r2, r2, #8
 8003612:	4311      	orrs	r1, r2
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003618:	0852      	lsrs	r2, r2, #1
 800361a:	3a01      	subs	r2, #1
 800361c:	0552      	lsls	r2, r2, #21
 800361e:	4311      	orrs	r1, r2
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003624:	0852      	lsrs	r2, r2, #1
 8003626:	3a01      	subs	r2, #1
 8003628:	0652      	lsls	r2, r2, #25
 800362a:	4311      	orrs	r1, r2
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003630:	0912      	lsrs	r2, r2, #4
 8003632:	0452      	lsls	r2, r2, #17
 8003634:	430a      	orrs	r2, r1
 8003636:	4941      	ldr	r1, [pc, #260]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 8003638:	4313      	orrs	r3, r2
 800363a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800363c:	4b3f      	ldr	r3, [pc, #252]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a3e      	ldr	r2, [pc, #248]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 8003642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003646:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003648:	4b3c      	ldr	r3, [pc, #240]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	4a3b      	ldr	r2, [pc, #236]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 800364e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003652:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003654:	f7fe f94e 	bl	80018f4 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365c:	f7fe f94a 	bl	80018f4 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e062      	b.n	8003734 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800366e:	4b33      	ldr	r3, [pc, #204]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800367a:	e05a      	b.n	8003732 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e059      	b.n	8003734 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003680:	4b2e      	ldr	r3, [pc, #184]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d152      	bne.n	8003732 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800368c:	4b2b      	ldr	r3, [pc, #172]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a2a      	ldr	r2, [pc, #168]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 8003692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003696:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003698:	4b28      	ldr	r3, [pc, #160]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4a27      	ldr	r2, [pc, #156]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 800369e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036a4:	f7fe f926 	bl	80018f4 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ac:	f7fe f922 	bl	80018f4 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e03a      	b.n	8003734 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036be:	4b1f      	ldr	r3, [pc, #124]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0f0      	beq.n	80036ac <HAL_RCC_OscConfig+0x734>
 80036ca:	e032      	b.n	8003732 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	2b0c      	cmp	r3, #12
 80036d0:	d02d      	beq.n	800372e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d2:	4b1a      	ldr	r3, [pc, #104]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a19      	ldr	r2, [pc, #100]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 80036d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036dc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80036de:	4b17      	ldr	r3, [pc, #92]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d105      	bne.n	80036f6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80036ea:	4b14      	ldr	r3, [pc, #80]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	4a13      	ldr	r2, [pc, #76]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 80036f0:	f023 0303 	bic.w	r3, r3, #3
 80036f4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036f6:	4b11      	ldr	r3, [pc, #68]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	4a10      	ldr	r2, [pc, #64]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 80036fc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003704:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003706:	f7fe f8f5 	bl	80018f4 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800370e:	f7fe f8f1 	bl	80018f4 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e009      	b.n	8003734 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003720:	4b06      	ldr	r3, [pc, #24]	; (800373c <HAL_RCC_OscConfig+0x7c4>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1f0      	bne.n	800370e <HAL_RCC_OscConfig+0x796>
 800372c:	e001      	b.n	8003732 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3720      	adds	r7, #32
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40021000 	.word	0x40021000
 8003740:	f99d808c 	.word	0xf99d808c

08003744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0c8      	b.n	80038ea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003758:	4b66      	ldr	r3, [pc, #408]	; (80038f4 <HAL_RCC_ClockConfig+0x1b0>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d910      	bls.n	8003788 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003766:	4b63      	ldr	r3, [pc, #396]	; (80038f4 <HAL_RCC_ClockConfig+0x1b0>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f023 0207 	bic.w	r2, r3, #7
 800376e:	4961      	ldr	r1, [pc, #388]	; (80038f4 <HAL_RCC_ClockConfig+0x1b0>)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	4313      	orrs	r3, r2
 8003774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003776:	4b5f      	ldr	r3, [pc, #380]	; (80038f4 <HAL_RCC_ClockConfig+0x1b0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d001      	beq.n	8003788 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0b0      	b.n	80038ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d04c      	beq.n	800382e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2b03      	cmp	r3, #3
 800379a:	d107      	bne.n	80037ac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800379c:	4b56      	ldr	r3, [pc, #344]	; (80038f8 <HAL_RCC_ClockConfig+0x1b4>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d121      	bne.n	80037ec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e09e      	b.n	80038ea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d107      	bne.n	80037c4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037b4:	4b50      	ldr	r3, [pc, #320]	; (80038f8 <HAL_RCC_ClockConfig+0x1b4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d115      	bne.n	80037ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e092      	b.n	80038ea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d107      	bne.n	80037dc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037cc:	4b4a      	ldr	r3, [pc, #296]	; (80038f8 <HAL_RCC_ClockConfig+0x1b4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d109      	bne.n	80037ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e086      	b.n	80038ea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037dc:	4b46      	ldr	r3, [pc, #280]	; (80038f8 <HAL_RCC_ClockConfig+0x1b4>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e07e      	b.n	80038ea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037ec:	4b42      	ldr	r3, [pc, #264]	; (80038f8 <HAL_RCC_ClockConfig+0x1b4>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f023 0203 	bic.w	r2, r3, #3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	493f      	ldr	r1, [pc, #252]	; (80038f8 <HAL_RCC_ClockConfig+0x1b4>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037fe:	f7fe f879 	bl	80018f4 <HAL_GetTick>
 8003802:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003804:	e00a      	b.n	800381c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003806:	f7fe f875 	bl	80018f4 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	f241 3288 	movw	r2, #5000	; 0x1388
 8003814:	4293      	cmp	r3, r2
 8003816:	d901      	bls.n	800381c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e066      	b.n	80038ea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381c:	4b36      	ldr	r3, [pc, #216]	; (80038f8 <HAL_RCC_ClockConfig+0x1b4>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 020c 	and.w	r2, r3, #12
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	429a      	cmp	r2, r3
 800382c:	d1eb      	bne.n	8003806 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800383a:	4b2f      	ldr	r3, [pc, #188]	; (80038f8 <HAL_RCC_ClockConfig+0x1b4>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	492c      	ldr	r1, [pc, #176]	; (80038f8 <HAL_RCC_ClockConfig+0x1b4>)
 8003848:	4313      	orrs	r3, r2
 800384a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800384c:	4b29      	ldr	r3, [pc, #164]	; (80038f4 <HAL_RCC_ClockConfig+0x1b0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d210      	bcs.n	800387c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385a:	4b26      	ldr	r3, [pc, #152]	; (80038f4 <HAL_RCC_ClockConfig+0x1b0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f023 0207 	bic.w	r2, r3, #7
 8003862:	4924      	ldr	r1, [pc, #144]	; (80038f4 <HAL_RCC_ClockConfig+0x1b0>)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	4313      	orrs	r3, r2
 8003868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800386a:	4b22      	ldr	r3, [pc, #136]	; (80038f4 <HAL_RCC_ClockConfig+0x1b0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d001      	beq.n	800387c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e036      	b.n	80038ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b00      	cmp	r3, #0
 8003886:	d008      	beq.n	800389a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003888:	4b1b      	ldr	r3, [pc, #108]	; (80038f8 <HAL_RCC_ClockConfig+0x1b4>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	4918      	ldr	r1, [pc, #96]	; (80038f8 <HAL_RCC_ClockConfig+0x1b4>)
 8003896:	4313      	orrs	r3, r2
 8003898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d009      	beq.n	80038ba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038a6:	4b14      	ldr	r3, [pc, #80]	; (80038f8 <HAL_RCC_ClockConfig+0x1b4>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	4910      	ldr	r1, [pc, #64]	; (80038f8 <HAL_RCC_ClockConfig+0x1b4>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038ba:	f000 f825 	bl	8003908 <HAL_RCC_GetSysClockFreq>
 80038be:	4602      	mov	r2, r0
 80038c0:	4b0d      	ldr	r3, [pc, #52]	; (80038f8 <HAL_RCC_ClockConfig+0x1b4>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	091b      	lsrs	r3, r3, #4
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	490c      	ldr	r1, [pc, #48]	; (80038fc <HAL_RCC_ClockConfig+0x1b8>)
 80038cc:	5ccb      	ldrb	r3, [r1, r3]
 80038ce:	f003 031f 	and.w	r3, r3, #31
 80038d2:	fa22 f303 	lsr.w	r3, r2, r3
 80038d6:	4a0a      	ldr	r2, [pc, #40]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038da:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <HAL_RCC_ClockConfig+0x1c0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7fd ffb8 	bl	8001854 <HAL_InitTick>
 80038e4:	4603      	mov	r3, r0
 80038e6:	72fb      	strb	r3, [r7, #11]

  return status;
 80038e8:	7afb      	ldrb	r3, [r7, #11]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40022000 	.word	0x40022000
 80038f8:	40021000 	.word	0x40021000
 80038fc:	08005c7c 	.word	0x08005c7c
 8003900:	20000004 	.word	0x20000004
 8003904:	20000008 	.word	0x20000008

08003908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003908:	b480      	push	{r7}
 800390a:	b089      	sub	sp, #36	; 0x24
 800390c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	61fb      	str	r3, [r7, #28]
 8003912:	2300      	movs	r3, #0
 8003914:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003916:	4b3e      	ldr	r3, [pc, #248]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
 800391e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003920:	4b3b      	ldr	r3, [pc, #236]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_RCC_GetSysClockFreq+0x34>
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	2b0c      	cmp	r3, #12
 8003934:	d121      	bne.n	800397a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d11e      	bne.n	800397a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800393c:	4b34      	ldr	r3, [pc, #208]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x108>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b00      	cmp	r3, #0
 8003946:	d107      	bne.n	8003958 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003948:	4b31      	ldr	r3, [pc, #196]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x108>)
 800394a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800394e:	0a1b      	lsrs	r3, r3, #8
 8003950:	f003 030f 	and.w	r3, r3, #15
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	e005      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003958:	4b2d      	ldr	r3, [pc, #180]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x108>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	091b      	lsrs	r3, r3, #4
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003964:	4a2b      	ldr	r2, [pc, #172]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800396c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10d      	bne.n	8003990 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003978:	e00a      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	2b04      	cmp	r3, #4
 800397e:	d102      	bne.n	8003986 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003980:	4b25      	ldr	r3, [pc, #148]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x110>)
 8003982:	61bb      	str	r3, [r7, #24]
 8003984:	e004      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	2b08      	cmp	r3, #8
 800398a:	d101      	bne.n	8003990 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800398c:	4b23      	ldr	r3, [pc, #140]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x114>)
 800398e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	2b0c      	cmp	r3, #12
 8003994:	d134      	bne.n	8003a00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003996:	4b1e      	ldr	r3, [pc, #120]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d003      	beq.n	80039ae <HAL_RCC_GetSysClockFreq+0xa6>
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d003      	beq.n	80039b4 <HAL_RCC_GetSysClockFreq+0xac>
 80039ac:	e005      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80039ae:	4b1a      	ldr	r3, [pc, #104]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x110>)
 80039b0:	617b      	str	r3, [r7, #20]
      break;
 80039b2:	e005      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039b4:	4b19      	ldr	r3, [pc, #100]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x114>)
 80039b6:	617b      	str	r3, [r7, #20]
      break;
 80039b8:	e002      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	617b      	str	r3, [r7, #20]
      break;
 80039be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039c0:	4b13      	ldr	r3, [pc, #76]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x108>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	091b      	lsrs	r3, r3, #4
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	3301      	adds	r3, #1
 80039cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039ce:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x108>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	0a1b      	lsrs	r3, r3, #8
 80039d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	fb02 f203 	mul.w	r2, r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039e6:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x108>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	0e5b      	lsrs	r3, r3, #25
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	3301      	adds	r3, #1
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a00:	69bb      	ldr	r3, [r7, #24]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3724      	adds	r7, #36	; 0x24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40021000 	.word	0x40021000
 8003a14:	08005c94 	.word	0x08005c94
 8003a18:	00f42400 	.word	0x00f42400
 8003a1c:	007a1200 	.word	0x007a1200

08003a20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a24:	4b03      	ldr	r3, [pc, #12]	; (8003a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a26:	681b      	ldr	r3, [r3, #0]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	20000004 	.word	0x20000004

08003a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a3c:	f7ff fff0 	bl	8003a20 <HAL_RCC_GetHCLKFreq>
 8003a40:	4602      	mov	r2, r0
 8003a42:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	0a1b      	lsrs	r3, r3, #8
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	4904      	ldr	r1, [pc, #16]	; (8003a60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a4e:	5ccb      	ldrb	r3, [r1, r3]
 8003a50:	f003 031f 	and.w	r3, r3, #31
 8003a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	08005c8c 	.word	0x08005c8c

08003a64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a68:	f7ff ffda 	bl	8003a20 <HAL_RCC_GetHCLKFreq>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	0adb      	lsrs	r3, r3, #11
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	4904      	ldr	r1, [pc, #16]	; (8003a8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a7a:	5ccb      	ldrb	r3, [r1, r3]
 8003a7c:	f003 031f 	and.w	r3, r3, #31
 8003a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	08005c8c 	.word	0x08005c8c

08003a90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a98:	2300      	movs	r3, #0
 8003a9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a9c:	4b2a      	ldr	r3, [pc, #168]	; (8003b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003aa8:	f7ff fa02 	bl	8002eb0 <HAL_PWREx_GetVoltageRange>
 8003aac:	6178      	str	r0, [r7, #20]
 8003aae:	e014      	b.n	8003ada <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ab0:	4b25      	ldr	r3, [pc, #148]	; (8003b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab4:	4a24      	ldr	r2, [pc, #144]	; (8003b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aba:	6593      	str	r3, [r2, #88]	; 0x58
 8003abc:	4b22      	ldr	r3, [pc, #136]	; (8003b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ac8:	f7ff f9f2 	bl	8002eb0 <HAL_PWREx_GetVoltageRange>
 8003acc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ace:	4b1e      	ldr	r3, [pc, #120]	; (8003b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad2:	4a1d      	ldr	r2, [pc, #116]	; (8003b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ad8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ae0:	d10b      	bne.n	8003afa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b80      	cmp	r3, #128	; 0x80
 8003ae6:	d919      	bls.n	8003b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2ba0      	cmp	r3, #160	; 0xa0
 8003aec:	d902      	bls.n	8003af4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003aee:	2302      	movs	r3, #2
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	e013      	b.n	8003b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003af4:	2301      	movs	r3, #1
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	e010      	b.n	8003b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b80      	cmp	r3, #128	; 0x80
 8003afe:	d902      	bls.n	8003b06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b00:	2303      	movs	r3, #3
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	e00a      	b.n	8003b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b80      	cmp	r3, #128	; 0x80
 8003b0a:	d102      	bne.n	8003b12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	e004      	b.n	8003b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b70      	cmp	r3, #112	; 0x70
 8003b16:	d101      	bne.n	8003b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b18:	2301      	movs	r3, #1
 8003b1a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f023 0207 	bic.w	r2, r3, #7
 8003b24:	4909      	ldr	r1, [pc, #36]	; (8003b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b2c:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d001      	beq.n	8003b3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	40022000 	.word	0x40022000

08003b50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b58:	2300      	movs	r3, #0
 8003b5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d041      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b74:	d02a      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b76:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b7a:	d824      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b80:	d008      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b86:	d81e      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b90:	d010      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b92:	e018      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b94:	4b86      	ldr	r3, [pc, #536]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	4a85      	ldr	r2, [pc, #532]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b9e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ba0:	e015      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 fabb 	bl	8004124 <RCCEx_PLLSAI1_Config>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bb2:	e00c      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3320      	adds	r3, #32
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fba6 	bl	800430c <RCCEx_PLLSAI2_Config>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bc4:	e003      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	74fb      	strb	r3, [r7, #19]
      break;
 8003bca:	e000      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003bcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bce:	7cfb      	ldrb	r3, [r7, #19]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10b      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bd4:	4b76      	ldr	r3, [pc, #472]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003be2:	4973      	ldr	r1, [pc, #460]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003bea:	e001      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bec:	7cfb      	ldrb	r3, [r7, #19]
 8003bee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d041      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c00:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c04:	d02a      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c0a:	d824      	bhi.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c10:	d008      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c16:	d81e      	bhi.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c20:	d010      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c22:	e018      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c24:	4b62      	ldr	r3, [pc, #392]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	4a61      	ldr	r2, [pc, #388]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c2e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c30:	e015      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3304      	adds	r3, #4
 8003c36:	2100      	movs	r1, #0
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fa73 	bl	8004124 <RCCEx_PLLSAI1_Config>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c42:	e00c      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3320      	adds	r3, #32
 8003c48:	2100      	movs	r1, #0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fb5e 	bl	800430c <RCCEx_PLLSAI2_Config>
 8003c50:	4603      	mov	r3, r0
 8003c52:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c54:	e003      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	74fb      	strb	r3, [r7, #19]
      break;
 8003c5a:	e000      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c5e:	7cfb      	ldrb	r3, [r7, #19]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10b      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c64:	4b52      	ldr	r3, [pc, #328]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c72:	494f      	ldr	r1, [pc, #316]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c7a:	e001      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c7c:	7cfb      	ldrb	r3, [r7, #19]
 8003c7e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 80a0 	beq.w	8003dce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c92:	4b47      	ldr	r3, [pc, #284]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00d      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca8:	4b41      	ldr	r3, [pc, #260]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cac:	4a40      	ldr	r2, [pc, #256]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb2:	6593      	str	r3, [r2, #88]	; 0x58
 8003cb4:	4b3e      	ldr	r3, [pc, #248]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cbc:	60bb      	str	r3, [r7, #8]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cc4:	4b3b      	ldr	r3, [pc, #236]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a3a      	ldr	r2, [pc, #232]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cd0:	f7fd fe10 	bl	80018f4 <HAL_GetTick>
 8003cd4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cd6:	e009      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd8:	f7fd fe0c 	bl	80018f4 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d902      	bls.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	74fb      	strb	r3, [r7, #19]
        break;
 8003cea:	e005      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cec:	4b31      	ldr	r3, [pc, #196]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0ef      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003cf8:	7cfb      	ldrb	r3, [r7, #19]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d15c      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cfe:	4b2c      	ldr	r3, [pc, #176]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d08:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d01f      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d019      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d1c:	4b24      	ldr	r3, [pc, #144]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d28:	4b21      	ldr	r3, [pc, #132]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2e:	4a20      	ldr	r2, [pc, #128]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d38:	4b1d      	ldr	r3, [pc, #116]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3e:	4a1c      	ldr	r2, [pc, #112]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d48:	4a19      	ldr	r2, [pc, #100]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d016      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5a:	f7fd fdcb 	bl	80018f4 <HAL_GetTick>
 8003d5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d60:	e00b      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d62:	f7fd fdc7 	bl	80018f4 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d902      	bls.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	74fb      	strb	r3, [r7, #19]
            break;
 8003d78:	e006      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d7a:	4b0d      	ldr	r3, [pc, #52]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0ec      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d88:	7cfb      	ldrb	r3, [r7, #19]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10c      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d8e:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d9e:	4904      	ldr	r1, [pc, #16]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003da6:	e009      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003da8:	7cfb      	ldrb	r3, [r7, #19]
 8003daa:	74bb      	strb	r3, [r7, #18]
 8003dac:	e006      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003dae:	bf00      	nop
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db8:	7cfb      	ldrb	r3, [r7, #19]
 8003dba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dbc:	7c7b      	ldrb	r3, [r7, #17]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d105      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc2:	4b9e      	ldr	r3, [pc, #632]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc6:	4a9d      	ldr	r2, [pc, #628]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dcc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dda:	4b98      	ldr	r3, [pc, #608]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de0:	f023 0203 	bic.w	r2, r3, #3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de8:	4994      	ldr	r1, [pc, #592]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dfc:	4b8f      	ldr	r3, [pc, #572]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e02:	f023 020c 	bic.w	r2, r3, #12
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0a:	498c      	ldr	r1, [pc, #560]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e1e:	4b87      	ldr	r3, [pc, #540]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	4983      	ldr	r1, [pc, #524]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e40:	4b7e      	ldr	r3, [pc, #504]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e46:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4e:	497b      	ldr	r1, [pc, #492]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e62:	4b76      	ldr	r3, [pc, #472]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e70:	4972      	ldr	r1, [pc, #456]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00a      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e84:	4b6d      	ldr	r3, [pc, #436]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e92:	496a      	ldr	r1, [pc, #424]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ea6:	4b65      	ldr	r3, [pc, #404]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb4:	4961      	ldr	r1, [pc, #388]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ec8:	4b5c      	ldr	r3, [pc, #368]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ece:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed6:	4959      	ldr	r1, [pc, #356]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eea:	4b54      	ldr	r3, [pc, #336]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef8:	4950      	ldr	r1, [pc, #320]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f0c:	4b4b      	ldr	r3, [pc, #300]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f12:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1a:	4948      	ldr	r1, [pc, #288]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f2e:	4b43      	ldr	r3, [pc, #268]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3c:	493f      	ldr	r1, [pc, #252]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d028      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f50:	4b3a      	ldr	r3, [pc, #232]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f5e:	4937      	ldr	r1, [pc, #220]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f6e:	d106      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f70:	4b32      	ldr	r3, [pc, #200]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	4a31      	ldr	r2, [pc, #196]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f7a:	60d3      	str	r3, [r2, #12]
 8003f7c:	e011      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f86:	d10c      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 f8c8 	bl	8004124 <RCCEx_PLLSAI1_Config>
 8003f94:	4603      	mov	r3, r0
 8003f96:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f98:	7cfb      	ldrb	r3, [r7, #19]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f9e:	7cfb      	ldrb	r3, [r7, #19]
 8003fa0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d028      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fae:	4b23      	ldr	r3, [pc, #140]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbc:	491f      	ldr	r1, [pc, #124]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fcc:	d106      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fce:	4b1b      	ldr	r3, [pc, #108]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	4a1a      	ldr	r2, [pc, #104]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fd8:	60d3      	str	r3, [r2, #12]
 8003fda:	e011      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	2101      	movs	r1, #1
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 f899 	bl	8004124 <RCCEx_PLLSAI1_Config>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ff6:	7cfb      	ldrb	r3, [r7, #19]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003ffc:	7cfb      	ldrb	r3, [r7, #19]
 8003ffe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d02b      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800400c:	4b0b      	ldr	r3, [pc, #44]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004012:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800401a:	4908      	ldr	r1, [pc, #32]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004026:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800402a:	d109      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800402c:	4b03      	ldr	r3, [pc, #12]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	4a02      	ldr	r2, [pc, #8]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004036:	60d3      	str	r3, [r2, #12]
 8004038:	e014      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800403a:	bf00      	nop
 800403c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004044:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004048:	d10c      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3304      	adds	r3, #4
 800404e:	2101      	movs	r1, #1
 8004050:	4618      	mov	r0, r3
 8004052:	f000 f867 	bl	8004124 <RCCEx_PLLSAI1_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800405a:	7cfb      	ldrb	r3, [r7, #19]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004060:	7cfb      	ldrb	r3, [r7, #19]
 8004062:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d02f      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004070:	4b2b      	ldr	r3, [pc, #172]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004076:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800407e:	4928      	ldr	r1, [pc, #160]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800408a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800408e:	d10d      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3304      	adds	r3, #4
 8004094:	2102      	movs	r1, #2
 8004096:	4618      	mov	r0, r3
 8004098:	f000 f844 	bl	8004124 <RCCEx_PLLSAI1_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040a0:	7cfb      	ldrb	r3, [r7, #19]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d014      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040a6:	7cfb      	ldrb	r3, [r7, #19]
 80040a8:	74bb      	strb	r3, [r7, #18]
 80040aa:	e011      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040b4:	d10c      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3320      	adds	r3, #32
 80040ba:	2102      	movs	r1, #2
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 f925 	bl	800430c <RCCEx_PLLSAI2_Config>
 80040c2:	4603      	mov	r3, r0
 80040c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040c6:	7cfb      	ldrb	r3, [r7, #19]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040cc:	7cfb      	ldrb	r3, [r7, #19]
 80040ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040dc:	4b10      	ldr	r3, [pc, #64]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040ea:	490d      	ldr	r1, [pc, #52]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00b      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040fe:	4b08      	ldr	r3, [pc, #32]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004104:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800410e:	4904      	ldr	r1, [pc, #16]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004110:	4313      	orrs	r3, r2
 8004112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004116:	7cbb      	ldrb	r3, [r7, #18]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40021000 	.word	0x40021000

08004124 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004132:	4b75      	ldr	r3, [pc, #468]	; (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d018      	beq.n	8004170 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800413e:	4b72      	ldr	r3, [pc, #456]	; (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f003 0203 	and.w	r2, r3, #3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d10d      	bne.n	800416a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
       ||
 8004152:	2b00      	cmp	r3, #0
 8004154:	d009      	beq.n	800416a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004156:	4b6c      	ldr	r3, [pc, #432]	; (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	091b      	lsrs	r3, r3, #4
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
       ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d047      	beq.n	80041fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	73fb      	strb	r3, [r7, #15]
 800416e:	e044      	b.n	80041fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b03      	cmp	r3, #3
 8004176:	d018      	beq.n	80041aa <RCCEx_PLLSAI1_Config+0x86>
 8004178:	2b03      	cmp	r3, #3
 800417a:	d825      	bhi.n	80041c8 <RCCEx_PLLSAI1_Config+0xa4>
 800417c:	2b01      	cmp	r3, #1
 800417e:	d002      	beq.n	8004186 <RCCEx_PLLSAI1_Config+0x62>
 8004180:	2b02      	cmp	r3, #2
 8004182:	d009      	beq.n	8004198 <RCCEx_PLLSAI1_Config+0x74>
 8004184:	e020      	b.n	80041c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004186:	4b60      	ldr	r3, [pc, #384]	; (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d11d      	bne.n	80041ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004196:	e01a      	b.n	80041ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004198:	4b5b      	ldr	r3, [pc, #364]	; (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d116      	bne.n	80041d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a8:	e013      	b.n	80041d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041aa:	4b57      	ldr	r3, [pc, #348]	; (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10f      	bne.n	80041d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041b6:	4b54      	ldr	r3, [pc, #336]	; (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d109      	bne.n	80041d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041c6:	e006      	b.n	80041d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	73fb      	strb	r3, [r7, #15]
      break;
 80041cc:	e004      	b.n	80041d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041ce:	bf00      	nop
 80041d0:	e002      	b.n	80041d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041d2:	bf00      	nop
 80041d4:	e000      	b.n	80041d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10d      	bne.n	80041fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041de:	4b4a      	ldr	r3, [pc, #296]	; (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6819      	ldr	r1, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	430b      	orrs	r3, r1
 80041f4:	4944      	ldr	r1, [pc, #272]	; (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d17d      	bne.n	80042fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004200:	4b41      	ldr	r3, [pc, #260]	; (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a40      	ldr	r2, [pc, #256]	; (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004206:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800420a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800420c:	f7fd fb72 	bl	80018f4 <HAL_GetTick>
 8004210:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004212:	e009      	b.n	8004228 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004214:	f7fd fb6e 	bl	80018f4 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d902      	bls.n	8004228 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	73fb      	strb	r3, [r7, #15]
        break;
 8004226:	e005      	b.n	8004234 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004228:	4b37      	ldr	r3, [pc, #220]	; (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1ef      	bne.n	8004214 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d160      	bne.n	80042fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d111      	bne.n	8004264 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004240:	4b31      	ldr	r3, [pc, #196]	; (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6892      	ldr	r2, [r2, #8]
 8004250:	0211      	lsls	r1, r2, #8
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	68d2      	ldr	r2, [r2, #12]
 8004256:	0912      	lsrs	r2, r2, #4
 8004258:	0452      	lsls	r2, r2, #17
 800425a:	430a      	orrs	r2, r1
 800425c:	492a      	ldr	r1, [pc, #168]	; (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 800425e:	4313      	orrs	r3, r2
 8004260:	610b      	str	r3, [r1, #16]
 8004262:	e027      	b.n	80042b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d112      	bne.n	8004290 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800426a:	4b27      	ldr	r3, [pc, #156]	; (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004272:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6892      	ldr	r2, [r2, #8]
 800427a:	0211      	lsls	r1, r2, #8
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6912      	ldr	r2, [r2, #16]
 8004280:	0852      	lsrs	r2, r2, #1
 8004282:	3a01      	subs	r2, #1
 8004284:	0552      	lsls	r2, r2, #21
 8004286:	430a      	orrs	r2, r1
 8004288:	491f      	ldr	r1, [pc, #124]	; (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 800428a:	4313      	orrs	r3, r2
 800428c:	610b      	str	r3, [r1, #16]
 800428e:	e011      	b.n	80042b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004290:	4b1d      	ldr	r3, [pc, #116]	; (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004298:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6892      	ldr	r2, [r2, #8]
 80042a0:	0211      	lsls	r1, r2, #8
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6952      	ldr	r2, [r2, #20]
 80042a6:	0852      	lsrs	r2, r2, #1
 80042a8:	3a01      	subs	r2, #1
 80042aa:	0652      	lsls	r2, r2, #25
 80042ac:	430a      	orrs	r2, r1
 80042ae:	4916      	ldr	r1, [pc, #88]	; (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042b4:	4b14      	ldr	r3, [pc, #80]	; (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a13      	ldr	r2, [pc, #76]	; (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c0:	f7fd fb18 	bl	80018f4 <HAL_GetTick>
 80042c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042c6:	e009      	b.n	80042dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042c8:	f7fd fb14 	bl	80018f4 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d902      	bls.n	80042dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	73fb      	strb	r3, [r7, #15]
          break;
 80042da:	e005      	b.n	80042e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042dc:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0ef      	beq.n	80042c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d106      	bne.n	80042fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042ee:	4b06      	ldr	r3, [pc, #24]	; (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f0:	691a      	ldr	r2, [r3, #16]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	4904      	ldr	r1, [pc, #16]	; (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40021000 	.word	0x40021000

0800430c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800431a:	4b6a      	ldr	r3, [pc, #424]	; (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d018      	beq.n	8004358 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004326:	4b67      	ldr	r3, [pc, #412]	; (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f003 0203 	and.w	r2, r3, #3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d10d      	bne.n	8004352 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
       ||
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800433e:	4b61      	ldr	r3, [pc, #388]	; (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	091b      	lsrs	r3, r3, #4
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
       ||
 800434e:	429a      	cmp	r2, r3
 8004350:	d047      	beq.n	80043e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	73fb      	strb	r3, [r7, #15]
 8004356:	e044      	b.n	80043e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b03      	cmp	r3, #3
 800435e:	d018      	beq.n	8004392 <RCCEx_PLLSAI2_Config+0x86>
 8004360:	2b03      	cmp	r3, #3
 8004362:	d825      	bhi.n	80043b0 <RCCEx_PLLSAI2_Config+0xa4>
 8004364:	2b01      	cmp	r3, #1
 8004366:	d002      	beq.n	800436e <RCCEx_PLLSAI2_Config+0x62>
 8004368:	2b02      	cmp	r3, #2
 800436a:	d009      	beq.n	8004380 <RCCEx_PLLSAI2_Config+0x74>
 800436c:	e020      	b.n	80043b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800436e:	4b55      	ldr	r3, [pc, #340]	; (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d11d      	bne.n	80043b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800437e:	e01a      	b.n	80043b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004380:	4b50      	ldr	r3, [pc, #320]	; (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004388:	2b00      	cmp	r3, #0
 800438a:	d116      	bne.n	80043ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004390:	e013      	b.n	80043ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004392:	4b4c      	ldr	r3, [pc, #304]	; (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10f      	bne.n	80043be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800439e:	4b49      	ldr	r3, [pc, #292]	; (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d109      	bne.n	80043be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043ae:	e006      	b.n	80043be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	73fb      	strb	r3, [r7, #15]
      break;
 80043b4:	e004      	b.n	80043c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043b6:	bf00      	nop
 80043b8:	e002      	b.n	80043c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043ba:	bf00      	nop
 80043bc:	e000      	b.n	80043c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043be:	bf00      	nop
    }

    if(status == HAL_OK)
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10d      	bne.n	80043e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043c6:	4b3f      	ldr	r3, [pc, #252]	; (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6819      	ldr	r1, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	430b      	orrs	r3, r1
 80043dc:	4939      	ldr	r1, [pc, #228]	; (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d167      	bne.n	80044b8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043e8:	4b36      	ldr	r3, [pc, #216]	; (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a35      	ldr	r2, [pc, #212]	; (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043f4:	f7fd fa7e 	bl	80018f4 <HAL_GetTick>
 80043f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043fa:	e009      	b.n	8004410 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043fc:	f7fd fa7a 	bl	80018f4 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d902      	bls.n	8004410 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	73fb      	strb	r3, [r7, #15]
        break;
 800440e:	e005      	b.n	800441c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004410:	4b2c      	ldr	r3, [pc, #176]	; (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1ef      	bne.n	80043fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d14a      	bne.n	80044b8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d111      	bne.n	800444c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004428:	4b26      	ldr	r3, [pc, #152]	; (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6892      	ldr	r2, [r2, #8]
 8004438:	0211      	lsls	r1, r2, #8
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	68d2      	ldr	r2, [r2, #12]
 800443e:	0912      	lsrs	r2, r2, #4
 8004440:	0452      	lsls	r2, r2, #17
 8004442:	430a      	orrs	r2, r1
 8004444:	491f      	ldr	r1, [pc, #124]	; (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004446:	4313      	orrs	r3, r2
 8004448:	614b      	str	r3, [r1, #20]
 800444a:	e011      	b.n	8004470 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800444c:	4b1d      	ldr	r3, [pc, #116]	; (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004454:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6892      	ldr	r2, [r2, #8]
 800445c:	0211      	lsls	r1, r2, #8
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6912      	ldr	r2, [r2, #16]
 8004462:	0852      	lsrs	r2, r2, #1
 8004464:	3a01      	subs	r2, #1
 8004466:	0652      	lsls	r2, r2, #25
 8004468:	430a      	orrs	r2, r1
 800446a:	4916      	ldr	r1, [pc, #88]	; (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800446c:	4313      	orrs	r3, r2
 800446e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004470:	4b14      	ldr	r3, [pc, #80]	; (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a13      	ldr	r2, [pc, #76]	; (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800447a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447c:	f7fd fa3a 	bl	80018f4 <HAL_GetTick>
 8004480:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004482:	e009      	b.n	8004498 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004484:	f7fd fa36 	bl	80018f4 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d902      	bls.n	8004498 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	73fb      	strb	r3, [r7, #15]
          break;
 8004496:	e005      	b.n	80044a4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004498:	4b0a      	ldr	r3, [pc, #40]	; (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0ef      	beq.n	8004484 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044aa:	4b06      	ldr	r3, [pc, #24]	; (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ac:	695a      	ldr	r2, [r3, #20]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	4904      	ldr	r1, [pc, #16]	; (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40021000 	.word	0x40021000

080044c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e049      	b.n	800456e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d106      	bne.n	80044f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fd f84e 	bl	8001590 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3304      	adds	r3, #4
 8004504:	4619      	mov	r1, r3
 8004506:	4610      	mov	r0, r2
 8004508:	f000 f9ee 	bl	80048e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b01      	cmp	r3, #1
 800458a:	d001      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e04f      	b.n	8004630 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a23      	ldr	r2, [pc, #140]	; (800463c <HAL_TIM_Base_Start_IT+0xc4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d01d      	beq.n	80045ee <HAL_TIM_Base_Start_IT+0x76>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ba:	d018      	beq.n	80045ee <HAL_TIM_Base_Start_IT+0x76>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a1f      	ldr	r2, [pc, #124]	; (8004640 <HAL_TIM_Base_Start_IT+0xc8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d013      	beq.n	80045ee <HAL_TIM_Base_Start_IT+0x76>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a1e      	ldr	r2, [pc, #120]	; (8004644 <HAL_TIM_Base_Start_IT+0xcc>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d00e      	beq.n	80045ee <HAL_TIM_Base_Start_IT+0x76>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a1c      	ldr	r2, [pc, #112]	; (8004648 <HAL_TIM_Base_Start_IT+0xd0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d009      	beq.n	80045ee <HAL_TIM_Base_Start_IT+0x76>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a1b      	ldr	r2, [pc, #108]	; (800464c <HAL_TIM_Base_Start_IT+0xd4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d004      	beq.n	80045ee <HAL_TIM_Base_Start_IT+0x76>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a19      	ldr	r2, [pc, #100]	; (8004650 <HAL_TIM_Base_Start_IT+0xd8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d115      	bne.n	800461a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	4b17      	ldr	r3, [pc, #92]	; (8004654 <HAL_TIM_Base_Start_IT+0xdc>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2b06      	cmp	r3, #6
 80045fe:	d015      	beq.n	800462c <HAL_TIM_Base_Start_IT+0xb4>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004606:	d011      	beq.n	800462c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0201 	orr.w	r2, r2, #1
 8004616:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004618:	e008      	b.n	800462c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f042 0201 	orr.w	r2, r2, #1
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	e000      	b.n	800462e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	40012c00 	.word	0x40012c00
 8004640:	40000400 	.word	0x40000400
 8004644:	40000800 	.word	0x40000800
 8004648:	40000c00 	.word	0x40000c00
 800464c:	40013400 	.word	0x40013400
 8004650:	40014000 	.word	0x40014000
 8004654:	00010007 	.word	0x00010007

08004658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b02      	cmp	r3, #2
 800466c:	d122      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b02      	cmp	r3, #2
 800467a:	d11b      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f06f 0202 	mvn.w	r2, #2
 8004684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f905 	bl	80048aa <HAL_TIM_IC_CaptureCallback>
 80046a0:	e005      	b.n	80046ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f8f7 	bl	8004896 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f908 	bl	80048be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	f003 0304 	and.w	r3, r3, #4
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d122      	bne.n	8004708 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b04      	cmp	r3, #4
 80046ce:	d11b      	bne.n	8004708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f06f 0204 	mvn.w	r2, #4
 80046d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2202      	movs	r2, #2
 80046de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f8db 	bl	80048aa <HAL_TIM_IC_CaptureCallback>
 80046f4:	e005      	b.n	8004702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f8cd 	bl	8004896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f8de 	bl	80048be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	2b08      	cmp	r3, #8
 8004714:	d122      	bne.n	800475c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f003 0308 	and.w	r3, r3, #8
 8004720:	2b08      	cmp	r3, #8
 8004722:	d11b      	bne.n	800475c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f06f 0208 	mvn.w	r2, #8
 800472c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2204      	movs	r2, #4
 8004732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	f003 0303 	and.w	r3, r3, #3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f8b1 	bl	80048aa <HAL_TIM_IC_CaptureCallback>
 8004748:	e005      	b.n	8004756 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f8a3 	bl	8004896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f8b4 	bl	80048be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	f003 0310 	and.w	r3, r3, #16
 8004766:	2b10      	cmp	r3, #16
 8004768:	d122      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	2b10      	cmp	r3, #16
 8004776:	d11b      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f06f 0210 	mvn.w	r2, #16
 8004780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2208      	movs	r2, #8
 8004786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f887 	bl	80048aa <HAL_TIM_IC_CaptureCallback>
 800479c:	e005      	b.n	80047aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f879 	bl	8004896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f88a 	bl	80048be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d10e      	bne.n	80047dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d107      	bne.n	80047dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f06f 0201 	mvn.w	r2, #1
 80047d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7fc fe5a 	bl	8001490 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e6:	2b80      	cmp	r3, #128	; 0x80
 80047e8:	d10e      	bne.n	8004808 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f4:	2b80      	cmp	r3, #128	; 0x80
 80047f6:	d107      	bne.n	8004808 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f914 	bl	8004a30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004816:	d10e      	bne.n	8004836 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004822:	2b80      	cmp	r3, #128	; 0x80
 8004824:	d107      	bne.n	8004836 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800482e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f907 	bl	8004a44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004840:	2b40      	cmp	r3, #64	; 0x40
 8004842:	d10e      	bne.n	8004862 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484e:	2b40      	cmp	r3, #64	; 0x40
 8004850:	d107      	bne.n	8004862 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800485a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f838 	bl	80048d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	f003 0320 	and.w	r3, r3, #32
 800486c:	2b20      	cmp	r3, #32
 800486e:	d10e      	bne.n	800488e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f003 0320 	and.w	r3, r3, #32
 800487a:	2b20      	cmp	r3, #32
 800487c:	d107      	bne.n	800488e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f06f 0220 	mvn.w	r2, #32
 8004886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f8c7 	bl	8004a1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800488e:	bf00      	nop
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
	...

080048e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a40      	ldr	r2, [pc, #256]	; (80049fc <TIM_Base_SetConfig+0x114>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d013      	beq.n	8004928 <TIM_Base_SetConfig+0x40>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004906:	d00f      	beq.n	8004928 <TIM_Base_SetConfig+0x40>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a3d      	ldr	r2, [pc, #244]	; (8004a00 <TIM_Base_SetConfig+0x118>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00b      	beq.n	8004928 <TIM_Base_SetConfig+0x40>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a3c      	ldr	r2, [pc, #240]	; (8004a04 <TIM_Base_SetConfig+0x11c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d007      	beq.n	8004928 <TIM_Base_SetConfig+0x40>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a3b      	ldr	r2, [pc, #236]	; (8004a08 <TIM_Base_SetConfig+0x120>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d003      	beq.n	8004928 <TIM_Base_SetConfig+0x40>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a3a      	ldr	r2, [pc, #232]	; (8004a0c <TIM_Base_SetConfig+0x124>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d108      	bne.n	800493a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a2f      	ldr	r2, [pc, #188]	; (80049fc <TIM_Base_SetConfig+0x114>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d01f      	beq.n	8004982 <TIM_Base_SetConfig+0x9a>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004948:	d01b      	beq.n	8004982 <TIM_Base_SetConfig+0x9a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a2c      	ldr	r2, [pc, #176]	; (8004a00 <TIM_Base_SetConfig+0x118>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d017      	beq.n	8004982 <TIM_Base_SetConfig+0x9a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a2b      	ldr	r2, [pc, #172]	; (8004a04 <TIM_Base_SetConfig+0x11c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d013      	beq.n	8004982 <TIM_Base_SetConfig+0x9a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a2a      	ldr	r2, [pc, #168]	; (8004a08 <TIM_Base_SetConfig+0x120>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d00f      	beq.n	8004982 <TIM_Base_SetConfig+0x9a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a29      	ldr	r2, [pc, #164]	; (8004a0c <TIM_Base_SetConfig+0x124>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d00b      	beq.n	8004982 <TIM_Base_SetConfig+0x9a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a28      	ldr	r2, [pc, #160]	; (8004a10 <TIM_Base_SetConfig+0x128>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d007      	beq.n	8004982 <TIM_Base_SetConfig+0x9a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a27      	ldr	r2, [pc, #156]	; (8004a14 <TIM_Base_SetConfig+0x12c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d003      	beq.n	8004982 <TIM_Base_SetConfig+0x9a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a26      	ldr	r2, [pc, #152]	; (8004a18 <TIM_Base_SetConfig+0x130>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d108      	bne.n	8004994 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	4313      	orrs	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a10      	ldr	r2, [pc, #64]	; (80049fc <TIM_Base_SetConfig+0x114>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00f      	beq.n	80049e0 <TIM_Base_SetConfig+0xf8>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a12      	ldr	r2, [pc, #72]	; (8004a0c <TIM_Base_SetConfig+0x124>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d00b      	beq.n	80049e0 <TIM_Base_SetConfig+0xf8>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a11      	ldr	r2, [pc, #68]	; (8004a10 <TIM_Base_SetConfig+0x128>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d007      	beq.n	80049e0 <TIM_Base_SetConfig+0xf8>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a10      	ldr	r2, [pc, #64]	; (8004a14 <TIM_Base_SetConfig+0x12c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d003      	beq.n	80049e0 <TIM_Base_SetConfig+0xf8>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a0f      	ldr	r2, [pc, #60]	; (8004a18 <TIM_Base_SetConfig+0x130>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d103      	bne.n	80049e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	691a      	ldr	r2, [r3, #16]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	615a      	str	r2, [r3, #20]
}
 80049ee:	bf00      	nop
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	40012c00 	.word	0x40012c00
 8004a00:	40000400 	.word	0x40000400
 8004a04:	40000800 	.word	0x40000800
 8004a08:	40000c00 	.word	0x40000c00
 8004a0c:	40013400 	.word	0x40013400
 8004a10:	40014000 	.word	0x40014000
 8004a14:	40014400 	.word	0x40014400
 8004a18:	40014800 	.word	0x40014800

08004a1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e040      	b.n	8004aec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d106      	bne.n	8004a80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7fc fdae 	bl	80015dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2224      	movs	r2, #36	; 0x24
 8004a84:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0201 	bic.w	r2, r2, #1
 8004a94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f82c 	bl	8004af4 <UART_SetConfig>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e022      	b.n	8004aec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 faaa 	bl	8005008 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ac2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ad2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0201 	orr.w	r2, r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fb31 	bl	800514c <UART_CheckIdleState>
 8004aea:	4603      	mov	r3, r0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004af4:	b5b0      	push	{r4, r5, r7, lr}
 8004af6:	b088      	sub	sp, #32
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	4bad      	ldr	r3, [pc, #692]	; (8004dd4 <UART_SetConfig+0x2e0>)
 8004b20:	4013      	ands	r3, r2
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6812      	ldr	r2, [r2, #0]
 8004b26:	69f9      	ldr	r1, [r7, #28]
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4aa2      	ldr	r2, [pc, #648]	; (8004dd8 <UART_SetConfig+0x2e4>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d004      	beq.n	8004b5c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	69fa      	ldr	r2, [r7, #28]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69fa      	ldr	r2, [r7, #28]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a99      	ldr	r2, [pc, #612]	; (8004ddc <UART_SetConfig+0x2e8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d121      	bne.n	8004bbe <UART_SetConfig+0xca>
 8004b7a:	4b99      	ldr	r3, [pc, #612]	; (8004de0 <UART_SetConfig+0x2ec>)
 8004b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b80:	f003 0303 	and.w	r3, r3, #3
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	d817      	bhi.n	8004bb8 <UART_SetConfig+0xc4>
 8004b88:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <UART_SetConfig+0x9c>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004ba1 	.word	0x08004ba1
 8004b94:	08004bad 	.word	0x08004bad
 8004b98:	08004ba7 	.word	0x08004ba7
 8004b9c:	08004bb3 	.word	0x08004bb3
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	76fb      	strb	r3, [r7, #27]
 8004ba4:	e0e7      	b.n	8004d76 <UART_SetConfig+0x282>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	76fb      	strb	r3, [r7, #27]
 8004baa:	e0e4      	b.n	8004d76 <UART_SetConfig+0x282>
 8004bac:	2304      	movs	r3, #4
 8004bae:	76fb      	strb	r3, [r7, #27]
 8004bb0:	e0e1      	b.n	8004d76 <UART_SetConfig+0x282>
 8004bb2:	2308      	movs	r3, #8
 8004bb4:	76fb      	strb	r3, [r7, #27]
 8004bb6:	e0de      	b.n	8004d76 <UART_SetConfig+0x282>
 8004bb8:	2310      	movs	r3, #16
 8004bba:	76fb      	strb	r3, [r7, #27]
 8004bbc:	e0db      	b.n	8004d76 <UART_SetConfig+0x282>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a88      	ldr	r2, [pc, #544]	; (8004de4 <UART_SetConfig+0x2f0>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d132      	bne.n	8004c2e <UART_SetConfig+0x13a>
 8004bc8:	4b85      	ldr	r3, [pc, #532]	; (8004de0 <UART_SetConfig+0x2ec>)
 8004bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bce:	f003 030c 	and.w	r3, r3, #12
 8004bd2:	2b0c      	cmp	r3, #12
 8004bd4:	d828      	bhi.n	8004c28 <UART_SetConfig+0x134>
 8004bd6:	a201      	add	r2, pc, #4	; (adr r2, 8004bdc <UART_SetConfig+0xe8>)
 8004bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bdc:	08004c11 	.word	0x08004c11
 8004be0:	08004c29 	.word	0x08004c29
 8004be4:	08004c29 	.word	0x08004c29
 8004be8:	08004c29 	.word	0x08004c29
 8004bec:	08004c1d 	.word	0x08004c1d
 8004bf0:	08004c29 	.word	0x08004c29
 8004bf4:	08004c29 	.word	0x08004c29
 8004bf8:	08004c29 	.word	0x08004c29
 8004bfc:	08004c17 	.word	0x08004c17
 8004c00:	08004c29 	.word	0x08004c29
 8004c04:	08004c29 	.word	0x08004c29
 8004c08:	08004c29 	.word	0x08004c29
 8004c0c:	08004c23 	.word	0x08004c23
 8004c10:	2300      	movs	r3, #0
 8004c12:	76fb      	strb	r3, [r7, #27]
 8004c14:	e0af      	b.n	8004d76 <UART_SetConfig+0x282>
 8004c16:	2302      	movs	r3, #2
 8004c18:	76fb      	strb	r3, [r7, #27]
 8004c1a:	e0ac      	b.n	8004d76 <UART_SetConfig+0x282>
 8004c1c:	2304      	movs	r3, #4
 8004c1e:	76fb      	strb	r3, [r7, #27]
 8004c20:	e0a9      	b.n	8004d76 <UART_SetConfig+0x282>
 8004c22:	2308      	movs	r3, #8
 8004c24:	76fb      	strb	r3, [r7, #27]
 8004c26:	e0a6      	b.n	8004d76 <UART_SetConfig+0x282>
 8004c28:	2310      	movs	r3, #16
 8004c2a:	76fb      	strb	r3, [r7, #27]
 8004c2c:	e0a3      	b.n	8004d76 <UART_SetConfig+0x282>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a6d      	ldr	r2, [pc, #436]	; (8004de8 <UART_SetConfig+0x2f4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d120      	bne.n	8004c7a <UART_SetConfig+0x186>
 8004c38:	4b69      	ldr	r3, [pc, #420]	; (8004de0 <UART_SetConfig+0x2ec>)
 8004c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c42:	2b30      	cmp	r3, #48	; 0x30
 8004c44:	d013      	beq.n	8004c6e <UART_SetConfig+0x17a>
 8004c46:	2b30      	cmp	r3, #48	; 0x30
 8004c48:	d814      	bhi.n	8004c74 <UART_SetConfig+0x180>
 8004c4a:	2b20      	cmp	r3, #32
 8004c4c:	d009      	beq.n	8004c62 <UART_SetConfig+0x16e>
 8004c4e:	2b20      	cmp	r3, #32
 8004c50:	d810      	bhi.n	8004c74 <UART_SetConfig+0x180>
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <UART_SetConfig+0x168>
 8004c56:	2b10      	cmp	r3, #16
 8004c58:	d006      	beq.n	8004c68 <UART_SetConfig+0x174>
 8004c5a:	e00b      	b.n	8004c74 <UART_SetConfig+0x180>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	76fb      	strb	r3, [r7, #27]
 8004c60:	e089      	b.n	8004d76 <UART_SetConfig+0x282>
 8004c62:	2302      	movs	r3, #2
 8004c64:	76fb      	strb	r3, [r7, #27]
 8004c66:	e086      	b.n	8004d76 <UART_SetConfig+0x282>
 8004c68:	2304      	movs	r3, #4
 8004c6a:	76fb      	strb	r3, [r7, #27]
 8004c6c:	e083      	b.n	8004d76 <UART_SetConfig+0x282>
 8004c6e:	2308      	movs	r3, #8
 8004c70:	76fb      	strb	r3, [r7, #27]
 8004c72:	e080      	b.n	8004d76 <UART_SetConfig+0x282>
 8004c74:	2310      	movs	r3, #16
 8004c76:	76fb      	strb	r3, [r7, #27]
 8004c78:	e07d      	b.n	8004d76 <UART_SetConfig+0x282>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a5b      	ldr	r2, [pc, #364]	; (8004dec <UART_SetConfig+0x2f8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d120      	bne.n	8004cc6 <UART_SetConfig+0x1d2>
 8004c84:	4b56      	ldr	r3, [pc, #344]	; (8004de0 <UART_SetConfig+0x2ec>)
 8004c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c8e:	2bc0      	cmp	r3, #192	; 0xc0
 8004c90:	d013      	beq.n	8004cba <UART_SetConfig+0x1c6>
 8004c92:	2bc0      	cmp	r3, #192	; 0xc0
 8004c94:	d814      	bhi.n	8004cc0 <UART_SetConfig+0x1cc>
 8004c96:	2b80      	cmp	r3, #128	; 0x80
 8004c98:	d009      	beq.n	8004cae <UART_SetConfig+0x1ba>
 8004c9a:	2b80      	cmp	r3, #128	; 0x80
 8004c9c:	d810      	bhi.n	8004cc0 <UART_SetConfig+0x1cc>
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <UART_SetConfig+0x1b4>
 8004ca2:	2b40      	cmp	r3, #64	; 0x40
 8004ca4:	d006      	beq.n	8004cb4 <UART_SetConfig+0x1c0>
 8004ca6:	e00b      	b.n	8004cc0 <UART_SetConfig+0x1cc>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	76fb      	strb	r3, [r7, #27]
 8004cac:	e063      	b.n	8004d76 <UART_SetConfig+0x282>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	76fb      	strb	r3, [r7, #27]
 8004cb2:	e060      	b.n	8004d76 <UART_SetConfig+0x282>
 8004cb4:	2304      	movs	r3, #4
 8004cb6:	76fb      	strb	r3, [r7, #27]
 8004cb8:	e05d      	b.n	8004d76 <UART_SetConfig+0x282>
 8004cba:	2308      	movs	r3, #8
 8004cbc:	76fb      	strb	r3, [r7, #27]
 8004cbe:	e05a      	b.n	8004d76 <UART_SetConfig+0x282>
 8004cc0:	2310      	movs	r3, #16
 8004cc2:	76fb      	strb	r3, [r7, #27]
 8004cc4:	e057      	b.n	8004d76 <UART_SetConfig+0x282>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a49      	ldr	r2, [pc, #292]	; (8004df0 <UART_SetConfig+0x2fc>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d125      	bne.n	8004d1c <UART_SetConfig+0x228>
 8004cd0:	4b43      	ldr	r3, [pc, #268]	; (8004de0 <UART_SetConfig+0x2ec>)
 8004cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cde:	d017      	beq.n	8004d10 <UART_SetConfig+0x21c>
 8004ce0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ce4:	d817      	bhi.n	8004d16 <UART_SetConfig+0x222>
 8004ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cea:	d00b      	beq.n	8004d04 <UART_SetConfig+0x210>
 8004cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf0:	d811      	bhi.n	8004d16 <UART_SetConfig+0x222>
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <UART_SetConfig+0x20a>
 8004cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cfa:	d006      	beq.n	8004d0a <UART_SetConfig+0x216>
 8004cfc:	e00b      	b.n	8004d16 <UART_SetConfig+0x222>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	76fb      	strb	r3, [r7, #27]
 8004d02:	e038      	b.n	8004d76 <UART_SetConfig+0x282>
 8004d04:	2302      	movs	r3, #2
 8004d06:	76fb      	strb	r3, [r7, #27]
 8004d08:	e035      	b.n	8004d76 <UART_SetConfig+0x282>
 8004d0a:	2304      	movs	r3, #4
 8004d0c:	76fb      	strb	r3, [r7, #27]
 8004d0e:	e032      	b.n	8004d76 <UART_SetConfig+0x282>
 8004d10:	2308      	movs	r3, #8
 8004d12:	76fb      	strb	r3, [r7, #27]
 8004d14:	e02f      	b.n	8004d76 <UART_SetConfig+0x282>
 8004d16:	2310      	movs	r3, #16
 8004d18:	76fb      	strb	r3, [r7, #27]
 8004d1a:	e02c      	b.n	8004d76 <UART_SetConfig+0x282>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a2d      	ldr	r2, [pc, #180]	; (8004dd8 <UART_SetConfig+0x2e4>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d125      	bne.n	8004d72 <UART_SetConfig+0x27e>
 8004d26:	4b2e      	ldr	r3, [pc, #184]	; (8004de0 <UART_SetConfig+0x2ec>)
 8004d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d34:	d017      	beq.n	8004d66 <UART_SetConfig+0x272>
 8004d36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d3a:	d817      	bhi.n	8004d6c <UART_SetConfig+0x278>
 8004d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d40:	d00b      	beq.n	8004d5a <UART_SetConfig+0x266>
 8004d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d46:	d811      	bhi.n	8004d6c <UART_SetConfig+0x278>
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <UART_SetConfig+0x260>
 8004d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d50:	d006      	beq.n	8004d60 <UART_SetConfig+0x26c>
 8004d52:	e00b      	b.n	8004d6c <UART_SetConfig+0x278>
 8004d54:	2300      	movs	r3, #0
 8004d56:	76fb      	strb	r3, [r7, #27]
 8004d58:	e00d      	b.n	8004d76 <UART_SetConfig+0x282>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	76fb      	strb	r3, [r7, #27]
 8004d5e:	e00a      	b.n	8004d76 <UART_SetConfig+0x282>
 8004d60:	2304      	movs	r3, #4
 8004d62:	76fb      	strb	r3, [r7, #27]
 8004d64:	e007      	b.n	8004d76 <UART_SetConfig+0x282>
 8004d66:	2308      	movs	r3, #8
 8004d68:	76fb      	strb	r3, [r7, #27]
 8004d6a:	e004      	b.n	8004d76 <UART_SetConfig+0x282>
 8004d6c:	2310      	movs	r3, #16
 8004d6e:	76fb      	strb	r3, [r7, #27]
 8004d70:	e001      	b.n	8004d76 <UART_SetConfig+0x282>
 8004d72:	2310      	movs	r3, #16
 8004d74:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a17      	ldr	r2, [pc, #92]	; (8004dd8 <UART_SetConfig+0x2e4>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	f040 8087 	bne.w	8004e90 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d82:	7efb      	ldrb	r3, [r7, #27]
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d837      	bhi.n	8004df8 <UART_SetConfig+0x304>
 8004d88:	a201      	add	r2, pc, #4	; (adr r2, 8004d90 <UART_SetConfig+0x29c>)
 8004d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8e:	bf00      	nop
 8004d90:	08004db5 	.word	0x08004db5
 8004d94:	08004df9 	.word	0x08004df9
 8004d98:	08004dbd 	.word	0x08004dbd
 8004d9c:	08004df9 	.word	0x08004df9
 8004da0:	08004dc3 	.word	0x08004dc3
 8004da4:	08004df9 	.word	0x08004df9
 8004da8:	08004df9 	.word	0x08004df9
 8004dac:	08004df9 	.word	0x08004df9
 8004db0:	08004dcb 	.word	0x08004dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004db4:	f7fe fe40 	bl	8003a38 <HAL_RCC_GetPCLK1Freq>
 8004db8:	6178      	str	r0, [r7, #20]
        break;
 8004dba:	e022      	b.n	8004e02 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dbc:	4b0d      	ldr	r3, [pc, #52]	; (8004df4 <UART_SetConfig+0x300>)
 8004dbe:	617b      	str	r3, [r7, #20]
        break;
 8004dc0:	e01f      	b.n	8004e02 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dc2:	f7fe fda1 	bl	8003908 <HAL_RCC_GetSysClockFreq>
 8004dc6:	6178      	str	r0, [r7, #20]
        break;
 8004dc8:	e01b      	b.n	8004e02 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dce:	617b      	str	r3, [r7, #20]
        break;
 8004dd0:	e017      	b.n	8004e02 <UART_SetConfig+0x30e>
 8004dd2:	bf00      	nop
 8004dd4:	efff69f3 	.word	0xefff69f3
 8004dd8:	40008000 	.word	0x40008000
 8004ddc:	40013800 	.word	0x40013800
 8004de0:	40021000 	.word	0x40021000
 8004de4:	40004400 	.word	0x40004400
 8004de8:	40004800 	.word	0x40004800
 8004dec:	40004c00 	.word	0x40004c00
 8004df0:	40005000 	.word	0x40005000
 8004df4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	76bb      	strb	r3, [r7, #26]
        break;
 8004e00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 80f1 	beq.w	8004fec <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	4413      	add	r3, r2
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d305      	bcc.n	8004e26 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d902      	bls.n	8004e2c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	76bb      	strb	r3, [r7, #26]
 8004e2a:	e0df      	b.n	8004fec <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f04f 0100 	mov.w	r1, #0
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	020b      	lsls	r3, r1, #8
 8004e3e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e42:	0202      	lsls	r2, r0, #8
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	6849      	ldr	r1, [r1, #4]
 8004e48:	0849      	lsrs	r1, r1, #1
 8004e4a:	4608      	mov	r0, r1
 8004e4c:	f04f 0100 	mov.w	r1, #0
 8004e50:	1814      	adds	r4, r2, r0
 8004e52:	eb43 0501 	adc.w	r5, r3, r1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	4620      	mov	r0, r4
 8004e62:	4629      	mov	r1, r5
 8004e64:	f7fb fa0c 	bl	8000280 <__aeabi_uldivmod>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e76:	d308      	bcc.n	8004e8a <UART_SetConfig+0x396>
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e7e:	d204      	bcs.n	8004e8a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	60da      	str	r2, [r3, #12]
 8004e88:	e0b0      	b.n	8004fec <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	76bb      	strb	r3, [r7, #26]
 8004e8e:	e0ad      	b.n	8004fec <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e98:	d15c      	bne.n	8004f54 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004e9a:	7efb      	ldrb	r3, [r7, #27]
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d828      	bhi.n	8004ef2 <UART_SetConfig+0x3fe>
 8004ea0:	a201      	add	r2, pc, #4	; (adr r2, 8004ea8 <UART_SetConfig+0x3b4>)
 8004ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea6:	bf00      	nop
 8004ea8:	08004ecd 	.word	0x08004ecd
 8004eac:	08004ed5 	.word	0x08004ed5
 8004eb0:	08004edd 	.word	0x08004edd
 8004eb4:	08004ef3 	.word	0x08004ef3
 8004eb8:	08004ee3 	.word	0x08004ee3
 8004ebc:	08004ef3 	.word	0x08004ef3
 8004ec0:	08004ef3 	.word	0x08004ef3
 8004ec4:	08004ef3 	.word	0x08004ef3
 8004ec8:	08004eeb 	.word	0x08004eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ecc:	f7fe fdb4 	bl	8003a38 <HAL_RCC_GetPCLK1Freq>
 8004ed0:	6178      	str	r0, [r7, #20]
        break;
 8004ed2:	e013      	b.n	8004efc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ed4:	f7fe fdc6 	bl	8003a64 <HAL_RCC_GetPCLK2Freq>
 8004ed8:	6178      	str	r0, [r7, #20]
        break;
 8004eda:	e00f      	b.n	8004efc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004edc:	4b49      	ldr	r3, [pc, #292]	; (8005004 <UART_SetConfig+0x510>)
 8004ede:	617b      	str	r3, [r7, #20]
        break;
 8004ee0:	e00c      	b.n	8004efc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ee2:	f7fe fd11 	bl	8003908 <HAL_RCC_GetSysClockFreq>
 8004ee6:	6178      	str	r0, [r7, #20]
        break;
 8004ee8:	e008      	b.n	8004efc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eee:	617b      	str	r3, [r7, #20]
        break;
 8004ef0:	e004      	b.n	8004efc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	76bb      	strb	r3, [r7, #26]
        break;
 8004efa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d074      	beq.n	8004fec <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	005a      	lsls	r2, r3, #1
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	085b      	lsrs	r3, r3, #1
 8004f0c:	441a      	add	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	2b0f      	cmp	r3, #15
 8004f1e:	d916      	bls.n	8004f4e <UART_SetConfig+0x45a>
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f26:	d212      	bcs.n	8004f4e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	f023 030f 	bic.w	r3, r3, #15
 8004f30:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	085b      	lsrs	r3, r3, #1
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	f003 0307 	and.w	r3, r3, #7
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	89fb      	ldrh	r3, [r7, #14]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	89fa      	ldrh	r2, [r7, #14]
 8004f4a:	60da      	str	r2, [r3, #12]
 8004f4c:	e04e      	b.n	8004fec <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	76bb      	strb	r3, [r7, #26]
 8004f52:	e04b      	b.n	8004fec <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f54:	7efb      	ldrb	r3, [r7, #27]
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	d827      	bhi.n	8004faa <UART_SetConfig+0x4b6>
 8004f5a:	a201      	add	r2, pc, #4	; (adr r2, 8004f60 <UART_SetConfig+0x46c>)
 8004f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f60:	08004f85 	.word	0x08004f85
 8004f64:	08004f8d 	.word	0x08004f8d
 8004f68:	08004f95 	.word	0x08004f95
 8004f6c:	08004fab 	.word	0x08004fab
 8004f70:	08004f9b 	.word	0x08004f9b
 8004f74:	08004fab 	.word	0x08004fab
 8004f78:	08004fab 	.word	0x08004fab
 8004f7c:	08004fab 	.word	0x08004fab
 8004f80:	08004fa3 	.word	0x08004fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f84:	f7fe fd58 	bl	8003a38 <HAL_RCC_GetPCLK1Freq>
 8004f88:	6178      	str	r0, [r7, #20]
        break;
 8004f8a:	e013      	b.n	8004fb4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f8c:	f7fe fd6a 	bl	8003a64 <HAL_RCC_GetPCLK2Freq>
 8004f90:	6178      	str	r0, [r7, #20]
        break;
 8004f92:	e00f      	b.n	8004fb4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f94:	4b1b      	ldr	r3, [pc, #108]	; (8005004 <UART_SetConfig+0x510>)
 8004f96:	617b      	str	r3, [r7, #20]
        break;
 8004f98:	e00c      	b.n	8004fb4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f9a:	f7fe fcb5 	bl	8003908 <HAL_RCC_GetSysClockFreq>
 8004f9e:	6178      	str	r0, [r7, #20]
        break;
 8004fa0:	e008      	b.n	8004fb4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fa6:	617b      	str	r3, [r7, #20]
        break;
 8004fa8:	e004      	b.n	8004fb4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	76bb      	strb	r3, [r7, #26]
        break;
 8004fb2:	bf00      	nop
    }

    if (pclk != 0U)
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d018      	beq.n	8004fec <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	085a      	lsrs	r2, r3, #1
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	441a      	add	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	2b0f      	cmp	r3, #15
 8004fd4:	d908      	bls.n	8004fe8 <UART_SetConfig+0x4f4>
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fdc:	d204      	bcs.n	8004fe8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	60da      	str	r2, [r3, #12]
 8004fe6:	e001      	b.n	8004fec <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ff8:	7ebb      	ldrb	r3, [r7, #26]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3720      	adds	r7, #32
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bdb0      	pop	{r4, r5, r7, pc}
 8005002:	bf00      	nop
 8005004:	00f42400 	.word	0x00f42400

08005008 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00a      	beq.n	8005032 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	f003 0310 	and.w	r3, r3, #16
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00a      	beq.n	80050ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01a      	beq.n	800511e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005106:	d10a      	bne.n	800511e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	605a      	str	r2, [r3, #4]
  }
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af02      	add	r7, sp, #8
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800515c:	f7fc fbca 	bl	80018f4 <HAL_GetTick>
 8005160:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0308 	and.w	r3, r3, #8
 800516c:	2b08      	cmp	r3, #8
 800516e:	d10e      	bne.n	800518e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005170:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f82d 	bl	80051de <UART_WaitOnFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e023      	b.n	80051d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b04      	cmp	r3, #4
 800519a:	d10e      	bne.n	80051ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800519c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f817 	bl	80051de <UART_WaitOnFlagUntilTimeout>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e00d      	b.n	80051d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2220      	movs	r2, #32
 80051be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2220      	movs	r2, #32
 80051c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b084      	sub	sp, #16
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	60f8      	str	r0, [r7, #12]
 80051e6:	60b9      	str	r1, [r7, #8]
 80051e8:	603b      	str	r3, [r7, #0]
 80051ea:	4613      	mov	r3, r2
 80051ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ee:	e05e      	b.n	80052ae <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051f6:	d05a      	beq.n	80052ae <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051f8:	f7fc fb7c 	bl	80018f4 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	429a      	cmp	r2, r3
 8005206:	d302      	bcc.n	800520e <UART_WaitOnFlagUntilTimeout+0x30>
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d11b      	bne.n	8005246 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800521c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0201 	bic.w	r2, r2, #1
 800522c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2220      	movs	r2, #32
 8005232:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2220      	movs	r2, #32
 8005238:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e043      	b.n	80052ce <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	d02c      	beq.n	80052ae <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800525e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005262:	d124      	bne.n	80052ae <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800526c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800527c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0201 	bic.w	r2, r2, #1
 800528c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2220      	movs	r2, #32
 8005292:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2220      	movs	r2, #32
 8005298:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2220      	movs	r2, #32
 800529e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e00f      	b.n	80052ce <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69da      	ldr	r2, [r3, #28]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4013      	ands	r3, r2
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	bf0c      	ite	eq
 80052be:	2301      	moveq	r3, #1
 80052c0:	2300      	movne	r3, #0
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	461a      	mov	r2, r3
 80052c6:	79fb      	ldrb	r3, [r7, #7]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d091      	beq.n	80051f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <__errno>:
 80052d8:	4b01      	ldr	r3, [pc, #4]	; (80052e0 <__errno+0x8>)
 80052da:	6818      	ldr	r0, [r3, #0]
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	20000010 	.word	0x20000010

080052e4 <__libc_init_array>:
 80052e4:	b570      	push	{r4, r5, r6, lr}
 80052e6:	4d0d      	ldr	r5, [pc, #52]	; (800531c <__libc_init_array+0x38>)
 80052e8:	4c0d      	ldr	r4, [pc, #52]	; (8005320 <__libc_init_array+0x3c>)
 80052ea:	1b64      	subs	r4, r4, r5
 80052ec:	10a4      	asrs	r4, r4, #2
 80052ee:	2600      	movs	r6, #0
 80052f0:	42a6      	cmp	r6, r4
 80052f2:	d109      	bne.n	8005308 <__libc_init_array+0x24>
 80052f4:	4d0b      	ldr	r5, [pc, #44]	; (8005324 <__libc_init_array+0x40>)
 80052f6:	4c0c      	ldr	r4, [pc, #48]	; (8005328 <__libc_init_array+0x44>)
 80052f8:	f000 fc82 	bl	8005c00 <_init>
 80052fc:	1b64      	subs	r4, r4, r5
 80052fe:	10a4      	asrs	r4, r4, #2
 8005300:	2600      	movs	r6, #0
 8005302:	42a6      	cmp	r6, r4
 8005304:	d105      	bne.n	8005312 <__libc_init_array+0x2e>
 8005306:	bd70      	pop	{r4, r5, r6, pc}
 8005308:	f855 3b04 	ldr.w	r3, [r5], #4
 800530c:	4798      	blx	r3
 800530e:	3601      	adds	r6, #1
 8005310:	e7ee      	b.n	80052f0 <__libc_init_array+0xc>
 8005312:	f855 3b04 	ldr.w	r3, [r5], #4
 8005316:	4798      	blx	r3
 8005318:	3601      	adds	r6, #1
 800531a:	e7f2      	b.n	8005302 <__libc_init_array+0x1e>
 800531c:	08005d00 	.word	0x08005d00
 8005320:	08005d00 	.word	0x08005d00
 8005324:	08005d00 	.word	0x08005d00
 8005328:	08005d04 	.word	0x08005d04

0800532c <memset>:
 800532c:	4402      	add	r2, r0
 800532e:	4603      	mov	r3, r0
 8005330:	4293      	cmp	r3, r2
 8005332:	d100      	bne.n	8005336 <memset+0xa>
 8005334:	4770      	bx	lr
 8005336:	f803 1b01 	strb.w	r1, [r3], #1
 800533a:	e7f9      	b.n	8005330 <memset+0x4>

0800533c <sniprintf>:
 800533c:	b40c      	push	{r2, r3}
 800533e:	b530      	push	{r4, r5, lr}
 8005340:	4b17      	ldr	r3, [pc, #92]	; (80053a0 <sniprintf+0x64>)
 8005342:	1e0c      	subs	r4, r1, #0
 8005344:	681d      	ldr	r5, [r3, #0]
 8005346:	b09d      	sub	sp, #116	; 0x74
 8005348:	da08      	bge.n	800535c <sniprintf+0x20>
 800534a:	238b      	movs	r3, #139	; 0x8b
 800534c:	602b      	str	r3, [r5, #0]
 800534e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005352:	b01d      	add	sp, #116	; 0x74
 8005354:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005358:	b002      	add	sp, #8
 800535a:	4770      	bx	lr
 800535c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005360:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005364:	bf14      	ite	ne
 8005366:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800536a:	4623      	moveq	r3, r4
 800536c:	9304      	str	r3, [sp, #16]
 800536e:	9307      	str	r3, [sp, #28]
 8005370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005374:	9002      	str	r0, [sp, #8]
 8005376:	9006      	str	r0, [sp, #24]
 8005378:	f8ad 3016 	strh.w	r3, [sp, #22]
 800537c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800537e:	ab21      	add	r3, sp, #132	; 0x84
 8005380:	a902      	add	r1, sp, #8
 8005382:	4628      	mov	r0, r5
 8005384:	9301      	str	r3, [sp, #4]
 8005386:	f000 f889 	bl	800549c <_svfiprintf_r>
 800538a:	1c43      	adds	r3, r0, #1
 800538c:	bfbc      	itt	lt
 800538e:	238b      	movlt	r3, #139	; 0x8b
 8005390:	602b      	strlt	r3, [r5, #0]
 8005392:	2c00      	cmp	r4, #0
 8005394:	d0dd      	beq.n	8005352 <sniprintf+0x16>
 8005396:	9b02      	ldr	r3, [sp, #8]
 8005398:	2200      	movs	r2, #0
 800539a:	701a      	strb	r2, [r3, #0]
 800539c:	e7d9      	b.n	8005352 <sniprintf+0x16>
 800539e:	bf00      	nop
 80053a0:	20000010 	.word	0x20000010

080053a4 <siprintf>:
 80053a4:	b40e      	push	{r1, r2, r3}
 80053a6:	b500      	push	{lr}
 80053a8:	b09c      	sub	sp, #112	; 0x70
 80053aa:	ab1d      	add	r3, sp, #116	; 0x74
 80053ac:	9002      	str	r0, [sp, #8]
 80053ae:	9006      	str	r0, [sp, #24]
 80053b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053b4:	4809      	ldr	r0, [pc, #36]	; (80053dc <siprintf+0x38>)
 80053b6:	9107      	str	r1, [sp, #28]
 80053b8:	9104      	str	r1, [sp, #16]
 80053ba:	4909      	ldr	r1, [pc, #36]	; (80053e0 <siprintf+0x3c>)
 80053bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80053c0:	9105      	str	r1, [sp, #20]
 80053c2:	6800      	ldr	r0, [r0, #0]
 80053c4:	9301      	str	r3, [sp, #4]
 80053c6:	a902      	add	r1, sp, #8
 80053c8:	f000 f868 	bl	800549c <_svfiprintf_r>
 80053cc:	9b02      	ldr	r3, [sp, #8]
 80053ce:	2200      	movs	r2, #0
 80053d0:	701a      	strb	r2, [r3, #0]
 80053d2:	b01c      	add	sp, #112	; 0x70
 80053d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80053d8:	b003      	add	sp, #12
 80053da:	4770      	bx	lr
 80053dc:	20000010 	.word	0x20000010
 80053e0:	ffff0208 	.word	0xffff0208

080053e4 <__ssputs_r>:
 80053e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053e8:	688e      	ldr	r6, [r1, #8]
 80053ea:	429e      	cmp	r6, r3
 80053ec:	4682      	mov	sl, r0
 80053ee:	460c      	mov	r4, r1
 80053f0:	4690      	mov	r8, r2
 80053f2:	461f      	mov	r7, r3
 80053f4:	d838      	bhi.n	8005468 <__ssputs_r+0x84>
 80053f6:	898a      	ldrh	r2, [r1, #12]
 80053f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80053fc:	d032      	beq.n	8005464 <__ssputs_r+0x80>
 80053fe:	6825      	ldr	r5, [r4, #0]
 8005400:	6909      	ldr	r1, [r1, #16]
 8005402:	eba5 0901 	sub.w	r9, r5, r1
 8005406:	6965      	ldr	r5, [r4, #20]
 8005408:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800540c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005410:	3301      	adds	r3, #1
 8005412:	444b      	add	r3, r9
 8005414:	106d      	asrs	r5, r5, #1
 8005416:	429d      	cmp	r5, r3
 8005418:	bf38      	it	cc
 800541a:	461d      	movcc	r5, r3
 800541c:	0553      	lsls	r3, r2, #21
 800541e:	d531      	bpl.n	8005484 <__ssputs_r+0xa0>
 8005420:	4629      	mov	r1, r5
 8005422:	f000 fb47 	bl	8005ab4 <_malloc_r>
 8005426:	4606      	mov	r6, r0
 8005428:	b950      	cbnz	r0, 8005440 <__ssputs_r+0x5c>
 800542a:	230c      	movs	r3, #12
 800542c:	f8ca 3000 	str.w	r3, [sl]
 8005430:	89a3      	ldrh	r3, [r4, #12]
 8005432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005436:	81a3      	strh	r3, [r4, #12]
 8005438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800543c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005440:	6921      	ldr	r1, [r4, #16]
 8005442:	464a      	mov	r2, r9
 8005444:	f000 fabe 	bl	80059c4 <memcpy>
 8005448:	89a3      	ldrh	r3, [r4, #12]
 800544a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800544e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005452:	81a3      	strh	r3, [r4, #12]
 8005454:	6126      	str	r6, [r4, #16]
 8005456:	6165      	str	r5, [r4, #20]
 8005458:	444e      	add	r6, r9
 800545a:	eba5 0509 	sub.w	r5, r5, r9
 800545e:	6026      	str	r6, [r4, #0]
 8005460:	60a5      	str	r5, [r4, #8]
 8005462:	463e      	mov	r6, r7
 8005464:	42be      	cmp	r6, r7
 8005466:	d900      	bls.n	800546a <__ssputs_r+0x86>
 8005468:	463e      	mov	r6, r7
 800546a:	4632      	mov	r2, r6
 800546c:	6820      	ldr	r0, [r4, #0]
 800546e:	4641      	mov	r1, r8
 8005470:	f000 fab6 	bl	80059e0 <memmove>
 8005474:	68a3      	ldr	r3, [r4, #8]
 8005476:	6822      	ldr	r2, [r4, #0]
 8005478:	1b9b      	subs	r3, r3, r6
 800547a:	4432      	add	r2, r6
 800547c:	60a3      	str	r3, [r4, #8]
 800547e:	6022      	str	r2, [r4, #0]
 8005480:	2000      	movs	r0, #0
 8005482:	e7db      	b.n	800543c <__ssputs_r+0x58>
 8005484:	462a      	mov	r2, r5
 8005486:	f000 fb6f 	bl	8005b68 <_realloc_r>
 800548a:	4606      	mov	r6, r0
 800548c:	2800      	cmp	r0, #0
 800548e:	d1e1      	bne.n	8005454 <__ssputs_r+0x70>
 8005490:	6921      	ldr	r1, [r4, #16]
 8005492:	4650      	mov	r0, sl
 8005494:	f000 fabe 	bl	8005a14 <_free_r>
 8005498:	e7c7      	b.n	800542a <__ssputs_r+0x46>
	...

0800549c <_svfiprintf_r>:
 800549c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a0:	4698      	mov	r8, r3
 80054a2:	898b      	ldrh	r3, [r1, #12]
 80054a4:	061b      	lsls	r3, r3, #24
 80054a6:	b09d      	sub	sp, #116	; 0x74
 80054a8:	4607      	mov	r7, r0
 80054aa:	460d      	mov	r5, r1
 80054ac:	4614      	mov	r4, r2
 80054ae:	d50e      	bpl.n	80054ce <_svfiprintf_r+0x32>
 80054b0:	690b      	ldr	r3, [r1, #16]
 80054b2:	b963      	cbnz	r3, 80054ce <_svfiprintf_r+0x32>
 80054b4:	2140      	movs	r1, #64	; 0x40
 80054b6:	f000 fafd 	bl	8005ab4 <_malloc_r>
 80054ba:	6028      	str	r0, [r5, #0]
 80054bc:	6128      	str	r0, [r5, #16]
 80054be:	b920      	cbnz	r0, 80054ca <_svfiprintf_r+0x2e>
 80054c0:	230c      	movs	r3, #12
 80054c2:	603b      	str	r3, [r7, #0]
 80054c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054c8:	e0d1      	b.n	800566e <_svfiprintf_r+0x1d2>
 80054ca:	2340      	movs	r3, #64	; 0x40
 80054cc:	616b      	str	r3, [r5, #20]
 80054ce:	2300      	movs	r3, #0
 80054d0:	9309      	str	r3, [sp, #36]	; 0x24
 80054d2:	2320      	movs	r3, #32
 80054d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80054dc:	2330      	movs	r3, #48	; 0x30
 80054de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005688 <_svfiprintf_r+0x1ec>
 80054e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054e6:	f04f 0901 	mov.w	r9, #1
 80054ea:	4623      	mov	r3, r4
 80054ec:	469a      	mov	sl, r3
 80054ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054f2:	b10a      	cbz	r2, 80054f8 <_svfiprintf_r+0x5c>
 80054f4:	2a25      	cmp	r2, #37	; 0x25
 80054f6:	d1f9      	bne.n	80054ec <_svfiprintf_r+0x50>
 80054f8:	ebba 0b04 	subs.w	fp, sl, r4
 80054fc:	d00b      	beq.n	8005516 <_svfiprintf_r+0x7a>
 80054fe:	465b      	mov	r3, fp
 8005500:	4622      	mov	r2, r4
 8005502:	4629      	mov	r1, r5
 8005504:	4638      	mov	r0, r7
 8005506:	f7ff ff6d 	bl	80053e4 <__ssputs_r>
 800550a:	3001      	adds	r0, #1
 800550c:	f000 80aa 	beq.w	8005664 <_svfiprintf_r+0x1c8>
 8005510:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005512:	445a      	add	r2, fp
 8005514:	9209      	str	r2, [sp, #36]	; 0x24
 8005516:	f89a 3000 	ldrb.w	r3, [sl]
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 80a2 	beq.w	8005664 <_svfiprintf_r+0x1c8>
 8005520:	2300      	movs	r3, #0
 8005522:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005526:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800552a:	f10a 0a01 	add.w	sl, sl, #1
 800552e:	9304      	str	r3, [sp, #16]
 8005530:	9307      	str	r3, [sp, #28]
 8005532:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005536:	931a      	str	r3, [sp, #104]	; 0x68
 8005538:	4654      	mov	r4, sl
 800553a:	2205      	movs	r2, #5
 800553c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005540:	4851      	ldr	r0, [pc, #324]	; (8005688 <_svfiprintf_r+0x1ec>)
 8005542:	f7fa fe4d 	bl	80001e0 <memchr>
 8005546:	9a04      	ldr	r2, [sp, #16]
 8005548:	b9d8      	cbnz	r0, 8005582 <_svfiprintf_r+0xe6>
 800554a:	06d0      	lsls	r0, r2, #27
 800554c:	bf44      	itt	mi
 800554e:	2320      	movmi	r3, #32
 8005550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005554:	0711      	lsls	r1, r2, #28
 8005556:	bf44      	itt	mi
 8005558:	232b      	movmi	r3, #43	; 0x2b
 800555a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800555e:	f89a 3000 	ldrb.w	r3, [sl]
 8005562:	2b2a      	cmp	r3, #42	; 0x2a
 8005564:	d015      	beq.n	8005592 <_svfiprintf_r+0xf6>
 8005566:	9a07      	ldr	r2, [sp, #28]
 8005568:	4654      	mov	r4, sl
 800556a:	2000      	movs	r0, #0
 800556c:	f04f 0c0a 	mov.w	ip, #10
 8005570:	4621      	mov	r1, r4
 8005572:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005576:	3b30      	subs	r3, #48	; 0x30
 8005578:	2b09      	cmp	r3, #9
 800557a:	d94e      	bls.n	800561a <_svfiprintf_r+0x17e>
 800557c:	b1b0      	cbz	r0, 80055ac <_svfiprintf_r+0x110>
 800557e:	9207      	str	r2, [sp, #28]
 8005580:	e014      	b.n	80055ac <_svfiprintf_r+0x110>
 8005582:	eba0 0308 	sub.w	r3, r0, r8
 8005586:	fa09 f303 	lsl.w	r3, r9, r3
 800558a:	4313      	orrs	r3, r2
 800558c:	9304      	str	r3, [sp, #16]
 800558e:	46a2      	mov	sl, r4
 8005590:	e7d2      	b.n	8005538 <_svfiprintf_r+0x9c>
 8005592:	9b03      	ldr	r3, [sp, #12]
 8005594:	1d19      	adds	r1, r3, #4
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	9103      	str	r1, [sp, #12]
 800559a:	2b00      	cmp	r3, #0
 800559c:	bfbb      	ittet	lt
 800559e:	425b      	neglt	r3, r3
 80055a0:	f042 0202 	orrlt.w	r2, r2, #2
 80055a4:	9307      	strge	r3, [sp, #28]
 80055a6:	9307      	strlt	r3, [sp, #28]
 80055a8:	bfb8      	it	lt
 80055aa:	9204      	strlt	r2, [sp, #16]
 80055ac:	7823      	ldrb	r3, [r4, #0]
 80055ae:	2b2e      	cmp	r3, #46	; 0x2e
 80055b0:	d10c      	bne.n	80055cc <_svfiprintf_r+0x130>
 80055b2:	7863      	ldrb	r3, [r4, #1]
 80055b4:	2b2a      	cmp	r3, #42	; 0x2a
 80055b6:	d135      	bne.n	8005624 <_svfiprintf_r+0x188>
 80055b8:	9b03      	ldr	r3, [sp, #12]
 80055ba:	1d1a      	adds	r2, r3, #4
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	9203      	str	r2, [sp, #12]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	bfb8      	it	lt
 80055c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80055c8:	3402      	adds	r4, #2
 80055ca:	9305      	str	r3, [sp, #20]
 80055cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005698 <_svfiprintf_r+0x1fc>
 80055d0:	7821      	ldrb	r1, [r4, #0]
 80055d2:	2203      	movs	r2, #3
 80055d4:	4650      	mov	r0, sl
 80055d6:	f7fa fe03 	bl	80001e0 <memchr>
 80055da:	b140      	cbz	r0, 80055ee <_svfiprintf_r+0x152>
 80055dc:	2340      	movs	r3, #64	; 0x40
 80055de:	eba0 000a 	sub.w	r0, r0, sl
 80055e2:	fa03 f000 	lsl.w	r0, r3, r0
 80055e6:	9b04      	ldr	r3, [sp, #16]
 80055e8:	4303      	orrs	r3, r0
 80055ea:	3401      	adds	r4, #1
 80055ec:	9304      	str	r3, [sp, #16]
 80055ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055f2:	4826      	ldr	r0, [pc, #152]	; (800568c <_svfiprintf_r+0x1f0>)
 80055f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055f8:	2206      	movs	r2, #6
 80055fa:	f7fa fdf1 	bl	80001e0 <memchr>
 80055fe:	2800      	cmp	r0, #0
 8005600:	d038      	beq.n	8005674 <_svfiprintf_r+0x1d8>
 8005602:	4b23      	ldr	r3, [pc, #140]	; (8005690 <_svfiprintf_r+0x1f4>)
 8005604:	bb1b      	cbnz	r3, 800564e <_svfiprintf_r+0x1b2>
 8005606:	9b03      	ldr	r3, [sp, #12]
 8005608:	3307      	adds	r3, #7
 800560a:	f023 0307 	bic.w	r3, r3, #7
 800560e:	3308      	adds	r3, #8
 8005610:	9303      	str	r3, [sp, #12]
 8005612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005614:	4433      	add	r3, r6
 8005616:	9309      	str	r3, [sp, #36]	; 0x24
 8005618:	e767      	b.n	80054ea <_svfiprintf_r+0x4e>
 800561a:	fb0c 3202 	mla	r2, ip, r2, r3
 800561e:	460c      	mov	r4, r1
 8005620:	2001      	movs	r0, #1
 8005622:	e7a5      	b.n	8005570 <_svfiprintf_r+0xd4>
 8005624:	2300      	movs	r3, #0
 8005626:	3401      	adds	r4, #1
 8005628:	9305      	str	r3, [sp, #20]
 800562a:	4619      	mov	r1, r3
 800562c:	f04f 0c0a 	mov.w	ip, #10
 8005630:	4620      	mov	r0, r4
 8005632:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005636:	3a30      	subs	r2, #48	; 0x30
 8005638:	2a09      	cmp	r2, #9
 800563a:	d903      	bls.n	8005644 <_svfiprintf_r+0x1a8>
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0c5      	beq.n	80055cc <_svfiprintf_r+0x130>
 8005640:	9105      	str	r1, [sp, #20]
 8005642:	e7c3      	b.n	80055cc <_svfiprintf_r+0x130>
 8005644:	fb0c 2101 	mla	r1, ip, r1, r2
 8005648:	4604      	mov	r4, r0
 800564a:	2301      	movs	r3, #1
 800564c:	e7f0      	b.n	8005630 <_svfiprintf_r+0x194>
 800564e:	ab03      	add	r3, sp, #12
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	462a      	mov	r2, r5
 8005654:	4b0f      	ldr	r3, [pc, #60]	; (8005694 <_svfiprintf_r+0x1f8>)
 8005656:	a904      	add	r1, sp, #16
 8005658:	4638      	mov	r0, r7
 800565a:	f3af 8000 	nop.w
 800565e:	1c42      	adds	r2, r0, #1
 8005660:	4606      	mov	r6, r0
 8005662:	d1d6      	bne.n	8005612 <_svfiprintf_r+0x176>
 8005664:	89ab      	ldrh	r3, [r5, #12]
 8005666:	065b      	lsls	r3, r3, #25
 8005668:	f53f af2c 	bmi.w	80054c4 <_svfiprintf_r+0x28>
 800566c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800566e:	b01d      	add	sp, #116	; 0x74
 8005670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005674:	ab03      	add	r3, sp, #12
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	462a      	mov	r2, r5
 800567a:	4b06      	ldr	r3, [pc, #24]	; (8005694 <_svfiprintf_r+0x1f8>)
 800567c:	a904      	add	r1, sp, #16
 800567e:	4638      	mov	r0, r7
 8005680:	f000 f87a 	bl	8005778 <_printf_i>
 8005684:	e7eb      	b.n	800565e <_svfiprintf_r+0x1c2>
 8005686:	bf00      	nop
 8005688:	08005cc4 	.word	0x08005cc4
 800568c:	08005cce 	.word	0x08005cce
 8005690:	00000000 	.word	0x00000000
 8005694:	080053e5 	.word	0x080053e5
 8005698:	08005cca 	.word	0x08005cca

0800569c <_printf_common>:
 800569c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056a0:	4616      	mov	r6, r2
 80056a2:	4699      	mov	r9, r3
 80056a4:	688a      	ldr	r2, [r1, #8]
 80056a6:	690b      	ldr	r3, [r1, #16]
 80056a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056ac:	4293      	cmp	r3, r2
 80056ae:	bfb8      	it	lt
 80056b0:	4613      	movlt	r3, r2
 80056b2:	6033      	str	r3, [r6, #0]
 80056b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056b8:	4607      	mov	r7, r0
 80056ba:	460c      	mov	r4, r1
 80056bc:	b10a      	cbz	r2, 80056c2 <_printf_common+0x26>
 80056be:	3301      	adds	r3, #1
 80056c0:	6033      	str	r3, [r6, #0]
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	0699      	lsls	r1, r3, #26
 80056c6:	bf42      	ittt	mi
 80056c8:	6833      	ldrmi	r3, [r6, #0]
 80056ca:	3302      	addmi	r3, #2
 80056cc:	6033      	strmi	r3, [r6, #0]
 80056ce:	6825      	ldr	r5, [r4, #0]
 80056d0:	f015 0506 	ands.w	r5, r5, #6
 80056d4:	d106      	bne.n	80056e4 <_printf_common+0x48>
 80056d6:	f104 0a19 	add.w	sl, r4, #25
 80056da:	68e3      	ldr	r3, [r4, #12]
 80056dc:	6832      	ldr	r2, [r6, #0]
 80056de:	1a9b      	subs	r3, r3, r2
 80056e0:	42ab      	cmp	r3, r5
 80056e2:	dc26      	bgt.n	8005732 <_printf_common+0x96>
 80056e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056e8:	1e13      	subs	r3, r2, #0
 80056ea:	6822      	ldr	r2, [r4, #0]
 80056ec:	bf18      	it	ne
 80056ee:	2301      	movne	r3, #1
 80056f0:	0692      	lsls	r2, r2, #26
 80056f2:	d42b      	bmi.n	800574c <_printf_common+0xb0>
 80056f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056f8:	4649      	mov	r1, r9
 80056fa:	4638      	mov	r0, r7
 80056fc:	47c0      	blx	r8
 80056fe:	3001      	adds	r0, #1
 8005700:	d01e      	beq.n	8005740 <_printf_common+0xa4>
 8005702:	6823      	ldr	r3, [r4, #0]
 8005704:	68e5      	ldr	r5, [r4, #12]
 8005706:	6832      	ldr	r2, [r6, #0]
 8005708:	f003 0306 	and.w	r3, r3, #6
 800570c:	2b04      	cmp	r3, #4
 800570e:	bf08      	it	eq
 8005710:	1aad      	subeq	r5, r5, r2
 8005712:	68a3      	ldr	r3, [r4, #8]
 8005714:	6922      	ldr	r2, [r4, #16]
 8005716:	bf0c      	ite	eq
 8005718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800571c:	2500      	movne	r5, #0
 800571e:	4293      	cmp	r3, r2
 8005720:	bfc4      	itt	gt
 8005722:	1a9b      	subgt	r3, r3, r2
 8005724:	18ed      	addgt	r5, r5, r3
 8005726:	2600      	movs	r6, #0
 8005728:	341a      	adds	r4, #26
 800572a:	42b5      	cmp	r5, r6
 800572c:	d11a      	bne.n	8005764 <_printf_common+0xc8>
 800572e:	2000      	movs	r0, #0
 8005730:	e008      	b.n	8005744 <_printf_common+0xa8>
 8005732:	2301      	movs	r3, #1
 8005734:	4652      	mov	r2, sl
 8005736:	4649      	mov	r1, r9
 8005738:	4638      	mov	r0, r7
 800573a:	47c0      	blx	r8
 800573c:	3001      	adds	r0, #1
 800573e:	d103      	bne.n	8005748 <_printf_common+0xac>
 8005740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005748:	3501      	adds	r5, #1
 800574a:	e7c6      	b.n	80056da <_printf_common+0x3e>
 800574c:	18e1      	adds	r1, r4, r3
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	2030      	movs	r0, #48	; 0x30
 8005752:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005756:	4422      	add	r2, r4
 8005758:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800575c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005760:	3302      	adds	r3, #2
 8005762:	e7c7      	b.n	80056f4 <_printf_common+0x58>
 8005764:	2301      	movs	r3, #1
 8005766:	4622      	mov	r2, r4
 8005768:	4649      	mov	r1, r9
 800576a:	4638      	mov	r0, r7
 800576c:	47c0      	blx	r8
 800576e:	3001      	adds	r0, #1
 8005770:	d0e6      	beq.n	8005740 <_printf_common+0xa4>
 8005772:	3601      	adds	r6, #1
 8005774:	e7d9      	b.n	800572a <_printf_common+0x8e>
	...

08005778 <_printf_i>:
 8005778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800577c:	460c      	mov	r4, r1
 800577e:	4691      	mov	r9, r2
 8005780:	7e27      	ldrb	r7, [r4, #24]
 8005782:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005784:	2f78      	cmp	r7, #120	; 0x78
 8005786:	4680      	mov	r8, r0
 8005788:	469a      	mov	sl, r3
 800578a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800578e:	d807      	bhi.n	80057a0 <_printf_i+0x28>
 8005790:	2f62      	cmp	r7, #98	; 0x62
 8005792:	d80a      	bhi.n	80057aa <_printf_i+0x32>
 8005794:	2f00      	cmp	r7, #0
 8005796:	f000 80d8 	beq.w	800594a <_printf_i+0x1d2>
 800579a:	2f58      	cmp	r7, #88	; 0x58
 800579c:	f000 80a3 	beq.w	80058e6 <_printf_i+0x16e>
 80057a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80057a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057a8:	e03a      	b.n	8005820 <_printf_i+0xa8>
 80057aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057ae:	2b15      	cmp	r3, #21
 80057b0:	d8f6      	bhi.n	80057a0 <_printf_i+0x28>
 80057b2:	a001      	add	r0, pc, #4	; (adr r0, 80057b8 <_printf_i+0x40>)
 80057b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80057b8:	08005811 	.word	0x08005811
 80057bc:	08005825 	.word	0x08005825
 80057c0:	080057a1 	.word	0x080057a1
 80057c4:	080057a1 	.word	0x080057a1
 80057c8:	080057a1 	.word	0x080057a1
 80057cc:	080057a1 	.word	0x080057a1
 80057d0:	08005825 	.word	0x08005825
 80057d4:	080057a1 	.word	0x080057a1
 80057d8:	080057a1 	.word	0x080057a1
 80057dc:	080057a1 	.word	0x080057a1
 80057e0:	080057a1 	.word	0x080057a1
 80057e4:	08005931 	.word	0x08005931
 80057e8:	08005855 	.word	0x08005855
 80057ec:	08005913 	.word	0x08005913
 80057f0:	080057a1 	.word	0x080057a1
 80057f4:	080057a1 	.word	0x080057a1
 80057f8:	08005953 	.word	0x08005953
 80057fc:	080057a1 	.word	0x080057a1
 8005800:	08005855 	.word	0x08005855
 8005804:	080057a1 	.word	0x080057a1
 8005808:	080057a1 	.word	0x080057a1
 800580c:	0800591b 	.word	0x0800591b
 8005810:	680b      	ldr	r3, [r1, #0]
 8005812:	1d1a      	adds	r2, r3, #4
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	600a      	str	r2, [r1, #0]
 8005818:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800581c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005820:	2301      	movs	r3, #1
 8005822:	e0a3      	b.n	800596c <_printf_i+0x1f4>
 8005824:	6825      	ldr	r5, [r4, #0]
 8005826:	6808      	ldr	r0, [r1, #0]
 8005828:	062e      	lsls	r6, r5, #24
 800582a:	f100 0304 	add.w	r3, r0, #4
 800582e:	d50a      	bpl.n	8005846 <_printf_i+0xce>
 8005830:	6805      	ldr	r5, [r0, #0]
 8005832:	600b      	str	r3, [r1, #0]
 8005834:	2d00      	cmp	r5, #0
 8005836:	da03      	bge.n	8005840 <_printf_i+0xc8>
 8005838:	232d      	movs	r3, #45	; 0x2d
 800583a:	426d      	negs	r5, r5
 800583c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005840:	485e      	ldr	r0, [pc, #376]	; (80059bc <_printf_i+0x244>)
 8005842:	230a      	movs	r3, #10
 8005844:	e019      	b.n	800587a <_printf_i+0x102>
 8005846:	f015 0f40 	tst.w	r5, #64	; 0x40
 800584a:	6805      	ldr	r5, [r0, #0]
 800584c:	600b      	str	r3, [r1, #0]
 800584e:	bf18      	it	ne
 8005850:	b22d      	sxthne	r5, r5
 8005852:	e7ef      	b.n	8005834 <_printf_i+0xbc>
 8005854:	680b      	ldr	r3, [r1, #0]
 8005856:	6825      	ldr	r5, [r4, #0]
 8005858:	1d18      	adds	r0, r3, #4
 800585a:	6008      	str	r0, [r1, #0]
 800585c:	0628      	lsls	r0, r5, #24
 800585e:	d501      	bpl.n	8005864 <_printf_i+0xec>
 8005860:	681d      	ldr	r5, [r3, #0]
 8005862:	e002      	b.n	800586a <_printf_i+0xf2>
 8005864:	0669      	lsls	r1, r5, #25
 8005866:	d5fb      	bpl.n	8005860 <_printf_i+0xe8>
 8005868:	881d      	ldrh	r5, [r3, #0]
 800586a:	4854      	ldr	r0, [pc, #336]	; (80059bc <_printf_i+0x244>)
 800586c:	2f6f      	cmp	r7, #111	; 0x6f
 800586e:	bf0c      	ite	eq
 8005870:	2308      	moveq	r3, #8
 8005872:	230a      	movne	r3, #10
 8005874:	2100      	movs	r1, #0
 8005876:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800587a:	6866      	ldr	r6, [r4, #4]
 800587c:	60a6      	str	r6, [r4, #8]
 800587e:	2e00      	cmp	r6, #0
 8005880:	bfa2      	ittt	ge
 8005882:	6821      	ldrge	r1, [r4, #0]
 8005884:	f021 0104 	bicge.w	r1, r1, #4
 8005888:	6021      	strge	r1, [r4, #0]
 800588a:	b90d      	cbnz	r5, 8005890 <_printf_i+0x118>
 800588c:	2e00      	cmp	r6, #0
 800588e:	d04d      	beq.n	800592c <_printf_i+0x1b4>
 8005890:	4616      	mov	r6, r2
 8005892:	fbb5 f1f3 	udiv	r1, r5, r3
 8005896:	fb03 5711 	mls	r7, r3, r1, r5
 800589a:	5dc7      	ldrb	r7, [r0, r7]
 800589c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058a0:	462f      	mov	r7, r5
 80058a2:	42bb      	cmp	r3, r7
 80058a4:	460d      	mov	r5, r1
 80058a6:	d9f4      	bls.n	8005892 <_printf_i+0x11a>
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d10b      	bne.n	80058c4 <_printf_i+0x14c>
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	07df      	lsls	r7, r3, #31
 80058b0:	d508      	bpl.n	80058c4 <_printf_i+0x14c>
 80058b2:	6923      	ldr	r3, [r4, #16]
 80058b4:	6861      	ldr	r1, [r4, #4]
 80058b6:	4299      	cmp	r1, r3
 80058b8:	bfde      	ittt	le
 80058ba:	2330      	movle	r3, #48	; 0x30
 80058bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058c0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80058c4:	1b92      	subs	r2, r2, r6
 80058c6:	6122      	str	r2, [r4, #16]
 80058c8:	f8cd a000 	str.w	sl, [sp]
 80058cc:	464b      	mov	r3, r9
 80058ce:	aa03      	add	r2, sp, #12
 80058d0:	4621      	mov	r1, r4
 80058d2:	4640      	mov	r0, r8
 80058d4:	f7ff fee2 	bl	800569c <_printf_common>
 80058d8:	3001      	adds	r0, #1
 80058da:	d14c      	bne.n	8005976 <_printf_i+0x1fe>
 80058dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058e0:	b004      	add	sp, #16
 80058e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058e6:	4835      	ldr	r0, [pc, #212]	; (80059bc <_printf_i+0x244>)
 80058e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80058ec:	6823      	ldr	r3, [r4, #0]
 80058ee:	680e      	ldr	r6, [r1, #0]
 80058f0:	061f      	lsls	r7, r3, #24
 80058f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80058f6:	600e      	str	r6, [r1, #0]
 80058f8:	d514      	bpl.n	8005924 <_printf_i+0x1ac>
 80058fa:	07d9      	lsls	r1, r3, #31
 80058fc:	bf44      	itt	mi
 80058fe:	f043 0320 	orrmi.w	r3, r3, #32
 8005902:	6023      	strmi	r3, [r4, #0]
 8005904:	b91d      	cbnz	r5, 800590e <_printf_i+0x196>
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	f023 0320 	bic.w	r3, r3, #32
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	2310      	movs	r3, #16
 8005910:	e7b0      	b.n	8005874 <_printf_i+0xfc>
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	f043 0320 	orr.w	r3, r3, #32
 8005918:	6023      	str	r3, [r4, #0]
 800591a:	2378      	movs	r3, #120	; 0x78
 800591c:	4828      	ldr	r0, [pc, #160]	; (80059c0 <_printf_i+0x248>)
 800591e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005922:	e7e3      	b.n	80058ec <_printf_i+0x174>
 8005924:	065e      	lsls	r6, r3, #25
 8005926:	bf48      	it	mi
 8005928:	b2ad      	uxthmi	r5, r5
 800592a:	e7e6      	b.n	80058fa <_printf_i+0x182>
 800592c:	4616      	mov	r6, r2
 800592e:	e7bb      	b.n	80058a8 <_printf_i+0x130>
 8005930:	680b      	ldr	r3, [r1, #0]
 8005932:	6826      	ldr	r6, [r4, #0]
 8005934:	6960      	ldr	r0, [r4, #20]
 8005936:	1d1d      	adds	r5, r3, #4
 8005938:	600d      	str	r5, [r1, #0]
 800593a:	0635      	lsls	r5, r6, #24
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	d501      	bpl.n	8005944 <_printf_i+0x1cc>
 8005940:	6018      	str	r0, [r3, #0]
 8005942:	e002      	b.n	800594a <_printf_i+0x1d2>
 8005944:	0671      	lsls	r1, r6, #25
 8005946:	d5fb      	bpl.n	8005940 <_printf_i+0x1c8>
 8005948:	8018      	strh	r0, [r3, #0]
 800594a:	2300      	movs	r3, #0
 800594c:	6123      	str	r3, [r4, #16]
 800594e:	4616      	mov	r6, r2
 8005950:	e7ba      	b.n	80058c8 <_printf_i+0x150>
 8005952:	680b      	ldr	r3, [r1, #0]
 8005954:	1d1a      	adds	r2, r3, #4
 8005956:	600a      	str	r2, [r1, #0]
 8005958:	681e      	ldr	r6, [r3, #0]
 800595a:	6862      	ldr	r2, [r4, #4]
 800595c:	2100      	movs	r1, #0
 800595e:	4630      	mov	r0, r6
 8005960:	f7fa fc3e 	bl	80001e0 <memchr>
 8005964:	b108      	cbz	r0, 800596a <_printf_i+0x1f2>
 8005966:	1b80      	subs	r0, r0, r6
 8005968:	6060      	str	r0, [r4, #4]
 800596a:	6863      	ldr	r3, [r4, #4]
 800596c:	6123      	str	r3, [r4, #16]
 800596e:	2300      	movs	r3, #0
 8005970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005974:	e7a8      	b.n	80058c8 <_printf_i+0x150>
 8005976:	6923      	ldr	r3, [r4, #16]
 8005978:	4632      	mov	r2, r6
 800597a:	4649      	mov	r1, r9
 800597c:	4640      	mov	r0, r8
 800597e:	47d0      	blx	sl
 8005980:	3001      	adds	r0, #1
 8005982:	d0ab      	beq.n	80058dc <_printf_i+0x164>
 8005984:	6823      	ldr	r3, [r4, #0]
 8005986:	079b      	lsls	r3, r3, #30
 8005988:	d413      	bmi.n	80059b2 <_printf_i+0x23a>
 800598a:	68e0      	ldr	r0, [r4, #12]
 800598c:	9b03      	ldr	r3, [sp, #12]
 800598e:	4298      	cmp	r0, r3
 8005990:	bfb8      	it	lt
 8005992:	4618      	movlt	r0, r3
 8005994:	e7a4      	b.n	80058e0 <_printf_i+0x168>
 8005996:	2301      	movs	r3, #1
 8005998:	4632      	mov	r2, r6
 800599a:	4649      	mov	r1, r9
 800599c:	4640      	mov	r0, r8
 800599e:	47d0      	blx	sl
 80059a0:	3001      	adds	r0, #1
 80059a2:	d09b      	beq.n	80058dc <_printf_i+0x164>
 80059a4:	3501      	adds	r5, #1
 80059a6:	68e3      	ldr	r3, [r4, #12]
 80059a8:	9903      	ldr	r1, [sp, #12]
 80059aa:	1a5b      	subs	r3, r3, r1
 80059ac:	42ab      	cmp	r3, r5
 80059ae:	dcf2      	bgt.n	8005996 <_printf_i+0x21e>
 80059b0:	e7eb      	b.n	800598a <_printf_i+0x212>
 80059b2:	2500      	movs	r5, #0
 80059b4:	f104 0619 	add.w	r6, r4, #25
 80059b8:	e7f5      	b.n	80059a6 <_printf_i+0x22e>
 80059ba:	bf00      	nop
 80059bc:	08005cd5 	.word	0x08005cd5
 80059c0:	08005ce6 	.word	0x08005ce6

080059c4 <memcpy>:
 80059c4:	440a      	add	r2, r1
 80059c6:	4291      	cmp	r1, r2
 80059c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80059cc:	d100      	bne.n	80059d0 <memcpy+0xc>
 80059ce:	4770      	bx	lr
 80059d0:	b510      	push	{r4, lr}
 80059d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059da:	4291      	cmp	r1, r2
 80059dc:	d1f9      	bne.n	80059d2 <memcpy+0xe>
 80059de:	bd10      	pop	{r4, pc}

080059e0 <memmove>:
 80059e0:	4288      	cmp	r0, r1
 80059e2:	b510      	push	{r4, lr}
 80059e4:	eb01 0402 	add.w	r4, r1, r2
 80059e8:	d902      	bls.n	80059f0 <memmove+0x10>
 80059ea:	4284      	cmp	r4, r0
 80059ec:	4623      	mov	r3, r4
 80059ee:	d807      	bhi.n	8005a00 <memmove+0x20>
 80059f0:	1e43      	subs	r3, r0, #1
 80059f2:	42a1      	cmp	r1, r4
 80059f4:	d008      	beq.n	8005a08 <memmove+0x28>
 80059f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059fe:	e7f8      	b.n	80059f2 <memmove+0x12>
 8005a00:	4402      	add	r2, r0
 8005a02:	4601      	mov	r1, r0
 8005a04:	428a      	cmp	r2, r1
 8005a06:	d100      	bne.n	8005a0a <memmove+0x2a>
 8005a08:	bd10      	pop	{r4, pc}
 8005a0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a12:	e7f7      	b.n	8005a04 <memmove+0x24>

08005a14 <_free_r>:
 8005a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a16:	2900      	cmp	r1, #0
 8005a18:	d048      	beq.n	8005aac <_free_r+0x98>
 8005a1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a1e:	9001      	str	r0, [sp, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f1a1 0404 	sub.w	r4, r1, #4
 8005a26:	bfb8      	it	lt
 8005a28:	18e4      	addlt	r4, r4, r3
 8005a2a:	f000 f8d3 	bl	8005bd4 <__malloc_lock>
 8005a2e:	4a20      	ldr	r2, [pc, #128]	; (8005ab0 <_free_r+0x9c>)
 8005a30:	9801      	ldr	r0, [sp, #4]
 8005a32:	6813      	ldr	r3, [r2, #0]
 8005a34:	4615      	mov	r5, r2
 8005a36:	b933      	cbnz	r3, 8005a46 <_free_r+0x32>
 8005a38:	6063      	str	r3, [r4, #4]
 8005a3a:	6014      	str	r4, [r2, #0]
 8005a3c:	b003      	add	sp, #12
 8005a3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a42:	f000 b8cd 	b.w	8005be0 <__malloc_unlock>
 8005a46:	42a3      	cmp	r3, r4
 8005a48:	d90b      	bls.n	8005a62 <_free_r+0x4e>
 8005a4a:	6821      	ldr	r1, [r4, #0]
 8005a4c:	1862      	adds	r2, r4, r1
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	bf04      	itt	eq
 8005a52:	681a      	ldreq	r2, [r3, #0]
 8005a54:	685b      	ldreq	r3, [r3, #4]
 8005a56:	6063      	str	r3, [r4, #4]
 8005a58:	bf04      	itt	eq
 8005a5a:	1852      	addeq	r2, r2, r1
 8005a5c:	6022      	streq	r2, [r4, #0]
 8005a5e:	602c      	str	r4, [r5, #0]
 8005a60:	e7ec      	b.n	8005a3c <_free_r+0x28>
 8005a62:	461a      	mov	r2, r3
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	b10b      	cbz	r3, 8005a6c <_free_r+0x58>
 8005a68:	42a3      	cmp	r3, r4
 8005a6a:	d9fa      	bls.n	8005a62 <_free_r+0x4e>
 8005a6c:	6811      	ldr	r1, [r2, #0]
 8005a6e:	1855      	adds	r5, r2, r1
 8005a70:	42a5      	cmp	r5, r4
 8005a72:	d10b      	bne.n	8005a8c <_free_r+0x78>
 8005a74:	6824      	ldr	r4, [r4, #0]
 8005a76:	4421      	add	r1, r4
 8005a78:	1854      	adds	r4, r2, r1
 8005a7a:	42a3      	cmp	r3, r4
 8005a7c:	6011      	str	r1, [r2, #0]
 8005a7e:	d1dd      	bne.n	8005a3c <_free_r+0x28>
 8005a80:	681c      	ldr	r4, [r3, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	6053      	str	r3, [r2, #4]
 8005a86:	4421      	add	r1, r4
 8005a88:	6011      	str	r1, [r2, #0]
 8005a8a:	e7d7      	b.n	8005a3c <_free_r+0x28>
 8005a8c:	d902      	bls.n	8005a94 <_free_r+0x80>
 8005a8e:	230c      	movs	r3, #12
 8005a90:	6003      	str	r3, [r0, #0]
 8005a92:	e7d3      	b.n	8005a3c <_free_r+0x28>
 8005a94:	6825      	ldr	r5, [r4, #0]
 8005a96:	1961      	adds	r1, r4, r5
 8005a98:	428b      	cmp	r3, r1
 8005a9a:	bf04      	itt	eq
 8005a9c:	6819      	ldreq	r1, [r3, #0]
 8005a9e:	685b      	ldreq	r3, [r3, #4]
 8005aa0:	6063      	str	r3, [r4, #4]
 8005aa2:	bf04      	itt	eq
 8005aa4:	1949      	addeq	r1, r1, r5
 8005aa6:	6021      	streq	r1, [r4, #0]
 8005aa8:	6054      	str	r4, [r2, #4]
 8005aaa:	e7c7      	b.n	8005a3c <_free_r+0x28>
 8005aac:	b003      	add	sp, #12
 8005aae:	bd30      	pop	{r4, r5, pc}
 8005ab0:	20000098 	.word	0x20000098

08005ab4 <_malloc_r>:
 8005ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab6:	1ccd      	adds	r5, r1, #3
 8005ab8:	f025 0503 	bic.w	r5, r5, #3
 8005abc:	3508      	adds	r5, #8
 8005abe:	2d0c      	cmp	r5, #12
 8005ac0:	bf38      	it	cc
 8005ac2:	250c      	movcc	r5, #12
 8005ac4:	2d00      	cmp	r5, #0
 8005ac6:	4606      	mov	r6, r0
 8005ac8:	db01      	blt.n	8005ace <_malloc_r+0x1a>
 8005aca:	42a9      	cmp	r1, r5
 8005acc:	d903      	bls.n	8005ad6 <_malloc_r+0x22>
 8005ace:	230c      	movs	r3, #12
 8005ad0:	6033      	str	r3, [r6, #0]
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ad6:	f000 f87d 	bl	8005bd4 <__malloc_lock>
 8005ada:	4921      	ldr	r1, [pc, #132]	; (8005b60 <_malloc_r+0xac>)
 8005adc:	680a      	ldr	r2, [r1, #0]
 8005ade:	4614      	mov	r4, r2
 8005ae0:	b99c      	cbnz	r4, 8005b0a <_malloc_r+0x56>
 8005ae2:	4f20      	ldr	r7, [pc, #128]	; (8005b64 <_malloc_r+0xb0>)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	b923      	cbnz	r3, 8005af2 <_malloc_r+0x3e>
 8005ae8:	4621      	mov	r1, r4
 8005aea:	4630      	mov	r0, r6
 8005aec:	f000 f862 	bl	8005bb4 <_sbrk_r>
 8005af0:	6038      	str	r0, [r7, #0]
 8005af2:	4629      	mov	r1, r5
 8005af4:	4630      	mov	r0, r6
 8005af6:	f000 f85d 	bl	8005bb4 <_sbrk_r>
 8005afa:	1c43      	adds	r3, r0, #1
 8005afc:	d123      	bne.n	8005b46 <_malloc_r+0x92>
 8005afe:	230c      	movs	r3, #12
 8005b00:	6033      	str	r3, [r6, #0]
 8005b02:	4630      	mov	r0, r6
 8005b04:	f000 f86c 	bl	8005be0 <__malloc_unlock>
 8005b08:	e7e3      	b.n	8005ad2 <_malloc_r+0x1e>
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	1b5b      	subs	r3, r3, r5
 8005b0e:	d417      	bmi.n	8005b40 <_malloc_r+0x8c>
 8005b10:	2b0b      	cmp	r3, #11
 8005b12:	d903      	bls.n	8005b1c <_malloc_r+0x68>
 8005b14:	6023      	str	r3, [r4, #0]
 8005b16:	441c      	add	r4, r3
 8005b18:	6025      	str	r5, [r4, #0]
 8005b1a:	e004      	b.n	8005b26 <_malloc_r+0x72>
 8005b1c:	6863      	ldr	r3, [r4, #4]
 8005b1e:	42a2      	cmp	r2, r4
 8005b20:	bf0c      	ite	eq
 8005b22:	600b      	streq	r3, [r1, #0]
 8005b24:	6053      	strne	r3, [r2, #4]
 8005b26:	4630      	mov	r0, r6
 8005b28:	f000 f85a 	bl	8005be0 <__malloc_unlock>
 8005b2c:	f104 000b 	add.w	r0, r4, #11
 8005b30:	1d23      	adds	r3, r4, #4
 8005b32:	f020 0007 	bic.w	r0, r0, #7
 8005b36:	1ac2      	subs	r2, r0, r3
 8005b38:	d0cc      	beq.n	8005ad4 <_malloc_r+0x20>
 8005b3a:	1a1b      	subs	r3, r3, r0
 8005b3c:	50a3      	str	r3, [r4, r2]
 8005b3e:	e7c9      	b.n	8005ad4 <_malloc_r+0x20>
 8005b40:	4622      	mov	r2, r4
 8005b42:	6864      	ldr	r4, [r4, #4]
 8005b44:	e7cc      	b.n	8005ae0 <_malloc_r+0x2c>
 8005b46:	1cc4      	adds	r4, r0, #3
 8005b48:	f024 0403 	bic.w	r4, r4, #3
 8005b4c:	42a0      	cmp	r0, r4
 8005b4e:	d0e3      	beq.n	8005b18 <_malloc_r+0x64>
 8005b50:	1a21      	subs	r1, r4, r0
 8005b52:	4630      	mov	r0, r6
 8005b54:	f000 f82e 	bl	8005bb4 <_sbrk_r>
 8005b58:	3001      	adds	r0, #1
 8005b5a:	d1dd      	bne.n	8005b18 <_malloc_r+0x64>
 8005b5c:	e7cf      	b.n	8005afe <_malloc_r+0x4a>
 8005b5e:	bf00      	nop
 8005b60:	20000098 	.word	0x20000098
 8005b64:	2000009c 	.word	0x2000009c

08005b68 <_realloc_r>:
 8005b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6a:	4607      	mov	r7, r0
 8005b6c:	4614      	mov	r4, r2
 8005b6e:	460e      	mov	r6, r1
 8005b70:	b921      	cbnz	r1, 8005b7c <_realloc_r+0x14>
 8005b72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005b76:	4611      	mov	r1, r2
 8005b78:	f7ff bf9c 	b.w	8005ab4 <_malloc_r>
 8005b7c:	b922      	cbnz	r2, 8005b88 <_realloc_r+0x20>
 8005b7e:	f7ff ff49 	bl	8005a14 <_free_r>
 8005b82:	4625      	mov	r5, r4
 8005b84:	4628      	mov	r0, r5
 8005b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b88:	f000 f830 	bl	8005bec <_malloc_usable_size_r>
 8005b8c:	42a0      	cmp	r0, r4
 8005b8e:	d20f      	bcs.n	8005bb0 <_realloc_r+0x48>
 8005b90:	4621      	mov	r1, r4
 8005b92:	4638      	mov	r0, r7
 8005b94:	f7ff ff8e 	bl	8005ab4 <_malloc_r>
 8005b98:	4605      	mov	r5, r0
 8005b9a:	2800      	cmp	r0, #0
 8005b9c:	d0f2      	beq.n	8005b84 <_realloc_r+0x1c>
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	4622      	mov	r2, r4
 8005ba2:	f7ff ff0f 	bl	80059c4 <memcpy>
 8005ba6:	4631      	mov	r1, r6
 8005ba8:	4638      	mov	r0, r7
 8005baa:	f7ff ff33 	bl	8005a14 <_free_r>
 8005bae:	e7e9      	b.n	8005b84 <_realloc_r+0x1c>
 8005bb0:	4635      	mov	r5, r6
 8005bb2:	e7e7      	b.n	8005b84 <_realloc_r+0x1c>

08005bb4 <_sbrk_r>:
 8005bb4:	b538      	push	{r3, r4, r5, lr}
 8005bb6:	4d06      	ldr	r5, [pc, #24]	; (8005bd0 <_sbrk_r+0x1c>)
 8005bb8:	2300      	movs	r3, #0
 8005bba:	4604      	mov	r4, r0
 8005bbc:	4608      	mov	r0, r1
 8005bbe:	602b      	str	r3, [r5, #0]
 8005bc0:	f7fb fd96 	bl	80016f0 <_sbrk>
 8005bc4:	1c43      	adds	r3, r0, #1
 8005bc6:	d102      	bne.n	8005bce <_sbrk_r+0x1a>
 8005bc8:	682b      	ldr	r3, [r5, #0]
 8005bca:	b103      	cbz	r3, 8005bce <_sbrk_r+0x1a>
 8005bcc:	6023      	str	r3, [r4, #0]
 8005bce:	bd38      	pop	{r3, r4, r5, pc}
 8005bd0:	20000258 	.word	0x20000258

08005bd4 <__malloc_lock>:
 8005bd4:	4801      	ldr	r0, [pc, #4]	; (8005bdc <__malloc_lock+0x8>)
 8005bd6:	f000 b811 	b.w	8005bfc <__retarget_lock_acquire_recursive>
 8005bda:	bf00      	nop
 8005bdc:	20000260 	.word	0x20000260

08005be0 <__malloc_unlock>:
 8005be0:	4801      	ldr	r0, [pc, #4]	; (8005be8 <__malloc_unlock+0x8>)
 8005be2:	f000 b80c 	b.w	8005bfe <__retarget_lock_release_recursive>
 8005be6:	bf00      	nop
 8005be8:	20000260 	.word	0x20000260

08005bec <_malloc_usable_size_r>:
 8005bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bf0:	1f18      	subs	r0, r3, #4
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	bfbc      	itt	lt
 8005bf6:	580b      	ldrlt	r3, [r1, r0]
 8005bf8:	18c0      	addlt	r0, r0, r3
 8005bfa:	4770      	bx	lr

08005bfc <__retarget_lock_acquire_recursive>:
 8005bfc:	4770      	bx	lr

08005bfe <__retarget_lock_release_recursive>:
 8005bfe:	4770      	bx	lr

08005c00 <_init>:
 8005c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c02:	bf00      	nop
 8005c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c06:	bc08      	pop	{r3}
 8005c08:	469e      	mov	lr, r3
 8005c0a:	4770      	bx	lr

08005c0c <_fini>:
 8005c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0e:	bf00      	nop
 8005c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c12:	bc08      	pop	{r3}
 8005c14:	469e      	mov	lr, r3
 8005c16:	4770      	bx	lr
