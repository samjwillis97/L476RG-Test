
L476RG-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08005f7c  08005f7c  00015f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006068  08006068  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006068  08006068  00016068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006070  08006070  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006070  08006070  00016070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006074  08006074  00016074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000078  080060f0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  080060f0  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e08  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002971  00000000  00000000  00036eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  00039828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  0003ab88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029897  00000000  00000000  0003bdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001457b  00000000  00000000  00065687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107bd1  00000000  00000000  00079c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001817d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000570c  00000000  00000000  00181828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f64 	.word	0x08005f64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005f64 	.word	0x08005f64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HomeMenu>:
//		****************
//	1   str_1               3
//	2             pu16_1    4
//		****************
//
void HomeMenu() {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	// Every Menu Must Have, once pointers make this a function
	reset_vars();
 800057c:	f000 fb42 	bl	8000c04 <reset_vars>
	new_menu = true;
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <HomeMenu+0x38>)
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]

	// Setting Current State
	pCurrentMenu = HomeMenu;
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <HomeMenu+0x3c>)
 8000588:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <HomeMenu+0x40>)
 800058a:	601a      	str	r2, [r3, #0]
	menu_type = 0;
 800058c:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <HomeMenu+0x44>)
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]

	// Setting Required Pointers
	pu16_1 = &counter;
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HomeMenu+0x48>)
 8000594:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <HomeMenu+0x4c>)
 8000596:	601a      	str	r2, [r3, #0]

	// Functions
	// pfnc_1 always goes to a settings menu
	pfnc_1 = CounterSettings;
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <HomeMenu+0x50>)
 800059a:	4a0c      	ldr	r2, [pc, #48]	; (80005cc <HomeMenu+0x54>)
 800059c:	601a      	str	r2, [r3, #0]

	// Setting Required Strings
	strcpy(str_1, "Counter:");
 800059e:	4a0c      	ldr	r2, [pc, #48]	; (80005d0 <HomeMenu+0x58>)
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <HomeMenu+0x5c>)
 80005a2:	cb03      	ldmia	r3!, {r0, r1}
 80005a4:	6010      	str	r0, [r2, #0]
 80005a6:	6051      	str	r1, [r2, #4]
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	7213      	strb	r3, [r2, #8]
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000095 	.word	0x20000095
 80005b4:	200000c0 	.word	0x200000c0
 80005b8:	08000579 	.word	0x08000579
 80005bc:	200000f9 	.word	0x200000f9
 80005c0:	200000bc 	.word	0x200000bc
 80005c4:	20000098 	.word	0x20000098
 80005c8:	20000110 	.word	0x20000110
 80005cc:	080005d9 	.word	0x080005d9
 80005d0:	20000104 	.word	0x20000104
 80005d4:	08005f7c 	.word	0x08005f7c

080005d8 <CounterSettings>:
//		****************
//	1   str_1      str_3    3
//	2   str_2      str_4    4
//		****************
//
void CounterSettings() {
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	// Every Menu Must Have, once pointers make this a function
	reset_vars();
 80005dc:	f000 fb12 	bl	8000c04 <reset_vars>
	new_menu = true;
 80005e0:	4b14      	ldr	r3, [pc, #80]	; (8000634 <CounterSettings+0x5c>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	701a      	strb	r2, [r3, #0]

	// Setting Current State
	pCurrentMenu = CounterSettings;
 80005e6:	4b14      	ldr	r3, [pc, #80]	; (8000638 <CounterSettings+0x60>)
 80005e8:	4a14      	ldr	r2, [pc, #80]	; (800063c <CounterSettings+0x64>)
 80005ea:	601a      	str	r2, [r3, #0]
	menu_type = 1;
 80005ec:	4b14      	ldr	r3, [pc, #80]	; (8000640 <CounterSettings+0x68>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	701a      	strb	r2, [r3, #0]

	// Setting Required Pointers
	// btn 1 will go back
	// pfnc_2 -> 4 always go to another setting screen
	pfnc_2 = ResetCounter;
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <CounterSettings+0x6c>)
 80005f4:	4a14      	ldr	r2, [pc, #80]	; (8000648 <CounterSettings+0x70>)
 80005f6:	601a      	str	r2, [r3, #0]
	pfnc_4 = ChangeIncrement;
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <CounterSettings+0x74>)
 80005fa:	4a15      	ldr	r2, [pc, #84]	; (8000650 <CounterSettings+0x78>)
 80005fc:	601a      	str	r2, [r3, #0]

	// Setting Required Strings
	strcpy(str_1, "Counter");
 80005fe:	4a15      	ldr	r2, [pc, #84]	; (8000654 <CounterSettings+0x7c>)
 8000600:	4b15      	ldr	r3, [pc, #84]	; (8000658 <CounterSettings+0x80>)
 8000602:	cb03      	ldmia	r3!, {r0, r1}
 8000604:	6010      	str	r0, [r2, #0]
 8000606:	6051      	str	r1, [r2, #4]
	strcpy(str_2, "Reset");
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <CounterSettings+0x84>)
 800060a:	4a15      	ldr	r2, [pc, #84]	; (8000660 <CounterSettings+0x88>)
 800060c:	6810      	ldr	r0, [r2, #0]
 800060e:	6018      	str	r0, [r3, #0]
 8000610:	8892      	ldrh	r2, [r2, #4]
 8000612:	809a      	strh	r2, [r3, #4]
	strcpy(str_3, "Next");
 8000614:	4b13      	ldr	r3, [pc, #76]	; (8000664 <CounterSettings+0x8c>)
 8000616:	4a14      	ldr	r2, [pc, #80]	; (8000668 <CounterSettings+0x90>)
 8000618:	6810      	ldr	r0, [r2, #0]
 800061a:	6018      	str	r0, [r3, #0]
 800061c:	7912      	ldrb	r2, [r2, #4]
 800061e:	711a      	strb	r2, [r3, #4]
	strcpy(str_4, "Modify");
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <CounterSettings+0x94>)
 8000622:	4a13      	ldr	r2, [pc, #76]	; (8000670 <CounterSettings+0x98>)
 8000624:	6810      	ldr	r0, [r2, #0]
 8000626:	6018      	str	r0, [r3, #0]
 8000628:	8891      	ldrh	r1, [r2, #4]
 800062a:	7992      	ldrb	r2, [r2, #6]
 800062c:	8099      	strh	r1, [r3, #4]
 800062e:	719a      	strb	r2, [r3, #6]
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000095 	.word	0x20000095
 8000638:	200000c0 	.word	0x200000c0
 800063c:	080005d9 	.word	0x080005d9
 8000640:	200000f9 	.word	0x200000f9
 8000644:	200000ac 	.word	0x200000ac
 8000648:	08000675 	.word	0x08000675
 800064c:	200000fc 	.word	0x200000fc
 8000650:	080006b1 	.word	0x080006b1
 8000654:	20000104 	.word	0x20000104
 8000658:	08005f88 	.word	0x08005f88
 800065c:	20000114 	.word	0x20000114
 8000660:	08005f90 	.word	0x08005f90
 8000664:	200000f0 	.word	0x200000f0
 8000668:	08005f98 	.word	0x08005f98
 800066c:	20000120 	.word	0x20000120
 8000670:	08005fa0 	.word	0x08005fa0

08000674 <ResetCounter>:
//	2   Yes           No    4
//		****************
//
// 	Both Buttons 3 and 4, return to pfnc_1
//
void ResetCounter() {
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	// Every Menu Must Have, once pointers make this a function
	reset_vars();
 8000678:	f000 fac4 	bl	8000c04 <reset_vars>
	new_menu = true;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <ResetCounter+0x24>)
 800067e:	2201      	movs	r2, #1
 8000680:	701a      	strb	r2, [r3, #0]

	// Setting Current State
	pCurrentMenu = ResetCounter;
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <ResetCounter+0x28>)
 8000684:	4a06      	ldr	r2, [pc, #24]	; (80006a0 <ResetCounter+0x2c>)
 8000686:	601a      	str	r2, [r3, #0]
	menu_type = 2;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <ResetCounter+0x30>)
 800068a:	2202      	movs	r2, #2
 800068c:	701a      	strb	r2, [r3, #0]

	// Setting Required Pointers
	// pfnc_1 is run if yes is pressed
	pfnc_1 = reset_counter;
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <ResetCounter+0x34>)
 8000690:	4a06      	ldr	r2, [pc, #24]	; (80006ac <ResetCounter+0x38>)
 8000692:	601a      	str	r2, [r3, #0]

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000095 	.word	0x20000095
 800069c:	200000c0 	.word	0x200000c0
 80006a0:	08000675 	.word	0x08000675
 80006a4:	200000f9 	.word	0x200000f9
 80006a8:	20000110 	.word	0x20000110
 80006ac:	08000c91 	.word	0x08000c91

080006b0 <ChangeIncrement>:
// 	Button 1 goes back and does not apply change
//	Button 2 confirms change and goes back
//  Button 3 increments by value pu16_2
// 	Button 4 decrements by value pu16_3
//
void ChangeIncrement() {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	// Every Menu Must Have, once pointers make this a function
	reset_vars();
 80006b4:	f000 faa6 	bl	8000c04 <reset_vars>
	new_menu = true;
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <ChangeIncrement+0x30>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	701a      	strb	r2, [r3, #0]

	// Setting Current State
	pCurrentMenu = ChangeIncrement;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <ChangeIncrement+0x34>)
 80006c0:	4a09      	ldr	r2, [pc, #36]	; (80006e8 <ChangeIncrement+0x38>)
 80006c2:	601a      	str	r2, [r3, #0]
	menu_type = 3;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <ChangeIncrement+0x3c>)
 80006c6:	2203      	movs	r2, #3
 80006c8:	701a      	strb	r2, [r3, #0]

	// Setting Required Pointers
	pu16_1 = &increment;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <ChangeIncrement+0x40>)
 80006cc:	4a09      	ldr	r2, [pc, #36]	; (80006f4 <ChangeIncrement+0x44>)
 80006ce:	601a      	str	r2, [r3, #0]

	// Setting Required Variables
	u16_1 = 1;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <ChangeIncrement+0x48>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	801a      	strh	r2, [r3, #0]
	u16_2 = 1;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <ChangeIncrement+0x4c>)
 80006d8:	2201      	movs	r2, #1
 80006da:	801a      	strh	r2, [r3, #0]

}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000095 	.word	0x20000095
 80006e4:	200000c0 	.word	0x200000c0
 80006e8:	080006b1 	.word	0x080006b1
 80006ec:	200000f9 	.word	0x200000f9
 80006f0:	200000bc 	.word	0x200000bc
 80006f4:	20000004 	.word	0x20000004
 80006f8:	20000100 	.word	0x20000100
 80006fc:	200000b0 	.word	0x200000b0

08000700 <Display_init>:

/************************************** Function definitions **************************************/
DisplayProcTypeDef Display_init(
		uint8_t *btn_flag,
		Lcd_HandleTypeDef *lcd)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
	DisplayProcTypeDef display;

	// Pointer to BTN Flag
	display.btn_flag = btn_flag;
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	613b      	str	r3, [r7, #16]

	// Pointer to LCD
	display.lcd = lcd;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	617b      	str	r3, [r7, #20]

	// Initialize as Home Screen
	pHomeMenu = HomeMenu;
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <Display_init+0x38>)
 8000716:	4a09      	ldr	r2, [pc, #36]	; (800073c <Display_init+0x3c>)
 8000718:	601a      	str	r2, [r3, #0]
	HomeMenu();
 800071a:	f7ff ff2d 	bl	8000578 <HomeMenu>

	return display;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	461a      	mov	r2, r3
 8000722:	f107 0310 	add.w	r3, r7, #16
 8000726:	e893 0003 	ldmia.w	r3, {r0, r1}
 800072a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800072e:	68f8      	ldr	r0, [r7, #12]
 8000730:	3718      	adds	r7, #24
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000130 	.word	0x20000130
 800073c:	08000579 	.word	0x08000579

08000740 <Display_update>:

void Display_update(DisplayProcTypeDef *display) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]

	// Button Checker - Make Better, add timeout to return home
	if (*display->btn_flag != 0) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	f000 80d2 	beq.w	80008f8 <Display_update+0x1b8>
		last_btn = HAL_GetTick();
 8000754:	f001 fa80 	bl	8001c58 <HAL_GetTick>
 8000758:	4603      	mov	r3, r0
 800075a:	4a94      	ldr	r2, [pc, #592]	; (80009ac <Display_update+0x26c>)
 800075c:	6013      	str	r3, [r2, #0]
		switch (menu_type) {
 800075e:	4b94      	ldr	r3, [pc, #592]	; (80009b0 <Display_update+0x270>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b03      	cmp	r3, #3
 8000764:	f200 80b8 	bhi.w	80008d8 <Display_update+0x198>
 8000768:	a201      	add	r2, pc, #4	; (adr r2, 8000770 <Display_update+0x30>)
 800076a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800076e:	bf00      	nop
 8000770:	08000781 	.word	0x08000781
 8000774:	0800079f 	.word	0x0800079f
 8000778:	08000809 	.word	0x08000809
 800077c:	0800085f 	.word	0x0800085f
			case 0:
				if (*display->btn_flag == 1) {
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b01      	cmp	r3, #1
 8000788:	f040 80a8 	bne.w	80008dc <Display_update+0x19c>
					history_push(pCurrentMenu);
 800078c:	4b89      	ldr	r3, [pc, #548]	; (80009b4 <Display_update+0x274>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4618      	mov	r0, r3
 8000792:	f000 fac9 	bl	8000d28 <history_push>
					pfnc_1();
 8000796:	4b88      	ldr	r3, [pc, #544]	; (80009b8 <Display_update+0x278>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4798      	blx	r3
				}

				break;
 800079c:	e09e      	b.n	80008dc <Display_update+0x19c>
			case 1:
				if (*display->btn_flag == 1) {
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d107      	bne.n	80007b8 <Display_update+0x78>
					GoTo = history_pop();
 80007a8:	f000 fa9a 	bl	8000ce0 <history_pop>
 80007ac:	4603      	mov	r3, r0
 80007ae:	4a83      	ldr	r2, [pc, #524]	; (80009bc <Display_update+0x27c>)
 80007b0:	6013      	str	r3, [r2, #0]
					GoTo();
 80007b2:	4b82      	ldr	r3, [pc, #520]	; (80009bc <Display_update+0x27c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4798      	blx	r3

				}
				if (*display->btn_flag == 2) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b02      	cmp	r3, #2
 80007c0:	d107      	bne.n	80007d2 <Display_update+0x92>
					history_push(pCurrentMenu);
 80007c2:	4b7c      	ldr	r3, [pc, #496]	; (80009b4 <Display_update+0x274>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 faae 	bl	8000d28 <history_push>
					pfnc_2();
 80007cc:	4b7c      	ldr	r3, [pc, #496]	; (80009c0 <Display_update+0x280>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4798      	blx	r3
				}

				if (*display->btn_flag == 3) {
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b03      	cmp	r3, #3
 80007da:	d107      	bne.n	80007ec <Display_update+0xac>
					history_push(pCurrentMenu);
 80007dc:	4b75      	ldr	r3, [pc, #468]	; (80009b4 <Display_update+0x274>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 faa1 	bl	8000d28 <history_push>
					pfnc_3();
 80007e6:	4b77      	ldr	r3, [pc, #476]	; (80009c4 <Display_update+0x284>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4798      	blx	r3
				}

				if (*display->btn_flag == 4) {
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	d174      	bne.n	80008e0 <Display_update+0x1a0>
					history_push(pCurrentMenu);
 80007f6:	4b6f      	ldr	r3, [pc, #444]	; (80009b4 <Display_update+0x274>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 fa94 	bl	8000d28 <history_push>
					pfnc_4();
 8000800:	4b71      	ldr	r3, [pc, #452]	; (80009c8 <Display_update+0x288>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4798      	blx	r3
				}

				break;
 8000806:	e06b      	b.n	80008e0 <Display_update+0x1a0>
			case 2:
				// Back, Do Nothing
				if (*display->btn_flag == 1) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d107      	bne.n	8000822 <Display_update+0xe2>
					GoTo = history_pop();
 8000812:	f000 fa65 	bl	8000ce0 <history_pop>
 8000816:	4603      	mov	r3, r0
 8000818:	4a68      	ldr	r2, [pc, #416]	; (80009bc <Display_update+0x27c>)
 800081a:	6013      	str	r3, [r2, #0]
					GoTo();
 800081c:	4b67      	ldr	r3, [pc, #412]	; (80009bc <Display_update+0x27c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4798      	blx	r3
				}

				// Yes
				if (*display->btn_flag == 2) {
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b02      	cmp	r3, #2
 800082a:	d10a      	bne.n	8000842 <Display_update+0x102>
					pfnc_1(); // Do This Better, Callback? Sub Routine or something?
 800082c:	4b62      	ldr	r3, [pc, #392]	; (80009b8 <Display_update+0x278>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4798      	blx	r3
					GoTo = history_pop();
 8000832:	f000 fa55 	bl	8000ce0 <history_pop>
 8000836:	4603      	mov	r3, r0
 8000838:	4a60      	ldr	r2, [pc, #384]	; (80009bc <Display_update+0x27c>)
 800083a:	6013      	str	r3, [r2, #0]
					GoTo();
 800083c:	4b5f      	ldr	r3, [pc, #380]	; (80009bc <Display_update+0x27c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4798      	blx	r3
				}

				// No
				if (*display->btn_flag == 4) {
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b04      	cmp	r3, #4
 800084a:	d14b      	bne.n	80008e4 <Display_update+0x1a4>
					GoTo = history_pop();
 800084c:	f000 fa48 	bl	8000ce0 <history_pop>
 8000850:	4603      	mov	r3, r0
 8000852:	4a5a      	ldr	r2, [pc, #360]	; (80009bc <Display_update+0x27c>)
 8000854:	6013      	str	r3, [r2, #0]
					GoTo();
 8000856:	4b59      	ldr	r3, [pc, #356]	; (80009bc <Display_update+0x27c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4798      	blx	r3
				}

				break;
 800085c:	e042      	b.n	80008e4 <Display_update+0x1a4>
			case 3:
				// Back, Do Nothing
				if (*display->btn_flag == 1) {
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d107      	bne.n	8000878 <Display_update+0x138>
					GoTo = history_pop();
 8000868:	f000 fa3a 	bl	8000ce0 <history_pop>
 800086c:	4603      	mov	r3, r0
 800086e:	4a53      	ldr	r2, [pc, #332]	; (80009bc <Display_update+0x27c>)
 8000870:	6013      	str	r3, [r2, #0]
					GoTo();
 8000872:	4b52      	ldr	r3, [pc, #328]	; (80009bc <Display_update+0x27c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4798      	blx	r3
				}

				// OK, Confirm Changes
				if (*display->btn_flag == 2) {
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b02      	cmp	r3, #2
 8000880:	d10c      	bne.n	800089c <Display_update+0x15c>
					*pu16_1 = u16_1_temp;
 8000882:	4b52      	ldr	r3, [pc, #328]	; (80009cc <Display_update+0x28c>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a52      	ldr	r2, [pc, #328]	; (80009d0 <Display_update+0x290>)
 8000888:	8812      	ldrh	r2, [r2, #0]
 800088a:	801a      	strh	r2, [r3, #0]

					GoTo = history_pop();
 800088c:	f000 fa28 	bl	8000ce0 <history_pop>
 8000890:	4603      	mov	r3, r0
 8000892:	4a4a      	ldr	r2, [pc, #296]	; (80009bc <Display_update+0x27c>)
 8000894:	6013      	str	r3, [r2, #0]
					GoTo();
 8000896:	4b49      	ldr	r3, [pc, #292]	; (80009bc <Display_update+0x27c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4798      	blx	r3
				}

				// Increment by U16_1
				if (*display->btn_flag == 3) {
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b03      	cmp	r3, #3
 80008a4:	d10a      	bne.n	80008bc <Display_update+0x17c>
					u16_1_temp += u16_1;
 80008a6:	4b4a      	ldr	r3, [pc, #296]	; (80009d0 <Display_update+0x290>)
 80008a8:	881a      	ldrh	r2, [r3, #0]
 80008aa:	4b4a      	ldr	r3, [pc, #296]	; (80009d4 <Display_update+0x294>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	4413      	add	r3, r2
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	4b47      	ldr	r3, [pc, #284]	; (80009d0 <Display_update+0x290>)
 80008b4:	801a      	strh	r2, [r3, #0]
					update_display = true;
 80008b6:	4b48      	ldr	r3, [pc, #288]	; (80009d8 <Display_update+0x298>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	701a      	strb	r2, [r3, #0]
				}

				// Increment by U16_2
				if (*display->btn_flag == 4) {
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b04      	cmp	r3, #4
 80008c4:	d110      	bne.n	80008e8 <Display_update+0x1a8>
					u16_1_temp -= u16_2;
 80008c6:	4b42      	ldr	r3, [pc, #264]	; (80009d0 <Display_update+0x290>)
 80008c8:	881a      	ldrh	r2, [r3, #0]
 80008ca:	4b44      	ldr	r3, [pc, #272]	; (80009dc <Display_update+0x29c>)
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	1ad3      	subs	r3, r2, r3
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	4b3f      	ldr	r3, [pc, #252]	; (80009d0 <Display_update+0x290>)
 80008d4:	801a      	strh	r2, [r3, #0]
				}
				break;
 80008d6:	e007      	b.n	80008e8 <Display_update+0x1a8>
			default:
				break;
 80008d8:	bf00      	nop
 80008da:	e006      	b.n	80008ea <Display_update+0x1aa>
				break;
 80008dc:	bf00      	nop
 80008de:	e004      	b.n	80008ea <Display_update+0x1aa>
				break;
 80008e0:	bf00      	nop
 80008e2:	e002      	b.n	80008ea <Display_update+0x1aa>
				break;
 80008e4:	bf00      	nop
 80008e6:	e000      	b.n	80008ea <Display_update+0x1aa>
				break;
 80008e8:	bf00      	nop
		}
		update_display = true;
 80008ea:	4b3b      	ldr	r3, [pc, #236]	; (80009d8 <Display_update+0x298>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	701a      	strb	r2, [r3, #0]
		*display->btn_flag = 0;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
	}


	// Update Display (New Menu), Do entry Actions?
	if (new_menu == true){
 80008f8:	4b39      	ldr	r3, [pc, #228]	; (80009e0 <Display_update+0x2a0>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	f040 80df 	bne.w	8000ac0 <Display_update+0x380>
		// Update Display
		Lcd_clear(display->lcd);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 fbf0 	bl	80010ec <Lcd_clear>
		switch (menu_type) {
 800090c:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <Display_update+0x270>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b03      	cmp	r3, #3
 8000912:	f200 80d1 	bhi.w	8000ab8 <Display_update+0x378>
 8000916:	a201      	add	r2, pc, #4	; (adr r2, 800091c <Display_update+0x1dc>)
 8000918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800091c:	0800092d 	.word	0x0800092d
 8000920:	0800095b 	.word	0x0800095b
 8000924:	080009f5 	.word	0x080009f5
 8000928:	08000a2d 	.word	0x08000a2d
			case 0:
				// On Entry Actions

				// Writing Initial Display for Testing
				// Top Left
				Lcd_cursor(display->lcd, 0, 0);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	2200      	movs	r2, #0
 8000932:	2100      	movs	r1, #0
 8000934:	4618      	mov	r0, r3
 8000936:	f000 fbbf 	bl	80010b8 <Lcd_cursor>
				Lcd_string(display->lcd, str_1);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	4929      	ldr	r1, [pc, #164]	; (80009e4 <Display_update+0x2a4>)
 8000940:	4618      	mov	r0, r3
 8000942:	f000 fb53 	bl	8000fec <Lcd_string>
				// Lower Right
				Lcd_u16_right_aligned(display->lcd, *pu16_1, 1, 15);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6858      	ldr	r0, [r3, #4]
 800094a:	4b20      	ldr	r3, [pc, #128]	; (80009cc <Display_update+0x28c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	8819      	ldrh	r1, [r3, #0]
 8000950:	230f      	movs	r3, #15
 8000952:	2201      	movs	r2, #1
 8000954:	f000 faee 	bl	8000f34 <Lcd_u16_right_aligned>

				break;
 8000958:	e0af      	b.n	8000aba <Display_update+0x37a>
			case 1:
				// On Entry Actions

				// Write Entry Display
				// Top Left
				Lcd_cursor(display->lcd, 0, 0);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f000 fba8 	bl	80010b8 <Lcd_cursor>
				Lcd_string(display->lcd, str_1);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	491d      	ldr	r1, [pc, #116]	; (80009e4 <Display_update+0x2a4>)
 800096e:	4618      	mov	r0, r3
 8000970:	f000 fb3c 	bl	8000fec <Lcd_string>
				// Lower Left
				Lcd_cursor(display->lcd, 1, 0);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	2200      	movs	r2, #0
 800097a:	2101      	movs	r1, #1
 800097c:	4618      	mov	r0, r3
 800097e:	f000 fb9b 	bl	80010b8 <Lcd_cursor>
				Lcd_string(display->lcd, str_2);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	4918      	ldr	r1, [pc, #96]	; (80009e8 <Display_update+0x2a8>)
 8000988:	4618      	mov	r0, r3
 800098a:	f000 fb2f 	bl	8000fec <Lcd_string>
				// Top Right
				Lcd_string_right_aligned(display->lcd, str_3, 0, 15);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6858      	ldr	r0, [r3, #4]
 8000992:	230f      	movs	r3, #15
 8000994:	2200      	movs	r2, #0
 8000996:	4915      	ldr	r1, [pc, #84]	; (80009ec <Display_update+0x2ac>)
 8000998:	f000 fb6a 	bl	8001070 <Lcd_string_right_aligned>
				// Lower Right
				Lcd_string_right_aligned(display->lcd, str_4, 1, 15);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6858      	ldr	r0, [r3, #4]
 80009a0:	230f      	movs	r3, #15
 80009a2:	2201      	movs	r2, #1
 80009a4:	4912      	ldr	r1, [pc, #72]	; (80009f0 <Display_update+0x2b0>)
 80009a6:	f000 fb63 	bl	8001070 <Lcd_string_right_aligned>

				break;
 80009aa:	e086      	b.n	8000aba <Display_update+0x37a>
 80009ac:	200000a8 	.word	0x200000a8
 80009b0:	200000f9 	.word	0x200000f9
 80009b4:	200000c0 	.word	0x200000c0
 80009b8:	20000110 	.word	0x20000110
 80009bc:	200000b8 	.word	0x200000b8
 80009c0:	200000ac 	.word	0x200000ac
 80009c4:	2000012c 	.word	0x2000012c
 80009c8:	200000fc 	.word	0x200000fc
 80009cc:	200000bc 	.word	0x200000bc
 80009d0:	200000c6 	.word	0x200000c6
 80009d4:	20000100 	.word	0x20000100
 80009d8:	20000094 	.word	0x20000094
 80009dc:	200000b0 	.word	0x200000b0
 80009e0:	20000095 	.word	0x20000095
 80009e4:	20000104 	.word	0x20000104
 80009e8:	20000114 	.word	0x20000114
 80009ec:	200000f0 	.word	0x200000f0
 80009f0:	20000120 	.word	0x20000120
			case 2:
				// On Entry Actions

				// Write Entry Display
				// Centered
				Lcd_string_centered(display->lcd, "Are You Sure?", 0);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	2200      	movs	r2, #0
 80009fa:	4956      	ldr	r1, [pc, #344]	; (8000b54 <Display_update+0x414>)
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 fb14 	bl	800102a <Lcd_string_centered>
				// Lower Left
				Lcd_cursor(display->lcd, 1, 0);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	2101      	movs	r1, #1
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 fb54 	bl	80010b8 <Lcd_cursor>
				Lcd_string(display->lcd, "Yes");
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	4950      	ldr	r1, [pc, #320]	; (8000b58 <Display_update+0x418>)
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 fae8 	bl	8000fec <Lcd_string>
				// Lower Right
				Lcd_string_right_aligned(display->lcd, "No", 1, 15);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6858      	ldr	r0, [r3, #4]
 8000a20:	230f      	movs	r3, #15
 8000a22:	2201      	movs	r2, #1
 8000a24:	494d      	ldr	r1, [pc, #308]	; (8000b5c <Display_update+0x41c>)
 8000a26:	f000 fb23 	bl	8001070 <Lcd_string_right_aligned>

				break;
 8000a2a:	e046      	b.n	8000aba <Display_update+0x37a>
			case 3:
				// On Entry Actions
				u16_1_temp = *pu16_1;
 8000a2c:	4b4c      	ldr	r3, [pc, #304]	; (8000b60 <Display_update+0x420>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	881a      	ldrh	r2, [r3, #0]
 8000a32:	4b4c      	ldr	r3, [pc, #304]	; (8000b64 <Display_update+0x424>)
 8000a34:	801a      	strh	r2, [r3, #0]

				// Write Entry Display
				// Top Left
				Lcd_u16_left_aligned(display->lcd, *pu16_1, 0, 0);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6858      	ldr	r0, [r3, #4]
 8000a3a:	4b49      	ldr	r3, [pc, #292]	; (8000b60 <Display_update+0x420>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	8819      	ldrh	r1, [r3, #0]
 8000a40:	2300      	movs	r3, #0
 8000a42:	2200      	movs	r2, #0
 8000a44:	f000 fa28 	bl	8000e98 <Lcd_u16_left_aligned>
				// Lower Left
				Lcd_cursor(display->lcd, 1, 0);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2101      	movs	r1, #1
 8000a50:	4618      	mov	r0, r3
 8000a52:	f000 fb31 	bl	80010b8 <Lcd_cursor>
				Lcd_string(display->lcd, "Ok?");
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	4943      	ldr	r1, [pc, #268]	; (8000b68 <Display_update+0x428>)
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 fac5 	bl	8000fec <Lcd_string>
				// Top Right
				Lcd_u16_right_aligned(display->lcd, u16_1, 0, 14);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6858      	ldr	r0, [r3, #4]
 8000a66:	4b41      	ldr	r3, [pc, #260]	; (8000b6c <Display_update+0x42c>)
 8000a68:	8819      	ldrh	r1, [r3, #0]
 8000a6a:	230e      	movs	r3, #14
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f000 fa61 	bl	8000f34 <Lcd_u16_right_aligned>
				Lcd_cursor(display->lcd, 0, 15);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	220f      	movs	r2, #15
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 fb1c 	bl	80010b8 <Lcd_cursor>
				Lcd_string(display->lcd, "+");
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	493a      	ldr	r1, [pc, #232]	; (8000b70 <Display_update+0x430>)
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 fab0 	bl	8000fec <Lcd_string>
				// Lower Right
				Lcd_u16_right_aligned(display->lcd, u16_2, 1, 14);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6858      	ldr	r0, [r3, #4]
 8000a90:	4b38      	ldr	r3, [pc, #224]	; (8000b74 <Display_update+0x434>)
 8000a92:	8819      	ldrh	r1, [r3, #0]
 8000a94:	230e      	movs	r3, #14
 8000a96:	2201      	movs	r2, #1
 8000a98:	f000 fa4c 	bl	8000f34 <Lcd_u16_right_aligned>
				Lcd_cursor(display->lcd, 1, 15);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	220f      	movs	r2, #15
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 fb07 	bl	80010b8 <Lcd_cursor>
				Lcd_string(display->lcd, "-");
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	4932      	ldr	r1, [pc, #200]	; (8000b78 <Display_update+0x438>)
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f000 fa9b 	bl	8000fec <Lcd_string>

				break;
 8000ab6:	e000      	b.n	8000aba <Display_update+0x37a>
			default:
				// do nothing
				break;
 8000ab8:	bf00      	nop
		}
		// set new_menu false once handled
		new_menu = false;
 8000aba:	4b30      	ldr	r3, [pc, #192]	; (8000b7c <Display_update+0x43c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]
	}


	if (has_var_changed() == true || update_display == true) {
 8000ac0:	f000 f874 	bl	8000bac <has_var_changed>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d003      	beq.n	8000ad2 <Display_update+0x392>
 8000aca:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <Display_update+0x440>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d11c      	bne.n	8000b0c <Display_update+0x3cc>
		// Update Display
		update_display = false;
 8000ad2:	4b2b      	ldr	r3, [pc, #172]	; (8000b80 <Display_update+0x440>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	701a      	strb	r2, [r3, #0]

		switch (menu_type) {
 8000ad8:	4b2a      	ldr	r3, [pc, #168]	; (8000b84 <Display_update+0x444>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d002      	beq.n	8000ae6 <Display_update+0x3a6>
 8000ae0:	2b03      	cmp	r3, #3
 8000ae2:	d00a      	beq.n	8000afa <Display_update+0x3ba>

				break;
			default:
				// do nothing

				break;
 8000ae4:	e013      	b.n	8000b0e <Display_update+0x3ce>
				Lcd_u16_right_aligned(display->lcd, *pu16_1, 1, 15);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6858      	ldr	r0, [r3, #4]
 8000aea:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <Display_update+0x420>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	8819      	ldrh	r1, [r3, #0]
 8000af0:	230f      	movs	r3, #15
 8000af2:	2201      	movs	r2, #1
 8000af4:	f000 fa1e 	bl	8000f34 <Lcd_u16_right_aligned>
				break;
 8000af8:	e009      	b.n	8000b0e <Display_update+0x3ce>
				Lcd_u16_left_aligned(display->lcd, u16_1_temp, 0, 0);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6858      	ldr	r0, [r3, #4]
 8000afe:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <Display_update+0x424>)
 8000b00:	8819      	ldrh	r1, [r3, #0]
 8000b02:	2300      	movs	r3, #0
 8000b04:	2200      	movs	r2, #0
 8000b06:	f000 f9c7 	bl	8000e98 <Lcd_u16_left_aligned>
				break;
 8000b0a:	e000      	b.n	8000b0e <Display_update+0x3ce>
		}
	}
 8000b0c:	bf00      	nop

	if (pCurrentMenu != pHomeMenu) {
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <Display_update+0x448>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <Display_update+0x44c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d018      	beq.n	8000b4c <Display_update+0x40c>
		if ((no_btn_timeout) > 0 && ((HAL_GetTick() - last_btn) > (no_btn_timeout * 1000))) {
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <Display_update+0x450>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d014      	beq.n	8000b4c <Display_update+0x40c>
 8000b22:	f001 f899 	bl	8001c58 <HAL_GetTick>
 8000b26:	4602      	mov	r2, r0
 8000b28:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <Display_update+0x454>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	4a18      	ldr	r2, [pc, #96]	; (8000b90 <Display_update+0x450>)
 8000b30:	7812      	ldrb	r2, [r2, #0]
 8000b32:	4611      	mov	r1, r2
 8000b34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b38:	fb02 f201 	mul.w	r2, r2, r1
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d905      	bls.n	8000b4c <Display_update+0x40c>
			// ONLY IF NOT ON HOME SCREEN
			history_top = -1; 	// essentially clears history
 8000b40:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <Display_update+0x458>)
 8000b42:	22ff      	movs	r2, #255	; 0xff
 8000b44:	701a      	strb	r2, [r3, #0]
			pHomeMenu();
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <Display_update+0x44c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4798      	blx	r3
		}

	}

}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	08005fa8 	.word	0x08005fa8
 8000b58:	08005fb8 	.word	0x08005fb8
 8000b5c:	08005fbc 	.word	0x08005fbc
 8000b60:	200000bc 	.word	0x200000bc
 8000b64:	200000c6 	.word	0x200000c6
 8000b68:	08005fc0 	.word	0x08005fc0
 8000b6c:	20000100 	.word	0x20000100
 8000b70:	08005fc4 	.word	0x08005fc4
 8000b74:	200000b0 	.word	0x200000b0
 8000b78:	08005fc8 	.word	0x08005fc8
 8000b7c:	20000095 	.word	0x20000095
 8000b80:	20000094 	.word	0x20000094
 8000b84:	200000f9 	.word	0x200000f9
 8000b88:	200000c0 	.word	0x200000c0
 8000b8c:	20000130 	.word	0x20000130
 8000b90:	20000000 	.word	0x20000000
 8000b94:	200000a8 	.word	0x200000a8
 8000b98:	20000002 	.word	0x20000002

08000b9c <doNothing>:
// Check Buttons and Act
void checkButtons() {

}

void doNothing() {
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
	;
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <has_var_changed>:

// Pointer Specific Functions

bool has_var_changed() {
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
	if (*pu8_1 != u8_1_prev) {
 8000bb0:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <has_var_changed+0x48>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	781a      	ldrb	r2, [r3, #0]
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <has_var_changed+0x4c>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d006      	beq.n	8000bcc <has_var_changed+0x20>
		u8_1_prev = *pu8_1;
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <has_var_changed+0x48>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	781a      	ldrb	r2, [r3, #0]
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <has_var_changed+0x4c>)
 8000bc6:	701a      	strb	r2, [r3, #0]
		return true;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e00e      	b.n	8000bea <has_var_changed+0x3e>
	}
	if (*pu16_1 != u16_1_prev) {
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <has_var_changed+0x50>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	881a      	ldrh	r2, [r3, #0]
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <has_var_changed+0x54>)
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d006      	beq.n	8000be8 <has_var_changed+0x3c>
		u16_1_prev = *pu16_1;
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <has_var_changed+0x50>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	881a      	ldrh	r2, [r3, #0]
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <has_var_changed+0x54>)
 8000be2:	801a      	strh	r2, [r3, #0]
		return true;
 8000be4:	2301      	movs	r3, #1
 8000be6:	e000      	b.n	8000bea <has_var_changed+0x3e>
	}
	return false;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	200000b4 	.word	0x200000b4
 8000bf8:	20000102 	.word	0x20000102
 8000bfc:	200000bc 	.word	0x200000bc
 8000c00:	200000c4 	.word	0x200000c4

08000c04 <reset_vars>:

void reset_vars() {
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
	// Function Pointers
	pfnc_1 = doNothing;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <reset_vars+0x58>)
 8000c0a:	4a15      	ldr	r2, [pc, #84]	; (8000c60 <reset_vars+0x5c>)
 8000c0c:	601a      	str	r2, [r3, #0]
	pfnc_2 = doNothing;
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <reset_vars+0x60>)
 8000c10:	4a13      	ldr	r2, [pc, #76]	; (8000c60 <reset_vars+0x5c>)
 8000c12:	601a      	str	r2, [r3, #0]
	pfnc_3 = doNothing;
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <reset_vars+0x64>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <reset_vars+0x5c>)
 8000c18:	601a      	str	r2, [r3, #0]
	pfnc_4 = doNothing;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <reset_vars+0x68>)
 8000c1c:	4a10      	ldr	r2, [pc, #64]	; (8000c60 <reset_vars+0x5c>)
 8000c1e:	601a      	str	r2, [r3, #0]

	// U8 Pointers
	pu8_1 = NULL;
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <reset_vars+0x6c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]

	// U16 Pointers
	pu16_1 = NULL;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <reset_vars+0x70>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]

	// U16 Variables
	u16_1 = 0;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <reset_vars+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	801a      	strh	r2, [r3, #0]
	u16_2 = 0;
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <reset_vars+0x78>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	801a      	strh	r2, [r3, #0]

	// Strings
	strcpy(str_1, "");
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <reset_vars+0x7c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
	strcpy(str_2, "");
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <reset_vars+0x80>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
	strcpy(str_3, "");
 8000c44:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <reset_vars+0x84>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
	strcpy(str_4, "");
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <reset_vars+0x88>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	20000110 	.word	0x20000110
 8000c60:	08000b9d 	.word	0x08000b9d
 8000c64:	200000ac 	.word	0x200000ac
 8000c68:	2000012c 	.word	0x2000012c
 8000c6c:	200000fc 	.word	0x200000fc
 8000c70:	200000b4 	.word	0x200000b4
 8000c74:	200000bc 	.word	0x200000bc
 8000c78:	20000100 	.word	0x20000100
 8000c7c:	200000b0 	.word	0x200000b0
 8000c80:	20000104 	.word	0x20000104
 8000c84:	20000114 	.word	0x20000114
 8000c88:	200000f0 	.word	0x200000f0
 8000c8c:	20000120 	.word	0x20000120

08000c90 <reset_counter>:

// Variable Specific Functions

void reset_counter () {
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
	counter = 0;
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <reset_counter+0x14>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	801a      	strh	r2, [r3, #0]
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	20000098 	.word	0x20000098

08000ca8 <history_isempty>:

// HISTORY STACK IMPLEMENTATION
// https://www.tutorialspoint.com/data_structures_algorithms/stack_program_in_c.htm

bool history_isempty() {
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
	if (history_top == -1) {
		return true;
	} else {
		return false;
 8000cac:	2300      	movs	r3, #0
	}
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <history_isfull>:


bool history_isfull() {
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
	if (history_top == HISTORY_MAX_SIZE) {
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <history_isfull+0x20>)
 8000cbe:	781a      	ldrb	r2, [r3, #0]
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <history_isfull+0x24>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d101      	bne.n	8000ccc <history_isfull+0x14>
		return true;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e000      	b.n	8000cce <history_isfull+0x16>
	} else {
		return false;
 8000ccc:	2300      	movs	r3, #0
	}
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	20000002 	.word	0x20000002
 8000cdc:	20000001 	.word	0x20000001

08000ce0 <history_pop>:
pfn history_peek() {
   return history[history_top];
}


pfn history_pop() {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
	pfn data;

	if (history_isempty() == false) {
 8000ce6:	f7ff ffdf 	bl	8000ca8 <history_isempty>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d10e      	bne.n	8000d0e <history_pop+0x2e>
		data = history[history_top];
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <history_pop+0x3c>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <history_pop+0x40>)
 8000cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfc:	607b      	str	r3, [r7, #4]
		history_top = history_top - 1;
 8000cfe:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <history_pop+0x3c>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <history_pop+0x3c>)
 8000d08:	701a      	strb	r2, [r3, #0]
		return data;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	e001      	b.n	8000d12 <history_pop+0x32>
	}
	return pHomeMenu;
 8000d0e:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <history_pop+0x44>)
 8000d10:	681b      	ldr	r3, [r3, #0]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000002 	.word	0x20000002
 8000d20:	200000c8 	.word	0x200000c8
 8000d24:	20000130 	.word	0x20000130

08000d28 <history_push>:


void history_push(pfn fnc) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	if (history_isfull() == false) {
 8000d30:	f7ff ffc2 	bl	8000cb8 <history_isfull>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10c      	bne.n	8000d54 <history_push+0x2c>
		history_top = history_top + 1;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <history_push+0x34>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <history_push+0x34>)
 8000d44:	701a      	strb	r2, [r3, #0]
		history[history_top] = fnc;
 8000d46:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <history_push+0x34>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <history_push+0x38>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000002 	.word	0x20000002
 8000d60:	200000c8 	.word	0x200000c8

08000d64 <Lcd_create>:
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin,
		Lcd_ModeTypeDef mode,
		bool cursor,
		bool blink)
{
 8000d64:	b5b0      	push	{r4, r5, r7, lr}
 8000d66:	b08c      	sub	sp, #48	; 0x30
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	603b      	str	r3, [r7, #0]

	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000d72:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000d76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	lcd.en_pin = en_pin;
 8000d7a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000d7e:	853b      	strh	r3, [r7, #40]	; 0x28
	lcd.en_port = en_port;
 8000d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24

	lcd.rs_pin = rs_pin;
 8000d84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000d88:	843b      	strh	r3, [r7, #32]
	lcd.rs_port = rs_port;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	61fb      	str	r3, [r7, #28]

	lcd.data_pin = pin;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	61bb      	str	r3, [r7, #24]
	lcd.data_port = port;
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	617b      	str	r3, [r7, #20]

	lcd.cursor = cursor;
 8000d96:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	lcd.blink = blink;
 8000d9e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000da2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	Lcd_init(&lcd);		// Some sort of pointer to the lcd type def just init
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 f80e 	bl	8000dcc <Lcd_init>

	return lcd;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	461d      	mov	r5, r3
 8000db4:	f107 0414 	add.w	r4, r7, #20
 8000db8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dbc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000dc0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000dc4:	68f8      	ldr	r0, [r7, #12]
 8000dc6:	3730      	adds	r7, #48	; 0x30
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bdb0      	pop	{r4, r5, r7, pc}

08000dcc <Lcd_init>:

/**
 * Init 16 x 2 LCD without cursor
 */
void Lcd_init(Lcd_HandleTypeDef *lcd) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	if (lcd->mode == LCD_4_BIT_MODE)	// gets mode from the struct that lcd points to
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	7d9b      	ldrb	r3, [r3, #22]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d121      	bne.n	8000e20 <Lcd_init+0x54>
	{
		HAL_Delay(50);
 8000ddc:	2032      	movs	r0, #50	; 0x32
 8000dde:	f000 ff47 	bl	8001c70 <HAL_Delay>
		lcd_write_nib_command(lcd, 0x30);		// Func Set
 8000de2:	2130      	movs	r1, #48	; 0x30
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f000 fa29 	bl	800123c <lcd_write_nib_command>
		HAL_Delay(5);
 8000dea:	2005      	movs	r0, #5
 8000dec:	f000 ff40 	bl	8001c70 <HAL_Delay>
		lcd_write_nib_command(lcd, 0x30);		// Func Set
 8000df0:	2130      	movs	r1, #48	; 0x30
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f000 fa22 	bl	800123c <lcd_write_nib_command>
		HAL_Delay(1);
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f000 ff39 	bl	8001c70 <HAL_Delay>
		lcd_write_nib_command(lcd, 0x30);		// Func Set
 8000dfe:	2130      	movs	r1, #48	; 0x30
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f000 fa1b 	bl	800123c <lcd_write_nib_command>

		lcd_write_nib_command(lcd, FUNCTION_SET);			// Func Set 4-Bit
 8000e06:	2120      	movs	r1, #32
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f000 fa17 	bl	800123c <lcd_write_nib_command>
		lcd_write_command(lcd, FUNCTION_SET | OPT_N);	// Func Set 4-Bit Mode, 2 Lines
 8000e0e:	2128      	movs	r1, #40	; 0x28
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f000 f977 	bl	8001104 <lcd_write_command>

		lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL);	// Display OFF
 8000e16:	2108      	movs	r1, #8
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f000 f973 	bl	8001104 <lcd_write_command>
 8000e1e:	e003      	b.n	8000e28 <Lcd_init+0x5c>
	}
	else {
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N); // ?
 8000e20:	2138      	movs	r1, #56	; 0x38
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f000 f96e 	bl	8001104 <lcd_write_command>
	}

	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear Display
 8000e28:	2101      	movs	r1, #1
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f000 f96a 	bl	8001104 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment Cursor?
 8000e30:	2106      	movs	r1, #6
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f000 f966 	bl	8001104 <lcd_write_command>

	// Checking for Cursor and Blink, could change and use a variable
	if ((lcd->blink == true) && (lcd->cursor == true)) {
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	7e1b      	ldrb	r3, [r3, #24]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d108      	bne.n	8000e52 <Lcd_init+0x86>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	7ddb      	ldrb	r3, [r3, #23]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d104      	bne.n	8000e52 <Lcd_init+0x86>
		lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_C | OPT_B);
 8000e48:	210f      	movs	r1, #15
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f000 f95a 	bl	8001104 <lcd_write_command>
 8000e50:	e01e      	b.n	8000e90 <Lcd_init+0xc4>
	}
	else if ((lcd->blink == true) && (lcd->cursor == false)) {
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	7e1b      	ldrb	r3, [r3, #24]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d108      	bne.n	8000e6c <Lcd_init+0xa0>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	7ddb      	ldrb	r3, [r3, #23]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d104      	bne.n	8000e6c <Lcd_init+0xa0>
		lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_B);
 8000e62:	210d      	movs	r1, #13
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f000 f94d 	bl	8001104 <lcd_write_command>
 8000e6a:	e011      	b.n	8000e90 <Lcd_init+0xc4>
	}
	else if ((lcd->blink == false) && (lcd->cursor == true)) {
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	7e1b      	ldrb	r3, [r3, #24]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d108      	bne.n	8000e86 <Lcd_init+0xba>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	7ddb      	ldrb	r3, [r3, #23]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d104      	bne.n	8000e86 <Lcd_init+0xba>
		lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_C);
 8000e7c:	210e      	movs	r1, #14
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f000 f940 	bl	8001104 <lcd_write_command>
 8000e84:	e004      	b.n	8000e90 <Lcd_init+0xc4>
	}
	else {
		lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);
 8000e86:	210c      	movs	r1, #12
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f000 f93b 	bl	8001104 <lcd_write_command>
	}
}
 8000e8e:	bf00      	nop
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <Lcd_u16_left_aligned>:
	Lcd_cursor(lcd, row, (col - 2));
	Lcd_string(lcd, buffer);
}


void Lcd_u16_left_aligned(Lcd_HandleTypeDef *lcd, uint16_t number, uint8_t row, uint8_t col) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	807b      	strh	r3, [r7, #2]
 8000eaa:	460b      	mov	r3, r1
 8000eac:	707b      	strb	r3, [r7, #1]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	703b      	strb	r3, [r7, #0]
	char buffer[6];
	char input[7];
	uint8_t i;

	uint8_t len = snprintf(NULL, 0, "%d", number);
 8000eb2:	887b      	ldrh	r3, [r7, #2]
 8000eb4:	4a1e      	ldr	r2, [pc, #120]	; (8000f30 <Lcd_u16_left_aligned+0x98>)
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f004 fbf1 	bl	80056a0 <sniprintf>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	75bb      	strb	r3, [r7, #22]

	input[0] = 37;	// percentage
 8000ec2:	2325      	movs	r3, #37	; 0x25
 8000ec4:	723b      	strb	r3, [r7, #8]
	input[1] = 100;	// d
 8000ec6:	2364      	movs	r3, #100	; 0x64
 8000ec8:	727b      	strb	r3, [r7, #9]

	for (i = 0; i < (7 - len); i++) {
 8000eca:	2300      	movs	r3, #0
 8000ecc:	75fb      	strb	r3, [r7, #23]
 8000ece:	e00a      	b.n	8000ee6 <Lcd_u16_left_aligned+0x4e>
		input[i+2] = 32;	// space
 8000ed0:	7dfb      	ldrb	r3, [r7, #23]
 8000ed2:	3302      	adds	r3, #2
 8000ed4:	f107 0218 	add.w	r2, r7, #24
 8000ed8:	4413      	add	r3, r2
 8000eda:	2220      	movs	r2, #32
 8000edc:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < (7 - len); i++) {
 8000ee0:	7dfb      	ldrb	r3, [r7, #23]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	75fb      	strb	r3, [r7, #23]
 8000ee6:	7dfa      	ldrb	r2, [r7, #23]
 8000ee8:	7dbb      	ldrb	r3, [r7, #22]
 8000eea:	f1c3 0307 	rsb	r3, r3, #7
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	dbee      	blt.n	8000ed0 <Lcd_u16_left_aligned+0x38>
	}

	input[i] = '\0';	// end of string
 8000ef2:	7dfb      	ldrb	r3, [r7, #23]
 8000ef4:	f107 0218 	add.w	r2, r7, #24
 8000ef8:	4413      	add	r3, r2
 8000efa:	2200      	movs	r2, #0
 8000efc:	f803 2c10 	strb.w	r2, [r3, #-16]

	sprintf(buffer, input, number);
 8000f00:	887a      	ldrh	r2, [r7, #2]
 8000f02:	f107 0108 	add.w	r1, r7, #8
 8000f06:	f107 0310 	add.w	r3, r7, #16
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f004 fbfc 	bl	8005708 <siprintf>

	Lcd_cursor(lcd, row, col);
 8000f10:	783a      	ldrb	r2, [r7, #0]
 8000f12:	787b      	ldrb	r3, [r7, #1]
 8000f14:	4619      	mov	r1, r3
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f000 f8ce 	bl	80010b8 <Lcd_cursor>
	Lcd_string(lcd, buffer);
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	4619      	mov	r1, r3
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 f862 	bl	8000fec <Lcd_string>
}
 8000f28:	bf00      	nop
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	08005fcc 	.word	0x08005fcc

08000f34 <Lcd_u16_right_aligned>:


void Lcd_u16_right_aligned(Lcd_HandleTypeDef *lcd, uint16_t number, uint8_t row, uint8_t col) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	4611      	mov	r1, r2
 8000f40:	461a      	mov	r2, r3
 8000f42:	4603      	mov	r3, r0
 8000f44:	807b      	strh	r3, [r7, #2]
 8000f46:	460b      	mov	r3, r1
 8000f48:	707b      	strb	r3, [r7, #1]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	703b      	strb	r3, [r7, #0]
	char buffer[6];
	char input[7];
	uint8_t i;

	uint8_t len = snprintf(NULL, 0, "%d", number);
 8000f4e:	887b      	ldrh	r3, [r7, #2]
 8000f50:	4a25      	ldr	r2, [pc, #148]	; (8000fe8 <Lcd_u16_right_aligned+0xb4>)
 8000f52:	2100      	movs	r1, #0
 8000f54:	2000      	movs	r0, #0
 8000f56:	f004 fba3 	bl	80056a0 <sniprintf>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	75bb      	strb	r3, [r7, #22]

	for (i = 0; i < (5 - len); i++) {
 8000f5e:	2300      	movs	r3, #0
 8000f60:	75fb      	strb	r3, [r7, #23]
 8000f62:	e009      	b.n	8000f78 <Lcd_u16_right_aligned+0x44>
		input[i] = 32;	// space
 8000f64:	7dfb      	ldrb	r3, [r7, #23]
 8000f66:	f107 0218 	add.w	r2, r7, #24
 8000f6a:	4413      	add	r3, r2
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < (5 - len); i++) {
 8000f72:	7dfb      	ldrb	r3, [r7, #23]
 8000f74:	3301      	adds	r3, #1
 8000f76:	75fb      	strb	r3, [r7, #23]
 8000f78:	7dfa      	ldrb	r2, [r7, #23]
 8000f7a:	7dbb      	ldrb	r3, [r7, #22]
 8000f7c:	f1c3 0305 	rsb	r3, r3, #5
 8000f80:	429a      	cmp	r2, r3
 8000f82:	dbef      	blt.n	8000f64 <Lcd_u16_right_aligned+0x30>
	}
	input[i] = 37;	// percentage
 8000f84:	7dfb      	ldrb	r3, [r7, #23]
 8000f86:	f107 0218 	add.w	r2, r7, #24
 8000f8a:	4413      	add	r3, r2
 8000f8c:	2225      	movs	r2, #37	; 0x25
 8000f8e:	f803 2c10 	strb.w	r2, [r3, #-16]
	input[i+1] = 100;	// d
 8000f92:	7dfb      	ldrb	r3, [r7, #23]
 8000f94:	3301      	adds	r3, #1
 8000f96:	f107 0218 	add.w	r2, r7, #24
 8000f9a:	4413      	add	r3, r2
 8000f9c:	2264      	movs	r2, #100	; 0x64
 8000f9e:	f803 2c10 	strb.w	r2, [r3, #-16]
	input[i+2] = '\0';	// end of string
 8000fa2:	7dfb      	ldrb	r3, [r7, #23]
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	f107 0218 	add.w	r2, r7, #24
 8000faa:	4413      	add	r3, r2
 8000fac:	2200      	movs	r2, #0
 8000fae:	f803 2c10 	strb.w	r2, [r3, #-16]

	sprintf(buffer, input, number);
 8000fb2:	887a      	ldrh	r2, [r7, #2]
 8000fb4:	f107 0108 	add.w	r1, r7, #8
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f004 fba3 	bl	8005708 <siprintf>

	Lcd_cursor(lcd, row, (col - 4));
 8000fc2:	783b      	ldrb	r3, [r7, #0]
 8000fc4:	3b04      	subs	r3, #4
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	787b      	ldrb	r3, [r7, #1]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 f873 	bl	80010b8 <Lcd_cursor>
	Lcd_string(lcd, buffer);
 8000fd2:	f107 0310 	add.w	r3, r7, #16
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 f807 	bl	8000fec <Lcd_string>
}
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	08005fcc 	.word	0x08005fcc

08000fec <Lcd_string>:

/**
 * Write String in current cursor position
 */
void Lcd_string(Lcd_HandleTypeDef *lcd, char *string) {
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++) {
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73fb      	strb	r3, [r7, #15]
 8000ffa:	e00a      	b.n	8001012 <Lcd_string+0x26>
		lcd_write_data(lcd, string[i]);
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	4413      	add	r3, r2
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 f8aa 	bl	8001160 <lcd_write_data>
	for (uint8_t i = 0; i < strlen(string); i++) {
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	3301      	adds	r3, #1
 8001010:	73fb      	strb	r3, [r7, #15]
 8001012:	7bfc      	ldrb	r4, [r7, #15]
 8001014:	6838      	ldr	r0, [r7, #0]
 8001016:	f7ff f8db 	bl	80001d0 <strlen>
 800101a:	4603      	mov	r3, r0
 800101c:	429c      	cmp	r4, r3
 800101e:	d3ed      	bcc.n	8000ffc <Lcd_string+0x10>
	}
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	bd90      	pop	{r4, r7, pc}

0800102a <Lcd_string_centered>:

void Lcd_string_centered (Lcd_HandleTypeDef *lcd, char *string, uint8_t row) {
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	60f8      	str	r0, [r7, #12]
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	4613      	mov	r3, r2
 8001036:	71fb      	strb	r3, [r7, #7]
	uint8_t len = strlen(string) - 1;
 8001038:	68b8      	ldr	r0, [r7, #8]
 800103a:	f7ff f8c9 	bl	80001d0 <strlen>
 800103e:	4603      	mov	r3, r0
 8001040:	b2db      	uxtb	r3, r3
 8001042:	3b01      	subs	r3, #1
 8001044:	75fb      	strb	r3, [r7, #23]
	uint8_t left_spacing = (15 - len) / 2;
 8001046:	7dfb      	ldrb	r3, [r7, #23]
 8001048:	f1c3 030f 	rsb	r3, r3, #15
 800104c:	0fda      	lsrs	r2, r3, #31
 800104e:	4413      	add	r3, r2
 8001050:	105b      	asrs	r3, r3, #1
 8001052:	75bb      	strb	r3, [r7, #22]
	Lcd_cursor(lcd, row, left_spacing);
 8001054:	7dba      	ldrb	r2, [r7, #22]
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	4619      	mov	r1, r3
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f000 f82c 	bl	80010b8 <Lcd_cursor>
	Lcd_string(lcd, string);
 8001060:	68b9      	ldr	r1, [r7, #8]
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	f7ff ffc2 	bl	8000fec <Lcd_string>
}
 8001068:	bf00      	nop
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <Lcd_string_right_aligned>:

void Lcd_string_right_aligned (Lcd_HandleTypeDef *lcd, char *string, uint8_t row, uint8_t col) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	4611      	mov	r1, r2
 800107c:	461a      	mov	r2, r3
 800107e:	460b      	mov	r3, r1
 8001080:	71fb      	strb	r3, [r7, #7]
 8001082:	4613      	mov	r3, r2
 8001084:	71bb      	strb	r3, [r7, #6]
	uint8_t len = strlen(string) - 1;
 8001086:	68b8      	ldr	r0, [r7, #8]
 8001088:	f7ff f8a2 	bl	80001d0 <strlen>
 800108c:	4603      	mov	r3, r0
 800108e:	b2db      	uxtb	r3, r3
 8001090:	3b01      	subs	r3, #1
 8001092:	75fb      	strb	r3, [r7, #23]
	Lcd_cursor(lcd, row, (col - len));
 8001094:	79ba      	ldrb	r2, [r7, #6]
 8001096:	7dfb      	ldrb	r3, [r7, #23]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b2da      	uxtb	r2, r3
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	4619      	mov	r1, r3
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f000 f809 	bl	80010b8 <Lcd_cursor>
	Lcd_string(lcd, string);
 80010a6:	68b9      	ldr	r1, [r7, #8]
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f7ff ff9f 	bl	8000fec <Lcd_string>
}
 80010ae:	bf00      	nop
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <Lcd_cursor>:
/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef *lcd, uint8_t row, uint8_t col) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	70fb      	strb	r3, [r7, #3]
 80010c4:	4613      	mov	r3, r2
 80010c6:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <Lcd_cursor+0x30>)
 80010cc:	5cd2      	ldrb	r2, [r2, r3]
 80010ce:	78bb      	ldrb	r3, [r7, #2]
 80010d0:	4413      	add	r3, r2
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	3b80      	subs	r3, #128	; 0x80
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4619      	mov	r1, r3
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f812 	bl	8001104 <lcd_write_command>
	#endif
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	08005fe8 	.word	0x08005fe8

080010ec <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef *lcd) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 80010f4:	2101      	movs	r1, #1
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 f804 	bl	8001104 <lcd_write_command>
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <lcd_write_command>:

/************************************** Static function definition **************************************/
/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef *lcd, uint8_t command) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);	// Write to Command Register
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6898      	ldr	r0, [r3, #8]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	899b      	ldrh	r3, [r3, #12]
 8001118:	2200      	movs	r2, #0
 800111a:	4619      	mov	r1, r3
 800111c:	f002 f830 	bl	8003180 <HAL_GPIO_WritePin>

	if (lcd->mode == LCD_4_BIT_MODE) {
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	7d9b      	ldrb	r3, [r3, #22]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d111      	bne.n	800114c <lcd_write_command+0x48>
		// Writing Command in two seperate nibs due to 4 Bit Mode
		lcd_write(lcd, (command >> 4), LCD_NIB);	// Send 4 MSB
 8001128:	78fb      	ldrb	r3, [r7, #3]
 800112a:	091b      	lsrs	r3, r3, #4
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2204      	movs	r2, #4
 8001130:	4619      	mov	r1, r3
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 f842 	bl	80011bc <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);	// Send 4 LSB
 8001138:	78fb      	ldrb	r3, [r7, #3]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2204      	movs	r2, #4
 8001142:	4619      	mov	r1, r3
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 f839 	bl	80011bc <lcd_write>
	}
	else {
		// Write Command in one go with 8 bit
		lcd_write(lcd, command, LCD_BYTE);
	}
}
 800114a:	e005      	b.n	8001158 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 800114c:	78fb      	ldrb	r3, [r7, #3]
 800114e:	2208      	movs	r2, #8
 8001150:	4619      	mov	r1, r3
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 f832 	bl	80011bc <lcd_write>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef *lcd, uint8_t data) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6898      	ldr	r0, [r3, #8]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	899b      	ldrh	r3, [r3, #12]
 8001174:	2201      	movs	r2, #1
 8001176:	4619      	mov	r1, r3
 8001178:	f002 f802 	bl	8003180 <HAL_GPIO_WritePin>

	// Writing Command in two seperate nibs due to 4 Bit Mode
	if(lcd->mode == LCD_4_BIT_MODE) {
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7d9b      	ldrb	r3, [r3, #22]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d111      	bne.n	80011a8 <lcd_write_data+0x48>
		lcd_write(lcd, data >> 4, LCD_NIB);		// Send 4 MSB
 8001184:	78fb      	ldrb	r3, [r7, #3]
 8001186:	091b      	lsrs	r3, r3, #4
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2204      	movs	r2, #4
 800118c:	4619      	mov	r1, r3
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f000 f814 	bl	80011bc <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);	// Send 4 LSB
 8001194:	78fb      	ldrb	r3, [r7, #3]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2204      	movs	r2, #4
 800119e:	4619      	mov	r1, r3
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f80b 	bl	80011bc <lcd_write>
	}
	else {
		// Write Command in one go with 8 bit
		lcd_write(lcd, data, LCD_BYTE);
	}
}
 80011a6:	e005      	b.n	80011b4 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	2208      	movs	r2, #8
 80011ac:	4619      	mov	r1, r3
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 f804 	bl	80011bc <lcd_write>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <lcd_write>:


/**
 * Set len bits on the bus toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef *lcd, uint8_t data, uint8_t len) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	70fb      	strb	r3, [r7, #3]
 80011c8:	4613      	mov	r3, r2
 80011ca:	70bb      	strb	r3, [r7, #2]
	for (uint8_t i = 0; i < len; i++) {
 80011cc:	2300      	movs	r3, #0
 80011ce:	73fb      	strb	r3, [r7, #15]
 80011d0:	e019      	b.n	8001206 <lcd_write+0x4a>
		// Right shifts data, then gets the least significant bit to write
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	6818      	ldr	r0, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4413      	add	r3, r2
 80011e8:	8819      	ldrh	r1, [r3, #0]
 80011ea:	78fa      	ldrb	r2, [r7, #3]
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	fa42 f303 	asr.w	r3, r2, r3
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	461a      	mov	r2, r3
 80011fc:	f001 ffc0 	bl	8003180 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < len; i++) {
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	3301      	adds	r3, #1
 8001204:	73fb      	strb	r3, [r7, #15]
 8001206:	7bfa      	ldrb	r2, [r7, #15]
 8001208:	78bb      	ldrb	r3, [r7, #2]
 800120a:	429a      	cmp	r2, r3
 800120c:	d3e1      	bcc.n	80011d2 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6918      	ldr	r0, [r3, #16]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	8a9b      	ldrh	r3, [r3, #20]
 8001216:	2201      	movs	r2, #1
 8001218:	4619      	mov	r1, r3
 800121a:	f001 ffb1 	bl	8003180 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800121e:	2001      	movs	r0, #1
 8001220:	f000 fd26 	bl	8001c70 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6918      	ldr	r0, [r3, #16]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	8a9b      	ldrh	r3, [r3, #20]
 800122c:	2200      	movs	r2, #0
 800122e:	4619      	mov	r1, r3
 8001230:	f001 ffa6 	bl	8003180 <HAL_GPIO_WritePin>
}
 8001234:	bf00      	nop
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <lcd_write_nib_command>:

/**
 * Writes a single 4-bit (NIB) command using the MSB of the uint
 */
void lcd_write_nib_command(Lcd_HandleTypeDef *lcd, uint8_t command) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);	// Write to Command Register
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6898      	ldr	r0, [r3, #8]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	899b      	ldrh	r3, [r3, #12]
 8001250:	2200      	movs	r2, #0
 8001252:	4619      	mov	r1, r3
 8001254:	f001 ff94 	bl	8003180 <HAL_GPIO_WritePin>

	if (lcd->mode == LCD_4_BIT_MODE) {
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	7d9b      	ldrb	r3, [r3, #22]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d107      	bne.n	8001270 <lcd_write_nib_command+0x34>
		// Writing Command in two seperate nibs due to 4 Bit Mode
		lcd_write(lcd, (command >> 4), LCD_NIB);	// Send 4 MSB
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	091b      	lsrs	r3, r3, #4
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2204      	movs	r2, #4
 8001268:	4619      	mov	r1, r3
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ffa6 	bl	80011bc <lcd_write>
	}
	else {
		// Do Nothing
	}
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b097      	sub	sp, #92	; 0x5c
 800127c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127e:	f000 fc7b 	bl	8001b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001282:	f000 f84b 	bl	800131c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001286:	f000 f99f 	bl	80015c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800128a:	f000 f96d 	bl	8001568 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800128e:	f000 f8cd 	bl	800142c <MX_ADC1_Init>
  MX_TIM17_Init();
 8001292:	f000 f941 	bl	8001518 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  // Start Timer
  HAL_TIM_Base_Start_IT(&htim17);
 8001296:	481c      	ldr	r0, [pc, #112]	; (8001308 <main+0x90>)
 8001298:	f003 fb20 	bl	80048dc <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2120      	movs	r1, #32
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a4:	f001 ff6c 	bl	8003180 <HAL_GPIO_WritePin>

  // Init LCD
  Lcd_PortType ports[] = {
 80012a8:	4b18      	ldr	r3, [pc, #96]	; (800130c <main+0x94>)
 80012aa:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80012ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  GPIOB, GPIOB, GPIOB, GPIOB
  };

  Lcd_PinType pins[] = {
 80012b4:	4a16      	ldr	r2, [pc, #88]	; (8001310 <main+0x98>)
 80012b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012be:	e883 0003 	stmia.w	r3, {r0, r1}
		  D4_Pin, D5_Pin, D6_Pin, D7_Pin
  };

  Lcd_HandleTypeDef lcd = Lcd_create(
 80012c2:	f107 000c 	add.w	r0, r7, #12
 80012c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012ca:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80012ce:	2300      	movs	r3, #0
 80012d0:	9305      	str	r3, [sp, #20]
 80012d2:	2300      	movs	r3, #0
 80012d4:	9304      	str	r3, [sp, #16]
 80012d6:	2300      	movs	r3, #0
 80012d8:	9303      	str	r3, [sp, #12]
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	9302      	str	r3, [sp, #8]
 80012de:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <main+0x9c>)
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012ec:	f7ff fd3a 	bl	8000d64 <Lcd_create>
		  false,
		  false
		  );

  // Init Display Module
  DisplayProcTypeDef display = Display_init(&btn_flag, &lcd);
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	f107 020c 	add.w	r2, r7, #12
 80012f6:	4908      	ldr	r1, [pc, #32]	; (8001318 <main+0xa0>)
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fa01 	bl	8000700 <Display_init>
//		  }
//
//		  btn_flag = 0;
//	  }

	  Display_update(&display);
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fa1d 	bl	8000740 <Display_update>
 8001306:	e7fa      	b.n	80012fe <main+0x86>
 8001308:	20000134 	.word	0x20000134
 800130c:	08005fd0 	.word	0x08005fd0
 8001310:	08005fe0 	.word	0x08005fe0
 8001314:	48000800 	.word	0x48000800
 8001318:	20000096 	.word	0x20000096

0800131c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b0b8      	sub	sp, #224	; 0xe0
 8001320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001322:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001326:	2244      	movs	r2, #68	; 0x44
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f004 f9b0 	bl	8005690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001330:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001340:	463b      	mov	r3, r7
 8001342:	2288      	movs	r2, #136	; 0x88
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f004 f9a2 	bl	8005690 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800134c:	2302      	movs	r3, #2
 800134e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001352:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001356:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800135a:	2310      	movs	r3, #16
 800135c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001360:	2302      	movs	r3, #2
 8001362:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001366:	2302      	movs	r3, #2
 8001368:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800136c:	2301      	movs	r3, #1
 800136e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001372:	230a      	movs	r3, #10
 8001374:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001378:	2307      	movs	r3, #7
 800137a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800137e:	2302      	movs	r3, #2
 8001380:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001384:	2302      	movs	r3, #2
 8001386:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800138e:	4618      	mov	r0, r3
 8001390:	f001 ffa4 	bl	80032dc <HAL_RCC_OscConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800139a:	f000 fa3b 	bl	8001814 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800139e:	230f      	movs	r3, #15
 80013a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a4:	2303      	movs	r3, #3
 80013a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013bc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80013c0:	2104      	movs	r1, #4
 80013c2:	4618      	mov	r0, r3
 80013c4:	f002 fb70 	bl	8003aa8 <HAL_RCC_ClockConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80013ce:	f000 fa21 	bl	8001814 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80013d2:	f244 0302 	movw	r3, #16386	; 0x4002
 80013d6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013d8:	2300      	movs	r3, #0
 80013da:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80013dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013e0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80013e2:	2302      	movs	r3, #2
 80013e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80013e6:	2301      	movs	r3, #1
 80013e8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80013ea:	2308      	movs	r3, #8
 80013ec:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80013ee:	2307      	movs	r3, #7
 80013f0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80013f2:	2302      	movs	r3, #2
 80013f4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80013f6:	2302      	movs	r3, #2
 80013f8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80013fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013fe:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001400:	463b      	mov	r3, r7
 8001402:	4618      	mov	r0, r3
 8001404:	f002 fd56 	bl	8003eb4 <HAL_RCCEx_PeriphCLKConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800140e:	f000 fa01 	bl	8001814 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001412:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001416:	f001 ff0b 	bl	8003230 <HAL_PWREx_ControlVoltageScaling>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8001420:	f000 f9f8 	bl	8001814 <Error_Handler>
  }
}
 8001424:	bf00      	nop
 8001426:	37e0      	adds	r7, #224	; 0xe0
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
 800144c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800144e:	4b2f      	ldr	r3, [pc, #188]	; (800150c <MX_ADC1_Init+0xe0>)
 8001450:	4a2f      	ldr	r2, [pc, #188]	; (8001510 <MX_ADC1_Init+0xe4>)
 8001452:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001454:	4b2d      	ldr	r3, [pc, #180]	; (800150c <MX_ADC1_Init+0xe0>)
 8001456:	2200      	movs	r2, #0
 8001458:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800145a:	4b2c      	ldr	r3, [pc, #176]	; (800150c <MX_ADC1_Init+0xe0>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001460:	4b2a      	ldr	r3, [pc, #168]	; (800150c <MX_ADC1_Init+0xe0>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001466:	4b29      	ldr	r3, [pc, #164]	; (800150c <MX_ADC1_Init+0xe0>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800146c:	4b27      	ldr	r3, [pc, #156]	; (800150c <MX_ADC1_Init+0xe0>)
 800146e:	2204      	movs	r2, #4
 8001470:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001472:	4b26      	ldr	r3, [pc, #152]	; (800150c <MX_ADC1_Init+0xe0>)
 8001474:	2200      	movs	r2, #0
 8001476:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001478:	4b24      	ldr	r3, [pc, #144]	; (800150c <MX_ADC1_Init+0xe0>)
 800147a:	2200      	movs	r2, #0
 800147c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800147e:	4b23      	ldr	r3, [pc, #140]	; (800150c <MX_ADC1_Init+0xe0>)
 8001480:	2201      	movs	r2, #1
 8001482:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001484:	4b21      	ldr	r3, [pc, #132]	; (800150c <MX_ADC1_Init+0xe0>)
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800148c:	4b1f      	ldr	r3, [pc, #124]	; (800150c <MX_ADC1_Init+0xe0>)
 800148e:	2200      	movs	r2, #0
 8001490:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001492:	4b1e      	ldr	r3, [pc, #120]	; (800150c <MX_ADC1_Init+0xe0>)
 8001494:	2200      	movs	r2, #0
 8001496:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001498:	4b1c      	ldr	r3, [pc, #112]	; (800150c <MX_ADC1_Init+0xe0>)
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <MX_ADC1_Init+0xe0>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80014a6:	4b19      	ldr	r3, [pc, #100]	; (800150c <MX_ADC1_Init+0xe0>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014ae:	4817      	ldr	r0, [pc, #92]	; (800150c <MX_ADC1_Init+0xe0>)
 80014b0:	f000 fd8e 	bl	8001fd0 <HAL_ADC_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80014ba:	f000 f9ab 	bl	8001814 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014c2:	f107 031c 	add.w	r3, r7, #28
 80014c6:	4619      	mov	r1, r3
 80014c8:	4810      	ldr	r0, [pc, #64]	; (800150c <MX_ADC1_Init+0xe0>)
 80014ca:	f001 faed 	bl	8002aa8 <HAL_ADCEx_MultiModeConfigChannel>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80014d4:	f000 f99e 	bl	8001814 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80014d8:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_ADC1_Init+0xe8>)
 80014da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014dc:	2306      	movs	r3, #6
 80014de:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014e4:	237f      	movs	r3, #127	; 0x7f
 80014e6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014e8:	2304      	movs	r3, #4
 80014ea:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	4619      	mov	r1, r3
 80014f4:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_ADC1_Init+0xe0>)
 80014f6:	f000 fec1 	bl	800227c <HAL_ADC_ConfigChannel>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001500:	f000 f988 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	3728      	adds	r7, #40	; 0x28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000180 	.word	0x20000180
 8001510:	50040000 	.word	0x50040000
 8001514:	14f00020 	.word	0x14f00020

08001518 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800151c:	4b10      	ldr	r3, [pc, #64]	; (8001560 <MX_TIM17_Init+0x48>)
 800151e:	4a11      	ldr	r2, [pc, #68]	; (8001564 <MX_TIM17_Init+0x4c>)
 8001520:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8000;
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <MX_TIM17_Init+0x48>)
 8001524:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001528:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <MX_TIM17_Init+0x48>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <MX_TIM17_Init+0x48>)
 8001532:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001536:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <MX_TIM17_Init+0x48>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <MX_TIM17_Init+0x48>)
 8001540:	2200      	movs	r2, #0
 8001542:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <MX_TIM17_Init+0x48>)
 8001546:	2200      	movs	r2, #0
 8001548:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <MX_TIM17_Init+0x48>)
 800154c:	f003 f96e 	bl	800482c <HAL_TIM_Base_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8001556:	f000 f95d 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000134 	.word	0x20000134
 8001564:	40014800 	.word	0x40014800

08001568 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800156c:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <MX_USART2_UART_Init+0x58>)
 800156e:	4a15      	ldr	r2, [pc, #84]	; (80015c4 <MX_USART2_UART_Init+0x5c>)
 8001570:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001572:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <MX_USART2_UART_Init+0x58>)
 8001574:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001578:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <MX_USART2_UART_Init+0x58>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <MX_USART2_UART_Init+0x58>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <MX_USART2_UART_Init+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <MX_USART2_UART_Init+0x58>)
 800158e:	220c      	movs	r2, #12
 8001590:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <MX_USART2_UART_Init+0x58>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <MX_USART2_UART_Init+0x58>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <MX_USART2_UART_Init+0x58>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <MX_USART2_UART_Init+0x58>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015aa:	4805      	ldr	r0, [pc, #20]	; (80015c0 <MX_USART2_UART_Init+0x58>)
 80015ac:	f003 fc06 	bl	8004dbc <HAL_UART_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015b6:	f000 f92d 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200001e8 	.word	0x200001e8
 80015c4:	40004400 	.word	0x40004400

080015c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015de:	4b55      	ldr	r3, [pc, #340]	; (8001734 <MX_GPIO_Init+0x16c>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	4a54      	ldr	r2, [pc, #336]	; (8001734 <MX_GPIO_Init+0x16c>)
 80015e4:	f043 0304 	orr.w	r3, r3, #4
 80015e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ea:	4b52      	ldr	r3, [pc, #328]	; (8001734 <MX_GPIO_Init+0x16c>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015f6:	4b4f      	ldr	r3, [pc, #316]	; (8001734 <MX_GPIO_Init+0x16c>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	4a4e      	ldr	r2, [pc, #312]	; (8001734 <MX_GPIO_Init+0x16c>)
 80015fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001602:	4b4c      	ldr	r3, [pc, #304]	; (8001734 <MX_GPIO_Init+0x16c>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	4b49      	ldr	r3, [pc, #292]	; (8001734 <MX_GPIO_Init+0x16c>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	4a48      	ldr	r2, [pc, #288]	; (8001734 <MX_GPIO_Init+0x16c>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800161a:	4b46      	ldr	r3, [pc, #280]	; (8001734 <MX_GPIO_Init+0x16c>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001626:	4b43      	ldr	r3, [pc, #268]	; (8001734 <MX_GPIO_Init+0x16c>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	4a42      	ldr	r2, [pc, #264]	; (8001734 <MX_GPIO_Init+0x16c>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001632:	4b40      	ldr	r3, [pc, #256]	; (8001734 <MX_GPIO_Init+0x16c>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001648:	f001 fd9a 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	f240 4132 	movw	r1, #1074	; 0x432
 8001652:	4839      	ldr	r0, [pc, #228]	; (8001738 <MX_GPIO_Init+0x170>)
 8001654:	f001 fd94 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_Enable_GPIO_Port, LCD_Enable_Pin, GPIO_PIN_RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	2180      	movs	r1, #128	; 0x80
 800165c:	4837      	ldr	r0, [pc, #220]	; (800173c <MX_GPIO_Init+0x174>)
 800165e:	f001 fd8f 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001662:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001668:	4b35      	ldr	r3, [pc, #212]	; (8001740 <MX_GPIO_Init+0x178>)
 800166a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	4831      	ldr	r0, [pc, #196]	; (800173c <MX_GPIO_Init+0x174>)
 8001678:	f001 fbd8 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LCD_RS_Pin;
 800167c:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001682:	2301      	movs	r3, #1
 8001684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4619      	mov	r1, r3
 8001694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001698:	f001 fbc8 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D5_Pin|D4_Pin;
 800169c:	f240 4332 	movw	r3, #1074	; 0x432
 80016a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a2:	2301      	movs	r3, #1
 80016a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4619      	mov	r1, r3
 80016b4:	4820      	ldr	r0, [pc, #128]	; (8001738 <MX_GPIO_Init+0x170>)
 80016b6:	f001 fbb9 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_Enable_Pin */
  GPIO_InitStruct.Pin = LCD_Enable_Pin;
 80016ba:	2380      	movs	r3, #128	; 0x80
 80016bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016be:	2301      	movs	r3, #1
 80016c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_Enable_GPIO_Port, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	481a      	ldr	r0, [pc, #104]	; (800173c <MX_GPIO_Init+0x174>)
 80016d2:	f001 fbab 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 80016d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <MX_GPIO_Init+0x17c>)
 80016de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	4619      	mov	r1, r3
 80016ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ee:	f001 fb9d 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN2_Pin BTN4_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin|BTN4_Pin|BTN3_Pin;
 80016f2:	f44f 7350 	mov.w	r3, #832	; 0x340
 80016f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <MX_GPIO_Init+0x17c>)
 80016fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	4619      	mov	r1, r3
 8001706:	480c      	ldr	r0, [pc, #48]	; (8001738 <MX_GPIO_Init+0x170>)
 8001708:	f001 fb90 	bl	8002e2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800170c:	2200      	movs	r2, #0
 800170e:	2100      	movs	r1, #0
 8001710:	2017      	movs	r0, #23
 8001712:	f001 fb54 	bl	8002dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001716:	2017      	movs	r0, #23
 8001718:	f001 fb6d 	bl	8002df6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800171c:	2200      	movs	r2, #0
 800171e:	2100      	movs	r1, #0
 8001720:	2028      	movs	r0, #40	; 0x28
 8001722:	f001 fb4c 	bl	8002dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001726:	2028      	movs	r0, #40	; 0x28
 8001728:	f001 fb65 	bl	8002df6 <HAL_NVIC_EnableIRQ>

}
 800172c:	bf00      	nop
 800172e:	3728      	adds	r7, #40	; 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40021000 	.word	0x40021000
 8001738:	48000400 	.word	0x48000400
 800173c:	48000800 	.word	0x48000800
 8001740:	10210000 	.word	0x10210000
 8001744:	10110000 	.word	0x10110000

08001748 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	80fb      	strh	r3, [r7, #6]
	if ((HAL_GetTick() - last_btn_press) > 100){
 8001752:	f000 fa81 	bl	8001c58 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <HAL_GPIO_EXTI_Callback+0x8c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b64      	cmp	r3, #100	; 0x64
 8001760:	d933      	bls.n	80017ca <HAL_GPIO_EXTI_Callback+0x82>
		if (GPIO_Pin == BTN1_Pin) {
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001768:	d107      	bne.n	800177a <HAL_GPIO_EXTI_Callback+0x32>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800176a:	2120      	movs	r1, #32
 800176c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001770:	f001 fd1e 	bl	80031b0 <HAL_GPIO_TogglePin>
			btn_flag = 1;
 8001774:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <HAL_GPIO_EXTI_Callback+0x90>)
 8001776:	2201      	movs	r2, #1
 8001778:	701a      	strb	r2, [r3, #0]
		}
		if (GPIO_Pin == BTN2_Pin) {
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	2b40      	cmp	r3, #64	; 0x40
 800177e:	d107      	bne.n	8001790 <HAL_GPIO_EXTI_Callback+0x48>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001780:	2120      	movs	r1, #32
 8001782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001786:	f001 fd13 	bl	80031b0 <HAL_GPIO_TogglePin>
			btn_flag = 2;
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <HAL_GPIO_EXTI_Callback+0x90>)
 800178c:	2202      	movs	r2, #2
 800178e:	701a      	strb	r2, [r3, #0]
		}
		if (GPIO_Pin == BTN3_Pin) {
 8001790:	88fb      	ldrh	r3, [r7, #6]
 8001792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001796:	d107      	bne.n	80017a8 <HAL_GPIO_EXTI_Callback+0x60>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001798:	2120      	movs	r1, #32
 800179a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179e:	f001 fd07 	bl	80031b0 <HAL_GPIO_TogglePin>
			btn_flag = 3;
 80017a2:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <HAL_GPIO_EXTI_Callback+0x90>)
 80017a4:	2203      	movs	r2, #3
 80017a6:	701a      	strb	r2, [r3, #0]
		}
		if (GPIO_Pin == BTN4_Pin) {
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017ae:	d107      	bne.n	80017c0 <HAL_GPIO_EXTI_Callback+0x78>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80017b0:	2120      	movs	r1, #32
 80017b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b6:	f001 fcfb 	bl	80031b0 <HAL_GPIO_TogglePin>
			btn_flag = 4;
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <HAL_GPIO_EXTI_Callback+0x90>)
 80017bc:	2204      	movs	r2, #4
 80017be:	701a      	strb	r2, [r3, #0]
		}
		last_btn_press = HAL_GetTick();
 80017c0:	f000 fa4a 	bl	8001c58 <HAL_GetTick>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4a03      	ldr	r2, [pc, #12]	; (80017d4 <HAL_GPIO_EXTI_Callback+0x8c>)
 80017c8:	6013      	str	r3, [r2, #0]
	}
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200001e4 	.word	0x200001e4
 80017d8:	20000096 	.word	0x20000096

080017dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	if (htim == &htim17) {
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a08      	ldr	r2, [pc, #32]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d107      	bne.n	80017fc <HAL_TIM_PeriodElapsedCallback+0x20>
//		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		counter += increment;
 80017ec:	4b07      	ldr	r3, [pc, #28]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x30>)
 80017ee:	881a      	ldrh	r2, [r3, #0]
 80017f0:	4b07      	ldr	r3, [pc, #28]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	4413      	add	r3, r2
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x30>)
 80017fa:	801a      	strh	r2, [r3, #0]
	}
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	20000134 	.word	0x20000134
 800180c:	20000098 	.word	0x20000098
 8001810:	20000004 	.word	0x20000004

08001814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001818:	b672      	cpsid	i
}
 800181a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800181c:	e7fe      	b.n	800181c <Error_Handler+0x8>
	...

08001820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001826:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <HAL_MspInit+0x44>)
 8001828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182a:	4a0e      	ldr	r2, [pc, #56]	; (8001864 <HAL_MspInit+0x44>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6613      	str	r3, [r2, #96]	; 0x60
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <HAL_MspInit+0x44>)
 8001834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <HAL_MspInit+0x44>)
 8001840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001842:	4a08      	ldr	r2, [pc, #32]	; (8001864 <HAL_MspInit+0x44>)
 8001844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001848:	6593      	str	r3, [r2, #88]	; 0x58
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_MspInit+0x44>)
 800184c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	40021000 	.word	0x40021000

08001868 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a15      	ldr	r2, [pc, #84]	; (80018dc <HAL_ADC_MspInit+0x74>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d124      	bne.n	80018d4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HAL_ADC_MspInit+0x78>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188e:	4a14      	ldr	r2, [pc, #80]	; (80018e0 <HAL_ADC_MspInit+0x78>)
 8001890:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_ADC_MspInit+0x78>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <HAL_ADC_MspInit+0x78>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a6:	4a0e      	ldr	r2, [pc, #56]	; (80018e0 <HAL_ADC_MspInit+0x78>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ae:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <HAL_ADC_MspInit+0x78>)
 80018b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018ba:	2301      	movs	r3, #1
 80018bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018be:	230b      	movs	r3, #11
 80018c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c6:	f107 0314 	add.w	r3, r7, #20
 80018ca:	4619      	mov	r1, r3
 80018cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d0:	f001 faac 	bl	8002e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018d4:	bf00      	nop
 80018d6:	3728      	adds	r7, #40	; 0x28
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	50040000 	.word	0x50040000
 80018e0:	40021000 	.word	0x40021000

080018e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a0d      	ldr	r2, [pc, #52]	; (8001928 <HAL_TIM_Base_MspInit+0x44>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d113      	bne.n	800191e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80018f6:	4b0d      	ldr	r3, [pc, #52]	; (800192c <HAL_TIM_Base_MspInit+0x48>)
 80018f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fa:	4a0c      	ldr	r2, [pc, #48]	; (800192c <HAL_TIM_Base_MspInit+0x48>)
 80018fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001900:	6613      	str	r3, [r2, #96]	; 0x60
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_TIM_Base_MspInit+0x48>)
 8001904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	201a      	movs	r0, #26
 8001914:	f001 fa53 	bl	8002dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001918:	201a      	movs	r0, #26
 800191a:	f001 fa6c 	bl	8002df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40014800 	.word	0x40014800
 800192c:	40021000 	.word	0x40021000

08001930 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	; 0x28
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a17      	ldr	r2, [pc, #92]	; (80019ac <HAL_UART_MspInit+0x7c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d128      	bne.n	80019a4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001952:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <HAL_UART_MspInit+0x80>)
 8001954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001956:	4a16      	ldr	r2, [pc, #88]	; (80019b0 <HAL_UART_MspInit+0x80>)
 8001958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800195c:	6593      	str	r3, [r2, #88]	; 0x58
 800195e:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <HAL_UART_MspInit+0x80>)
 8001960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <HAL_UART_MspInit+0x80>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	4a10      	ldr	r2, [pc, #64]	; (80019b0 <HAL_UART_MspInit+0x80>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <HAL_UART_MspInit+0x80>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001982:	230c      	movs	r3, #12
 8001984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001992:	2307      	movs	r3, #7
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4619      	mov	r1, r3
 800199c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a0:	f001 fa44 	bl	8002e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019a4:	bf00      	nop
 80019a6:	3728      	adds	r7, #40	; 0x28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40004400 	.word	0x40004400
 80019b0:	40021000 	.word	0x40021000

080019b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <NMI_Handler+0x4>

080019ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */


  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019be:	e7fe      	b.n	80019be <HardFault_Handler+0x4>

080019c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <MemManage_Handler+0x4>

080019c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ca:	e7fe      	b.n	80019ca <BusFault_Handler+0x4>

080019cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <UsageFault_Handler+0x4>

080019d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a00:	f000 f916 	bl	8001c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001a0c:	2040      	movs	r0, #64	; 0x40
 8001a0e:	f001 fbe9 	bl	80031e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001a12:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a16:	f001 fbe5 	bl	80031e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001a1a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a1e:	f001 fbe1 	bl	80031e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001a2c:	4802      	ldr	r0, [pc, #8]	; (8001a38 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001a2e:	f002 ffc5 	bl	80049bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000134 	.word	0x20000134

08001a3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001a40:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001a44:	f001 fbce 	bl	80031e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a48:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a4c:	f001 fbca 	bl	80031e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a5c:	4a14      	ldr	r2, [pc, #80]	; (8001ab0 <_sbrk+0x5c>)
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <_sbrk+0x60>)
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a68:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <_sbrk+0x64>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d102      	bne.n	8001a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <_sbrk+0x64>)
 8001a72:	4a12      	ldr	r2, [pc, #72]	; (8001abc <_sbrk+0x68>)
 8001a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <_sbrk+0x64>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d207      	bcs.n	8001a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a84:	f003 fdda 	bl	800563c <__errno>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a92:	e009      	b.n	8001aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a94:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <_sbrk+0x64>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a9a:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <_sbrk+0x64>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	4a05      	ldr	r2, [pc, #20]	; (8001ab8 <_sbrk+0x64>)
 8001aa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20018000 	.word	0x20018000
 8001ab4:	00000400 	.word	0x00000400
 8001ab8:	2000009c 	.word	0x2000009c
 8001abc:	20000280 	.word	0x20000280

08001ac0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ac4:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <SystemInit+0x5c>)
 8001ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aca:	4a14      	ldr	r2, [pc, #80]	; (8001b1c <SystemInit+0x5c>)
 8001acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <SystemInit+0x60>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a11      	ldr	r2, [pc, #68]	; (8001b20 <SystemInit+0x60>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <SystemInit+0x60>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <SystemInit+0x60>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a0d      	ldr	r2, [pc, #52]	; (8001b20 <SystemInit+0x60>)
 8001aec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001af0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001af4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <SystemInit+0x60>)
 8001af8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001afc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001afe:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <SystemInit+0x60>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <SystemInit+0x60>)
 8001b04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b0a:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <SystemInit+0x60>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000ed00 	.word	0xe000ed00
 8001b20:	40021000 	.word	0x40021000

08001b24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b28:	f7ff ffca 	bl	8001ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b2c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b2e:	e003      	b.n	8001b38 <LoopCopyDataInit>

08001b30 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b32:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b34:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b36:	3104      	adds	r1, #4

08001b38 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b38:	480a      	ldr	r0, [pc, #40]	; (8001b64 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b3c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b3e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b40:	d3f6      	bcc.n	8001b30 <CopyDataInit>
	ldr	r2, =_sbss
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b44:	e002      	b.n	8001b4c <LoopFillZerobss>

08001b46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b46:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b48:	f842 3b04 	str.w	r3, [r2], #4

08001b4c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <LoopForever+0x16>)
	cmp	r2, r3
 8001b4e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b50:	d3f9      	bcc.n	8001b46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b52:	f003 fd79 	bl	8005648 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b56:	f7ff fb8f 	bl	8001278 <main>

08001b5a <LoopForever>:

LoopForever:
    b LoopForever
 8001b5a:	e7fe      	b.n	8001b5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b5c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001b60:	08006078 	.word	0x08006078
	ldr	r0, =_sdata
 8001b64:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b68:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8001b6c:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8001b70:	20000280 	.word	0x20000280

08001b74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b74:	e7fe      	b.n	8001b74 <ADC1_2_IRQHandler>
	...

08001b78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <HAL_Init+0x3c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a0b      	ldr	r2, [pc, #44]	; (8001bb4 <HAL_Init+0x3c>)
 8001b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b8e:	2003      	movs	r0, #3
 8001b90:	f001 f90a 	bl	8002da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b94:	2000      	movs	r0, #0
 8001b96:	f000 f80f 	bl	8001bb8 <HAL_InitTick>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d002      	beq.n	8001ba6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	71fb      	strb	r3, [r7, #7]
 8001ba4:	e001      	b.n	8001baa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ba6:	f7ff fe3b 	bl	8001820 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001baa:	79fb      	ldrb	r3, [r7, #7]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40022000 	.word	0x40022000

08001bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bc4:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <HAL_InitTick+0x6c>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d023      	beq.n	8001c14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bcc:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <HAL_InitTick+0x70>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <HAL_InitTick+0x6c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be2:	4618      	mov	r0, r3
 8001be4:	f001 f915 	bl	8002e12 <HAL_SYSTICK_Config>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10f      	bne.n	8001c0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b0f      	cmp	r3, #15
 8001bf2:	d809      	bhi.n	8001c08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bfc:	f001 f8df 	bl	8002dbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c00:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <HAL_InitTick+0x74>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	e007      	b.n	8001c18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
 8001c0c:	e004      	b.n	8001c18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	73fb      	strb	r3, [r7, #15]
 8001c12:	e001      	b.n	8001c18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000010 	.word	0x20000010
 8001c28:	20000008 	.word	0x20000008
 8001c2c:	2000000c 	.word	0x2000000c

08001c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_IncTick+0x20>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_IncTick+0x24>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <HAL_IncTick+0x24>)
 8001c42:	6013      	str	r3, [r2, #0]
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000010 	.word	0x20000010
 8001c54:	2000026c 	.word	0x2000026c

08001c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <HAL_GetTick+0x14>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	2000026c 	.word	0x2000026c

08001c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c78:	f7ff ffee 	bl	8001c58 <HAL_GetTick>
 8001c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c88:	d005      	beq.n	8001c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_Delay+0x44>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4413      	add	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c96:	bf00      	nop
 8001c98:	f7ff ffde 	bl	8001c58 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d8f7      	bhi.n	8001c98 <HAL_Delay+0x28>
  {
  }
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000010 	.word	0x20000010

08001cb8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3360      	adds	r3, #96	; 0x60
 8001d32:	461a      	mov	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <LL_ADC_SetOffset+0x44>)
 8001d42:	4013      	ands	r3, r2
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d58:	bf00      	nop
 8001d5a:	371c      	adds	r7, #28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	03fff000 	.word	0x03fff000

08001d68 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3360      	adds	r3, #96	; 0x60
 8001d76:	461a      	mov	r2, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3360      	adds	r3, #96	; 0x60
 8001da4:	461a      	mov	r2, r3
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	431a      	orrs	r2, r3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001dbe:	bf00      	nop
 8001dc0:	371c      	adds	r7, #28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b087      	sub	sp, #28
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	60f8      	str	r0, [r7, #12]
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	3330      	adds	r3, #48	; 0x30
 8001dda:	461a      	mov	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	0a1b      	lsrs	r3, r3, #8
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	4413      	add	r3, r2
 8001de8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	f003 031f 	and.w	r3, r3, #31
 8001df4:	211f      	movs	r1, #31
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	401a      	ands	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	0e9b      	lsrs	r3, r3, #26
 8001e02:	f003 011f 	and.w	r1, r3, #31
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e10:	431a      	orrs	r2, r3
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e16:	bf00      	nop
 8001e18:	371c      	adds	r7, #28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b087      	sub	sp, #28
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	3314      	adds	r3, #20
 8001e32:	461a      	mov	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	0e5b      	lsrs	r3, r3, #25
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	4413      	add	r3, r2
 8001e40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	0d1b      	lsrs	r3, r3, #20
 8001e4a:	f003 031f 	and.w	r3, r3, #31
 8001e4e:	2107      	movs	r1, #7
 8001e50:	fa01 f303 	lsl.w	r3, r1, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	401a      	ands	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	0d1b      	lsrs	r3, r3, #20
 8001e5c:	f003 031f 	and.w	r3, r3, #31
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	fa01 f303 	lsl.w	r3, r1, r3
 8001e66:	431a      	orrs	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e6c:	bf00      	nop
 8001e6e:	371c      	adds	r7, #28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e90:	43db      	mvns	r3, r3
 8001e92:	401a      	ands	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f003 0318 	and.w	r3, r3, #24
 8001e9a:	4908      	ldr	r1, [pc, #32]	; (8001ebc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e9c:	40d9      	lsrs	r1, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	400b      	ands	r3, r1
 8001ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001eae:	bf00      	nop
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	0007ffff 	.word	0x0007ffff

08001ec0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ed0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6093      	str	r3, [r2, #8]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ef8:	d101      	bne.n	8001efe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f48:	d101      	bne.n	8001f4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <LL_ADC_IsEnabled+0x18>
 8001f70:	2301      	movs	r3, #1
 8001f72:	e000      	b.n	8001f76 <LL_ADC_IsEnabled+0x1a>
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d101      	bne.n	8001f9a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d101      	bne.n	8001fc0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fd0:	b590      	push	{r4, r7, lr}
 8001fd2:	b089      	sub	sp, #36	; 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e136      	b.n	8002258 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d109      	bne.n	800200c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff fc35 	bl	8001868 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff67 	bl	8001ee4 <LL_ADC_IsDeepPowerDownEnabled>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d004      	beq.n	8002026 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff4d 	bl	8001ec0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff ff82 	bl	8001f34 <LL_ADC_IsInternalRegulatorEnabled>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d115      	bne.n	8002062 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff66 	bl	8001f0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002040:	4b87      	ldr	r3, [pc, #540]	; (8002260 <HAL_ADC_Init+0x290>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	099b      	lsrs	r3, r3, #6
 8002046:	4a87      	ldr	r2, [pc, #540]	; (8002264 <HAL_ADC_Init+0x294>)
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	099b      	lsrs	r3, r3, #6
 800204e:	3301      	adds	r3, #1
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002054:	e002      	b.n	800205c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	3b01      	subs	r3, #1
 800205a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f9      	bne.n	8002056 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff64 	bl	8001f34 <LL_ADC_IsInternalRegulatorEnabled>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10d      	bne.n	800208e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002076:	f043 0210 	orr.w	r2, r3, #16
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002082:	f043 0201 	orr.w	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff ff75 	bl	8001f82 <LL_ADC_REG_IsConversionOngoing>
 8002098:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 80cf 	bne.w	8002246 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f040 80cb 	bne.w	8002246 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020b8:	f043 0202 	orr.w	r2, r3, #2
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff49 	bl	8001f5c <LL_ADC_IsEnabled>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d115      	bne.n	80020fc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020d0:	4865      	ldr	r0, [pc, #404]	; (8002268 <HAL_ADC_Init+0x298>)
 80020d2:	f7ff ff43 	bl	8001f5c <LL_ADC_IsEnabled>
 80020d6:	4604      	mov	r4, r0
 80020d8:	4864      	ldr	r0, [pc, #400]	; (800226c <HAL_ADC_Init+0x29c>)
 80020da:	f7ff ff3f 	bl	8001f5c <LL_ADC_IsEnabled>
 80020de:	4603      	mov	r3, r0
 80020e0:	431c      	orrs	r4, r3
 80020e2:	4863      	ldr	r0, [pc, #396]	; (8002270 <HAL_ADC_Init+0x2a0>)
 80020e4:	f7ff ff3a 	bl	8001f5c <LL_ADC_IsEnabled>
 80020e8:	4603      	mov	r3, r0
 80020ea:	4323      	orrs	r3, r4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d105      	bne.n	80020fc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	4619      	mov	r1, r3
 80020f6:	485f      	ldr	r0, [pc, #380]	; (8002274 <HAL_ADC_Init+0x2a4>)
 80020f8:	f7ff fdde 	bl	8001cb8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	7e5b      	ldrb	r3, [r3, #25]
 8002100:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002106:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800210c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002112:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3020 	ldrb.w	r3, [r3, #32]
 800211a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d106      	bne.n	8002138 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	3b01      	subs	r3, #1
 8002130:	045b      	lsls	r3, r3, #17
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213c:	2b00      	cmp	r3, #0
 800213e:	d009      	beq.n	8002154 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002144:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	4b47      	ldr	r3, [pc, #284]	; (8002278 <HAL_ADC_Init+0x2a8>)
 800215c:	4013      	ands	r3, r2
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	69b9      	ldr	r1, [r7, #24]
 8002164:	430b      	orrs	r3, r1
 8002166:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff08 	bl	8001f82 <LL_ADC_REG_IsConversionOngoing>
 8002172:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff15 	bl	8001fa8 <LL_ADC_INJ_IsConversionOngoing>
 800217e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d13d      	bne.n	8002202 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d13a      	bne.n	8002202 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002190:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002198:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021a8:	f023 0302 	bic.w	r3, r3, #2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	69b9      	ldr	r1, [r7, #24]
 80021b2:	430b      	orrs	r3, r1
 80021b4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d118      	bne.n	80021f2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80021ca:	f023 0304 	bic.w	r3, r3, #4
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021d6:	4311      	orrs	r1, r2
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021dc:	4311      	orrs	r1, r2
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021e2:	430a      	orrs	r2, r1
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	611a      	str	r2, [r3, #16]
 80021f0:	e007      	b.n	8002202 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0201 	bic.w	r2, r2, #1
 8002200:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d10c      	bne.n	8002224 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	f023 010f 	bic.w	r1, r3, #15
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	1e5a      	subs	r2, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	631a      	str	r2, [r3, #48]	; 0x30
 8002222:	e007      	b.n	8002234 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 020f 	bic.w	r2, r2, #15
 8002232:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002238:	f023 0303 	bic.w	r3, r3, #3
 800223c:	f043 0201 	orr.w	r2, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	655a      	str	r2, [r3, #84]	; 0x54
 8002244:	e007      	b.n	8002256 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224a:	f043 0210 	orr.w	r2, r3, #16
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002256:	7ffb      	ldrb	r3, [r7, #31]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3724      	adds	r7, #36	; 0x24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd90      	pop	{r4, r7, pc}
 8002260:	20000008 	.word	0x20000008
 8002264:	053e2d63 	.word	0x053e2d63
 8002268:	50040000 	.word	0x50040000
 800226c:	50040100 	.word	0x50040100
 8002270:	50040200 	.word	0x50040200
 8002274:	50040300 	.word	0x50040300
 8002278:	fff0c007 	.word	0xfff0c007

0800227c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b0b6      	sub	sp, #216	; 0xd8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800228c:	2300      	movs	r3, #0
 800228e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <HAL_ADC_ConfigChannel+0x22>
 800229a:	2302      	movs	r3, #2
 800229c:	e3c7      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x7b2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fe69 	bl	8001f82 <LL_ADC_REG_IsConversionOngoing>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f040 83a8 	bne.w	8002a08 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b05      	cmp	r3, #5
 80022be:	d824      	bhi.n	800230a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	3b02      	subs	r3, #2
 80022c6:	2b03      	cmp	r3, #3
 80022c8:	d81b      	bhi.n	8002302 <HAL_ADC_ConfigChannel+0x86>
 80022ca:	a201      	add	r2, pc, #4	; (adr r2, 80022d0 <HAL_ADC_ConfigChannel+0x54>)
 80022cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d0:	080022e1 	.word	0x080022e1
 80022d4:	080022e9 	.word	0x080022e9
 80022d8:	080022f1 	.word	0x080022f1
 80022dc:	080022f9 	.word	0x080022f9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	220c      	movs	r2, #12
 80022e4:	605a      	str	r2, [r3, #4]
          break;
 80022e6:	e011      	b.n	800230c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	2212      	movs	r2, #18
 80022ec:	605a      	str	r2, [r3, #4]
          break;
 80022ee:	e00d      	b.n	800230c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	2218      	movs	r2, #24
 80022f4:	605a      	str	r2, [r3, #4]
          break;
 80022f6:	e009      	b.n	800230c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022fe:	605a      	str	r2, [r3, #4]
          break;
 8002300:	e004      	b.n	800230c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	2206      	movs	r2, #6
 8002306:	605a      	str	r2, [r3, #4]
          break;
 8002308:	e000      	b.n	800230c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800230a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6818      	ldr	r0, [r3, #0]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	6859      	ldr	r1, [r3, #4]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	f7ff fd56 	bl	8001dca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fe2d 	bl	8001f82 <LL_ADC_REG_IsConversionOngoing>
 8002328:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fe39 	bl	8001fa8 <LL_ADC_INJ_IsConversionOngoing>
 8002336:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800233a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800233e:	2b00      	cmp	r3, #0
 8002340:	f040 81a6 	bne.w	8002690 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002344:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002348:	2b00      	cmp	r3, #0
 800234a:	f040 81a1 	bne.w	8002690 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	6819      	ldr	r1, [r3, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	461a      	mov	r2, r3
 800235c:	f7ff fd61 	bl	8001e22 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	08db      	lsrs	r3, r3, #3
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2b04      	cmp	r3, #4
 8002380:	d00a      	beq.n	8002398 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	6919      	ldr	r1, [r3, #16]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002392:	f7ff fcc5 	bl	8001d20 <LL_ADC_SetOffset>
 8002396:	e17b      	b.n	8002690 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2100      	movs	r1, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fce2 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10a      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x148>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2100      	movs	r1, #0
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fcd7 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 80023ba:	4603      	mov	r3, r0
 80023bc:	0e9b      	lsrs	r3, r3, #26
 80023be:	f003 021f 	and.w	r2, r3, #31
 80023c2:	e01e      	b.n	8002402 <HAL_ADC_ConfigChannel+0x186>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2100      	movs	r1, #0
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fccc 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 80023d0:	4603      	mov	r3, r0
 80023d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80023e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80023f2:	2320      	movs	r3, #32
 80023f4:	e004      	b.n	8002400 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80023f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240a:	2b00      	cmp	r3, #0
 800240c:	d105      	bne.n	800241a <HAL_ADC_ConfigChannel+0x19e>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	0e9b      	lsrs	r3, r3, #26
 8002414:	f003 031f 	and.w	r3, r3, #31
 8002418:	e018      	b.n	800244c <HAL_ADC_ConfigChannel+0x1d0>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002426:	fa93 f3a3 	rbit	r3, r3
 800242a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800242e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002432:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002436:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800243e:	2320      	movs	r3, #32
 8002440:	e004      	b.n	800244c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002442:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002446:	fab3 f383 	clz	r3, r3
 800244a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800244c:	429a      	cmp	r2, r3
 800244e:	d106      	bne.n	800245e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2200      	movs	r2, #0
 8002456:	2100      	movs	r1, #0
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fc9b 	bl	8001d94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2101      	movs	r1, #1
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fc7f 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 800246a:	4603      	mov	r3, r0
 800246c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10a      	bne.n	800248a <HAL_ADC_ConfigChannel+0x20e>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2101      	movs	r1, #1
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fc74 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 8002480:	4603      	mov	r3, r0
 8002482:	0e9b      	lsrs	r3, r3, #26
 8002484:	f003 021f 	and.w	r2, r3, #31
 8002488:	e01e      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x24c>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2101      	movs	r1, #1
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fc69 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 8002496:	4603      	mov	r3, r0
 8002498:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80024a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80024b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80024b8:	2320      	movs	r3, #32
 80024ba:	e004      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80024bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024c0:	fab3 f383 	clz	r3, r3
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d105      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x264>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	0e9b      	lsrs	r3, r3, #26
 80024da:	f003 031f 	and.w	r3, r3, #31
 80024de:	e018      	b.n	8002512 <HAL_ADC_ConfigChannel+0x296>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80024f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80024fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002504:	2320      	movs	r3, #32
 8002506:	e004      	b.n	8002512 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002508:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800250c:	fab3 f383 	clz	r3, r3
 8002510:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002512:	429a      	cmp	r2, r3
 8002514:	d106      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2200      	movs	r2, #0
 800251c:	2101      	movs	r1, #1
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff fc38 	bl	8001d94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2102      	movs	r1, #2
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff fc1c 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 8002530:	4603      	mov	r3, r0
 8002532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10a      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x2d4>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2102      	movs	r1, #2
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fc11 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 8002546:	4603      	mov	r3, r0
 8002548:	0e9b      	lsrs	r3, r3, #26
 800254a:	f003 021f 	and.w	r2, r3, #31
 800254e:	e01e      	b.n	800258e <HAL_ADC_ConfigChannel+0x312>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2102      	movs	r1, #2
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fc06 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 800255c:	4603      	mov	r3, r0
 800255e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002566:	fa93 f3a3 	rbit	r3, r3
 800256a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800256e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002572:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002576:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800257e:	2320      	movs	r3, #32
 8002580:	e004      	b.n	800258c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002582:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002596:	2b00      	cmp	r3, #0
 8002598:	d105      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x32a>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	0e9b      	lsrs	r3, r3, #26
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	e016      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x358>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80025b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80025be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80025c6:	2320      	movs	r3, #32
 80025c8:	e004      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80025ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d106      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2200      	movs	r2, #0
 80025de:	2102      	movs	r1, #2
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff fbd7 	bl	8001d94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2103      	movs	r1, #3
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fbbb 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 80025f2:	4603      	mov	r3, r0
 80025f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10a      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x396>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2103      	movs	r1, #3
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fbb0 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 8002608:	4603      	mov	r3, r0
 800260a:	0e9b      	lsrs	r3, r3, #26
 800260c:	f003 021f 	and.w	r2, r3, #31
 8002610:	e017      	b.n	8002642 <HAL_ADC_ConfigChannel+0x3c6>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2103      	movs	r1, #3
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fba5 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 800261e:	4603      	mov	r3, r0
 8002620:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002624:	fa93 f3a3 	rbit	r3, r3
 8002628:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800262a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800262c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800262e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002634:	2320      	movs	r3, #32
 8002636:	e003      	b.n	8002640 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264a:	2b00      	cmp	r3, #0
 800264c:	d105      	bne.n	800265a <HAL_ADC_ConfigChannel+0x3de>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	0e9b      	lsrs	r3, r3, #26
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	e011      	b.n	800267e <HAL_ADC_ConfigChannel+0x402>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002660:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002662:	fa93 f3a3 	rbit	r3, r3
 8002666:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800266a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800266c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002672:	2320      	movs	r3, #32
 8002674:	e003      	b.n	800267e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002678:	fab3 f383 	clz	r3, r3
 800267c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800267e:	429a      	cmp	r2, r3
 8002680:	d106      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2200      	movs	r2, #0
 8002688:	2103      	movs	r1, #3
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff fb82 	bl	8001d94 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fc61 	bl	8001f5c <LL_ADC_IsEnabled>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	f040 813f 	bne.w	8002920 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6819      	ldr	r1, [r3, #0]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	461a      	mov	r2, r3
 80026b0:	f7ff fbe2 	bl	8001e78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4a8e      	ldr	r2, [pc, #568]	; (80028f4 <HAL_ADC_ConfigChannel+0x678>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	f040 8130 	bne.w	8002920 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10b      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x46c>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	0e9b      	lsrs	r3, r3, #26
 80026d6:	3301      	adds	r3, #1
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	2b09      	cmp	r3, #9
 80026de:	bf94      	ite	ls
 80026e0:	2301      	movls	r3, #1
 80026e2:	2300      	movhi	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	e019      	b.n	800271c <HAL_ADC_ConfigChannel+0x4a0>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026f0:	fa93 f3a3 	rbit	r3, r3
 80026f4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80026f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026f8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80026fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002700:	2320      	movs	r3, #32
 8002702:	e003      	b.n	800270c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002704:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002706:	fab3 f383 	clz	r3, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	3301      	adds	r3, #1
 800270e:	f003 031f 	and.w	r3, r3, #31
 8002712:	2b09      	cmp	r3, #9
 8002714:	bf94      	ite	ls
 8002716:	2301      	movls	r3, #1
 8002718:	2300      	movhi	r3, #0
 800271a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800271c:	2b00      	cmp	r3, #0
 800271e:	d079      	beq.n	8002814 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002728:	2b00      	cmp	r3, #0
 800272a:	d107      	bne.n	800273c <HAL_ADC_ConfigChannel+0x4c0>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	0e9b      	lsrs	r3, r3, #26
 8002732:	3301      	adds	r3, #1
 8002734:	069b      	lsls	r3, r3, #26
 8002736:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800273a:	e015      	b.n	8002768 <HAL_ADC_ConfigChannel+0x4ec>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800274a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800274c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800274e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002754:	2320      	movs	r3, #32
 8002756:	e003      	b.n	8002760 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800275a:	fab3 f383 	clz	r3, r3
 800275e:	b2db      	uxtb	r3, r3
 8002760:	3301      	adds	r3, #1
 8002762:	069b      	lsls	r3, r3, #26
 8002764:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002770:	2b00      	cmp	r3, #0
 8002772:	d109      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x50c>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	0e9b      	lsrs	r3, r3, #26
 800277a:	3301      	adds	r3, #1
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	2101      	movs	r1, #1
 8002782:	fa01 f303 	lsl.w	r3, r1, r3
 8002786:	e017      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x53c>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002798:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800279a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80027a0:	2320      	movs	r3, #32
 80027a2:	e003      	b.n	80027ac <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80027a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027a6:	fab3 f383 	clz	r3, r3
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	3301      	adds	r3, #1
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	2101      	movs	r1, #1
 80027b4:	fa01 f303 	lsl.w	r3, r1, r3
 80027b8:	ea42 0103 	orr.w	r1, r2, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10a      	bne.n	80027de <HAL_ADC_ConfigChannel+0x562>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	0e9b      	lsrs	r3, r3, #26
 80027ce:	3301      	adds	r3, #1
 80027d0:	f003 021f 	and.w	r2, r3, #31
 80027d4:	4613      	mov	r3, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4413      	add	r3, r2
 80027da:	051b      	lsls	r3, r3, #20
 80027dc:	e018      	b.n	8002810 <HAL_ADC_ConfigChannel+0x594>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80027ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80027f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80027f6:	2320      	movs	r3, #32
 80027f8:	e003      	b.n	8002802 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80027fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027fc:	fab3 f383 	clz	r3, r3
 8002800:	b2db      	uxtb	r3, r3
 8002802:	3301      	adds	r3, #1
 8002804:	f003 021f 	and.w	r2, r3, #31
 8002808:	4613      	mov	r3, r2
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	4413      	add	r3, r2
 800280e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002810:	430b      	orrs	r3, r1
 8002812:	e080      	b.n	8002916 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281c:	2b00      	cmp	r3, #0
 800281e:	d107      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x5b4>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	0e9b      	lsrs	r3, r3, #26
 8002826:	3301      	adds	r3, #1
 8002828:	069b      	lsls	r3, r3, #26
 800282a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800282e:	e015      	b.n	800285c <HAL_ADC_ConfigChannel+0x5e0>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002838:	fa93 f3a3 	rbit	r3, r3
 800283c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800283e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002840:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002848:	2320      	movs	r3, #32
 800284a:	e003      	b.n	8002854 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800284c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284e:	fab3 f383 	clz	r3, r3
 8002852:	b2db      	uxtb	r3, r3
 8002854:	3301      	adds	r3, #1
 8002856:	069b      	lsls	r3, r3, #26
 8002858:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002864:	2b00      	cmp	r3, #0
 8002866:	d109      	bne.n	800287c <HAL_ADC_ConfigChannel+0x600>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	0e9b      	lsrs	r3, r3, #26
 800286e:	3301      	adds	r3, #1
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	2101      	movs	r1, #1
 8002876:	fa01 f303 	lsl.w	r3, r1, r3
 800287a:	e017      	b.n	80028ac <HAL_ADC_ConfigChannel+0x630>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	61fb      	str	r3, [r7, #28]
  return result;
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002894:	2320      	movs	r3, #32
 8002896:	e003      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	fab3 f383 	clz	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	3301      	adds	r3, #1
 80028a2:	f003 031f 	and.w	r3, r3, #31
 80028a6:	2101      	movs	r1, #1
 80028a8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ac:	ea42 0103 	orr.w	r1, r2, r3
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10d      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x65c>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	0e9b      	lsrs	r3, r3, #26
 80028c2:	3301      	adds	r3, #1
 80028c4:	f003 021f 	and.w	r2, r3, #31
 80028c8:	4613      	mov	r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	4413      	add	r3, r2
 80028ce:	3b1e      	subs	r3, #30
 80028d0:	051b      	lsls	r3, r3, #20
 80028d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028d6:	e01d      	b.n	8002914 <HAL_ADC_ConfigChannel+0x698>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	613b      	str	r3, [r7, #16]
  return result;
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d103      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80028f0:	2320      	movs	r3, #32
 80028f2:	e005      	b.n	8002900 <HAL_ADC_ConfigChannel+0x684>
 80028f4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	3301      	adds	r3, #1
 8002902:	f003 021f 	and.w	r2, r3, #31
 8002906:	4613      	mov	r3, r2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	4413      	add	r3, r2
 800290c:	3b1e      	subs	r3, #30
 800290e:	051b      	lsls	r3, r3, #20
 8002910:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002914:	430b      	orrs	r3, r1
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	6892      	ldr	r2, [r2, #8]
 800291a:	4619      	mov	r1, r3
 800291c:	f7ff fa81 	bl	8001e22 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	4b44      	ldr	r3, [pc, #272]	; (8002a38 <HAL_ADC_ConfigChannel+0x7bc>)
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d07a      	beq.n	8002a22 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800292c:	4843      	ldr	r0, [pc, #268]	; (8002a3c <HAL_ADC_ConfigChannel+0x7c0>)
 800292e:	f7ff f9e9 	bl	8001d04 <LL_ADC_GetCommonPathInternalCh>
 8002932:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a41      	ldr	r2, [pc, #260]	; (8002a40 <HAL_ADC_ConfigChannel+0x7c4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d12c      	bne.n	800299a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002940:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002944:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d126      	bne.n	800299a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a3c      	ldr	r2, [pc, #240]	; (8002a44 <HAL_ADC_ConfigChannel+0x7c8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d004      	beq.n	8002960 <HAL_ADC_ConfigChannel+0x6e4>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a3b      	ldr	r2, [pc, #236]	; (8002a48 <HAL_ADC_ConfigChannel+0x7cc>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d15d      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002960:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002964:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002968:	4619      	mov	r1, r3
 800296a:	4834      	ldr	r0, [pc, #208]	; (8002a3c <HAL_ADC_ConfigChannel+0x7c0>)
 800296c:	f7ff f9b7 	bl	8001cde <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002970:	4b36      	ldr	r3, [pc, #216]	; (8002a4c <HAL_ADC_ConfigChannel+0x7d0>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	099b      	lsrs	r3, r3, #6
 8002976:	4a36      	ldr	r2, [pc, #216]	; (8002a50 <HAL_ADC_ConfigChannel+0x7d4>)
 8002978:	fba2 2303 	umull	r2, r3, r2, r3
 800297c:	099b      	lsrs	r3, r3, #6
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	4613      	mov	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4413      	add	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800298a:	e002      	b.n	8002992 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	3b01      	subs	r3, #1
 8002990:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1f9      	bne.n	800298c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002998:	e040      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a2d      	ldr	r2, [pc, #180]	; (8002a54 <HAL_ADC_ConfigChannel+0x7d8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d118      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x75a>
 80029a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d112      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a23      	ldr	r2, [pc, #140]	; (8002a44 <HAL_ADC_ConfigChannel+0x7c8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d004      	beq.n	80029c4 <HAL_ADC_ConfigChannel+0x748>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a22      	ldr	r2, [pc, #136]	; (8002a48 <HAL_ADC_ConfigChannel+0x7cc>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d12d      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029cc:	4619      	mov	r1, r3
 80029ce:	481b      	ldr	r0, [pc, #108]	; (8002a3c <HAL_ADC_ConfigChannel+0x7c0>)
 80029d0:	f7ff f985 	bl	8001cde <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029d4:	e024      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a1f      	ldr	r2, [pc, #124]	; (8002a58 <HAL_ADC_ConfigChannel+0x7dc>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d120      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d11a      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a14      	ldr	r2, [pc, #80]	; (8002a44 <HAL_ADC_ConfigChannel+0x7c8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d115      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029fe:	4619      	mov	r1, r3
 8002a00:	480e      	ldr	r0, [pc, #56]	; (8002a3c <HAL_ADC_ConfigChannel+0x7c0>)
 8002a02:	f7ff f96c 	bl	8001cde <LL_ADC_SetCommonPathInternalCh>
 8002a06:	e00c      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0c:	f043 0220 	orr.w	r2, r3, #32
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002a1a:	e002      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a1c:	bf00      	nop
 8002a1e:	e000      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a20:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a2a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	37d8      	adds	r7, #216	; 0xd8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	80080000 	.word	0x80080000
 8002a3c:	50040300 	.word	0x50040300
 8002a40:	c7520000 	.word	0xc7520000
 8002a44:	50040000 	.word	0x50040000
 8002a48:	50040200 	.word	0x50040200
 8002a4c:	20000008 	.word	0x20000008
 8002a50:	053e2d63 	.word	0x053e2d63
 8002a54:	cb840000 	.word	0xcb840000
 8002a58:	80000001 	.word	0x80000001

08002a5c <LL_ADC_IsEnabled>:
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <LL_ADC_IsEnabled+0x18>
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <LL_ADC_IsEnabled+0x1a>
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <LL_ADC_REG_IsConversionOngoing>:
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d101      	bne.n	8002a9a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002aa8:	b590      	push	{r4, r7, lr}
 8002aaa:	b09f      	sub	sp, #124	; 0x7c
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e093      	b.n	8002bee <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002ace:	2300      	movs	r3, #0
 8002ad0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a47      	ldr	r2, [pc, #284]	; (8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d102      	bne.n	8002ae6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ae0:	4b46      	ldr	r3, [pc, #280]	; (8002bfc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	e001      	b.n	8002aea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10b      	bne.n	8002b08 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af4:	f043 0220 	orr.w	r2, r3, #32
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e072      	b.n	8002bee <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff ffb9 	bl	8002a82 <LL_ADC_REG_IsConversionOngoing>
 8002b10:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff ffb3 	bl	8002a82 <LL_ADC_REG_IsConversionOngoing>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d154      	bne.n	8002bcc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002b22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d151      	bne.n	8002bcc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b28:	4b35      	ldr	r3, [pc, #212]	; (8002c00 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002b2a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d02c      	beq.n	8002b8e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	6859      	ldr	r1, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b46:	035b      	lsls	r3, r3, #13
 8002b48:	430b      	orrs	r3, r1
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b4e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b50:	4829      	ldr	r0, [pc, #164]	; (8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002b52:	f7ff ff83 	bl	8002a5c <LL_ADC_IsEnabled>
 8002b56:	4604      	mov	r4, r0
 8002b58:	4828      	ldr	r0, [pc, #160]	; (8002bfc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b5a:	f7ff ff7f 	bl	8002a5c <LL_ADC_IsEnabled>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	431c      	orrs	r4, r3
 8002b62:	4828      	ldr	r0, [pc, #160]	; (8002c04 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002b64:	f7ff ff7a 	bl	8002a5c <LL_ADC_IsEnabled>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	4323      	orrs	r3, r4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d137      	bne.n	8002be0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b78:	f023 030f 	bic.w	r3, r3, #15
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	6811      	ldr	r1, [r2, #0]
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	6892      	ldr	r2, [r2, #8]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	431a      	orrs	r2, r3
 8002b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b8a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b8c:	e028      	b.n	8002be0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b98:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b9a:	4817      	ldr	r0, [pc, #92]	; (8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002b9c:	f7ff ff5e 	bl	8002a5c <LL_ADC_IsEnabled>
 8002ba0:	4604      	mov	r4, r0
 8002ba2:	4816      	ldr	r0, [pc, #88]	; (8002bfc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ba4:	f7ff ff5a 	bl	8002a5c <LL_ADC_IsEnabled>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	431c      	orrs	r4, r3
 8002bac:	4815      	ldr	r0, [pc, #84]	; (8002c04 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002bae:	f7ff ff55 	bl	8002a5c <LL_ADC_IsEnabled>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4323      	orrs	r3, r4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d112      	bne.n	8002be0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002bc2:	f023 030f 	bic.w	r3, r3, #15
 8002bc6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002bc8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bca:	e009      	b.n	8002be0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd0:	f043 0220 	orr.w	r2, r3, #32
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002bde:	e000      	b.n	8002be2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002be0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002bea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	377c      	adds	r7, #124	; 0x7c
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd90      	pop	{r4, r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	50040000 	.word	0x50040000
 8002bfc:	50040100 	.word	0x50040100
 8002c00:	50040300 	.word	0x50040300
 8002c04:	50040200 	.word	0x50040200

08002c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c18:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <__NVIC_SetPriorityGrouping+0x44>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c24:	4013      	ands	r3, r2
 8002c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c3a:	4a04      	ldr	r2, [pc, #16]	; (8002c4c <__NVIC_SetPriorityGrouping+0x44>)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	60d3      	str	r3, [r2, #12]
}
 8002c40:	bf00      	nop
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c54:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <__NVIC_GetPriorityGrouping+0x18>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	0a1b      	lsrs	r3, r3, #8
 8002c5a:	f003 0307 	and.w	r3, r3, #7
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	db0b      	blt.n	8002c96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	f003 021f 	and.w	r2, r3, #31
 8002c84:	4907      	ldr	r1, [pc, #28]	; (8002ca4 <__NVIC_EnableIRQ+0x38>)
 8002c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	e000e100 	.word	0xe000e100

08002ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	6039      	str	r1, [r7, #0]
 8002cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	db0a      	blt.n	8002cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	490c      	ldr	r1, [pc, #48]	; (8002cf4 <__NVIC_SetPriority+0x4c>)
 8002cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc6:	0112      	lsls	r2, r2, #4
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	440b      	add	r3, r1
 8002ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cd0:	e00a      	b.n	8002ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	4908      	ldr	r1, [pc, #32]	; (8002cf8 <__NVIC_SetPriority+0x50>)
 8002cd8:	79fb      	ldrb	r3, [r7, #7]
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	3b04      	subs	r3, #4
 8002ce0:	0112      	lsls	r2, r2, #4
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	761a      	strb	r2, [r3, #24]
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	e000e100 	.word	0xe000e100
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b089      	sub	sp, #36	; 0x24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f1c3 0307 	rsb	r3, r3, #7
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	bf28      	it	cs
 8002d1a:	2304      	movcs	r3, #4
 8002d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	3304      	adds	r3, #4
 8002d22:	2b06      	cmp	r3, #6
 8002d24:	d902      	bls.n	8002d2c <NVIC_EncodePriority+0x30>
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	3b03      	subs	r3, #3
 8002d2a:	e000      	b.n	8002d2e <NVIC_EncodePriority+0x32>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	43da      	mvns	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	401a      	ands	r2, r3
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4e:	43d9      	mvns	r1, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d54:	4313      	orrs	r3, r2
         );
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3724      	adds	r7, #36	; 0x24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
	...

08002d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d74:	d301      	bcc.n	8002d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d76:	2301      	movs	r3, #1
 8002d78:	e00f      	b.n	8002d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d7a:	4a0a      	ldr	r2, [pc, #40]	; (8002da4 <SysTick_Config+0x40>)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d82:	210f      	movs	r1, #15
 8002d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d88:	f7ff ff8e 	bl	8002ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <SysTick_Config+0x40>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d92:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <SysTick_Config+0x40>)
 8002d94:	2207      	movs	r2, #7
 8002d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	e000e010 	.word	0xe000e010

08002da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7ff ff29 	bl	8002c08 <__NVIC_SetPriorityGrouping>
}
 8002db6:	bf00      	nop
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b086      	sub	sp, #24
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
 8002dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002dd0:	f7ff ff3e 	bl	8002c50 <__NVIC_GetPriorityGrouping>
 8002dd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	68b9      	ldr	r1, [r7, #8]
 8002dda:	6978      	ldr	r0, [r7, #20]
 8002ddc:	f7ff ff8e 	bl	8002cfc <NVIC_EncodePriority>
 8002de0:	4602      	mov	r2, r0
 8002de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002de6:	4611      	mov	r1, r2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff ff5d 	bl	8002ca8 <__NVIC_SetPriority>
}
 8002dee:	bf00      	nop
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff ff31 	bl	8002c6c <__NVIC_EnableIRQ>
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff ffa2 	bl	8002d64 <SysTick_Config>
 8002e20:	4603      	mov	r3, r0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
	...

08002e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e3a:	e17f      	b.n	800313c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	2101      	movs	r1, #1
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	fa01 f303 	lsl.w	r3, r1, r3
 8002e48:	4013      	ands	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 8171 	beq.w	8003136 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d00b      	beq.n	8002e74 <HAL_GPIO_Init+0x48>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d007      	beq.n	8002e74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e68:	2b11      	cmp	r3, #17
 8002e6a:	d003      	beq.n	8002e74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b12      	cmp	r3, #18
 8002e72:	d130      	bne.n	8002ed6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	2203      	movs	r2, #3
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eaa:	2201      	movs	r2, #1
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	091b      	lsrs	r3, r3, #4
 8002ec0:	f003 0201 	and.w	r2, r3, #1
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d118      	bne.n	8002f14 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ee8:	2201      	movs	r2, #1
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	08db      	lsrs	r3, r3, #3
 8002efe:	f003 0201 	and.w	r2, r3, #1
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	2203      	movs	r2, #3
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d003      	beq.n	8002f54 <HAL_GPIO_Init+0x128>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b12      	cmp	r3, #18
 8002f52:	d123      	bne.n	8002f9c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	08da      	lsrs	r2, r3, #3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3208      	adds	r2, #8
 8002f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f60:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	220f      	movs	r2, #15
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	43db      	mvns	r3, r3
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	4013      	ands	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	08da      	lsrs	r2, r3, #3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3208      	adds	r2, #8
 8002f96:	6939      	ldr	r1, [r7, #16]
 8002f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 0203 	and.w	r2, r3, #3
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 80ac 	beq.w	8003136 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fde:	4b5f      	ldr	r3, [pc, #380]	; (800315c <HAL_GPIO_Init+0x330>)
 8002fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe2:	4a5e      	ldr	r2, [pc, #376]	; (800315c <HAL_GPIO_Init+0x330>)
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	6613      	str	r3, [r2, #96]	; 0x60
 8002fea:	4b5c      	ldr	r3, [pc, #368]	; (800315c <HAL_GPIO_Init+0x330>)
 8002fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ff6:	4a5a      	ldr	r2, [pc, #360]	; (8003160 <HAL_GPIO_Init+0x334>)
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	089b      	lsrs	r3, r3, #2
 8002ffc:	3302      	adds	r3, #2
 8002ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003002:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	220f      	movs	r2, #15
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43db      	mvns	r3, r3
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4013      	ands	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003020:	d025      	beq.n	800306e <HAL_GPIO_Init+0x242>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a4f      	ldr	r2, [pc, #316]	; (8003164 <HAL_GPIO_Init+0x338>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d01f      	beq.n	800306a <HAL_GPIO_Init+0x23e>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a4e      	ldr	r2, [pc, #312]	; (8003168 <HAL_GPIO_Init+0x33c>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d019      	beq.n	8003066 <HAL_GPIO_Init+0x23a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a4d      	ldr	r2, [pc, #308]	; (800316c <HAL_GPIO_Init+0x340>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d013      	beq.n	8003062 <HAL_GPIO_Init+0x236>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a4c      	ldr	r2, [pc, #304]	; (8003170 <HAL_GPIO_Init+0x344>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d00d      	beq.n	800305e <HAL_GPIO_Init+0x232>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a4b      	ldr	r2, [pc, #300]	; (8003174 <HAL_GPIO_Init+0x348>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d007      	beq.n	800305a <HAL_GPIO_Init+0x22e>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a4a      	ldr	r2, [pc, #296]	; (8003178 <HAL_GPIO_Init+0x34c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d101      	bne.n	8003056 <HAL_GPIO_Init+0x22a>
 8003052:	2306      	movs	r3, #6
 8003054:	e00c      	b.n	8003070 <HAL_GPIO_Init+0x244>
 8003056:	2307      	movs	r3, #7
 8003058:	e00a      	b.n	8003070 <HAL_GPIO_Init+0x244>
 800305a:	2305      	movs	r3, #5
 800305c:	e008      	b.n	8003070 <HAL_GPIO_Init+0x244>
 800305e:	2304      	movs	r3, #4
 8003060:	e006      	b.n	8003070 <HAL_GPIO_Init+0x244>
 8003062:	2303      	movs	r3, #3
 8003064:	e004      	b.n	8003070 <HAL_GPIO_Init+0x244>
 8003066:	2302      	movs	r3, #2
 8003068:	e002      	b.n	8003070 <HAL_GPIO_Init+0x244>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <HAL_GPIO_Init+0x244>
 800306e:	2300      	movs	r3, #0
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	f002 0203 	and.w	r2, r2, #3
 8003076:	0092      	lsls	r2, r2, #2
 8003078:	4093      	lsls	r3, r2
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003080:	4937      	ldr	r1, [pc, #220]	; (8003160 <HAL_GPIO_Init+0x334>)
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	089b      	lsrs	r3, r3, #2
 8003086:	3302      	adds	r3, #2
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800308e:	4b3b      	ldr	r3, [pc, #236]	; (800317c <HAL_GPIO_Init+0x350>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	43db      	mvns	r3, r3
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4013      	ands	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030b2:	4a32      	ldr	r2, [pc, #200]	; (800317c <HAL_GPIO_Init+0x350>)
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80030b8:	4b30      	ldr	r3, [pc, #192]	; (800317c <HAL_GPIO_Init+0x350>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	43db      	mvns	r3, r3
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4013      	ands	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030dc:	4a27      	ldr	r2, [pc, #156]	; (800317c <HAL_GPIO_Init+0x350>)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030e2:	4b26      	ldr	r3, [pc, #152]	; (800317c <HAL_GPIO_Init+0x350>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	43db      	mvns	r3, r3
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4013      	ands	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003106:	4a1d      	ldr	r2, [pc, #116]	; (800317c <HAL_GPIO_Init+0x350>)
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800310c:	4b1b      	ldr	r3, [pc, #108]	; (800317c <HAL_GPIO_Init+0x350>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	43db      	mvns	r3, r3
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4313      	orrs	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003130:	4a12      	ldr	r2, [pc, #72]	; (800317c <HAL_GPIO_Init+0x350>)
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	3301      	adds	r3, #1
 800313a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	fa22 f303 	lsr.w	r3, r2, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	f47f ae78 	bne.w	8002e3c <HAL_GPIO_Init+0x10>
  }
}
 800314c:	bf00      	nop
 800314e:	bf00      	nop
 8003150:	371c      	adds	r7, #28
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40021000 	.word	0x40021000
 8003160:	40010000 	.word	0x40010000
 8003164:	48000400 	.word	0x48000400
 8003168:	48000800 	.word	0x48000800
 800316c:	48000c00 	.word	0x48000c00
 8003170:	48001000 	.word	0x48001000
 8003174:	48001400 	.word	0x48001400
 8003178:	48001800 	.word	0x48001800
 800317c:	40010400 	.word	0x40010400

08003180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	807b      	strh	r3, [r7, #2]
 800318c:	4613      	mov	r3, r2
 800318e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003190:	787b      	ldrb	r3, [r7, #1]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003196:	887a      	ldrh	r2, [r7, #2]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800319c:	e002      	b.n	80031a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800319e:	887a      	ldrh	r2, [r7, #2]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	460b      	mov	r3, r1
 80031ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031c2:	887a      	ldrh	r2, [r7, #2]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4013      	ands	r3, r2
 80031c8:	041a      	lsls	r2, r3, #16
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	43d9      	mvns	r1, r3
 80031ce:	887b      	ldrh	r3, [r7, #2]
 80031d0:	400b      	ands	r3, r1
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	619a      	str	r2, [r3, #24]
}
 80031d8:	bf00      	nop
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031ee:	4b08      	ldr	r3, [pc, #32]	; (8003210 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031f0:	695a      	ldr	r2, [r3, #20]
 80031f2:	88fb      	ldrh	r3, [r7, #6]
 80031f4:	4013      	ands	r3, r2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d006      	beq.n	8003208 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031fa:	4a05      	ldr	r2, [pc, #20]	; (8003210 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003200:	88fb      	ldrh	r3, [r7, #6]
 8003202:	4618      	mov	r0, r3
 8003204:	f7fe faa0 	bl	8001748 <HAL_GPIO_EXTI_Callback>
  }
}
 8003208:	bf00      	nop
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40010400 	.word	0x40010400

08003214 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003218:	4b04      	ldr	r3, [pc, #16]	; (800322c <HAL_PWREx_GetVoltageRange+0x18>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003220:	4618      	mov	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40007000 	.word	0x40007000

08003230 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800323e:	d130      	bne.n	80032a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003240:	4b23      	ldr	r3, [pc, #140]	; (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800324c:	d038      	beq.n	80032c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800324e:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003256:	4a1e      	ldr	r2, [pc, #120]	; (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003258:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800325c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800325e:	4b1d      	ldr	r3, [pc, #116]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2232      	movs	r2, #50	; 0x32
 8003264:	fb02 f303 	mul.w	r3, r2, r3
 8003268:	4a1b      	ldr	r2, [pc, #108]	; (80032d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	0c9b      	lsrs	r3, r3, #18
 8003270:	3301      	adds	r3, #1
 8003272:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003274:	e002      	b.n	800327c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	3b01      	subs	r3, #1
 800327a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800327c:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003288:	d102      	bne.n	8003290 <HAL_PWREx_ControlVoltageScaling+0x60>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1f2      	bne.n	8003276 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003290:	4b0f      	ldr	r3, [pc, #60]	; (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329c:	d110      	bne.n	80032c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e00f      	b.n	80032c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032a2:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ae:	d007      	beq.n	80032c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032b0:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032b8:	4a05      	ldr	r2, [pc, #20]	; (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40007000 	.word	0x40007000
 80032d4:	20000008 	.word	0x20000008
 80032d8:	431bde83 	.word	0x431bde83

080032dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e3d4      	b.n	8003a98 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ee:	4ba1      	ldr	r3, [pc, #644]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032f8:	4b9e      	ldr	r3, [pc, #632]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0310 	and.w	r3, r3, #16
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 80e4 	beq.w	80034d8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d007      	beq.n	8003326 <HAL_RCC_OscConfig+0x4a>
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	2b0c      	cmp	r3, #12
 800331a:	f040 808b 	bne.w	8003434 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2b01      	cmp	r3, #1
 8003322:	f040 8087 	bne.w	8003434 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003326:	4b93      	ldr	r3, [pc, #588]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d005      	beq.n	800333e <HAL_RCC_OscConfig+0x62>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e3ac      	b.n	8003a98 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1a      	ldr	r2, [r3, #32]
 8003342:	4b8c      	ldr	r3, [pc, #560]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d004      	beq.n	8003358 <HAL_RCC_OscConfig+0x7c>
 800334e:	4b89      	ldr	r3, [pc, #548]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003356:	e005      	b.n	8003364 <HAL_RCC_OscConfig+0x88>
 8003358:	4b86      	ldr	r3, [pc, #536]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 800335a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800335e:	091b      	lsrs	r3, r3, #4
 8003360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003364:	4293      	cmp	r3, r2
 8003366:	d223      	bcs.n	80033b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	4618      	mov	r0, r3
 800336e:	f000 fd41 	bl	8003df4 <RCC_SetFlashLatencyFromMSIRange>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e38d      	b.n	8003a98 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800337c:	4b7d      	ldr	r3, [pc, #500]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a7c      	ldr	r2, [pc, #496]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 8003382:	f043 0308 	orr.w	r3, r3, #8
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	4b7a      	ldr	r3, [pc, #488]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	4977      	ldr	r1, [pc, #476]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 8003396:	4313      	orrs	r3, r2
 8003398:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800339a:	4b76      	ldr	r3, [pc, #472]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	021b      	lsls	r3, r3, #8
 80033a8:	4972      	ldr	r1, [pc, #456]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	604b      	str	r3, [r1, #4]
 80033ae:	e025      	b.n	80033fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033b0:	4b70      	ldr	r3, [pc, #448]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a6f      	ldr	r2, [pc, #444]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 80033b6:	f043 0308 	orr.w	r3, r3, #8
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	4b6d      	ldr	r3, [pc, #436]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	496a      	ldr	r1, [pc, #424]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ce:	4b69      	ldr	r3, [pc, #420]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	021b      	lsls	r3, r3, #8
 80033dc:	4965      	ldr	r1, [pc, #404]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d109      	bne.n	80033fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 fd01 	bl	8003df4 <RCC_SetFlashLatencyFromMSIRange>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e34d      	b.n	8003a98 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033fc:	f000 fc36 	bl	8003c6c <HAL_RCC_GetSysClockFreq>
 8003400:	4602      	mov	r2, r0
 8003402:	4b5c      	ldr	r3, [pc, #368]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	091b      	lsrs	r3, r3, #4
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	495a      	ldr	r1, [pc, #360]	; (8003578 <HAL_RCC_OscConfig+0x29c>)
 800340e:	5ccb      	ldrb	r3, [r1, r3]
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	fa22 f303 	lsr.w	r3, r2, r3
 8003418:	4a58      	ldr	r2, [pc, #352]	; (800357c <HAL_RCC_OscConfig+0x2a0>)
 800341a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800341c:	4b58      	ldr	r3, [pc, #352]	; (8003580 <HAL_RCC_OscConfig+0x2a4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f7fe fbc9 	bl	8001bb8 <HAL_InitTick>
 8003426:	4603      	mov	r3, r0
 8003428:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d052      	beq.n	80034d6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	e331      	b.n	8003a98 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d032      	beq.n	80034a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800343c:	4b4d      	ldr	r3, [pc, #308]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a4c      	ldr	r2, [pc, #304]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003448:	f7fe fc06 	bl	8001c58 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003450:	f7fe fc02 	bl	8001c58 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e31a      	b.n	8003a98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003462:	4b44      	ldr	r3, [pc, #272]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800346e:	4b41      	ldr	r3, [pc, #260]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a40      	ldr	r2, [pc, #256]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 8003474:	f043 0308 	orr.w	r3, r3, #8
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	4b3e      	ldr	r3, [pc, #248]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	493b      	ldr	r1, [pc, #236]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 8003488:	4313      	orrs	r3, r2
 800348a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800348c:	4b39      	ldr	r3, [pc, #228]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	021b      	lsls	r3, r3, #8
 800349a:	4936      	ldr	r1, [pc, #216]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 800349c:	4313      	orrs	r3, r2
 800349e:	604b      	str	r3, [r1, #4]
 80034a0:	e01a      	b.n	80034d8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034a2:	4b34      	ldr	r3, [pc, #208]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a33      	ldr	r2, [pc, #204]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 80034a8:	f023 0301 	bic.w	r3, r3, #1
 80034ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034ae:	f7fe fbd3 	bl	8001c58 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034b6:	f7fe fbcf 	bl	8001c58 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e2e7      	b.n	8003a98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034c8:	4b2a      	ldr	r3, [pc, #168]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1f0      	bne.n	80034b6 <HAL_RCC_OscConfig+0x1da>
 80034d4:	e000      	b.n	80034d8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d074      	beq.n	80035ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d005      	beq.n	80034f6 <HAL_RCC_OscConfig+0x21a>
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	2b0c      	cmp	r3, #12
 80034ee:	d10e      	bne.n	800350e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	d10b      	bne.n	800350e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f6:	4b1f      	ldr	r3, [pc, #124]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d064      	beq.n	80035cc <HAL_RCC_OscConfig+0x2f0>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d160      	bne.n	80035cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e2c4      	b.n	8003a98 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003516:	d106      	bne.n	8003526 <HAL_RCC_OscConfig+0x24a>
 8003518:	4b16      	ldr	r3, [pc, #88]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a15      	ldr	r2, [pc, #84]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 800351e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	e01d      	b.n	8003562 <HAL_RCC_OscConfig+0x286>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800352e:	d10c      	bne.n	800354a <HAL_RCC_OscConfig+0x26e>
 8003530:	4b10      	ldr	r3, [pc, #64]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a0f      	ldr	r2, [pc, #60]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 8003536:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	4b0d      	ldr	r3, [pc, #52]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a0c      	ldr	r2, [pc, #48]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 8003542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003546:	6013      	str	r3, [r2, #0]
 8003548:	e00b      	b.n	8003562 <HAL_RCC_OscConfig+0x286>
 800354a:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a09      	ldr	r2, [pc, #36]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 8003550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	4b07      	ldr	r3, [pc, #28]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a06      	ldr	r2, [pc, #24]	; (8003574 <HAL_RCC_OscConfig+0x298>)
 800355c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003560:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d01c      	beq.n	80035a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356a:	f7fe fb75 	bl	8001c58 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003570:	e011      	b.n	8003596 <HAL_RCC_OscConfig+0x2ba>
 8003572:	bf00      	nop
 8003574:	40021000 	.word	0x40021000
 8003578:	08005fec 	.word	0x08005fec
 800357c:	20000008 	.word	0x20000008
 8003580:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003584:	f7fe fb68 	bl	8001c58 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	; 0x64
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e280      	b.n	8003a98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003596:	4baf      	ldr	r3, [pc, #700]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0x2a8>
 80035a2:	e014      	b.n	80035ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7fe fb58 	bl	8001c58 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ac:	f7fe fb54 	bl	8001c58 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b64      	cmp	r3, #100	; 0x64
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e26c      	b.n	8003a98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035be:	4ba5      	ldr	r3, [pc, #660]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0x2d0>
 80035ca:	e000      	b.n	80035ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d060      	beq.n	800369c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d005      	beq.n	80035ec <HAL_RCC_OscConfig+0x310>
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	2b0c      	cmp	r3, #12
 80035e4:	d119      	bne.n	800361a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d116      	bne.n	800361a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035ec:	4b99      	ldr	r3, [pc, #612]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_OscConfig+0x328>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e249      	b.n	8003a98 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003604:	4b93      	ldr	r3, [pc, #588]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	061b      	lsls	r3, r3, #24
 8003612:	4990      	ldr	r1, [pc, #576]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 8003614:	4313      	orrs	r3, r2
 8003616:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003618:	e040      	b.n	800369c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d023      	beq.n	800366a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003622:	4b8c      	ldr	r3, [pc, #560]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a8b      	ldr	r2, [pc, #556]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 8003628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362e:	f7fe fb13 	bl	8001c58 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003636:	f7fe fb0f 	bl	8001c58 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e227      	b.n	8003a98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003648:	4b82      	ldr	r3, [pc, #520]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f0      	beq.n	8003636 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003654:	4b7f      	ldr	r3, [pc, #508]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	061b      	lsls	r3, r3, #24
 8003662:	497c      	ldr	r1, [pc, #496]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 8003664:	4313      	orrs	r3, r2
 8003666:	604b      	str	r3, [r1, #4]
 8003668:	e018      	b.n	800369c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800366a:	4b7a      	ldr	r3, [pc, #488]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a79      	ldr	r2, [pc, #484]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 8003670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003676:	f7fe faef 	bl	8001c58 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800367e:	f7fe faeb 	bl	8001c58 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e203      	b.n	8003a98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003690:	4b70      	ldr	r3, [pc, #448]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1f0      	bne.n	800367e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d03c      	beq.n	8003722 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d01c      	beq.n	80036ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036b0:	4b68      	ldr	r3, [pc, #416]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 80036b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036b6:	4a67      	ldr	r2, [pc, #412]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c0:	f7fe faca 	bl	8001c58 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c8:	f7fe fac6 	bl	8001c58 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e1de      	b.n	8003a98 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036da:	4b5e      	ldr	r3, [pc, #376]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 80036dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0ef      	beq.n	80036c8 <HAL_RCC_OscConfig+0x3ec>
 80036e8:	e01b      	b.n	8003722 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ea:	4b5a      	ldr	r3, [pc, #360]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 80036ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036f0:	4a58      	ldr	r2, [pc, #352]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 80036f2:	f023 0301 	bic.w	r3, r3, #1
 80036f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fa:	f7fe faad 	bl	8001c58 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003702:	f7fe faa9 	bl	8001c58 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e1c1      	b.n	8003a98 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003714:	4b4f      	ldr	r3, [pc, #316]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 8003716:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1ef      	bne.n	8003702 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 80a6 	beq.w	800387c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003730:	2300      	movs	r3, #0
 8003732:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003734:	4b47      	ldr	r3, [pc, #284]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 8003736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10d      	bne.n	800375c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003740:	4b44      	ldr	r3, [pc, #272]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 8003742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003744:	4a43      	ldr	r2, [pc, #268]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 8003746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800374a:	6593      	str	r3, [r2, #88]	; 0x58
 800374c:	4b41      	ldr	r3, [pc, #260]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 800374e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003758:	2301      	movs	r3, #1
 800375a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800375c:	4b3e      	ldr	r3, [pc, #248]	; (8003858 <HAL_RCC_OscConfig+0x57c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d118      	bne.n	800379a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003768:	4b3b      	ldr	r3, [pc, #236]	; (8003858 <HAL_RCC_OscConfig+0x57c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a3a      	ldr	r2, [pc, #232]	; (8003858 <HAL_RCC_OscConfig+0x57c>)
 800376e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003772:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003774:	f7fe fa70 	bl	8001c58 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377c:	f7fe fa6c 	bl	8001c58 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e184      	b.n	8003a98 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800378e:	4b32      	ldr	r3, [pc, #200]	; (8003858 <HAL_RCC_OscConfig+0x57c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d108      	bne.n	80037b4 <HAL_RCC_OscConfig+0x4d8>
 80037a2:	4b2c      	ldr	r3, [pc, #176]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 80037a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a8:	4a2a      	ldr	r2, [pc, #168]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037b2:	e024      	b.n	80037fe <HAL_RCC_OscConfig+0x522>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2b05      	cmp	r3, #5
 80037ba:	d110      	bne.n	80037de <HAL_RCC_OscConfig+0x502>
 80037bc:	4b25      	ldr	r3, [pc, #148]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c2:	4a24      	ldr	r2, [pc, #144]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 80037c4:	f043 0304 	orr.w	r3, r3, #4
 80037c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037cc:	4b21      	ldr	r3, [pc, #132]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d2:	4a20      	ldr	r2, [pc, #128]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 80037d4:	f043 0301 	orr.w	r3, r3, #1
 80037d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037dc:	e00f      	b.n	80037fe <HAL_RCC_OscConfig+0x522>
 80037de:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 80037e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e4:	4a1b      	ldr	r2, [pc, #108]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 80037e6:	f023 0301 	bic.w	r3, r3, #1
 80037ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037ee:	4b19      	ldr	r3, [pc, #100]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 80037f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f4:	4a17      	ldr	r2, [pc, #92]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 80037f6:	f023 0304 	bic.w	r3, r3, #4
 80037fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d016      	beq.n	8003834 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003806:	f7fe fa27 	bl	8001c58 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800380c:	e00a      	b.n	8003824 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380e:	f7fe fa23 	bl	8001c58 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	f241 3288 	movw	r2, #5000	; 0x1388
 800381c:	4293      	cmp	r3, r2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e139      	b.n	8003a98 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003824:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <HAL_RCC_OscConfig+0x578>)
 8003826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0ed      	beq.n	800380e <HAL_RCC_OscConfig+0x532>
 8003832:	e01a      	b.n	800386a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003834:	f7fe fa10 	bl	8001c58 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800383a:	e00f      	b.n	800385c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800383c:	f7fe fa0c 	bl	8001c58 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f241 3288 	movw	r2, #5000	; 0x1388
 800384a:	4293      	cmp	r3, r2
 800384c:	d906      	bls.n	800385c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e122      	b.n	8003a98 <HAL_RCC_OscConfig+0x7bc>
 8003852:	bf00      	nop
 8003854:	40021000 	.word	0x40021000
 8003858:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800385c:	4b90      	ldr	r3, [pc, #576]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e8      	bne.n	800383c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800386a:	7ffb      	ldrb	r3, [r7, #31]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d105      	bne.n	800387c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003870:	4b8b      	ldr	r3, [pc, #556]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 8003872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003874:	4a8a      	ldr	r2, [pc, #552]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 8003876:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800387a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 8108 	beq.w	8003a96 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388a:	2b02      	cmp	r3, #2
 800388c:	f040 80d0 	bne.w	8003a30 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003890:	4b83      	ldr	r3, [pc, #524]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f003 0203 	and.w	r2, r3, #3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d130      	bne.n	8003906 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	3b01      	subs	r3, #1
 80038b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d127      	bne.n	8003906 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d11f      	bne.n	8003906 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038d0:	2a07      	cmp	r2, #7
 80038d2:	bf14      	ite	ne
 80038d4:	2201      	movne	r2, #1
 80038d6:	2200      	moveq	r2, #0
 80038d8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038da:	4293      	cmp	r3, r2
 80038dc:	d113      	bne.n	8003906 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e8:	085b      	lsrs	r3, r3, #1
 80038ea:	3b01      	subs	r3, #1
 80038ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d109      	bne.n	8003906 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	085b      	lsrs	r3, r3, #1
 80038fe:	3b01      	subs	r3, #1
 8003900:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003902:	429a      	cmp	r2, r3
 8003904:	d06e      	beq.n	80039e4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	2b0c      	cmp	r3, #12
 800390a:	d069      	beq.n	80039e0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800390c:	4b64      	ldr	r3, [pc, #400]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d105      	bne.n	8003924 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003918:	4b61      	ldr	r3, [pc, #388]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0b7      	b.n	8003a98 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003928:	4b5d      	ldr	r3, [pc, #372]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a5c      	ldr	r2, [pc, #368]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 800392e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003932:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003934:	f7fe f990 	bl	8001c58 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393c:	f7fe f98c 	bl	8001c58 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e0a4      	b.n	8003a98 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800394e:	4b54      	ldr	r3, [pc, #336]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800395a:	4b51      	ldr	r3, [pc, #324]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	4b51      	ldr	r3, [pc, #324]	; (8003aa4 <HAL_RCC_OscConfig+0x7c8>)
 8003960:	4013      	ands	r3, r2
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800396a:	3a01      	subs	r2, #1
 800396c:	0112      	lsls	r2, r2, #4
 800396e:	4311      	orrs	r1, r2
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003974:	0212      	lsls	r2, r2, #8
 8003976:	4311      	orrs	r1, r2
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800397c:	0852      	lsrs	r2, r2, #1
 800397e:	3a01      	subs	r2, #1
 8003980:	0552      	lsls	r2, r2, #21
 8003982:	4311      	orrs	r1, r2
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003988:	0852      	lsrs	r2, r2, #1
 800398a:	3a01      	subs	r2, #1
 800398c:	0652      	lsls	r2, r2, #25
 800398e:	4311      	orrs	r1, r2
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003994:	0912      	lsrs	r2, r2, #4
 8003996:	0452      	lsls	r2, r2, #17
 8003998:	430a      	orrs	r2, r1
 800399a:	4941      	ldr	r1, [pc, #260]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 800399c:	4313      	orrs	r3, r2
 800399e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039a0:	4b3f      	ldr	r3, [pc, #252]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a3e      	ldr	r2, [pc, #248]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 80039a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039ac:	4b3c      	ldr	r3, [pc, #240]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4a3b      	ldr	r2, [pc, #236]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 80039b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039b8:	f7fe f94e 	bl	8001c58 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c0:	f7fe f94a 	bl	8001c58 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e062      	b.n	8003a98 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d2:	4b33      	ldr	r3, [pc, #204]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039de:	e05a      	b.n	8003a96 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e059      	b.n	8003a98 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039e4:	4b2e      	ldr	r3, [pc, #184]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d152      	bne.n	8003a96 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039f0:	4b2b      	ldr	r3, [pc, #172]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a2a      	ldr	r2, [pc, #168]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 80039f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039fc:	4b28      	ldr	r3, [pc, #160]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	4a27      	ldr	r2, [pc, #156]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 8003a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a08:	f7fe f926 	bl	8001c58 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a10:	f7fe f922 	bl	8001c58 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e03a      	b.n	8003a98 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a22:	4b1f      	ldr	r3, [pc, #124]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0x734>
 8003a2e:	e032      	b.n	8003a96 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	2b0c      	cmp	r3, #12
 8003a34:	d02d      	beq.n	8003a92 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a36:	4b1a      	ldr	r3, [pc, #104]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a19      	ldr	r2, [pc, #100]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 8003a3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a40:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003a42:	4b17      	ldr	r3, [pc, #92]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d105      	bne.n	8003a5a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003a4e:	4b14      	ldr	r3, [pc, #80]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	4a13      	ldr	r2, [pc, #76]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 8003a54:	f023 0303 	bic.w	r3, r3, #3
 8003a58:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a5a:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	4a10      	ldr	r2, [pc, #64]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 8003a60:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a68:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6a:	f7fe f8f5 	bl	8001c58 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a72:	f7fe f8f1 	bl	8001c58 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e009      	b.n	8003a98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a84:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <HAL_RCC_OscConfig+0x7c4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f0      	bne.n	8003a72 <HAL_RCC_OscConfig+0x796>
 8003a90:	e001      	b.n	8003a96 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3720      	adds	r7, #32
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	f99d808c 	.word	0xf99d808c

08003aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0c8      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003abc:	4b66      	ldr	r3, [pc, #408]	; (8003c58 <HAL_RCC_ClockConfig+0x1b0>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d910      	bls.n	8003aec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aca:	4b63      	ldr	r3, [pc, #396]	; (8003c58 <HAL_RCC_ClockConfig+0x1b0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f023 0207 	bic.w	r2, r3, #7
 8003ad2:	4961      	ldr	r1, [pc, #388]	; (8003c58 <HAL_RCC_ClockConfig+0x1b0>)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ada:	4b5f      	ldr	r3, [pc, #380]	; (8003c58 <HAL_RCC_ClockConfig+0x1b0>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d001      	beq.n	8003aec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e0b0      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d04c      	beq.n	8003b92 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d107      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b00:	4b56      	ldr	r3, [pc, #344]	; (8003c5c <HAL_RCC_ClockConfig+0x1b4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d121      	bne.n	8003b50 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e09e      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d107      	bne.n	8003b28 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b18:	4b50      	ldr	r3, [pc, #320]	; (8003c5c <HAL_RCC_ClockConfig+0x1b4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d115      	bne.n	8003b50 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e092      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d107      	bne.n	8003b40 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b30:	4b4a      	ldr	r3, [pc, #296]	; (8003c5c <HAL_RCC_ClockConfig+0x1b4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d109      	bne.n	8003b50 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e086      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b40:	4b46      	ldr	r3, [pc, #280]	; (8003c5c <HAL_RCC_ClockConfig+0x1b4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e07e      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b50:	4b42      	ldr	r3, [pc, #264]	; (8003c5c <HAL_RCC_ClockConfig+0x1b4>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f023 0203 	bic.w	r2, r3, #3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	493f      	ldr	r1, [pc, #252]	; (8003c5c <HAL_RCC_ClockConfig+0x1b4>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b62:	f7fe f879 	bl	8001c58 <HAL_GetTick>
 8003b66:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b68:	e00a      	b.n	8003b80 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b6a:	f7fe f875 	bl	8001c58 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e066      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b80:	4b36      	ldr	r3, [pc, #216]	; (8003c5c <HAL_RCC_ClockConfig+0x1b4>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 020c 	and.w	r2, r3, #12
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d1eb      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d008      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b9e:	4b2f      	ldr	r3, [pc, #188]	; (8003c5c <HAL_RCC_ClockConfig+0x1b4>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	492c      	ldr	r1, [pc, #176]	; (8003c5c <HAL_RCC_ClockConfig+0x1b4>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bb0:	4b29      	ldr	r3, [pc, #164]	; (8003c58 <HAL_RCC_ClockConfig+0x1b0>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d210      	bcs.n	8003be0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bbe:	4b26      	ldr	r3, [pc, #152]	; (8003c58 <HAL_RCC_ClockConfig+0x1b0>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f023 0207 	bic.w	r2, r3, #7
 8003bc6:	4924      	ldr	r1, [pc, #144]	; (8003c58 <HAL_RCC_ClockConfig+0x1b0>)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bce:	4b22      	ldr	r3, [pc, #136]	; (8003c58 <HAL_RCC_ClockConfig+0x1b0>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d001      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e036      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d008      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bec:	4b1b      	ldr	r3, [pc, #108]	; (8003c5c <HAL_RCC_ClockConfig+0x1b4>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	4918      	ldr	r1, [pc, #96]	; (8003c5c <HAL_RCC_ClockConfig+0x1b4>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d009      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c0a:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <HAL_RCC_ClockConfig+0x1b4>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	4910      	ldr	r1, [pc, #64]	; (8003c5c <HAL_RCC_ClockConfig+0x1b4>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c1e:	f000 f825 	bl	8003c6c <HAL_RCC_GetSysClockFreq>
 8003c22:	4602      	mov	r2, r0
 8003c24:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <HAL_RCC_ClockConfig+0x1b4>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	091b      	lsrs	r3, r3, #4
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	490c      	ldr	r1, [pc, #48]	; (8003c60 <HAL_RCC_ClockConfig+0x1b8>)
 8003c30:	5ccb      	ldrb	r3, [r1, r3]
 8003c32:	f003 031f 	and.w	r3, r3, #31
 8003c36:	fa22 f303 	lsr.w	r3, r2, r3
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c3e:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <HAL_RCC_ClockConfig+0x1c0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fd ffb8 	bl	8001bb8 <HAL_InitTick>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c4c:	7afb      	ldrb	r3, [r7, #11]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40022000 	.word	0x40022000
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	08005fec 	.word	0x08005fec
 8003c64:	20000008 	.word	0x20000008
 8003c68:	2000000c 	.word	0x2000000c

08003c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b089      	sub	sp, #36	; 0x24
 8003c70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	61fb      	str	r3, [r7, #28]
 8003c76:	2300      	movs	r3, #0
 8003c78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c7a:	4b3e      	ldr	r3, [pc, #248]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 030c 	and.w	r3, r3, #12
 8003c82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c84:	4b3b      	ldr	r3, [pc, #236]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f003 0303 	and.w	r3, r3, #3
 8003c8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	2b0c      	cmp	r3, #12
 8003c98:	d121      	bne.n	8003cde <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d11e      	bne.n	8003cde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ca0:	4b34      	ldr	r3, [pc, #208]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0308 	and.w	r3, r3, #8
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d107      	bne.n	8003cbc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cac:	4b31      	ldr	r3, [pc, #196]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cb2:	0a1b      	lsrs	r3, r3, #8
 8003cb4:	f003 030f 	and.w	r3, r3, #15
 8003cb8:	61fb      	str	r3, [r7, #28]
 8003cba:	e005      	b.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cbc:	4b2d      	ldr	r3, [pc, #180]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	091b      	lsrs	r3, r3, #4
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003cc8:	4a2b      	ldr	r2, [pc, #172]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cd0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10d      	bne.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cdc:	e00a      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d102      	bne.n	8003cea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ce4:	4b25      	ldr	r3, [pc, #148]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x110>)
 8003ce6:	61bb      	str	r3, [r7, #24]
 8003ce8:	e004      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d101      	bne.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cf0:	4b23      	ldr	r3, [pc, #140]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x114>)
 8003cf2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	2b0c      	cmp	r3, #12
 8003cf8:	d134      	bne.n	8003d64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cfa:	4b1e      	ldr	r3, [pc, #120]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d003      	beq.n	8003d12 <HAL_RCC_GetSysClockFreq+0xa6>
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2b03      	cmp	r3, #3
 8003d0e:	d003      	beq.n	8003d18 <HAL_RCC_GetSysClockFreq+0xac>
 8003d10:	e005      	b.n	8003d1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d12:	4b1a      	ldr	r3, [pc, #104]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x110>)
 8003d14:	617b      	str	r3, [r7, #20]
      break;
 8003d16:	e005      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d18:	4b19      	ldr	r3, [pc, #100]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d1a:	617b      	str	r3, [r7, #20]
      break;
 8003d1c:	e002      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	617b      	str	r3, [r7, #20]
      break;
 8003d22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d24:	4b13      	ldr	r3, [pc, #76]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	091b      	lsrs	r3, r3, #4
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	3301      	adds	r3, #1
 8003d30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d32:	4b10      	ldr	r3, [pc, #64]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	0a1b      	lsrs	r3, r3, #8
 8003d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	fb02 f203 	mul.w	r2, r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d4a:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	0e5b      	lsrs	r3, r3, #25
 8003d50:	f003 0303 	and.w	r3, r3, #3
 8003d54:	3301      	adds	r3, #1
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d64:	69bb      	ldr	r3, [r7, #24]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3724      	adds	r7, #36	; 0x24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40021000 	.word	0x40021000
 8003d78:	08006004 	.word	0x08006004
 8003d7c:	00f42400 	.word	0x00f42400
 8003d80:	007a1200 	.word	0x007a1200

08003d84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d88:	4b03      	ldr	r3, [pc, #12]	; (8003d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	20000008 	.word	0x20000008

08003d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003da0:	f7ff fff0 	bl	8003d84 <HAL_RCC_GetHCLKFreq>
 8003da4:	4602      	mov	r2, r0
 8003da6:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	0a1b      	lsrs	r3, r3, #8
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	4904      	ldr	r1, [pc, #16]	; (8003dc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003db2:	5ccb      	ldrb	r3, [r1, r3]
 8003db4:	f003 031f 	and.w	r3, r3, #31
 8003db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	08005ffc 	.word	0x08005ffc

08003dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003dcc:	f7ff ffda 	bl	8003d84 <HAL_RCC_GetHCLKFreq>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	4b06      	ldr	r3, [pc, #24]	; (8003dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	0adb      	lsrs	r3, r3, #11
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	4904      	ldr	r1, [pc, #16]	; (8003df0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dde:	5ccb      	ldrb	r3, [r1, r3]
 8003de0:	f003 031f 	and.w	r3, r3, #31
 8003de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40021000 	.word	0x40021000
 8003df0:	08005ffc 	.word	0x08005ffc

08003df4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e00:	4b2a      	ldr	r3, [pc, #168]	; (8003eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e0c:	f7ff fa02 	bl	8003214 <HAL_PWREx_GetVoltageRange>
 8003e10:	6178      	str	r0, [r7, #20]
 8003e12:	e014      	b.n	8003e3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e14:	4b25      	ldr	r3, [pc, #148]	; (8003eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e18:	4a24      	ldr	r2, [pc, #144]	; (8003eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8003e20:	4b22      	ldr	r3, [pc, #136]	; (8003eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e2c:	f7ff f9f2 	bl	8003214 <HAL_PWREx_GetVoltageRange>
 8003e30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e32:	4b1e      	ldr	r3, [pc, #120]	; (8003eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e36:	4a1d      	ldr	r2, [pc, #116]	; (8003eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e44:	d10b      	bne.n	8003e5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b80      	cmp	r3, #128	; 0x80
 8003e4a:	d919      	bls.n	8003e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2ba0      	cmp	r3, #160	; 0xa0
 8003e50:	d902      	bls.n	8003e58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e52:	2302      	movs	r3, #2
 8003e54:	613b      	str	r3, [r7, #16]
 8003e56:	e013      	b.n	8003e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e58:	2301      	movs	r3, #1
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	e010      	b.n	8003e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b80      	cmp	r3, #128	; 0x80
 8003e62:	d902      	bls.n	8003e6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e64:	2303      	movs	r3, #3
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	e00a      	b.n	8003e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b80      	cmp	r3, #128	; 0x80
 8003e6e:	d102      	bne.n	8003e76 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e70:	2302      	movs	r3, #2
 8003e72:	613b      	str	r3, [r7, #16]
 8003e74:	e004      	b.n	8003e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b70      	cmp	r3, #112	; 0x70
 8003e7a:	d101      	bne.n	8003e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e80:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f023 0207 	bic.w	r2, r3, #7
 8003e88:	4909      	ldr	r1, [pc, #36]	; (8003eb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e90:	4b07      	ldr	r3, [pc, #28]	; (8003eb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d001      	beq.n	8003ea2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e000      	b.n	8003ea4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	40022000 	.word	0x40022000

08003eb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d041      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ed4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ed8:	d02a      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003eda:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ede:	d824      	bhi.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ee0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ee4:	d008      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ee6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003eea:	d81e      	bhi.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00a      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ef0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ef4:	d010      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ef6:	e018      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ef8:	4b86      	ldr	r3, [pc, #536]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4a85      	ldr	r2, [pc, #532]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f02:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f04:	e015      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	3304      	adds	r3, #4
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 fabb 	bl	8004488 <RCCEx_PLLSAI1_Config>
 8003f12:	4603      	mov	r3, r0
 8003f14:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f16:	e00c      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3320      	adds	r3, #32
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fba6 	bl	8004670 <RCCEx_PLLSAI2_Config>
 8003f24:	4603      	mov	r3, r0
 8003f26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f28:	e003      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	74fb      	strb	r3, [r7, #19]
      break;
 8003f2e:	e000      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f32:	7cfb      	ldrb	r3, [r7, #19]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10b      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f38:	4b76      	ldr	r3, [pc, #472]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f46:	4973      	ldr	r1, [pc, #460]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f4e:	e001      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f50:	7cfb      	ldrb	r3, [r7, #19]
 8003f52:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d041      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f68:	d02a      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f6e:	d824      	bhi.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f74:	d008      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f7a:	d81e      	bhi.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f84:	d010      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f86:	e018      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f88:	4b62      	ldr	r3, [pc, #392]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	4a61      	ldr	r2, [pc, #388]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f92:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f94:	e015      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 fa73 	bl	8004488 <RCCEx_PLLSAI1_Config>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fa6:	e00c      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3320      	adds	r3, #32
 8003fac:	2100      	movs	r1, #0
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 fb5e 	bl	8004670 <RCCEx_PLLSAI2_Config>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fb8:	e003      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	74fb      	strb	r3, [r7, #19]
      break;
 8003fbe:	e000      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003fc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fc2:	7cfb      	ldrb	r3, [r7, #19]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10b      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fc8:	4b52      	ldr	r3, [pc, #328]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fd6:	494f      	ldr	r1, [pc, #316]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fde:	e001      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe0:	7cfb      	ldrb	r3, [r7, #19]
 8003fe2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 80a0 	beq.w	8004132 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ff6:	4b47      	ldr	r3, [pc, #284]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004006:	2300      	movs	r3, #0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00d      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800400c:	4b41      	ldr	r3, [pc, #260]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800400e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004010:	4a40      	ldr	r2, [pc, #256]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004016:	6593      	str	r3, [r2, #88]	; 0x58
 8004018:	4b3e      	ldr	r3, [pc, #248]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800401a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004020:	60bb      	str	r3, [r7, #8]
 8004022:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004024:	2301      	movs	r3, #1
 8004026:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004028:	4b3b      	ldr	r3, [pc, #236]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a3a      	ldr	r2, [pc, #232]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800402e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004032:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004034:	f7fd fe10 	bl	8001c58 <HAL_GetTick>
 8004038:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800403a:	e009      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800403c:	f7fd fe0c 	bl	8001c58 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d902      	bls.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	74fb      	strb	r3, [r7, #19]
        break;
 800404e:	e005      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004050:	4b31      	ldr	r3, [pc, #196]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0ef      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800405c:	7cfb      	ldrb	r3, [r7, #19]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d15c      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004062:	4b2c      	ldr	r3, [pc, #176]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004068:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800406c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d01f      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	429a      	cmp	r2, r3
 800407e:	d019      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004080:	4b24      	ldr	r3, [pc, #144]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800408a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800408c:	4b21      	ldr	r3, [pc, #132]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004092:	4a20      	ldr	r2, [pc, #128]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800409c:	4b1d      	ldr	r3, [pc, #116]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a2:	4a1c      	ldr	r2, [pc, #112]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040ac:	4a19      	ldr	r2, [pc, #100]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d016      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040be:	f7fd fdcb 	bl	8001c58 <HAL_GetTick>
 80040c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c4:	e00b      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c6:	f7fd fdc7 	bl	8001c58 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d902      	bls.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	74fb      	strb	r3, [r7, #19]
            break;
 80040dc:	e006      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040de:	4b0d      	ldr	r3, [pc, #52]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0ec      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80040ec:	7cfb      	ldrb	r3, [r7, #19]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10c      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040f2:	4b08      	ldr	r3, [pc, #32]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004102:	4904      	ldr	r1, [pc, #16]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800410a:	e009      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800410c:	7cfb      	ldrb	r3, [r7, #19]
 800410e:	74bb      	strb	r3, [r7, #18]
 8004110:	e006      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004112:	bf00      	nop
 8004114:	40021000 	.word	0x40021000
 8004118:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411c:	7cfb      	ldrb	r3, [r7, #19]
 800411e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004120:	7c7b      	ldrb	r3, [r7, #17]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d105      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004126:	4b9e      	ldr	r3, [pc, #632]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412a:	4a9d      	ldr	r2, [pc, #628]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004130:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800413e:	4b98      	ldr	r3, [pc, #608]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004144:	f023 0203 	bic.w	r2, r3, #3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414c:	4994      	ldr	r1, [pc, #592]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414e:	4313      	orrs	r3, r2
 8004150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00a      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004160:	4b8f      	ldr	r3, [pc, #572]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004166:	f023 020c 	bic.w	r2, r3, #12
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416e:	498c      	ldr	r1, [pc, #560]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0304 	and.w	r3, r3, #4
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004182:	4b87      	ldr	r3, [pc, #540]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004188:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	4983      	ldr	r1, [pc, #524]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041a4:	4b7e      	ldr	r3, [pc, #504]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b2:	497b      	ldr	r1, [pc, #492]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0310 	and.w	r3, r3, #16
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041c6:	4b76      	ldr	r3, [pc, #472]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d4:	4972      	ldr	r1, [pc, #456]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0320 	and.w	r3, r3, #32
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041e8:	4b6d      	ldr	r3, [pc, #436]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f6:	496a      	ldr	r1, [pc, #424]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800420a:	4b65      	ldr	r3, [pc, #404]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004210:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004218:	4961      	ldr	r1, [pc, #388]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800422c:	4b5c      	ldr	r3, [pc, #368]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004232:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423a:	4959      	ldr	r1, [pc, #356]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800424e:	4b54      	ldr	r3, [pc, #336]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004254:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425c:	4950      	ldr	r1, [pc, #320]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004270:	4b4b      	ldr	r3, [pc, #300]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004276:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427e:	4948      	ldr	r1, [pc, #288]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004292:	4b43      	ldr	r3, [pc, #268]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004298:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a0:	493f      	ldr	r1, [pc, #252]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d028      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042b4:	4b3a      	ldr	r3, [pc, #232]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042c2:	4937      	ldr	r1, [pc, #220]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042d2:	d106      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042d4:	4b32      	ldr	r3, [pc, #200]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	4a31      	ldr	r2, [pc, #196]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042de:	60d3      	str	r3, [r2, #12]
 80042e0:	e011      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042ea:	d10c      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3304      	adds	r3, #4
 80042f0:	2101      	movs	r1, #1
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 f8c8 	bl	8004488 <RCCEx_PLLSAI1_Config>
 80042f8:	4603      	mov	r3, r0
 80042fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042fc:	7cfb      	ldrb	r3, [r7, #19]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004302:	7cfb      	ldrb	r3, [r7, #19]
 8004304:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d028      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004312:	4b23      	ldr	r3, [pc, #140]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004318:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004320:	491f      	ldr	r1, [pc, #124]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004330:	d106      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004332:	4b1b      	ldr	r3, [pc, #108]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	4a1a      	ldr	r2, [pc, #104]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004338:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800433c:	60d3      	str	r3, [r2, #12]
 800433e:	e011      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004344:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004348:	d10c      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	3304      	adds	r3, #4
 800434e:	2101      	movs	r1, #1
 8004350:	4618      	mov	r0, r3
 8004352:	f000 f899 	bl	8004488 <RCCEx_PLLSAI1_Config>
 8004356:	4603      	mov	r3, r0
 8004358:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800435a:	7cfb      	ldrb	r3, [r7, #19]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004360:	7cfb      	ldrb	r3, [r7, #19]
 8004362:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d02b      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004370:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004376:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800437e:	4908      	ldr	r1, [pc, #32]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800438a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800438e:	d109      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004390:	4b03      	ldr	r3, [pc, #12]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	4a02      	ldr	r2, [pc, #8]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004396:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800439a:	60d3      	str	r3, [r2, #12]
 800439c:	e014      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043ac:	d10c      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3304      	adds	r3, #4
 80043b2:	2101      	movs	r1, #1
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 f867 	bl	8004488 <RCCEx_PLLSAI1_Config>
 80043ba:	4603      	mov	r3, r0
 80043bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043be:	7cfb      	ldrb	r3, [r7, #19]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80043c4:	7cfb      	ldrb	r3, [r7, #19]
 80043c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d02f      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043d4:	4b2b      	ldr	r3, [pc, #172]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043e2:	4928      	ldr	r1, [pc, #160]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043f2:	d10d      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3304      	adds	r3, #4
 80043f8:	2102      	movs	r1, #2
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 f844 	bl	8004488 <RCCEx_PLLSAI1_Config>
 8004400:	4603      	mov	r3, r0
 8004402:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004404:	7cfb      	ldrb	r3, [r7, #19]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d014      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800440a:	7cfb      	ldrb	r3, [r7, #19]
 800440c:	74bb      	strb	r3, [r7, #18]
 800440e:	e011      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004418:	d10c      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3320      	adds	r3, #32
 800441e:	2102      	movs	r1, #2
 8004420:	4618      	mov	r0, r3
 8004422:	f000 f925 	bl	8004670 <RCCEx_PLLSAI2_Config>
 8004426:	4603      	mov	r3, r0
 8004428:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800442a:	7cfb      	ldrb	r3, [r7, #19]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004430:	7cfb      	ldrb	r3, [r7, #19]
 8004432:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00a      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004440:	4b10      	ldr	r3, [pc, #64]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004446:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800444e:	490d      	ldr	r1, [pc, #52]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00b      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004462:	4b08      	ldr	r3, [pc, #32]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004468:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004472:	4904      	ldr	r1, [pc, #16]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800447a:	7cbb      	ldrb	r3, [r7, #18]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40021000 	.word	0x40021000

08004488 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004496:	4b75      	ldr	r3, [pc, #468]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f003 0303 	and.w	r3, r3, #3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d018      	beq.n	80044d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044a2:	4b72      	ldr	r3, [pc, #456]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f003 0203 	and.w	r2, r3, #3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d10d      	bne.n	80044ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
       ||
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d009      	beq.n	80044ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80044ba:	4b6c      	ldr	r3, [pc, #432]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	091b      	lsrs	r3, r3, #4
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	1c5a      	adds	r2, r3, #1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
       ||
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d047      	beq.n	800455e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	73fb      	strb	r3, [r7, #15]
 80044d2:	e044      	b.n	800455e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b03      	cmp	r3, #3
 80044da:	d018      	beq.n	800450e <RCCEx_PLLSAI1_Config+0x86>
 80044dc:	2b03      	cmp	r3, #3
 80044de:	d825      	bhi.n	800452c <RCCEx_PLLSAI1_Config+0xa4>
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d002      	beq.n	80044ea <RCCEx_PLLSAI1_Config+0x62>
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d009      	beq.n	80044fc <RCCEx_PLLSAI1_Config+0x74>
 80044e8:	e020      	b.n	800452c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044ea:	4b60      	ldr	r3, [pc, #384]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d11d      	bne.n	8004532 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044fa:	e01a      	b.n	8004532 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044fc:	4b5b      	ldr	r3, [pc, #364]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004504:	2b00      	cmp	r3, #0
 8004506:	d116      	bne.n	8004536 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800450c:	e013      	b.n	8004536 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800450e:	4b57      	ldr	r3, [pc, #348]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10f      	bne.n	800453a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800451a:	4b54      	ldr	r3, [pc, #336]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d109      	bne.n	800453a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800452a:	e006      	b.n	800453a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	73fb      	strb	r3, [r7, #15]
      break;
 8004530:	e004      	b.n	800453c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004532:	bf00      	nop
 8004534:	e002      	b.n	800453c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004536:	bf00      	nop
 8004538:	e000      	b.n	800453c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800453a:	bf00      	nop
    }

    if(status == HAL_OK)
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10d      	bne.n	800455e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004542:	4b4a      	ldr	r3, [pc, #296]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6819      	ldr	r1, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	3b01      	subs	r3, #1
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	430b      	orrs	r3, r1
 8004558:	4944      	ldr	r1, [pc, #272]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 800455a:	4313      	orrs	r3, r2
 800455c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d17d      	bne.n	8004660 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004564:	4b41      	ldr	r3, [pc, #260]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a40      	ldr	r2, [pc, #256]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 800456a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800456e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004570:	f7fd fb72 	bl	8001c58 <HAL_GetTick>
 8004574:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004576:	e009      	b.n	800458c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004578:	f7fd fb6e 	bl	8001c58 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d902      	bls.n	800458c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	73fb      	strb	r3, [r7, #15]
        break;
 800458a:	e005      	b.n	8004598 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800458c:	4b37      	ldr	r3, [pc, #220]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1ef      	bne.n	8004578 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004598:	7bfb      	ldrb	r3, [r7, #15]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d160      	bne.n	8004660 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d111      	bne.n	80045c8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045a4:	4b31      	ldr	r3, [pc, #196]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80045ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6892      	ldr	r2, [r2, #8]
 80045b4:	0211      	lsls	r1, r2, #8
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	68d2      	ldr	r2, [r2, #12]
 80045ba:	0912      	lsrs	r2, r2, #4
 80045bc:	0452      	lsls	r2, r2, #17
 80045be:	430a      	orrs	r2, r1
 80045c0:	492a      	ldr	r1, [pc, #168]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	610b      	str	r3, [r1, #16]
 80045c6:	e027      	b.n	8004618 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d112      	bne.n	80045f4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045ce:	4b27      	ldr	r3, [pc, #156]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80045d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6892      	ldr	r2, [r2, #8]
 80045de:	0211      	lsls	r1, r2, #8
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6912      	ldr	r2, [r2, #16]
 80045e4:	0852      	lsrs	r2, r2, #1
 80045e6:	3a01      	subs	r2, #1
 80045e8:	0552      	lsls	r2, r2, #21
 80045ea:	430a      	orrs	r2, r1
 80045ec:	491f      	ldr	r1, [pc, #124]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	610b      	str	r3, [r1, #16]
 80045f2:	e011      	b.n	8004618 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045f4:	4b1d      	ldr	r3, [pc, #116]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6892      	ldr	r2, [r2, #8]
 8004604:	0211      	lsls	r1, r2, #8
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6952      	ldr	r2, [r2, #20]
 800460a:	0852      	lsrs	r2, r2, #1
 800460c:	3a01      	subs	r2, #1
 800460e:	0652      	lsls	r2, r2, #25
 8004610:	430a      	orrs	r2, r1
 8004612:	4916      	ldr	r1, [pc, #88]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004614:	4313      	orrs	r3, r2
 8004616:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004618:	4b14      	ldr	r3, [pc, #80]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a13      	ldr	r2, [pc, #76]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 800461e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004622:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004624:	f7fd fb18 	bl	8001c58 <HAL_GetTick>
 8004628:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800462a:	e009      	b.n	8004640 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800462c:	f7fd fb14 	bl	8001c58 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d902      	bls.n	8004640 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	73fb      	strb	r3, [r7, #15]
          break;
 800463e:	e005      	b.n	800464c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004640:	4b0a      	ldr	r3, [pc, #40]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0ef      	beq.n	800462c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800464c:	7bfb      	ldrb	r3, [r7, #15]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d106      	bne.n	8004660 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004652:	4b06      	ldr	r3, [pc, #24]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	4904      	ldr	r1, [pc, #16]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 800465c:	4313      	orrs	r3, r2
 800465e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004660:	7bfb      	ldrb	r3, [r7, #15]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40021000 	.word	0x40021000

08004670 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800467a:	2300      	movs	r3, #0
 800467c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800467e:	4b6a      	ldr	r3, [pc, #424]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d018      	beq.n	80046bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800468a:	4b67      	ldr	r3, [pc, #412]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f003 0203 	and.w	r2, r3, #3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d10d      	bne.n	80046b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
       ||
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d009      	beq.n	80046b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80046a2:	4b61      	ldr	r3, [pc, #388]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	091b      	lsrs	r3, r3, #4
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
       ||
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d047      	beq.n	8004746 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	73fb      	strb	r3, [r7, #15]
 80046ba:	e044      	b.n	8004746 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d018      	beq.n	80046f6 <RCCEx_PLLSAI2_Config+0x86>
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d825      	bhi.n	8004714 <RCCEx_PLLSAI2_Config+0xa4>
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d002      	beq.n	80046d2 <RCCEx_PLLSAI2_Config+0x62>
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d009      	beq.n	80046e4 <RCCEx_PLLSAI2_Config+0x74>
 80046d0:	e020      	b.n	8004714 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046d2:	4b55      	ldr	r3, [pc, #340]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d11d      	bne.n	800471a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046e2:	e01a      	b.n	800471a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046e4:	4b50      	ldr	r3, [pc, #320]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d116      	bne.n	800471e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046f4:	e013      	b.n	800471e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046f6:	4b4c      	ldr	r3, [pc, #304]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10f      	bne.n	8004722 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004702:	4b49      	ldr	r3, [pc, #292]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d109      	bne.n	8004722 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004712:	e006      	b.n	8004722 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	73fb      	strb	r3, [r7, #15]
      break;
 8004718:	e004      	b.n	8004724 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800471a:	bf00      	nop
 800471c:	e002      	b.n	8004724 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800471e:	bf00      	nop
 8004720:	e000      	b.n	8004724 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004722:	bf00      	nop
    }

    if(status == HAL_OK)
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10d      	bne.n	8004746 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800472a:	4b3f      	ldr	r3, [pc, #252]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6819      	ldr	r1, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	3b01      	subs	r3, #1
 800473c:	011b      	lsls	r3, r3, #4
 800473e:	430b      	orrs	r3, r1
 8004740:	4939      	ldr	r1, [pc, #228]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004742:	4313      	orrs	r3, r2
 8004744:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d167      	bne.n	800481c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800474c:	4b36      	ldr	r3, [pc, #216]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a35      	ldr	r2, [pc, #212]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004756:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004758:	f7fd fa7e 	bl	8001c58 <HAL_GetTick>
 800475c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800475e:	e009      	b.n	8004774 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004760:	f7fd fa7a 	bl	8001c58 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d902      	bls.n	8004774 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	73fb      	strb	r3, [r7, #15]
        break;
 8004772:	e005      	b.n	8004780 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004774:	4b2c      	ldr	r3, [pc, #176]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1ef      	bne.n	8004760 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004780:	7bfb      	ldrb	r3, [r7, #15]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d14a      	bne.n	800481c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d111      	bne.n	80047b0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800478c:	4b26      	ldr	r3, [pc, #152]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6892      	ldr	r2, [r2, #8]
 800479c:	0211      	lsls	r1, r2, #8
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	68d2      	ldr	r2, [r2, #12]
 80047a2:	0912      	lsrs	r2, r2, #4
 80047a4:	0452      	lsls	r2, r2, #17
 80047a6:	430a      	orrs	r2, r1
 80047a8:	491f      	ldr	r1, [pc, #124]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	614b      	str	r3, [r1, #20]
 80047ae:	e011      	b.n	80047d4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047b0:	4b1d      	ldr	r3, [pc, #116]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6892      	ldr	r2, [r2, #8]
 80047c0:	0211      	lsls	r1, r2, #8
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6912      	ldr	r2, [r2, #16]
 80047c6:	0852      	lsrs	r2, r2, #1
 80047c8:	3a01      	subs	r2, #1
 80047ca:	0652      	lsls	r2, r2, #25
 80047cc:	430a      	orrs	r2, r1
 80047ce:	4916      	ldr	r1, [pc, #88]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047d4:	4b14      	ldr	r3, [pc, #80]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a13      	ldr	r2, [pc, #76]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e0:	f7fd fa3a 	bl	8001c58 <HAL_GetTick>
 80047e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047e6:	e009      	b.n	80047fc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047e8:	f7fd fa36 	bl	8001c58 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d902      	bls.n	80047fc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	73fb      	strb	r3, [r7, #15]
          break;
 80047fa:	e005      	b.n	8004808 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047fc:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0ef      	beq.n	80047e8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004808:	7bfb      	ldrb	r3, [r7, #15]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800480e:	4b06      	ldr	r3, [pc, #24]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004810:	695a      	ldr	r2, [r3, #20]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	4904      	ldr	r1, [pc, #16]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004818:	4313      	orrs	r3, r2
 800481a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800481c:	7bfb      	ldrb	r3, [r7, #15]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40021000 	.word	0x40021000

0800482c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e049      	b.n	80048d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d106      	bne.n	8004858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7fd f846 	bl	80018e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3304      	adds	r3, #4
 8004868:	4619      	mov	r1, r3
 800486a:	4610      	mov	r0, r2
 800486c:	f000 f9ee 	bl	8004c4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
	...

080048dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d001      	beq.n	80048f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e04f      	b.n	8004994 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0201 	orr.w	r2, r2, #1
 800490a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a23      	ldr	r2, [pc, #140]	; (80049a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d01d      	beq.n	8004952 <HAL_TIM_Base_Start_IT+0x76>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491e:	d018      	beq.n	8004952 <HAL_TIM_Base_Start_IT+0x76>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a1f      	ldr	r2, [pc, #124]	; (80049a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d013      	beq.n	8004952 <HAL_TIM_Base_Start_IT+0x76>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a1e      	ldr	r2, [pc, #120]	; (80049a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00e      	beq.n	8004952 <HAL_TIM_Base_Start_IT+0x76>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a1c      	ldr	r2, [pc, #112]	; (80049ac <HAL_TIM_Base_Start_IT+0xd0>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d009      	beq.n	8004952 <HAL_TIM_Base_Start_IT+0x76>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a1b      	ldr	r2, [pc, #108]	; (80049b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d004      	beq.n	8004952 <HAL_TIM_Base_Start_IT+0x76>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a19      	ldr	r2, [pc, #100]	; (80049b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d115      	bne.n	800497e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	4b17      	ldr	r3, [pc, #92]	; (80049b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800495a:	4013      	ands	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2b06      	cmp	r3, #6
 8004962:	d015      	beq.n	8004990 <HAL_TIM_Base_Start_IT+0xb4>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800496a:	d011      	beq.n	8004990 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497c:	e008      	b.n	8004990 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0201 	orr.w	r2, r2, #1
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	e000      	b.n	8004992 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004990:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	40012c00 	.word	0x40012c00
 80049a4:	40000400 	.word	0x40000400
 80049a8:	40000800 	.word	0x40000800
 80049ac:	40000c00 	.word	0x40000c00
 80049b0:	40013400 	.word	0x40013400
 80049b4:	40014000 	.word	0x40014000
 80049b8:	00010007 	.word	0x00010007

080049bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d122      	bne.n	8004a18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d11b      	bne.n	8004a18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0202 	mvn.w	r2, #2
 80049e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f905 	bl	8004c0e <HAL_TIM_IC_CaptureCallback>
 8004a04:	e005      	b.n	8004a12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f8f7 	bl	8004bfa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f908 	bl	8004c22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f003 0304 	and.w	r3, r3, #4
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d122      	bne.n	8004a6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d11b      	bne.n	8004a6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0204 	mvn.w	r2, #4
 8004a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2202      	movs	r2, #2
 8004a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f8db 	bl	8004c0e <HAL_TIM_IC_CaptureCallback>
 8004a58:	e005      	b.n	8004a66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f8cd 	bl	8004bfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f8de 	bl	8004c22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b08      	cmp	r3, #8
 8004a78:	d122      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d11b      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f06f 0208 	mvn.w	r2, #8
 8004a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2204      	movs	r2, #4
 8004a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f8b1 	bl	8004c0e <HAL_TIM_IC_CaptureCallback>
 8004aac:	e005      	b.n	8004aba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f8a3 	bl	8004bfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f8b4 	bl	8004c22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f003 0310 	and.w	r3, r3, #16
 8004aca:	2b10      	cmp	r3, #16
 8004acc:	d122      	bne.n	8004b14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f003 0310 	and.w	r3, r3, #16
 8004ad8:	2b10      	cmp	r3, #16
 8004ada:	d11b      	bne.n	8004b14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f06f 0210 	mvn.w	r2, #16
 8004ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2208      	movs	r2, #8
 8004aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f887 	bl	8004c0e <HAL_TIM_IC_CaptureCallback>
 8004b00:	e005      	b.n	8004b0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f879 	bl	8004bfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f88a 	bl	8004c22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d10e      	bne.n	8004b40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d107      	bne.n	8004b40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f06f 0201 	mvn.w	r2, #1
 8004b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7fc fe4e 	bl	80017dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4a:	2b80      	cmp	r3, #128	; 0x80
 8004b4c:	d10e      	bne.n	8004b6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b58:	2b80      	cmp	r3, #128	; 0x80
 8004b5a:	d107      	bne.n	8004b6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f914 	bl	8004d94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b7a:	d10e      	bne.n	8004b9a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b86:	2b80      	cmp	r3, #128	; 0x80
 8004b88:	d107      	bne.n	8004b9a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f907 	bl	8004da8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba4:	2b40      	cmp	r3, #64	; 0x40
 8004ba6:	d10e      	bne.n	8004bc6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb2:	2b40      	cmp	r3, #64	; 0x40
 8004bb4:	d107      	bne.n	8004bc6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f838 	bl	8004c36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	f003 0320 	and.w	r3, r3, #32
 8004bd0:	2b20      	cmp	r3, #32
 8004bd2:	d10e      	bne.n	8004bf2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b20      	cmp	r3, #32
 8004be0:	d107      	bne.n	8004bf2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f06f 0220 	mvn.w	r2, #32
 8004bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f8c7 	bl	8004d80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c02:	bf00      	nop
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b083      	sub	sp, #12
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c2a:	bf00      	nop
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b083      	sub	sp, #12
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
	...

08004c4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a40      	ldr	r2, [pc, #256]	; (8004d60 <TIM_Base_SetConfig+0x114>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d013      	beq.n	8004c8c <TIM_Base_SetConfig+0x40>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c6a:	d00f      	beq.n	8004c8c <TIM_Base_SetConfig+0x40>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a3d      	ldr	r2, [pc, #244]	; (8004d64 <TIM_Base_SetConfig+0x118>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00b      	beq.n	8004c8c <TIM_Base_SetConfig+0x40>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a3c      	ldr	r2, [pc, #240]	; (8004d68 <TIM_Base_SetConfig+0x11c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d007      	beq.n	8004c8c <TIM_Base_SetConfig+0x40>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a3b      	ldr	r2, [pc, #236]	; (8004d6c <TIM_Base_SetConfig+0x120>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d003      	beq.n	8004c8c <TIM_Base_SetConfig+0x40>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a3a      	ldr	r2, [pc, #232]	; (8004d70 <TIM_Base_SetConfig+0x124>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d108      	bne.n	8004c9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a2f      	ldr	r2, [pc, #188]	; (8004d60 <TIM_Base_SetConfig+0x114>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d01f      	beq.n	8004ce6 <TIM_Base_SetConfig+0x9a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cac:	d01b      	beq.n	8004ce6 <TIM_Base_SetConfig+0x9a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a2c      	ldr	r2, [pc, #176]	; (8004d64 <TIM_Base_SetConfig+0x118>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d017      	beq.n	8004ce6 <TIM_Base_SetConfig+0x9a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a2b      	ldr	r2, [pc, #172]	; (8004d68 <TIM_Base_SetConfig+0x11c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d013      	beq.n	8004ce6 <TIM_Base_SetConfig+0x9a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a2a      	ldr	r2, [pc, #168]	; (8004d6c <TIM_Base_SetConfig+0x120>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d00f      	beq.n	8004ce6 <TIM_Base_SetConfig+0x9a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a29      	ldr	r2, [pc, #164]	; (8004d70 <TIM_Base_SetConfig+0x124>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d00b      	beq.n	8004ce6 <TIM_Base_SetConfig+0x9a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a28      	ldr	r2, [pc, #160]	; (8004d74 <TIM_Base_SetConfig+0x128>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d007      	beq.n	8004ce6 <TIM_Base_SetConfig+0x9a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a27      	ldr	r2, [pc, #156]	; (8004d78 <TIM_Base_SetConfig+0x12c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d003      	beq.n	8004ce6 <TIM_Base_SetConfig+0x9a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a26      	ldr	r2, [pc, #152]	; (8004d7c <TIM_Base_SetConfig+0x130>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d108      	bne.n	8004cf8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a10      	ldr	r2, [pc, #64]	; (8004d60 <TIM_Base_SetConfig+0x114>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d00f      	beq.n	8004d44 <TIM_Base_SetConfig+0xf8>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a12      	ldr	r2, [pc, #72]	; (8004d70 <TIM_Base_SetConfig+0x124>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d00b      	beq.n	8004d44 <TIM_Base_SetConfig+0xf8>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a11      	ldr	r2, [pc, #68]	; (8004d74 <TIM_Base_SetConfig+0x128>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d007      	beq.n	8004d44 <TIM_Base_SetConfig+0xf8>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a10      	ldr	r2, [pc, #64]	; (8004d78 <TIM_Base_SetConfig+0x12c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d003      	beq.n	8004d44 <TIM_Base_SetConfig+0xf8>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a0f      	ldr	r2, [pc, #60]	; (8004d7c <TIM_Base_SetConfig+0x130>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d103      	bne.n	8004d4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	615a      	str	r2, [r3, #20]
}
 8004d52:	bf00      	nop
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40012c00 	.word	0x40012c00
 8004d64:	40000400 	.word	0x40000400
 8004d68:	40000800 	.word	0x40000800
 8004d6c:	40000c00 	.word	0x40000c00
 8004d70:	40013400 	.word	0x40013400
 8004d74:	40014000 	.word	0x40014000
 8004d78:	40014400 	.word	0x40014400
 8004d7c:	40014800 	.word	0x40014800

08004d80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e040      	b.n	8004e50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d106      	bne.n	8004de4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fc fda6 	bl	8001930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2224      	movs	r2, #36	; 0x24
 8004de8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0201 	bic.w	r2, r2, #1
 8004df8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f82c 	bl	8004e58 <UART_SetConfig>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d101      	bne.n	8004e0a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e022      	b.n	8004e50 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 faaa 	bl	800536c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689a      	ldr	r2, [r3, #8]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0201 	orr.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 fb31 	bl	80054b0 <UART_CheckIdleState>
 8004e4e:	4603      	mov	r3, r0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e58:	b5b0      	push	{r4, r5, r7, lr}
 8004e5a:	b088      	sub	sp, #32
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e60:	2300      	movs	r3, #0
 8004e62:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	69db      	ldr	r3, [r3, #28]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	4bad      	ldr	r3, [pc, #692]	; (8005138 <UART_SetConfig+0x2e0>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6812      	ldr	r2, [r2, #0]
 8004e8a:	69f9      	ldr	r1, [r7, #28]
 8004e8c:	430b      	orrs	r3, r1
 8004e8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4aa2      	ldr	r2, [pc, #648]	; (800513c <UART_SetConfig+0x2e4>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d004      	beq.n	8004ec0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	69fa      	ldr	r2, [r7, #28]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69fa      	ldr	r2, [r7, #28]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a99      	ldr	r2, [pc, #612]	; (8005140 <UART_SetConfig+0x2e8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d121      	bne.n	8004f22 <UART_SetConfig+0xca>
 8004ede:	4b99      	ldr	r3, [pc, #612]	; (8005144 <UART_SetConfig+0x2ec>)
 8004ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee4:	f003 0303 	and.w	r3, r3, #3
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	d817      	bhi.n	8004f1c <UART_SetConfig+0xc4>
 8004eec:	a201      	add	r2, pc, #4	; (adr r2, 8004ef4 <UART_SetConfig+0x9c>)
 8004eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef2:	bf00      	nop
 8004ef4:	08004f05 	.word	0x08004f05
 8004ef8:	08004f11 	.word	0x08004f11
 8004efc:	08004f0b 	.word	0x08004f0b
 8004f00:	08004f17 	.word	0x08004f17
 8004f04:	2301      	movs	r3, #1
 8004f06:	76fb      	strb	r3, [r7, #27]
 8004f08:	e0e7      	b.n	80050da <UART_SetConfig+0x282>
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	76fb      	strb	r3, [r7, #27]
 8004f0e:	e0e4      	b.n	80050da <UART_SetConfig+0x282>
 8004f10:	2304      	movs	r3, #4
 8004f12:	76fb      	strb	r3, [r7, #27]
 8004f14:	e0e1      	b.n	80050da <UART_SetConfig+0x282>
 8004f16:	2308      	movs	r3, #8
 8004f18:	76fb      	strb	r3, [r7, #27]
 8004f1a:	e0de      	b.n	80050da <UART_SetConfig+0x282>
 8004f1c:	2310      	movs	r3, #16
 8004f1e:	76fb      	strb	r3, [r7, #27]
 8004f20:	e0db      	b.n	80050da <UART_SetConfig+0x282>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a88      	ldr	r2, [pc, #544]	; (8005148 <UART_SetConfig+0x2f0>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d132      	bne.n	8004f92 <UART_SetConfig+0x13a>
 8004f2c:	4b85      	ldr	r3, [pc, #532]	; (8005144 <UART_SetConfig+0x2ec>)
 8004f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f32:	f003 030c 	and.w	r3, r3, #12
 8004f36:	2b0c      	cmp	r3, #12
 8004f38:	d828      	bhi.n	8004f8c <UART_SetConfig+0x134>
 8004f3a:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <UART_SetConfig+0xe8>)
 8004f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f40:	08004f75 	.word	0x08004f75
 8004f44:	08004f8d 	.word	0x08004f8d
 8004f48:	08004f8d 	.word	0x08004f8d
 8004f4c:	08004f8d 	.word	0x08004f8d
 8004f50:	08004f81 	.word	0x08004f81
 8004f54:	08004f8d 	.word	0x08004f8d
 8004f58:	08004f8d 	.word	0x08004f8d
 8004f5c:	08004f8d 	.word	0x08004f8d
 8004f60:	08004f7b 	.word	0x08004f7b
 8004f64:	08004f8d 	.word	0x08004f8d
 8004f68:	08004f8d 	.word	0x08004f8d
 8004f6c:	08004f8d 	.word	0x08004f8d
 8004f70:	08004f87 	.word	0x08004f87
 8004f74:	2300      	movs	r3, #0
 8004f76:	76fb      	strb	r3, [r7, #27]
 8004f78:	e0af      	b.n	80050da <UART_SetConfig+0x282>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	76fb      	strb	r3, [r7, #27]
 8004f7e:	e0ac      	b.n	80050da <UART_SetConfig+0x282>
 8004f80:	2304      	movs	r3, #4
 8004f82:	76fb      	strb	r3, [r7, #27]
 8004f84:	e0a9      	b.n	80050da <UART_SetConfig+0x282>
 8004f86:	2308      	movs	r3, #8
 8004f88:	76fb      	strb	r3, [r7, #27]
 8004f8a:	e0a6      	b.n	80050da <UART_SetConfig+0x282>
 8004f8c:	2310      	movs	r3, #16
 8004f8e:	76fb      	strb	r3, [r7, #27]
 8004f90:	e0a3      	b.n	80050da <UART_SetConfig+0x282>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a6d      	ldr	r2, [pc, #436]	; (800514c <UART_SetConfig+0x2f4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d120      	bne.n	8004fde <UART_SetConfig+0x186>
 8004f9c:	4b69      	ldr	r3, [pc, #420]	; (8005144 <UART_SetConfig+0x2ec>)
 8004f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004fa6:	2b30      	cmp	r3, #48	; 0x30
 8004fa8:	d013      	beq.n	8004fd2 <UART_SetConfig+0x17a>
 8004faa:	2b30      	cmp	r3, #48	; 0x30
 8004fac:	d814      	bhi.n	8004fd8 <UART_SetConfig+0x180>
 8004fae:	2b20      	cmp	r3, #32
 8004fb0:	d009      	beq.n	8004fc6 <UART_SetConfig+0x16e>
 8004fb2:	2b20      	cmp	r3, #32
 8004fb4:	d810      	bhi.n	8004fd8 <UART_SetConfig+0x180>
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <UART_SetConfig+0x168>
 8004fba:	2b10      	cmp	r3, #16
 8004fbc:	d006      	beq.n	8004fcc <UART_SetConfig+0x174>
 8004fbe:	e00b      	b.n	8004fd8 <UART_SetConfig+0x180>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	76fb      	strb	r3, [r7, #27]
 8004fc4:	e089      	b.n	80050da <UART_SetConfig+0x282>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	76fb      	strb	r3, [r7, #27]
 8004fca:	e086      	b.n	80050da <UART_SetConfig+0x282>
 8004fcc:	2304      	movs	r3, #4
 8004fce:	76fb      	strb	r3, [r7, #27]
 8004fd0:	e083      	b.n	80050da <UART_SetConfig+0x282>
 8004fd2:	2308      	movs	r3, #8
 8004fd4:	76fb      	strb	r3, [r7, #27]
 8004fd6:	e080      	b.n	80050da <UART_SetConfig+0x282>
 8004fd8:	2310      	movs	r3, #16
 8004fda:	76fb      	strb	r3, [r7, #27]
 8004fdc:	e07d      	b.n	80050da <UART_SetConfig+0x282>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a5b      	ldr	r2, [pc, #364]	; (8005150 <UART_SetConfig+0x2f8>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d120      	bne.n	800502a <UART_SetConfig+0x1d2>
 8004fe8:	4b56      	ldr	r3, [pc, #344]	; (8005144 <UART_SetConfig+0x2ec>)
 8004fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ff2:	2bc0      	cmp	r3, #192	; 0xc0
 8004ff4:	d013      	beq.n	800501e <UART_SetConfig+0x1c6>
 8004ff6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ff8:	d814      	bhi.n	8005024 <UART_SetConfig+0x1cc>
 8004ffa:	2b80      	cmp	r3, #128	; 0x80
 8004ffc:	d009      	beq.n	8005012 <UART_SetConfig+0x1ba>
 8004ffe:	2b80      	cmp	r3, #128	; 0x80
 8005000:	d810      	bhi.n	8005024 <UART_SetConfig+0x1cc>
 8005002:	2b00      	cmp	r3, #0
 8005004:	d002      	beq.n	800500c <UART_SetConfig+0x1b4>
 8005006:	2b40      	cmp	r3, #64	; 0x40
 8005008:	d006      	beq.n	8005018 <UART_SetConfig+0x1c0>
 800500a:	e00b      	b.n	8005024 <UART_SetConfig+0x1cc>
 800500c:	2300      	movs	r3, #0
 800500e:	76fb      	strb	r3, [r7, #27]
 8005010:	e063      	b.n	80050da <UART_SetConfig+0x282>
 8005012:	2302      	movs	r3, #2
 8005014:	76fb      	strb	r3, [r7, #27]
 8005016:	e060      	b.n	80050da <UART_SetConfig+0x282>
 8005018:	2304      	movs	r3, #4
 800501a:	76fb      	strb	r3, [r7, #27]
 800501c:	e05d      	b.n	80050da <UART_SetConfig+0x282>
 800501e:	2308      	movs	r3, #8
 8005020:	76fb      	strb	r3, [r7, #27]
 8005022:	e05a      	b.n	80050da <UART_SetConfig+0x282>
 8005024:	2310      	movs	r3, #16
 8005026:	76fb      	strb	r3, [r7, #27]
 8005028:	e057      	b.n	80050da <UART_SetConfig+0x282>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a49      	ldr	r2, [pc, #292]	; (8005154 <UART_SetConfig+0x2fc>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d125      	bne.n	8005080 <UART_SetConfig+0x228>
 8005034:	4b43      	ldr	r3, [pc, #268]	; (8005144 <UART_SetConfig+0x2ec>)
 8005036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800503e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005042:	d017      	beq.n	8005074 <UART_SetConfig+0x21c>
 8005044:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005048:	d817      	bhi.n	800507a <UART_SetConfig+0x222>
 800504a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800504e:	d00b      	beq.n	8005068 <UART_SetConfig+0x210>
 8005050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005054:	d811      	bhi.n	800507a <UART_SetConfig+0x222>
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <UART_SetConfig+0x20a>
 800505a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800505e:	d006      	beq.n	800506e <UART_SetConfig+0x216>
 8005060:	e00b      	b.n	800507a <UART_SetConfig+0x222>
 8005062:	2300      	movs	r3, #0
 8005064:	76fb      	strb	r3, [r7, #27]
 8005066:	e038      	b.n	80050da <UART_SetConfig+0x282>
 8005068:	2302      	movs	r3, #2
 800506a:	76fb      	strb	r3, [r7, #27]
 800506c:	e035      	b.n	80050da <UART_SetConfig+0x282>
 800506e:	2304      	movs	r3, #4
 8005070:	76fb      	strb	r3, [r7, #27]
 8005072:	e032      	b.n	80050da <UART_SetConfig+0x282>
 8005074:	2308      	movs	r3, #8
 8005076:	76fb      	strb	r3, [r7, #27]
 8005078:	e02f      	b.n	80050da <UART_SetConfig+0x282>
 800507a:	2310      	movs	r3, #16
 800507c:	76fb      	strb	r3, [r7, #27]
 800507e:	e02c      	b.n	80050da <UART_SetConfig+0x282>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a2d      	ldr	r2, [pc, #180]	; (800513c <UART_SetConfig+0x2e4>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d125      	bne.n	80050d6 <UART_SetConfig+0x27e>
 800508a:	4b2e      	ldr	r3, [pc, #184]	; (8005144 <UART_SetConfig+0x2ec>)
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005090:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005094:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005098:	d017      	beq.n	80050ca <UART_SetConfig+0x272>
 800509a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800509e:	d817      	bhi.n	80050d0 <UART_SetConfig+0x278>
 80050a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050a4:	d00b      	beq.n	80050be <UART_SetConfig+0x266>
 80050a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050aa:	d811      	bhi.n	80050d0 <UART_SetConfig+0x278>
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d003      	beq.n	80050b8 <UART_SetConfig+0x260>
 80050b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b4:	d006      	beq.n	80050c4 <UART_SetConfig+0x26c>
 80050b6:	e00b      	b.n	80050d0 <UART_SetConfig+0x278>
 80050b8:	2300      	movs	r3, #0
 80050ba:	76fb      	strb	r3, [r7, #27]
 80050bc:	e00d      	b.n	80050da <UART_SetConfig+0x282>
 80050be:	2302      	movs	r3, #2
 80050c0:	76fb      	strb	r3, [r7, #27]
 80050c2:	e00a      	b.n	80050da <UART_SetConfig+0x282>
 80050c4:	2304      	movs	r3, #4
 80050c6:	76fb      	strb	r3, [r7, #27]
 80050c8:	e007      	b.n	80050da <UART_SetConfig+0x282>
 80050ca:	2308      	movs	r3, #8
 80050cc:	76fb      	strb	r3, [r7, #27]
 80050ce:	e004      	b.n	80050da <UART_SetConfig+0x282>
 80050d0:	2310      	movs	r3, #16
 80050d2:	76fb      	strb	r3, [r7, #27]
 80050d4:	e001      	b.n	80050da <UART_SetConfig+0x282>
 80050d6:	2310      	movs	r3, #16
 80050d8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a17      	ldr	r2, [pc, #92]	; (800513c <UART_SetConfig+0x2e4>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	f040 8087 	bne.w	80051f4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050e6:	7efb      	ldrb	r3, [r7, #27]
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d837      	bhi.n	800515c <UART_SetConfig+0x304>
 80050ec:	a201      	add	r2, pc, #4	; (adr r2, 80050f4 <UART_SetConfig+0x29c>)
 80050ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f2:	bf00      	nop
 80050f4:	08005119 	.word	0x08005119
 80050f8:	0800515d 	.word	0x0800515d
 80050fc:	08005121 	.word	0x08005121
 8005100:	0800515d 	.word	0x0800515d
 8005104:	08005127 	.word	0x08005127
 8005108:	0800515d 	.word	0x0800515d
 800510c:	0800515d 	.word	0x0800515d
 8005110:	0800515d 	.word	0x0800515d
 8005114:	0800512f 	.word	0x0800512f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005118:	f7fe fe40 	bl	8003d9c <HAL_RCC_GetPCLK1Freq>
 800511c:	6178      	str	r0, [r7, #20]
        break;
 800511e:	e022      	b.n	8005166 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005120:	4b0d      	ldr	r3, [pc, #52]	; (8005158 <UART_SetConfig+0x300>)
 8005122:	617b      	str	r3, [r7, #20]
        break;
 8005124:	e01f      	b.n	8005166 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005126:	f7fe fda1 	bl	8003c6c <HAL_RCC_GetSysClockFreq>
 800512a:	6178      	str	r0, [r7, #20]
        break;
 800512c:	e01b      	b.n	8005166 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800512e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005132:	617b      	str	r3, [r7, #20]
        break;
 8005134:	e017      	b.n	8005166 <UART_SetConfig+0x30e>
 8005136:	bf00      	nop
 8005138:	efff69f3 	.word	0xefff69f3
 800513c:	40008000 	.word	0x40008000
 8005140:	40013800 	.word	0x40013800
 8005144:	40021000 	.word	0x40021000
 8005148:	40004400 	.word	0x40004400
 800514c:	40004800 	.word	0x40004800
 8005150:	40004c00 	.word	0x40004c00
 8005154:	40005000 	.word	0x40005000
 8005158:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	76bb      	strb	r3, [r7, #26]
        break;
 8005164:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 80f1 	beq.w	8005350 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	4613      	mov	r3, r2
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	4413      	add	r3, r2
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	429a      	cmp	r2, r3
 800517c:	d305      	bcc.n	800518a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	429a      	cmp	r2, r3
 8005188:	d902      	bls.n	8005190 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	76bb      	strb	r3, [r7, #26]
 800518e:	e0df      	b.n	8005350 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	4618      	mov	r0, r3
 8005194:	f04f 0100 	mov.w	r1, #0
 8005198:	f04f 0200 	mov.w	r2, #0
 800519c:	f04f 0300 	mov.w	r3, #0
 80051a0:	020b      	lsls	r3, r1, #8
 80051a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051a6:	0202      	lsls	r2, r0, #8
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	6849      	ldr	r1, [r1, #4]
 80051ac:	0849      	lsrs	r1, r1, #1
 80051ae:	4608      	mov	r0, r1
 80051b0:	f04f 0100 	mov.w	r1, #0
 80051b4:	1814      	adds	r4, r2, r0
 80051b6:	eb43 0501 	adc.w	r5, r3, r1
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	461a      	mov	r2, r3
 80051c0:	f04f 0300 	mov.w	r3, #0
 80051c4:	4620      	mov	r0, r4
 80051c6:	4629      	mov	r1, r5
 80051c8:	f7fb f85a 	bl	8000280 <__aeabi_uldivmod>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4613      	mov	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051da:	d308      	bcc.n	80051ee <UART_SetConfig+0x396>
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051e2:	d204      	bcs.n	80051ee <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	60da      	str	r2, [r3, #12]
 80051ec:	e0b0      	b.n	8005350 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	76bb      	strb	r3, [r7, #26]
 80051f2:	e0ad      	b.n	8005350 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051fc:	d15c      	bne.n	80052b8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80051fe:	7efb      	ldrb	r3, [r7, #27]
 8005200:	2b08      	cmp	r3, #8
 8005202:	d828      	bhi.n	8005256 <UART_SetConfig+0x3fe>
 8005204:	a201      	add	r2, pc, #4	; (adr r2, 800520c <UART_SetConfig+0x3b4>)
 8005206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520a:	bf00      	nop
 800520c:	08005231 	.word	0x08005231
 8005210:	08005239 	.word	0x08005239
 8005214:	08005241 	.word	0x08005241
 8005218:	08005257 	.word	0x08005257
 800521c:	08005247 	.word	0x08005247
 8005220:	08005257 	.word	0x08005257
 8005224:	08005257 	.word	0x08005257
 8005228:	08005257 	.word	0x08005257
 800522c:	0800524f 	.word	0x0800524f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005230:	f7fe fdb4 	bl	8003d9c <HAL_RCC_GetPCLK1Freq>
 8005234:	6178      	str	r0, [r7, #20]
        break;
 8005236:	e013      	b.n	8005260 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005238:	f7fe fdc6 	bl	8003dc8 <HAL_RCC_GetPCLK2Freq>
 800523c:	6178      	str	r0, [r7, #20]
        break;
 800523e:	e00f      	b.n	8005260 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005240:	4b49      	ldr	r3, [pc, #292]	; (8005368 <UART_SetConfig+0x510>)
 8005242:	617b      	str	r3, [r7, #20]
        break;
 8005244:	e00c      	b.n	8005260 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005246:	f7fe fd11 	bl	8003c6c <HAL_RCC_GetSysClockFreq>
 800524a:	6178      	str	r0, [r7, #20]
        break;
 800524c:	e008      	b.n	8005260 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800524e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005252:	617b      	str	r3, [r7, #20]
        break;
 8005254:	e004      	b.n	8005260 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	76bb      	strb	r3, [r7, #26]
        break;
 800525e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d074      	beq.n	8005350 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	005a      	lsls	r2, r3, #1
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	085b      	lsrs	r3, r3, #1
 8005270:	441a      	add	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	fbb2 f3f3 	udiv	r3, r2, r3
 800527a:	b29b      	uxth	r3, r3
 800527c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	2b0f      	cmp	r3, #15
 8005282:	d916      	bls.n	80052b2 <UART_SetConfig+0x45a>
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800528a:	d212      	bcs.n	80052b2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	b29b      	uxth	r3, r3
 8005290:	f023 030f 	bic.w	r3, r3, #15
 8005294:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	085b      	lsrs	r3, r3, #1
 800529a:	b29b      	uxth	r3, r3
 800529c:	f003 0307 	and.w	r3, r3, #7
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	89fb      	ldrh	r3, [r7, #14]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	89fa      	ldrh	r2, [r7, #14]
 80052ae:	60da      	str	r2, [r3, #12]
 80052b0:	e04e      	b.n	8005350 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	76bb      	strb	r3, [r7, #26]
 80052b6:	e04b      	b.n	8005350 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052b8:	7efb      	ldrb	r3, [r7, #27]
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d827      	bhi.n	800530e <UART_SetConfig+0x4b6>
 80052be:	a201      	add	r2, pc, #4	; (adr r2, 80052c4 <UART_SetConfig+0x46c>)
 80052c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c4:	080052e9 	.word	0x080052e9
 80052c8:	080052f1 	.word	0x080052f1
 80052cc:	080052f9 	.word	0x080052f9
 80052d0:	0800530f 	.word	0x0800530f
 80052d4:	080052ff 	.word	0x080052ff
 80052d8:	0800530f 	.word	0x0800530f
 80052dc:	0800530f 	.word	0x0800530f
 80052e0:	0800530f 	.word	0x0800530f
 80052e4:	08005307 	.word	0x08005307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e8:	f7fe fd58 	bl	8003d9c <HAL_RCC_GetPCLK1Freq>
 80052ec:	6178      	str	r0, [r7, #20]
        break;
 80052ee:	e013      	b.n	8005318 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052f0:	f7fe fd6a 	bl	8003dc8 <HAL_RCC_GetPCLK2Freq>
 80052f4:	6178      	str	r0, [r7, #20]
        break;
 80052f6:	e00f      	b.n	8005318 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052f8:	4b1b      	ldr	r3, [pc, #108]	; (8005368 <UART_SetConfig+0x510>)
 80052fa:	617b      	str	r3, [r7, #20]
        break;
 80052fc:	e00c      	b.n	8005318 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052fe:	f7fe fcb5 	bl	8003c6c <HAL_RCC_GetSysClockFreq>
 8005302:	6178      	str	r0, [r7, #20]
        break;
 8005304:	e008      	b.n	8005318 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800530a:	617b      	str	r3, [r7, #20]
        break;
 800530c:	e004      	b.n	8005318 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	76bb      	strb	r3, [r7, #26]
        break;
 8005316:	bf00      	nop
    }

    if (pclk != 0U)
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d018      	beq.n	8005350 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	085a      	lsrs	r2, r3, #1
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	441a      	add	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005330:	b29b      	uxth	r3, r3
 8005332:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	2b0f      	cmp	r3, #15
 8005338:	d908      	bls.n	800534c <UART_SetConfig+0x4f4>
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005340:	d204      	bcs.n	800534c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	60da      	str	r2, [r3, #12]
 800534a:	e001      	b.n	8005350 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800535c:	7ebb      	ldrb	r3, [r7, #26]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3720      	adds	r7, #32
 8005362:	46bd      	mov	sp, r7
 8005364:	bdb0      	pop	{r4, r5, r7, pc}
 8005366:	bf00      	nop
 8005368:	00f42400 	.word	0x00f42400

0800536c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	f003 0304 	and.w	r3, r3, #4
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	f003 0310 	and.w	r3, r3, #16
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005448:	2b00      	cmp	r3, #0
 800544a:	d01a      	beq.n	8005482 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800546a:	d10a      	bne.n	8005482 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	605a      	str	r2, [r3, #4]
  }
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af02      	add	r7, sp, #8
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054c0:	f7fc fbca 	bl	8001c58 <HAL_GetTick>
 80054c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0308 	and.w	r3, r3, #8
 80054d0:	2b08      	cmp	r3, #8
 80054d2:	d10e      	bne.n	80054f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f82d 	bl	8005542 <UART_WaitOnFlagUntilTimeout>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e023      	b.n	800553a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b04      	cmp	r3, #4
 80054fe:	d10e      	bne.n	800551e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005500:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f817 	bl	8005542 <UART_WaitOnFlagUntilTimeout>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e00d      	b.n	800553a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2220      	movs	r2, #32
 8005522:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2220      	movs	r2, #32
 8005528:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b084      	sub	sp, #16
 8005546:	af00      	add	r7, sp, #0
 8005548:	60f8      	str	r0, [r7, #12]
 800554a:	60b9      	str	r1, [r7, #8]
 800554c:	603b      	str	r3, [r7, #0]
 800554e:	4613      	mov	r3, r2
 8005550:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005552:	e05e      	b.n	8005612 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800555a:	d05a      	beq.n	8005612 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800555c:	f7fc fb7c 	bl	8001c58 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	429a      	cmp	r2, r3
 800556a:	d302      	bcc.n	8005572 <UART_WaitOnFlagUntilTimeout+0x30>
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d11b      	bne.n	80055aa <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005580:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 0201 	bic.w	r2, r2, #1
 8005590:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2220      	movs	r2, #32
 8005596:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2220      	movs	r2, #32
 800559c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e043      	b.n	8005632 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d02c      	beq.n	8005612 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055c6:	d124      	bne.n	8005612 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055d0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055e0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0201 	bic.w	r2, r2, #1
 80055f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2220      	movs	r2, #32
 80055f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2220      	movs	r2, #32
 80055fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2220      	movs	r2, #32
 8005602:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e00f      	b.n	8005632 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69da      	ldr	r2, [r3, #28]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	4013      	ands	r3, r2
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	429a      	cmp	r2, r3
 8005620:	bf0c      	ite	eq
 8005622:	2301      	moveq	r3, #1
 8005624:	2300      	movne	r3, #0
 8005626:	b2db      	uxtb	r3, r3
 8005628:	461a      	mov	r2, r3
 800562a:	79fb      	ldrb	r3, [r7, #7]
 800562c:	429a      	cmp	r2, r3
 800562e:	d091      	beq.n	8005554 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <__errno>:
 800563c:	4b01      	ldr	r3, [pc, #4]	; (8005644 <__errno+0x8>)
 800563e:	6818      	ldr	r0, [r3, #0]
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	20000014 	.word	0x20000014

08005648 <__libc_init_array>:
 8005648:	b570      	push	{r4, r5, r6, lr}
 800564a:	4d0d      	ldr	r5, [pc, #52]	; (8005680 <__libc_init_array+0x38>)
 800564c:	4c0d      	ldr	r4, [pc, #52]	; (8005684 <__libc_init_array+0x3c>)
 800564e:	1b64      	subs	r4, r4, r5
 8005650:	10a4      	asrs	r4, r4, #2
 8005652:	2600      	movs	r6, #0
 8005654:	42a6      	cmp	r6, r4
 8005656:	d109      	bne.n	800566c <__libc_init_array+0x24>
 8005658:	4d0b      	ldr	r5, [pc, #44]	; (8005688 <__libc_init_array+0x40>)
 800565a:	4c0c      	ldr	r4, [pc, #48]	; (800568c <__libc_init_array+0x44>)
 800565c:	f000 fc82 	bl	8005f64 <_init>
 8005660:	1b64      	subs	r4, r4, r5
 8005662:	10a4      	asrs	r4, r4, #2
 8005664:	2600      	movs	r6, #0
 8005666:	42a6      	cmp	r6, r4
 8005668:	d105      	bne.n	8005676 <__libc_init_array+0x2e>
 800566a:	bd70      	pop	{r4, r5, r6, pc}
 800566c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005670:	4798      	blx	r3
 8005672:	3601      	adds	r6, #1
 8005674:	e7ee      	b.n	8005654 <__libc_init_array+0xc>
 8005676:	f855 3b04 	ldr.w	r3, [r5], #4
 800567a:	4798      	blx	r3
 800567c:	3601      	adds	r6, #1
 800567e:	e7f2      	b.n	8005666 <__libc_init_array+0x1e>
 8005680:	08006070 	.word	0x08006070
 8005684:	08006070 	.word	0x08006070
 8005688:	08006070 	.word	0x08006070
 800568c:	08006074 	.word	0x08006074

08005690 <memset>:
 8005690:	4402      	add	r2, r0
 8005692:	4603      	mov	r3, r0
 8005694:	4293      	cmp	r3, r2
 8005696:	d100      	bne.n	800569a <memset+0xa>
 8005698:	4770      	bx	lr
 800569a:	f803 1b01 	strb.w	r1, [r3], #1
 800569e:	e7f9      	b.n	8005694 <memset+0x4>

080056a0 <sniprintf>:
 80056a0:	b40c      	push	{r2, r3}
 80056a2:	b530      	push	{r4, r5, lr}
 80056a4:	4b17      	ldr	r3, [pc, #92]	; (8005704 <sniprintf+0x64>)
 80056a6:	1e0c      	subs	r4, r1, #0
 80056a8:	681d      	ldr	r5, [r3, #0]
 80056aa:	b09d      	sub	sp, #116	; 0x74
 80056ac:	da08      	bge.n	80056c0 <sniprintf+0x20>
 80056ae:	238b      	movs	r3, #139	; 0x8b
 80056b0:	602b      	str	r3, [r5, #0]
 80056b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056b6:	b01d      	add	sp, #116	; 0x74
 80056b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056bc:	b002      	add	sp, #8
 80056be:	4770      	bx	lr
 80056c0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80056c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80056c8:	bf14      	ite	ne
 80056ca:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80056ce:	4623      	moveq	r3, r4
 80056d0:	9304      	str	r3, [sp, #16]
 80056d2:	9307      	str	r3, [sp, #28]
 80056d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80056d8:	9002      	str	r0, [sp, #8]
 80056da:	9006      	str	r0, [sp, #24]
 80056dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80056e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80056e2:	ab21      	add	r3, sp, #132	; 0x84
 80056e4:	a902      	add	r1, sp, #8
 80056e6:	4628      	mov	r0, r5
 80056e8:	9301      	str	r3, [sp, #4]
 80056ea:	f000 f889 	bl	8005800 <_svfiprintf_r>
 80056ee:	1c43      	adds	r3, r0, #1
 80056f0:	bfbc      	itt	lt
 80056f2:	238b      	movlt	r3, #139	; 0x8b
 80056f4:	602b      	strlt	r3, [r5, #0]
 80056f6:	2c00      	cmp	r4, #0
 80056f8:	d0dd      	beq.n	80056b6 <sniprintf+0x16>
 80056fa:	9b02      	ldr	r3, [sp, #8]
 80056fc:	2200      	movs	r2, #0
 80056fe:	701a      	strb	r2, [r3, #0]
 8005700:	e7d9      	b.n	80056b6 <sniprintf+0x16>
 8005702:	bf00      	nop
 8005704:	20000014 	.word	0x20000014

08005708 <siprintf>:
 8005708:	b40e      	push	{r1, r2, r3}
 800570a:	b500      	push	{lr}
 800570c:	b09c      	sub	sp, #112	; 0x70
 800570e:	ab1d      	add	r3, sp, #116	; 0x74
 8005710:	9002      	str	r0, [sp, #8]
 8005712:	9006      	str	r0, [sp, #24]
 8005714:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005718:	4809      	ldr	r0, [pc, #36]	; (8005740 <siprintf+0x38>)
 800571a:	9107      	str	r1, [sp, #28]
 800571c:	9104      	str	r1, [sp, #16]
 800571e:	4909      	ldr	r1, [pc, #36]	; (8005744 <siprintf+0x3c>)
 8005720:	f853 2b04 	ldr.w	r2, [r3], #4
 8005724:	9105      	str	r1, [sp, #20]
 8005726:	6800      	ldr	r0, [r0, #0]
 8005728:	9301      	str	r3, [sp, #4]
 800572a:	a902      	add	r1, sp, #8
 800572c:	f000 f868 	bl	8005800 <_svfiprintf_r>
 8005730:	9b02      	ldr	r3, [sp, #8]
 8005732:	2200      	movs	r2, #0
 8005734:	701a      	strb	r2, [r3, #0]
 8005736:	b01c      	add	sp, #112	; 0x70
 8005738:	f85d eb04 	ldr.w	lr, [sp], #4
 800573c:	b003      	add	sp, #12
 800573e:	4770      	bx	lr
 8005740:	20000014 	.word	0x20000014
 8005744:	ffff0208 	.word	0xffff0208

08005748 <__ssputs_r>:
 8005748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800574c:	688e      	ldr	r6, [r1, #8]
 800574e:	429e      	cmp	r6, r3
 8005750:	4682      	mov	sl, r0
 8005752:	460c      	mov	r4, r1
 8005754:	4690      	mov	r8, r2
 8005756:	461f      	mov	r7, r3
 8005758:	d838      	bhi.n	80057cc <__ssputs_r+0x84>
 800575a:	898a      	ldrh	r2, [r1, #12]
 800575c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005760:	d032      	beq.n	80057c8 <__ssputs_r+0x80>
 8005762:	6825      	ldr	r5, [r4, #0]
 8005764:	6909      	ldr	r1, [r1, #16]
 8005766:	eba5 0901 	sub.w	r9, r5, r1
 800576a:	6965      	ldr	r5, [r4, #20]
 800576c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005770:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005774:	3301      	adds	r3, #1
 8005776:	444b      	add	r3, r9
 8005778:	106d      	asrs	r5, r5, #1
 800577a:	429d      	cmp	r5, r3
 800577c:	bf38      	it	cc
 800577e:	461d      	movcc	r5, r3
 8005780:	0553      	lsls	r3, r2, #21
 8005782:	d531      	bpl.n	80057e8 <__ssputs_r+0xa0>
 8005784:	4629      	mov	r1, r5
 8005786:	f000 fb47 	bl	8005e18 <_malloc_r>
 800578a:	4606      	mov	r6, r0
 800578c:	b950      	cbnz	r0, 80057a4 <__ssputs_r+0x5c>
 800578e:	230c      	movs	r3, #12
 8005790:	f8ca 3000 	str.w	r3, [sl]
 8005794:	89a3      	ldrh	r3, [r4, #12]
 8005796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800579a:	81a3      	strh	r3, [r4, #12]
 800579c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057a4:	6921      	ldr	r1, [r4, #16]
 80057a6:	464a      	mov	r2, r9
 80057a8:	f000 fabe 	bl	8005d28 <memcpy>
 80057ac:	89a3      	ldrh	r3, [r4, #12]
 80057ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80057b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b6:	81a3      	strh	r3, [r4, #12]
 80057b8:	6126      	str	r6, [r4, #16]
 80057ba:	6165      	str	r5, [r4, #20]
 80057bc:	444e      	add	r6, r9
 80057be:	eba5 0509 	sub.w	r5, r5, r9
 80057c2:	6026      	str	r6, [r4, #0]
 80057c4:	60a5      	str	r5, [r4, #8]
 80057c6:	463e      	mov	r6, r7
 80057c8:	42be      	cmp	r6, r7
 80057ca:	d900      	bls.n	80057ce <__ssputs_r+0x86>
 80057cc:	463e      	mov	r6, r7
 80057ce:	4632      	mov	r2, r6
 80057d0:	6820      	ldr	r0, [r4, #0]
 80057d2:	4641      	mov	r1, r8
 80057d4:	f000 fab6 	bl	8005d44 <memmove>
 80057d8:	68a3      	ldr	r3, [r4, #8]
 80057da:	6822      	ldr	r2, [r4, #0]
 80057dc:	1b9b      	subs	r3, r3, r6
 80057de:	4432      	add	r2, r6
 80057e0:	60a3      	str	r3, [r4, #8]
 80057e2:	6022      	str	r2, [r4, #0]
 80057e4:	2000      	movs	r0, #0
 80057e6:	e7db      	b.n	80057a0 <__ssputs_r+0x58>
 80057e8:	462a      	mov	r2, r5
 80057ea:	f000 fb6f 	bl	8005ecc <_realloc_r>
 80057ee:	4606      	mov	r6, r0
 80057f0:	2800      	cmp	r0, #0
 80057f2:	d1e1      	bne.n	80057b8 <__ssputs_r+0x70>
 80057f4:	6921      	ldr	r1, [r4, #16]
 80057f6:	4650      	mov	r0, sl
 80057f8:	f000 fabe 	bl	8005d78 <_free_r>
 80057fc:	e7c7      	b.n	800578e <__ssputs_r+0x46>
	...

08005800 <_svfiprintf_r>:
 8005800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005804:	4698      	mov	r8, r3
 8005806:	898b      	ldrh	r3, [r1, #12]
 8005808:	061b      	lsls	r3, r3, #24
 800580a:	b09d      	sub	sp, #116	; 0x74
 800580c:	4607      	mov	r7, r0
 800580e:	460d      	mov	r5, r1
 8005810:	4614      	mov	r4, r2
 8005812:	d50e      	bpl.n	8005832 <_svfiprintf_r+0x32>
 8005814:	690b      	ldr	r3, [r1, #16]
 8005816:	b963      	cbnz	r3, 8005832 <_svfiprintf_r+0x32>
 8005818:	2140      	movs	r1, #64	; 0x40
 800581a:	f000 fafd 	bl	8005e18 <_malloc_r>
 800581e:	6028      	str	r0, [r5, #0]
 8005820:	6128      	str	r0, [r5, #16]
 8005822:	b920      	cbnz	r0, 800582e <_svfiprintf_r+0x2e>
 8005824:	230c      	movs	r3, #12
 8005826:	603b      	str	r3, [r7, #0]
 8005828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800582c:	e0d1      	b.n	80059d2 <_svfiprintf_r+0x1d2>
 800582e:	2340      	movs	r3, #64	; 0x40
 8005830:	616b      	str	r3, [r5, #20]
 8005832:	2300      	movs	r3, #0
 8005834:	9309      	str	r3, [sp, #36]	; 0x24
 8005836:	2320      	movs	r3, #32
 8005838:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800583c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005840:	2330      	movs	r3, #48	; 0x30
 8005842:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80059ec <_svfiprintf_r+0x1ec>
 8005846:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800584a:	f04f 0901 	mov.w	r9, #1
 800584e:	4623      	mov	r3, r4
 8005850:	469a      	mov	sl, r3
 8005852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005856:	b10a      	cbz	r2, 800585c <_svfiprintf_r+0x5c>
 8005858:	2a25      	cmp	r2, #37	; 0x25
 800585a:	d1f9      	bne.n	8005850 <_svfiprintf_r+0x50>
 800585c:	ebba 0b04 	subs.w	fp, sl, r4
 8005860:	d00b      	beq.n	800587a <_svfiprintf_r+0x7a>
 8005862:	465b      	mov	r3, fp
 8005864:	4622      	mov	r2, r4
 8005866:	4629      	mov	r1, r5
 8005868:	4638      	mov	r0, r7
 800586a:	f7ff ff6d 	bl	8005748 <__ssputs_r>
 800586e:	3001      	adds	r0, #1
 8005870:	f000 80aa 	beq.w	80059c8 <_svfiprintf_r+0x1c8>
 8005874:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005876:	445a      	add	r2, fp
 8005878:	9209      	str	r2, [sp, #36]	; 0x24
 800587a:	f89a 3000 	ldrb.w	r3, [sl]
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 80a2 	beq.w	80059c8 <_svfiprintf_r+0x1c8>
 8005884:	2300      	movs	r3, #0
 8005886:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800588a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800588e:	f10a 0a01 	add.w	sl, sl, #1
 8005892:	9304      	str	r3, [sp, #16]
 8005894:	9307      	str	r3, [sp, #28]
 8005896:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800589a:	931a      	str	r3, [sp, #104]	; 0x68
 800589c:	4654      	mov	r4, sl
 800589e:	2205      	movs	r2, #5
 80058a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058a4:	4851      	ldr	r0, [pc, #324]	; (80059ec <_svfiprintf_r+0x1ec>)
 80058a6:	f7fa fc9b 	bl	80001e0 <memchr>
 80058aa:	9a04      	ldr	r2, [sp, #16]
 80058ac:	b9d8      	cbnz	r0, 80058e6 <_svfiprintf_r+0xe6>
 80058ae:	06d0      	lsls	r0, r2, #27
 80058b0:	bf44      	itt	mi
 80058b2:	2320      	movmi	r3, #32
 80058b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058b8:	0711      	lsls	r1, r2, #28
 80058ba:	bf44      	itt	mi
 80058bc:	232b      	movmi	r3, #43	; 0x2b
 80058be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058c2:	f89a 3000 	ldrb.w	r3, [sl]
 80058c6:	2b2a      	cmp	r3, #42	; 0x2a
 80058c8:	d015      	beq.n	80058f6 <_svfiprintf_r+0xf6>
 80058ca:	9a07      	ldr	r2, [sp, #28]
 80058cc:	4654      	mov	r4, sl
 80058ce:	2000      	movs	r0, #0
 80058d0:	f04f 0c0a 	mov.w	ip, #10
 80058d4:	4621      	mov	r1, r4
 80058d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058da:	3b30      	subs	r3, #48	; 0x30
 80058dc:	2b09      	cmp	r3, #9
 80058de:	d94e      	bls.n	800597e <_svfiprintf_r+0x17e>
 80058e0:	b1b0      	cbz	r0, 8005910 <_svfiprintf_r+0x110>
 80058e2:	9207      	str	r2, [sp, #28]
 80058e4:	e014      	b.n	8005910 <_svfiprintf_r+0x110>
 80058e6:	eba0 0308 	sub.w	r3, r0, r8
 80058ea:	fa09 f303 	lsl.w	r3, r9, r3
 80058ee:	4313      	orrs	r3, r2
 80058f0:	9304      	str	r3, [sp, #16]
 80058f2:	46a2      	mov	sl, r4
 80058f4:	e7d2      	b.n	800589c <_svfiprintf_r+0x9c>
 80058f6:	9b03      	ldr	r3, [sp, #12]
 80058f8:	1d19      	adds	r1, r3, #4
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	9103      	str	r1, [sp, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	bfbb      	ittet	lt
 8005902:	425b      	neglt	r3, r3
 8005904:	f042 0202 	orrlt.w	r2, r2, #2
 8005908:	9307      	strge	r3, [sp, #28]
 800590a:	9307      	strlt	r3, [sp, #28]
 800590c:	bfb8      	it	lt
 800590e:	9204      	strlt	r2, [sp, #16]
 8005910:	7823      	ldrb	r3, [r4, #0]
 8005912:	2b2e      	cmp	r3, #46	; 0x2e
 8005914:	d10c      	bne.n	8005930 <_svfiprintf_r+0x130>
 8005916:	7863      	ldrb	r3, [r4, #1]
 8005918:	2b2a      	cmp	r3, #42	; 0x2a
 800591a:	d135      	bne.n	8005988 <_svfiprintf_r+0x188>
 800591c:	9b03      	ldr	r3, [sp, #12]
 800591e:	1d1a      	adds	r2, r3, #4
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	9203      	str	r2, [sp, #12]
 8005924:	2b00      	cmp	r3, #0
 8005926:	bfb8      	it	lt
 8005928:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800592c:	3402      	adds	r4, #2
 800592e:	9305      	str	r3, [sp, #20]
 8005930:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80059fc <_svfiprintf_r+0x1fc>
 8005934:	7821      	ldrb	r1, [r4, #0]
 8005936:	2203      	movs	r2, #3
 8005938:	4650      	mov	r0, sl
 800593a:	f7fa fc51 	bl	80001e0 <memchr>
 800593e:	b140      	cbz	r0, 8005952 <_svfiprintf_r+0x152>
 8005940:	2340      	movs	r3, #64	; 0x40
 8005942:	eba0 000a 	sub.w	r0, r0, sl
 8005946:	fa03 f000 	lsl.w	r0, r3, r0
 800594a:	9b04      	ldr	r3, [sp, #16]
 800594c:	4303      	orrs	r3, r0
 800594e:	3401      	adds	r4, #1
 8005950:	9304      	str	r3, [sp, #16]
 8005952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005956:	4826      	ldr	r0, [pc, #152]	; (80059f0 <_svfiprintf_r+0x1f0>)
 8005958:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800595c:	2206      	movs	r2, #6
 800595e:	f7fa fc3f 	bl	80001e0 <memchr>
 8005962:	2800      	cmp	r0, #0
 8005964:	d038      	beq.n	80059d8 <_svfiprintf_r+0x1d8>
 8005966:	4b23      	ldr	r3, [pc, #140]	; (80059f4 <_svfiprintf_r+0x1f4>)
 8005968:	bb1b      	cbnz	r3, 80059b2 <_svfiprintf_r+0x1b2>
 800596a:	9b03      	ldr	r3, [sp, #12]
 800596c:	3307      	adds	r3, #7
 800596e:	f023 0307 	bic.w	r3, r3, #7
 8005972:	3308      	adds	r3, #8
 8005974:	9303      	str	r3, [sp, #12]
 8005976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005978:	4433      	add	r3, r6
 800597a:	9309      	str	r3, [sp, #36]	; 0x24
 800597c:	e767      	b.n	800584e <_svfiprintf_r+0x4e>
 800597e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005982:	460c      	mov	r4, r1
 8005984:	2001      	movs	r0, #1
 8005986:	e7a5      	b.n	80058d4 <_svfiprintf_r+0xd4>
 8005988:	2300      	movs	r3, #0
 800598a:	3401      	adds	r4, #1
 800598c:	9305      	str	r3, [sp, #20]
 800598e:	4619      	mov	r1, r3
 8005990:	f04f 0c0a 	mov.w	ip, #10
 8005994:	4620      	mov	r0, r4
 8005996:	f810 2b01 	ldrb.w	r2, [r0], #1
 800599a:	3a30      	subs	r2, #48	; 0x30
 800599c:	2a09      	cmp	r2, #9
 800599e:	d903      	bls.n	80059a8 <_svfiprintf_r+0x1a8>
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d0c5      	beq.n	8005930 <_svfiprintf_r+0x130>
 80059a4:	9105      	str	r1, [sp, #20]
 80059a6:	e7c3      	b.n	8005930 <_svfiprintf_r+0x130>
 80059a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80059ac:	4604      	mov	r4, r0
 80059ae:	2301      	movs	r3, #1
 80059b0:	e7f0      	b.n	8005994 <_svfiprintf_r+0x194>
 80059b2:	ab03      	add	r3, sp, #12
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	462a      	mov	r2, r5
 80059b8:	4b0f      	ldr	r3, [pc, #60]	; (80059f8 <_svfiprintf_r+0x1f8>)
 80059ba:	a904      	add	r1, sp, #16
 80059bc:	4638      	mov	r0, r7
 80059be:	f3af 8000 	nop.w
 80059c2:	1c42      	adds	r2, r0, #1
 80059c4:	4606      	mov	r6, r0
 80059c6:	d1d6      	bne.n	8005976 <_svfiprintf_r+0x176>
 80059c8:	89ab      	ldrh	r3, [r5, #12]
 80059ca:	065b      	lsls	r3, r3, #25
 80059cc:	f53f af2c 	bmi.w	8005828 <_svfiprintf_r+0x28>
 80059d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059d2:	b01d      	add	sp, #116	; 0x74
 80059d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059d8:	ab03      	add	r3, sp, #12
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	462a      	mov	r2, r5
 80059de:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <_svfiprintf_r+0x1f8>)
 80059e0:	a904      	add	r1, sp, #16
 80059e2:	4638      	mov	r0, r7
 80059e4:	f000 f87a 	bl	8005adc <_printf_i>
 80059e8:	e7eb      	b.n	80059c2 <_svfiprintf_r+0x1c2>
 80059ea:	bf00      	nop
 80059ec:	08006034 	.word	0x08006034
 80059f0:	0800603e 	.word	0x0800603e
 80059f4:	00000000 	.word	0x00000000
 80059f8:	08005749 	.word	0x08005749
 80059fc:	0800603a 	.word	0x0800603a

08005a00 <_printf_common>:
 8005a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a04:	4616      	mov	r6, r2
 8005a06:	4699      	mov	r9, r3
 8005a08:	688a      	ldr	r2, [r1, #8]
 8005a0a:	690b      	ldr	r3, [r1, #16]
 8005a0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a10:	4293      	cmp	r3, r2
 8005a12:	bfb8      	it	lt
 8005a14:	4613      	movlt	r3, r2
 8005a16:	6033      	str	r3, [r6, #0]
 8005a18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a1c:	4607      	mov	r7, r0
 8005a1e:	460c      	mov	r4, r1
 8005a20:	b10a      	cbz	r2, 8005a26 <_printf_common+0x26>
 8005a22:	3301      	adds	r3, #1
 8005a24:	6033      	str	r3, [r6, #0]
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	0699      	lsls	r1, r3, #26
 8005a2a:	bf42      	ittt	mi
 8005a2c:	6833      	ldrmi	r3, [r6, #0]
 8005a2e:	3302      	addmi	r3, #2
 8005a30:	6033      	strmi	r3, [r6, #0]
 8005a32:	6825      	ldr	r5, [r4, #0]
 8005a34:	f015 0506 	ands.w	r5, r5, #6
 8005a38:	d106      	bne.n	8005a48 <_printf_common+0x48>
 8005a3a:	f104 0a19 	add.w	sl, r4, #25
 8005a3e:	68e3      	ldr	r3, [r4, #12]
 8005a40:	6832      	ldr	r2, [r6, #0]
 8005a42:	1a9b      	subs	r3, r3, r2
 8005a44:	42ab      	cmp	r3, r5
 8005a46:	dc26      	bgt.n	8005a96 <_printf_common+0x96>
 8005a48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a4c:	1e13      	subs	r3, r2, #0
 8005a4e:	6822      	ldr	r2, [r4, #0]
 8005a50:	bf18      	it	ne
 8005a52:	2301      	movne	r3, #1
 8005a54:	0692      	lsls	r2, r2, #26
 8005a56:	d42b      	bmi.n	8005ab0 <_printf_common+0xb0>
 8005a58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a5c:	4649      	mov	r1, r9
 8005a5e:	4638      	mov	r0, r7
 8005a60:	47c0      	blx	r8
 8005a62:	3001      	adds	r0, #1
 8005a64:	d01e      	beq.n	8005aa4 <_printf_common+0xa4>
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	68e5      	ldr	r5, [r4, #12]
 8005a6a:	6832      	ldr	r2, [r6, #0]
 8005a6c:	f003 0306 	and.w	r3, r3, #6
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	bf08      	it	eq
 8005a74:	1aad      	subeq	r5, r5, r2
 8005a76:	68a3      	ldr	r3, [r4, #8]
 8005a78:	6922      	ldr	r2, [r4, #16]
 8005a7a:	bf0c      	ite	eq
 8005a7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a80:	2500      	movne	r5, #0
 8005a82:	4293      	cmp	r3, r2
 8005a84:	bfc4      	itt	gt
 8005a86:	1a9b      	subgt	r3, r3, r2
 8005a88:	18ed      	addgt	r5, r5, r3
 8005a8a:	2600      	movs	r6, #0
 8005a8c:	341a      	adds	r4, #26
 8005a8e:	42b5      	cmp	r5, r6
 8005a90:	d11a      	bne.n	8005ac8 <_printf_common+0xc8>
 8005a92:	2000      	movs	r0, #0
 8005a94:	e008      	b.n	8005aa8 <_printf_common+0xa8>
 8005a96:	2301      	movs	r3, #1
 8005a98:	4652      	mov	r2, sl
 8005a9a:	4649      	mov	r1, r9
 8005a9c:	4638      	mov	r0, r7
 8005a9e:	47c0      	blx	r8
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	d103      	bne.n	8005aac <_printf_common+0xac>
 8005aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aac:	3501      	adds	r5, #1
 8005aae:	e7c6      	b.n	8005a3e <_printf_common+0x3e>
 8005ab0:	18e1      	adds	r1, r4, r3
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	2030      	movs	r0, #48	; 0x30
 8005ab6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005aba:	4422      	add	r2, r4
 8005abc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ac0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ac4:	3302      	adds	r3, #2
 8005ac6:	e7c7      	b.n	8005a58 <_printf_common+0x58>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	4622      	mov	r2, r4
 8005acc:	4649      	mov	r1, r9
 8005ace:	4638      	mov	r0, r7
 8005ad0:	47c0      	blx	r8
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	d0e6      	beq.n	8005aa4 <_printf_common+0xa4>
 8005ad6:	3601      	adds	r6, #1
 8005ad8:	e7d9      	b.n	8005a8e <_printf_common+0x8e>
	...

08005adc <_printf_i>:
 8005adc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae0:	460c      	mov	r4, r1
 8005ae2:	4691      	mov	r9, r2
 8005ae4:	7e27      	ldrb	r7, [r4, #24]
 8005ae6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005ae8:	2f78      	cmp	r7, #120	; 0x78
 8005aea:	4680      	mov	r8, r0
 8005aec:	469a      	mov	sl, r3
 8005aee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005af2:	d807      	bhi.n	8005b04 <_printf_i+0x28>
 8005af4:	2f62      	cmp	r7, #98	; 0x62
 8005af6:	d80a      	bhi.n	8005b0e <_printf_i+0x32>
 8005af8:	2f00      	cmp	r7, #0
 8005afa:	f000 80d8 	beq.w	8005cae <_printf_i+0x1d2>
 8005afe:	2f58      	cmp	r7, #88	; 0x58
 8005b00:	f000 80a3 	beq.w	8005c4a <_printf_i+0x16e>
 8005b04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b0c:	e03a      	b.n	8005b84 <_printf_i+0xa8>
 8005b0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b12:	2b15      	cmp	r3, #21
 8005b14:	d8f6      	bhi.n	8005b04 <_printf_i+0x28>
 8005b16:	a001      	add	r0, pc, #4	; (adr r0, 8005b1c <_printf_i+0x40>)
 8005b18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005b1c:	08005b75 	.word	0x08005b75
 8005b20:	08005b89 	.word	0x08005b89
 8005b24:	08005b05 	.word	0x08005b05
 8005b28:	08005b05 	.word	0x08005b05
 8005b2c:	08005b05 	.word	0x08005b05
 8005b30:	08005b05 	.word	0x08005b05
 8005b34:	08005b89 	.word	0x08005b89
 8005b38:	08005b05 	.word	0x08005b05
 8005b3c:	08005b05 	.word	0x08005b05
 8005b40:	08005b05 	.word	0x08005b05
 8005b44:	08005b05 	.word	0x08005b05
 8005b48:	08005c95 	.word	0x08005c95
 8005b4c:	08005bb9 	.word	0x08005bb9
 8005b50:	08005c77 	.word	0x08005c77
 8005b54:	08005b05 	.word	0x08005b05
 8005b58:	08005b05 	.word	0x08005b05
 8005b5c:	08005cb7 	.word	0x08005cb7
 8005b60:	08005b05 	.word	0x08005b05
 8005b64:	08005bb9 	.word	0x08005bb9
 8005b68:	08005b05 	.word	0x08005b05
 8005b6c:	08005b05 	.word	0x08005b05
 8005b70:	08005c7f 	.word	0x08005c7f
 8005b74:	680b      	ldr	r3, [r1, #0]
 8005b76:	1d1a      	adds	r2, r3, #4
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	600a      	str	r2, [r1, #0]
 8005b7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b84:	2301      	movs	r3, #1
 8005b86:	e0a3      	b.n	8005cd0 <_printf_i+0x1f4>
 8005b88:	6825      	ldr	r5, [r4, #0]
 8005b8a:	6808      	ldr	r0, [r1, #0]
 8005b8c:	062e      	lsls	r6, r5, #24
 8005b8e:	f100 0304 	add.w	r3, r0, #4
 8005b92:	d50a      	bpl.n	8005baa <_printf_i+0xce>
 8005b94:	6805      	ldr	r5, [r0, #0]
 8005b96:	600b      	str	r3, [r1, #0]
 8005b98:	2d00      	cmp	r5, #0
 8005b9a:	da03      	bge.n	8005ba4 <_printf_i+0xc8>
 8005b9c:	232d      	movs	r3, #45	; 0x2d
 8005b9e:	426d      	negs	r5, r5
 8005ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ba4:	485e      	ldr	r0, [pc, #376]	; (8005d20 <_printf_i+0x244>)
 8005ba6:	230a      	movs	r3, #10
 8005ba8:	e019      	b.n	8005bde <_printf_i+0x102>
 8005baa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005bae:	6805      	ldr	r5, [r0, #0]
 8005bb0:	600b      	str	r3, [r1, #0]
 8005bb2:	bf18      	it	ne
 8005bb4:	b22d      	sxthne	r5, r5
 8005bb6:	e7ef      	b.n	8005b98 <_printf_i+0xbc>
 8005bb8:	680b      	ldr	r3, [r1, #0]
 8005bba:	6825      	ldr	r5, [r4, #0]
 8005bbc:	1d18      	adds	r0, r3, #4
 8005bbe:	6008      	str	r0, [r1, #0]
 8005bc0:	0628      	lsls	r0, r5, #24
 8005bc2:	d501      	bpl.n	8005bc8 <_printf_i+0xec>
 8005bc4:	681d      	ldr	r5, [r3, #0]
 8005bc6:	e002      	b.n	8005bce <_printf_i+0xf2>
 8005bc8:	0669      	lsls	r1, r5, #25
 8005bca:	d5fb      	bpl.n	8005bc4 <_printf_i+0xe8>
 8005bcc:	881d      	ldrh	r5, [r3, #0]
 8005bce:	4854      	ldr	r0, [pc, #336]	; (8005d20 <_printf_i+0x244>)
 8005bd0:	2f6f      	cmp	r7, #111	; 0x6f
 8005bd2:	bf0c      	ite	eq
 8005bd4:	2308      	moveq	r3, #8
 8005bd6:	230a      	movne	r3, #10
 8005bd8:	2100      	movs	r1, #0
 8005bda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bde:	6866      	ldr	r6, [r4, #4]
 8005be0:	60a6      	str	r6, [r4, #8]
 8005be2:	2e00      	cmp	r6, #0
 8005be4:	bfa2      	ittt	ge
 8005be6:	6821      	ldrge	r1, [r4, #0]
 8005be8:	f021 0104 	bicge.w	r1, r1, #4
 8005bec:	6021      	strge	r1, [r4, #0]
 8005bee:	b90d      	cbnz	r5, 8005bf4 <_printf_i+0x118>
 8005bf0:	2e00      	cmp	r6, #0
 8005bf2:	d04d      	beq.n	8005c90 <_printf_i+0x1b4>
 8005bf4:	4616      	mov	r6, r2
 8005bf6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bfa:	fb03 5711 	mls	r7, r3, r1, r5
 8005bfe:	5dc7      	ldrb	r7, [r0, r7]
 8005c00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c04:	462f      	mov	r7, r5
 8005c06:	42bb      	cmp	r3, r7
 8005c08:	460d      	mov	r5, r1
 8005c0a:	d9f4      	bls.n	8005bf6 <_printf_i+0x11a>
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d10b      	bne.n	8005c28 <_printf_i+0x14c>
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	07df      	lsls	r7, r3, #31
 8005c14:	d508      	bpl.n	8005c28 <_printf_i+0x14c>
 8005c16:	6923      	ldr	r3, [r4, #16]
 8005c18:	6861      	ldr	r1, [r4, #4]
 8005c1a:	4299      	cmp	r1, r3
 8005c1c:	bfde      	ittt	le
 8005c1e:	2330      	movle	r3, #48	; 0x30
 8005c20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c24:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005c28:	1b92      	subs	r2, r2, r6
 8005c2a:	6122      	str	r2, [r4, #16]
 8005c2c:	f8cd a000 	str.w	sl, [sp]
 8005c30:	464b      	mov	r3, r9
 8005c32:	aa03      	add	r2, sp, #12
 8005c34:	4621      	mov	r1, r4
 8005c36:	4640      	mov	r0, r8
 8005c38:	f7ff fee2 	bl	8005a00 <_printf_common>
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	d14c      	bne.n	8005cda <_printf_i+0x1fe>
 8005c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c44:	b004      	add	sp, #16
 8005c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c4a:	4835      	ldr	r0, [pc, #212]	; (8005d20 <_printf_i+0x244>)
 8005c4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	680e      	ldr	r6, [r1, #0]
 8005c54:	061f      	lsls	r7, r3, #24
 8005c56:	f856 5b04 	ldr.w	r5, [r6], #4
 8005c5a:	600e      	str	r6, [r1, #0]
 8005c5c:	d514      	bpl.n	8005c88 <_printf_i+0x1ac>
 8005c5e:	07d9      	lsls	r1, r3, #31
 8005c60:	bf44      	itt	mi
 8005c62:	f043 0320 	orrmi.w	r3, r3, #32
 8005c66:	6023      	strmi	r3, [r4, #0]
 8005c68:	b91d      	cbnz	r5, 8005c72 <_printf_i+0x196>
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	f023 0320 	bic.w	r3, r3, #32
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	2310      	movs	r3, #16
 8005c74:	e7b0      	b.n	8005bd8 <_printf_i+0xfc>
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	f043 0320 	orr.w	r3, r3, #32
 8005c7c:	6023      	str	r3, [r4, #0]
 8005c7e:	2378      	movs	r3, #120	; 0x78
 8005c80:	4828      	ldr	r0, [pc, #160]	; (8005d24 <_printf_i+0x248>)
 8005c82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c86:	e7e3      	b.n	8005c50 <_printf_i+0x174>
 8005c88:	065e      	lsls	r6, r3, #25
 8005c8a:	bf48      	it	mi
 8005c8c:	b2ad      	uxthmi	r5, r5
 8005c8e:	e7e6      	b.n	8005c5e <_printf_i+0x182>
 8005c90:	4616      	mov	r6, r2
 8005c92:	e7bb      	b.n	8005c0c <_printf_i+0x130>
 8005c94:	680b      	ldr	r3, [r1, #0]
 8005c96:	6826      	ldr	r6, [r4, #0]
 8005c98:	6960      	ldr	r0, [r4, #20]
 8005c9a:	1d1d      	adds	r5, r3, #4
 8005c9c:	600d      	str	r5, [r1, #0]
 8005c9e:	0635      	lsls	r5, r6, #24
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	d501      	bpl.n	8005ca8 <_printf_i+0x1cc>
 8005ca4:	6018      	str	r0, [r3, #0]
 8005ca6:	e002      	b.n	8005cae <_printf_i+0x1d2>
 8005ca8:	0671      	lsls	r1, r6, #25
 8005caa:	d5fb      	bpl.n	8005ca4 <_printf_i+0x1c8>
 8005cac:	8018      	strh	r0, [r3, #0]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	6123      	str	r3, [r4, #16]
 8005cb2:	4616      	mov	r6, r2
 8005cb4:	e7ba      	b.n	8005c2c <_printf_i+0x150>
 8005cb6:	680b      	ldr	r3, [r1, #0]
 8005cb8:	1d1a      	adds	r2, r3, #4
 8005cba:	600a      	str	r2, [r1, #0]
 8005cbc:	681e      	ldr	r6, [r3, #0]
 8005cbe:	6862      	ldr	r2, [r4, #4]
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	f7fa fa8c 	bl	80001e0 <memchr>
 8005cc8:	b108      	cbz	r0, 8005cce <_printf_i+0x1f2>
 8005cca:	1b80      	subs	r0, r0, r6
 8005ccc:	6060      	str	r0, [r4, #4]
 8005cce:	6863      	ldr	r3, [r4, #4]
 8005cd0:	6123      	str	r3, [r4, #16]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cd8:	e7a8      	b.n	8005c2c <_printf_i+0x150>
 8005cda:	6923      	ldr	r3, [r4, #16]
 8005cdc:	4632      	mov	r2, r6
 8005cde:	4649      	mov	r1, r9
 8005ce0:	4640      	mov	r0, r8
 8005ce2:	47d0      	blx	sl
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	d0ab      	beq.n	8005c40 <_printf_i+0x164>
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	079b      	lsls	r3, r3, #30
 8005cec:	d413      	bmi.n	8005d16 <_printf_i+0x23a>
 8005cee:	68e0      	ldr	r0, [r4, #12]
 8005cf0:	9b03      	ldr	r3, [sp, #12]
 8005cf2:	4298      	cmp	r0, r3
 8005cf4:	bfb8      	it	lt
 8005cf6:	4618      	movlt	r0, r3
 8005cf8:	e7a4      	b.n	8005c44 <_printf_i+0x168>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	4632      	mov	r2, r6
 8005cfe:	4649      	mov	r1, r9
 8005d00:	4640      	mov	r0, r8
 8005d02:	47d0      	blx	sl
 8005d04:	3001      	adds	r0, #1
 8005d06:	d09b      	beq.n	8005c40 <_printf_i+0x164>
 8005d08:	3501      	adds	r5, #1
 8005d0a:	68e3      	ldr	r3, [r4, #12]
 8005d0c:	9903      	ldr	r1, [sp, #12]
 8005d0e:	1a5b      	subs	r3, r3, r1
 8005d10:	42ab      	cmp	r3, r5
 8005d12:	dcf2      	bgt.n	8005cfa <_printf_i+0x21e>
 8005d14:	e7eb      	b.n	8005cee <_printf_i+0x212>
 8005d16:	2500      	movs	r5, #0
 8005d18:	f104 0619 	add.w	r6, r4, #25
 8005d1c:	e7f5      	b.n	8005d0a <_printf_i+0x22e>
 8005d1e:	bf00      	nop
 8005d20:	08006045 	.word	0x08006045
 8005d24:	08006056 	.word	0x08006056

08005d28 <memcpy>:
 8005d28:	440a      	add	r2, r1
 8005d2a:	4291      	cmp	r1, r2
 8005d2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005d30:	d100      	bne.n	8005d34 <memcpy+0xc>
 8005d32:	4770      	bx	lr
 8005d34:	b510      	push	{r4, lr}
 8005d36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d3e:	4291      	cmp	r1, r2
 8005d40:	d1f9      	bne.n	8005d36 <memcpy+0xe>
 8005d42:	bd10      	pop	{r4, pc}

08005d44 <memmove>:
 8005d44:	4288      	cmp	r0, r1
 8005d46:	b510      	push	{r4, lr}
 8005d48:	eb01 0402 	add.w	r4, r1, r2
 8005d4c:	d902      	bls.n	8005d54 <memmove+0x10>
 8005d4e:	4284      	cmp	r4, r0
 8005d50:	4623      	mov	r3, r4
 8005d52:	d807      	bhi.n	8005d64 <memmove+0x20>
 8005d54:	1e43      	subs	r3, r0, #1
 8005d56:	42a1      	cmp	r1, r4
 8005d58:	d008      	beq.n	8005d6c <memmove+0x28>
 8005d5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d62:	e7f8      	b.n	8005d56 <memmove+0x12>
 8005d64:	4402      	add	r2, r0
 8005d66:	4601      	mov	r1, r0
 8005d68:	428a      	cmp	r2, r1
 8005d6a:	d100      	bne.n	8005d6e <memmove+0x2a>
 8005d6c:	bd10      	pop	{r4, pc}
 8005d6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d76:	e7f7      	b.n	8005d68 <memmove+0x24>

08005d78 <_free_r>:
 8005d78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d7a:	2900      	cmp	r1, #0
 8005d7c:	d048      	beq.n	8005e10 <_free_r+0x98>
 8005d7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d82:	9001      	str	r0, [sp, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f1a1 0404 	sub.w	r4, r1, #4
 8005d8a:	bfb8      	it	lt
 8005d8c:	18e4      	addlt	r4, r4, r3
 8005d8e:	f000 f8d3 	bl	8005f38 <__malloc_lock>
 8005d92:	4a20      	ldr	r2, [pc, #128]	; (8005e14 <_free_r+0x9c>)
 8005d94:	9801      	ldr	r0, [sp, #4]
 8005d96:	6813      	ldr	r3, [r2, #0]
 8005d98:	4615      	mov	r5, r2
 8005d9a:	b933      	cbnz	r3, 8005daa <_free_r+0x32>
 8005d9c:	6063      	str	r3, [r4, #4]
 8005d9e:	6014      	str	r4, [r2, #0]
 8005da0:	b003      	add	sp, #12
 8005da2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005da6:	f000 b8cd 	b.w	8005f44 <__malloc_unlock>
 8005daa:	42a3      	cmp	r3, r4
 8005dac:	d90b      	bls.n	8005dc6 <_free_r+0x4e>
 8005dae:	6821      	ldr	r1, [r4, #0]
 8005db0:	1862      	adds	r2, r4, r1
 8005db2:	4293      	cmp	r3, r2
 8005db4:	bf04      	itt	eq
 8005db6:	681a      	ldreq	r2, [r3, #0]
 8005db8:	685b      	ldreq	r3, [r3, #4]
 8005dba:	6063      	str	r3, [r4, #4]
 8005dbc:	bf04      	itt	eq
 8005dbe:	1852      	addeq	r2, r2, r1
 8005dc0:	6022      	streq	r2, [r4, #0]
 8005dc2:	602c      	str	r4, [r5, #0]
 8005dc4:	e7ec      	b.n	8005da0 <_free_r+0x28>
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	b10b      	cbz	r3, 8005dd0 <_free_r+0x58>
 8005dcc:	42a3      	cmp	r3, r4
 8005dce:	d9fa      	bls.n	8005dc6 <_free_r+0x4e>
 8005dd0:	6811      	ldr	r1, [r2, #0]
 8005dd2:	1855      	adds	r5, r2, r1
 8005dd4:	42a5      	cmp	r5, r4
 8005dd6:	d10b      	bne.n	8005df0 <_free_r+0x78>
 8005dd8:	6824      	ldr	r4, [r4, #0]
 8005dda:	4421      	add	r1, r4
 8005ddc:	1854      	adds	r4, r2, r1
 8005dde:	42a3      	cmp	r3, r4
 8005de0:	6011      	str	r1, [r2, #0]
 8005de2:	d1dd      	bne.n	8005da0 <_free_r+0x28>
 8005de4:	681c      	ldr	r4, [r3, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	6053      	str	r3, [r2, #4]
 8005dea:	4421      	add	r1, r4
 8005dec:	6011      	str	r1, [r2, #0]
 8005dee:	e7d7      	b.n	8005da0 <_free_r+0x28>
 8005df0:	d902      	bls.n	8005df8 <_free_r+0x80>
 8005df2:	230c      	movs	r3, #12
 8005df4:	6003      	str	r3, [r0, #0]
 8005df6:	e7d3      	b.n	8005da0 <_free_r+0x28>
 8005df8:	6825      	ldr	r5, [r4, #0]
 8005dfa:	1961      	adds	r1, r4, r5
 8005dfc:	428b      	cmp	r3, r1
 8005dfe:	bf04      	itt	eq
 8005e00:	6819      	ldreq	r1, [r3, #0]
 8005e02:	685b      	ldreq	r3, [r3, #4]
 8005e04:	6063      	str	r3, [r4, #4]
 8005e06:	bf04      	itt	eq
 8005e08:	1949      	addeq	r1, r1, r5
 8005e0a:	6021      	streq	r1, [r4, #0]
 8005e0c:	6054      	str	r4, [r2, #4]
 8005e0e:	e7c7      	b.n	8005da0 <_free_r+0x28>
 8005e10:	b003      	add	sp, #12
 8005e12:	bd30      	pop	{r4, r5, pc}
 8005e14:	200000a0 	.word	0x200000a0

08005e18 <_malloc_r>:
 8005e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1a:	1ccd      	adds	r5, r1, #3
 8005e1c:	f025 0503 	bic.w	r5, r5, #3
 8005e20:	3508      	adds	r5, #8
 8005e22:	2d0c      	cmp	r5, #12
 8005e24:	bf38      	it	cc
 8005e26:	250c      	movcc	r5, #12
 8005e28:	2d00      	cmp	r5, #0
 8005e2a:	4606      	mov	r6, r0
 8005e2c:	db01      	blt.n	8005e32 <_malloc_r+0x1a>
 8005e2e:	42a9      	cmp	r1, r5
 8005e30:	d903      	bls.n	8005e3a <_malloc_r+0x22>
 8005e32:	230c      	movs	r3, #12
 8005e34:	6033      	str	r3, [r6, #0]
 8005e36:	2000      	movs	r0, #0
 8005e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e3a:	f000 f87d 	bl	8005f38 <__malloc_lock>
 8005e3e:	4921      	ldr	r1, [pc, #132]	; (8005ec4 <_malloc_r+0xac>)
 8005e40:	680a      	ldr	r2, [r1, #0]
 8005e42:	4614      	mov	r4, r2
 8005e44:	b99c      	cbnz	r4, 8005e6e <_malloc_r+0x56>
 8005e46:	4f20      	ldr	r7, [pc, #128]	; (8005ec8 <_malloc_r+0xb0>)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	b923      	cbnz	r3, 8005e56 <_malloc_r+0x3e>
 8005e4c:	4621      	mov	r1, r4
 8005e4e:	4630      	mov	r0, r6
 8005e50:	f000 f862 	bl	8005f18 <_sbrk_r>
 8005e54:	6038      	str	r0, [r7, #0]
 8005e56:	4629      	mov	r1, r5
 8005e58:	4630      	mov	r0, r6
 8005e5a:	f000 f85d 	bl	8005f18 <_sbrk_r>
 8005e5e:	1c43      	adds	r3, r0, #1
 8005e60:	d123      	bne.n	8005eaa <_malloc_r+0x92>
 8005e62:	230c      	movs	r3, #12
 8005e64:	6033      	str	r3, [r6, #0]
 8005e66:	4630      	mov	r0, r6
 8005e68:	f000 f86c 	bl	8005f44 <__malloc_unlock>
 8005e6c:	e7e3      	b.n	8005e36 <_malloc_r+0x1e>
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	1b5b      	subs	r3, r3, r5
 8005e72:	d417      	bmi.n	8005ea4 <_malloc_r+0x8c>
 8005e74:	2b0b      	cmp	r3, #11
 8005e76:	d903      	bls.n	8005e80 <_malloc_r+0x68>
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	441c      	add	r4, r3
 8005e7c:	6025      	str	r5, [r4, #0]
 8005e7e:	e004      	b.n	8005e8a <_malloc_r+0x72>
 8005e80:	6863      	ldr	r3, [r4, #4]
 8005e82:	42a2      	cmp	r2, r4
 8005e84:	bf0c      	ite	eq
 8005e86:	600b      	streq	r3, [r1, #0]
 8005e88:	6053      	strne	r3, [r2, #4]
 8005e8a:	4630      	mov	r0, r6
 8005e8c:	f000 f85a 	bl	8005f44 <__malloc_unlock>
 8005e90:	f104 000b 	add.w	r0, r4, #11
 8005e94:	1d23      	adds	r3, r4, #4
 8005e96:	f020 0007 	bic.w	r0, r0, #7
 8005e9a:	1ac2      	subs	r2, r0, r3
 8005e9c:	d0cc      	beq.n	8005e38 <_malloc_r+0x20>
 8005e9e:	1a1b      	subs	r3, r3, r0
 8005ea0:	50a3      	str	r3, [r4, r2]
 8005ea2:	e7c9      	b.n	8005e38 <_malloc_r+0x20>
 8005ea4:	4622      	mov	r2, r4
 8005ea6:	6864      	ldr	r4, [r4, #4]
 8005ea8:	e7cc      	b.n	8005e44 <_malloc_r+0x2c>
 8005eaa:	1cc4      	adds	r4, r0, #3
 8005eac:	f024 0403 	bic.w	r4, r4, #3
 8005eb0:	42a0      	cmp	r0, r4
 8005eb2:	d0e3      	beq.n	8005e7c <_malloc_r+0x64>
 8005eb4:	1a21      	subs	r1, r4, r0
 8005eb6:	4630      	mov	r0, r6
 8005eb8:	f000 f82e 	bl	8005f18 <_sbrk_r>
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	d1dd      	bne.n	8005e7c <_malloc_r+0x64>
 8005ec0:	e7cf      	b.n	8005e62 <_malloc_r+0x4a>
 8005ec2:	bf00      	nop
 8005ec4:	200000a0 	.word	0x200000a0
 8005ec8:	200000a4 	.word	0x200000a4

08005ecc <_realloc_r>:
 8005ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ece:	4607      	mov	r7, r0
 8005ed0:	4614      	mov	r4, r2
 8005ed2:	460e      	mov	r6, r1
 8005ed4:	b921      	cbnz	r1, 8005ee0 <_realloc_r+0x14>
 8005ed6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005eda:	4611      	mov	r1, r2
 8005edc:	f7ff bf9c 	b.w	8005e18 <_malloc_r>
 8005ee0:	b922      	cbnz	r2, 8005eec <_realloc_r+0x20>
 8005ee2:	f7ff ff49 	bl	8005d78 <_free_r>
 8005ee6:	4625      	mov	r5, r4
 8005ee8:	4628      	mov	r0, r5
 8005eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eec:	f000 f830 	bl	8005f50 <_malloc_usable_size_r>
 8005ef0:	42a0      	cmp	r0, r4
 8005ef2:	d20f      	bcs.n	8005f14 <_realloc_r+0x48>
 8005ef4:	4621      	mov	r1, r4
 8005ef6:	4638      	mov	r0, r7
 8005ef8:	f7ff ff8e 	bl	8005e18 <_malloc_r>
 8005efc:	4605      	mov	r5, r0
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d0f2      	beq.n	8005ee8 <_realloc_r+0x1c>
 8005f02:	4631      	mov	r1, r6
 8005f04:	4622      	mov	r2, r4
 8005f06:	f7ff ff0f 	bl	8005d28 <memcpy>
 8005f0a:	4631      	mov	r1, r6
 8005f0c:	4638      	mov	r0, r7
 8005f0e:	f7ff ff33 	bl	8005d78 <_free_r>
 8005f12:	e7e9      	b.n	8005ee8 <_realloc_r+0x1c>
 8005f14:	4635      	mov	r5, r6
 8005f16:	e7e7      	b.n	8005ee8 <_realloc_r+0x1c>

08005f18 <_sbrk_r>:
 8005f18:	b538      	push	{r3, r4, r5, lr}
 8005f1a:	4d06      	ldr	r5, [pc, #24]	; (8005f34 <_sbrk_r+0x1c>)
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	4604      	mov	r4, r0
 8005f20:	4608      	mov	r0, r1
 8005f22:	602b      	str	r3, [r5, #0]
 8005f24:	f7fb fd96 	bl	8001a54 <_sbrk>
 8005f28:	1c43      	adds	r3, r0, #1
 8005f2a:	d102      	bne.n	8005f32 <_sbrk_r+0x1a>
 8005f2c:	682b      	ldr	r3, [r5, #0]
 8005f2e:	b103      	cbz	r3, 8005f32 <_sbrk_r+0x1a>
 8005f30:	6023      	str	r3, [r4, #0]
 8005f32:	bd38      	pop	{r3, r4, r5, pc}
 8005f34:	20000270 	.word	0x20000270

08005f38 <__malloc_lock>:
 8005f38:	4801      	ldr	r0, [pc, #4]	; (8005f40 <__malloc_lock+0x8>)
 8005f3a:	f000 b811 	b.w	8005f60 <__retarget_lock_acquire_recursive>
 8005f3e:	bf00      	nop
 8005f40:	20000278 	.word	0x20000278

08005f44 <__malloc_unlock>:
 8005f44:	4801      	ldr	r0, [pc, #4]	; (8005f4c <__malloc_unlock+0x8>)
 8005f46:	f000 b80c 	b.w	8005f62 <__retarget_lock_release_recursive>
 8005f4a:	bf00      	nop
 8005f4c:	20000278 	.word	0x20000278

08005f50 <_malloc_usable_size_r>:
 8005f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f54:	1f18      	subs	r0, r3, #4
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	bfbc      	itt	lt
 8005f5a:	580b      	ldrlt	r3, [r1, r0]
 8005f5c:	18c0      	addlt	r0, r0, r3
 8005f5e:	4770      	bx	lr

08005f60 <__retarget_lock_acquire_recursive>:
 8005f60:	4770      	bx	lr

08005f62 <__retarget_lock_release_recursive>:
 8005f62:	4770      	bx	lr

08005f64 <_init>:
 8005f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f66:	bf00      	nop
 8005f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f6a:	bc08      	pop	{r3}
 8005f6c:	469e      	mov	lr, r3
 8005f6e:	4770      	bx	lr

08005f70 <_fini>:
 8005f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f72:	bf00      	nop
 8005f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f76:	bc08      	pop	{r3}
 8005f78:	469e      	mov	lr, r3
 8005f7a:	4770      	bx	lr
